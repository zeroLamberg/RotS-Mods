include "TriggerLibs/NativeLib"
include "LibCore_h"
include "LibGame_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibSond_h"
include "LibGlue_h"

include "LibUIUI_h"

//--------------------------------------------------------------------------------------------------
// Library: UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUIUI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
    libGlue_InitVariables();
}

// Variable Initialization
bool libUIUI_InitVariables_completed = false;

void libUIUI_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libUIUI_InitVariables_completed) {
        return;
    }

    libUIUI_InitVariables_completed = true;

    libUIUI_gv_uITimeLabelUpdateTimer = TimerCreate();
    libUIUI_gv_playerAnnounceCommandPanel = c_invalidDialogControlId;
    libUIUI_gv_playerAnnounceEditBox = c_invalidDialogControlId;
    libUIUI_gv_playerAnnounceVitalPercent = StringExternal("Param/Value/lib_UIUI_7E01760A");
    libUIUI_gv_playerAnnounceVitalAmount = StringExternal("Param/Value/lib_UIUI_70EE113C");
    libUIUI_gv_playerAnnounceVitalNotEnough = StringExternal("Param/Value/lib_UIUI_C524D2AB");
    libUIUI_gv_playerAnnounceCooldown = StringExternal("Param/Value/lib_UIUI_F4F1000D");
    libUIUI_gv_playerAnnounceReady = StringExternal("Param/Value/lib_UIUI_FC552B95");
    libUIUI_gv_playerAnnounceDisabled = StringExternal("Param/Value/lib_UIUI_E3CC49AA");
    libUIUI_gv_playerAnnouceTooMuchSpam = StringExternal("Param/Value/lib_UIUI_7447B22E");
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_playerAnnounceTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_playerAnnounceInputSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_playerAnnounceLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_playerAnnounceCountResetTime[init_i] = TimerCreate();
    }
    libUIUI_gv_uIBoosts.lv_boostPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIMaxHeroGroupStatusFrames; init_j1 += 1) {
            libUIUI_gv_uIBoosts.lv_boostFXAnchor[init_i1][init_j1] = c_invalidDialogId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIMaxHeroGroupStatusFrames; init_j1 += 1) {
            libUIUI_gv_uIBoosts.lv_boostFXAnchorFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIMaxHeroGroupStatusFrames; init_j1 += 1) {
            libUIUI_gv_uIBoosts.lv_boostFXPanel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashLowHPThreshold = 30.0;
    libUIUI_gv_uIDebugPanelForcedMinionWaveCompIndex = 1;
    libUIUI_gv_deathRecapPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_tabScreenButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_mainGraphLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_highestDamagersPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIconBorders[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_heroOverviewPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonPlayer[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonPlayerHeroImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonIndividual = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonCompareCombined = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonCompareCombinedTeam = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C; init_j1 += 1) {
            libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCheckbox[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C; init_j1 += 1) {
            libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCheckboxLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCompareButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCombineButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTick[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIGameInfoHeroOverviewGraphDataSetMax_C; init_j1 += 1) {
            libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTickLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C; init_i1 += 1) {
        libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTickLabelTotal[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanelSliderMin = c_invalidDialogControlId;
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanelSliderMax = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_victoryFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatLabel = c_invalidDialogControlId;
    libUIUI_gv_gameStats.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_gameStats.lv_countdownProgressBar = c_invalidDialogControlId;
    libUIUI_gv_gameStats.lv_countdownTextLabel = c_invalidDialogControlId;
    libUIUI_gv_gameStats.lv_exitButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameUI = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consolePanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_helpButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_serverLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameVersionLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_matchIDLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_heroSpecificStatusContainer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_uIGameUIHandles.lv_playerHeroUnit[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIGameUIHandles.lv_playerIDLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C; init_j += 1) {
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_textTag = c_textTagNone;
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_cooldown = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libUIUI_gv_helpButtonMaxCount_C; init_i += 1) {
        libUIUI_gv_helpButtonFrames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_helpButtonMaxCount_C; init_i += 1) {
        libUIUI_gv_helpButtonLabels[init_i] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroConsole.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_debuffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_neutralBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame_Right = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar_Right = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel_Right = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_mainDialog = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_unitStatusFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerCooldownLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipInfoLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipQuestProgressionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIHeroLeaderboardMaxSortButtons; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_sortButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[init_i] = libUIUI_ge_UIHeroLeaderboardSortType_Default;
    }
    libUIUI_gv_uIHeroLeaderboardSortingPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_heroSelectionPlayer[init_i].lv_talentTierPressedButton = 1;
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
            libUIUI_gv_heroSelectionPlayer[init_i].lv_abilitySelectorToggledBasic[init_i1] = 1;
        }
        libUIUI_gv_heroSelectionPlayer[init_i].lv_abilitySelectorToggledActive = 1;
        libUIUI_gv_heroSelectionPlayer[init_i].lv_abilitySelectorToggledPassive = 1;
    }
    libUIUI_gv_heroSelectionIngame.lv_dialog = c_invalidDialogId;
    libUIUI_gv_heroSelectionIngame.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_mapNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroName = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroRole = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_countdownLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionIngame.lv_finalCountdownFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUIIngameHeroButtons; init_i1 += 1) {
        libUIUI_gv_heroSelectionIngame.lv_heroButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUIIngameHeroButtons; init_i1 += 1) {
        libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_heroSelectionIngame.lv_teamPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_heroSelectionIngame.lv_teamHeroImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_heroSelectionIngame.lv_teamPlayerName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_heroSelectionIngame.lv_teamHeroName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_heroSelection.lv_changeHeroPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleTankButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleBruiserButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleRangedAssasinButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleMeleeAssasinButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleHealerButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterRoleSupportButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterUniverseWarCraftButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterUniverseStarCraftButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterUniverseDiabloButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterUniverseOverwatchButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterUniverseNexusButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_filterEditBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_filterEditBoxValue[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_talents_MaxPrepickedTalentProfiles_C; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_buildButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_brawlButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_lockButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelAbilitiesTileList = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPairedHeroesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPairedHeroesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelectionSetting.lv_countdownTimer = TimerCreate();
    libUIUI_gv_hSUILoadout.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_previewPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelName = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelDescription = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelConfirmButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelCancelButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_bannersButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_spraysButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcerPacksButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_voiceLinesButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxSkinItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxSkinItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButtonCutscene[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBoxValue[init_i1] = "";
    }
    libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxMountItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBoxValue[init_i1] = "";
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItem = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltip = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcersPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelItemPreviewButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcersPanelScrollEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBoxValue[init_i1] = "";
    }
    libUIUI_gv_hSUILoadout.lv_announcersPanelSelectedContentLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_selectedPanel = libUIUI_ge_HSUIPanelType_None;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerSkinCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerMountCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerAnnouncerCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerSkinMaxLaneCount = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerMountMaxLaneCount = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerAnnouncerMaxLaneCount = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_heroNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botDifficultyLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botStatusLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicFrame = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicIcon = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicCount = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_offscreenUnit[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libUIUI_gv_killLogMaxItemCountD0A1; init_i += 1) {
        libUIUI_gv_killLogItems[init_i].lv_timer = TimerCreate();
        libUIUI_gv_killLogItems[init_i].lv_frame = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogDebugPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_killLogDebugPanel.lv_closeButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_killLogDebugPanel.lv_killButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_killLogDebugPanel.lv_questButtons[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogDebugPanel.lv_killCheckbox = c_invalidDialogControlId;
    libUIUI_gv_killLogDebugPanel.lv_questCheckbox = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_winterveilPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer = TimerCreate();
    libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    libUIUI_gv_notificationDisplay.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_coreNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2 = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2 = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3 = c_invalidDialogControlId;
    libUIUI_gv_partyFrameDeathUpdateTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_teamXPPartySpamLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_teamXPPartyFrameDecrementPingCountTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_uIPartyFrame.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPanels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroTargetFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroOnFireCutscene[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_playerBoostEffect[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[init_i1] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[init_i1][init_j1] = TimerCreate();
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIPartyFrame.lv_gameTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIPartyFrame.lv_coreHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_uIPartyFrame.lv_xPContributionClickableButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_mercenaryXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_minionXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_passiveXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_structureXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_totalXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingInputSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingCountResetTime[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingPlayerHearthstonePing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_hearthPingTextLockoutTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_pingLockoutTimerNotification = StringExternal("Param/Value/lib_UIUI_79D2F38F");
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIOnMyWayPingPathDisplayTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libUIUI_gv_uIPingTargetMaxCount_C; init_i += 1) {
        libUIUI_gv_pingPingTarget[init_i].lv_pingSoundAlliedTarget = SoundLink("EditorDefaultSound", -1);
        libUIUI_gv_pingPingTarget[init_i].lv_pingSoundEnemyTarget = SoundLink("EditorDefaultSound", -1);
    }
    libUIUI_gv_preloadPanelTimer = TimerCreate();
    libUIUI_gv_preloadPanel.lv_dialog = c_invalidDialogId;
    libUIUI_gv_preloadPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_preloadPanel.lv_backgroundImage = c_invalidDialogControlId;
    libUIUI_gv_preloadPanel.lv_title = c_invalidDialogControlId;
    libUIUI_gv_preloadPanel.lv_headerLabel = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_container = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_tabControl = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_statsButton = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_deathRecapButton = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_lockInButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITabScreenPanel.lv_teamKillsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITabScreenPanel.lv_teamLevelLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer = c_invalidDialogControlId;
    libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionToggleButton = c_invalidDialogControlId;
    libUIUI_gv_uITalentChoicePanel.lv_talentsPanel = c_invalidDialogControlId;
    libUIUI_gv_uITalentChoicePanel.lv_talentsPanelTabControl = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_talents_MaxPrepickedTalentProfiles_C; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_buildButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButton[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipInfoLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_j1 += 1) {
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipDescriptionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uITalentPanel.lv_mainDialog = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uITalentPanel.lv_unitStatusFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentQuestProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentCooldownLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentTooltipNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentTooltipInfoLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentTooltipDescriptionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uITalentPanel.lv_talentTooltipQuestProgressionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_portraitImageHandler = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_unitStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_spellPowerLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_physicalArmorLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_spellArmorLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_weaponDamageLabel = c_invalidDialogControlId;
}

// Presets
// Functions
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer (int lp_hotkeyDialogItem, int lp_hotkeyType, int lp_player) {
    // Automatic Variable Declarations
    int autoE0EE62BE_val;

    // Implementation
    autoE0EE62BE_val = lp_hotkeyType;
    if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Heroic) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyHeroic");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Active) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyActive");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Passive) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyPassive");
    }
    else {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyAbility");
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup (int lp_hotkeyDialogItem, int lp_hotkeyType, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int auto4E3B6BAB_val;

    // Implementation
    auto4E3B6BAB_val = lp_hotkeyType;
    if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Heroic) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyHeroic");
    }
    else if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Active) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyActive");
    }
    else if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Passive) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyPassive");
    }
    else {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyAbility");
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer (int lp_hotkeyType, int lp_hotkeyDialogItem, int lp_player) {
    // Automatic Variable Declarations
    int auto59946560_val;

    // Implementation
    auto59946560_val = lp_hotkeyType;
    if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyMissing) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyMissing");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyNormal) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyNormal");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyQuest) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyQuesting");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyUpgrade");
    }
    else {
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayerGroup (int lp_hotkeyType, int lp_hotkeyDialogItem, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int autoF0F7E3D7_val;

    // Implementation
    autoF0F7E3D7_val = lp_hotkeyType;
    if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyMissing) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyMissing");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyNormal) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyNormal");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyQuest) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyQuesting");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyUpgrade");
    }
    else {
    }
}

void libUIUI_gf_UIUpdateTimeLabels () {
    // Variable Declarations
    text lv_timeLabelText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_D7097D5E", "A", StringToText(StringSub(libCore_gf_GetTimeStamp(TimerGetRemaining(libGame_gv_openTheGatesTimer)), 1, 5)));
        lv_timeLabelText = TextExpressionAssemble("Param/Expression/lib_UIUI_D7097D5E");
    }
    else {
        lv_timeLabelText = StringToText(StringSub(libCore_gf_GetTimeStamp((TimerGetElapsed(libGame_gv_gameTimer)+libSprt_gv_debug_GameTimeDelta*60)), 1, 5));
    }
    TimerStart(libUIUI_gv_uITimeLabelUpdateTimer, libUIUI_gv_uITimerUpdateDelay, false, c_timeGame);
    libUIUI_gf_UIPartyFrameGameTimerUpdate(lv_timeLabelText);
    libUIUI_gf_UIPartyFrameHeroicTalentCooldownUpdate();
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateHeroicTalentCooldown2();
}

void libUIUI_gf_UISetDialogItemToSelectedOrObserved (int lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetObservedType(lp_dialogItem, c_triggerObservedTypeSelectedOrObservedPlayerId);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_nPCPlayers, false);
}

void libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_lastUsedDialogItemTime[lp_player] = GameGetMissionTime();
}

bool libUIUI_gf_CanUseDialogItemTime (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_lastUsedDialogItemTime[lp_player] <= GameGetMissionTime())) {
        return true;
    }

    return false;
}

void libUIUI_gf_InitPathingLines (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lp_player], lp_unit);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\Storm_Waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 3.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    libGame_gv_players[lp_player].lv_path = PathLastCreated();
}

void libUIUI_gf_UIQuestsUpdateQuestUIOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer[lp_player] += 1;
    if ((libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer[lp_player] > 1)) {
        return ;
    }

    libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsForPlayer(lp_player);
    libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer[lp_player] -= 1;
    if ((libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer[lp_player] > 1)) {
        libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer(lp_player);
        libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsForPlayer(lp_player);
        libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer[lp_player] = 0;
    }

}

void libUIUI_gf_UIQuestsUpdateQuestUIOfPlayerForSingleBehavior (string lp_behavior, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    libUIUI_gf_UITalentPanelUpdateTalentsQuestsBehaviorOfPlayer(lp_player, lp_behavior);
    libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsBehaviorForPlayer(lp_player, lp_behavior);
}

int libUIUI_gf_UIGetHeroResourceType (string lp_heroUnitType) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = (lp_heroUnitType);

    // Implementation
    if (((lp_heroUnitType == "HeroChen") || (lp_heroUnitType == "HeroAuriel") || (lp_heroUnitType == "HeroValeera") || (lp_heroUnitType == "HeroMedic"))) {
        return libUIUI_ge_UIHeroResourceType_Yellow;
    }
    else if (((lp_heroUnitType == "HeroTalandar") || (lp_heroUnitType == "HeroBarbarian") || (lp_heroUnitType == "HeroTinker") || (lp_heroUnitType == "DeltaHero"))) {
        return libUIUI_ge_UIHeroResourceType_Orange;
    }
    else if (((lp_heroUnitType == "HeroDeathwing"))) {
        return libUIUI_ge_UIHeroResourceType_Breath;
    }
    else if (((lp_heroUnitType == "HeroHogger"))) {
        return libUIUI_ge_UIHeroResourceType_Rage;
    }
    else if (((lp_heroUnitType == "HeroZarya") || (lp_heroUnitType == "VolskayaVehicleGunner"))) {
        return libUIUI_ge_UIHeroResourceType_Pink;
    }
    else if ((lp_heroUnitType == "HeroProbius")) {
        return libUIUI_ge_UIHeroResourceType_Blinking;
    }
    else if (((lp_heroUnitType == "HeroTracer") || (lp_heroUnitType == "HeroIllidan") || (lp_heroUnitType == "HeroJunkrat") || (lp_heroUnitType == "HeroMurky") || (lp_heroUnitType == "HeroCho") || (lp_heroUnitType == "HeroGall") || (lp_heroUnitType == "HeroSamuro") || (lp_heroUnitType == "HeroAbathur") || (lp_heroUnitType == "HeroDVaPilot") || (lp_heroUnitType == "HeroDVaMech") || (lp_heroUnitType == "VolskayaVehicle"))) {
        return libUIUI_ge_UIHeroResourceType_None;
    }
    else if (((lp_heroUnitType == "HeroFenix"))) {
        return libUIUI_ge_UIHeroResourceType_NoShields;
    }
    return libUIUI_ge_UIHeroResourceType_Blue;
}

int libUIUI_gf_UIGetHeroResourceTypeForPartyFrame (string lp_heroUnitType) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = (lp_heroUnitType);

    // Implementation
    if (((lp_heroUnitType == "HeroChen") || (lp_heroUnitType == "HeroAuriel") || (lp_heroUnitType == "HeroValeera") || (lp_heroUnitType == "HeroMedic"))) {
        return libUIUI_ge_UIHeroResourceType_Yellow;
    }
    else if (((lp_heroUnitType == "HeroTalandar") || (lp_heroUnitType == "HeroBarbarian") || (lp_heroUnitType == "HeroTinker") || (lp_heroUnitType == "DeltaHero"))) {
        return libUIUI_ge_UIHeroResourceType_Orange;
    }
    else if (((lp_heroUnitType == "HeroDeathwing"))) {
        return libUIUI_ge_UIHeroResourceType_Breath;
    }
    else if (((lp_heroUnitType == "HeroHogger"))) {
        return libUIUI_ge_UIHeroResourceType_Rage;
    }
    else if (((lp_heroUnitType == "HeroDVaPilot") || (lp_heroUnitType == "HeroDVaMech") || (lp_heroUnitType == "HeroZarya"))) {
        return libUIUI_ge_UIHeroResourceType_Pink;
    }
    else if ((lp_heroUnitType == "HeroProbius")) {
        return libUIUI_ge_UIHeroResourceType_Blinking;
    }
    else if (((lp_heroUnitType == "HeroTracer") || (lp_heroUnitType == "HeroIllidan") || (lp_heroUnitType == "HeroJunkrat") || (lp_heroUnitType == "HeroMurky") || (lp_heroUnitType == "HeroCho") || (lp_heroUnitType == "HeroGall") || (lp_heroUnitType == "HeroSamuro") || (lp_heroUnitType == "HeroAbathur"))) {
        return libUIUI_ge_UIHeroResourceType_None;
    }
    else if ((lp_heroUnitType == "HeroFenix")) {
        return libUIUI_ge_UIHeroResourceType_NoShields;
    }
    return libUIUI_ge_UIHeroResourceType_Blue;
}

void libUIUI_gf_PlayerAnnounceEnableDisableForPlayer (bool lp_enableDisable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_playerAnnounceCommandPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_enableDisable);
}

void libUIUI_gf_PlayerAnnounceHealth (int lp_pingingPlayer, string lp_output) {
    // Variable Declarations
    text lv_text;
    string lv_tmps;
    unit lv_itUnit;
    unit lv_targetUnit;
    string lv_targetUnitType;

    // Automatic Variable Declarations
    unitgroup autoB0FA19B3_g;
    int autoB0FA19B3_u;

    // Variable Initialization
    lv_tmps = "";

    // Implementation
    if ((libUIUI_gf_PlayerAnnounceAllowedToAnnouce(lp_pingingPlayer) == false)) {
        return ;
    }

    lv_tmps = StringWord(lp_output, 2);
    autoB0FA19B3_g = UnitGroupSelected(lp_pingingPlayer);
    autoB0FA19B3_u = UnitGroupCount(autoB0FA19B3_g, c_unitCountAll);
    for (;; autoB0FA19B3_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB0FA19B3_g, autoB0FA19B3_u);
        if (lv_itUnit == null) { break; }
        if ((lv_tmps == libCore_gf_UnitTagUI(lv_itUnit))) {
            lv_targetUnit = lv_itUnit;
            break;
        }

    }
    if (((lv_targetUnit == null) || (UnitIsValid(lv_targetUnit) == false))) {
        return ;
    }

    lv_targetUnitType = (StringWord(lp_output, 3));
    TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalPercent);
    TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lv_targetUnitType));
    TextExpressionSetToken("CustomExpression", "Percent", IntToText(UnitGetPropertyInt(lv_targetUnit, c_unitPropLifePercent, c_unitPropCurrent)));
    TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroLife"));
    lv_text = TextExpressionAssemble("CustomExpression");
    libUIUI_gf_PlayerAnnounceIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
    UIDisplayMessage(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, lv_text);
}

void libUIUI_gf_PlayerAnnounceXPContribution (int lp_pingingPlayer) {
    // Variable Declarations
    int lv_localTeam;
    int lv_enemyTeam;
    int lv_talentTierGap;
    text lv_talentGapPluralController;
    text lv_aggressionCautionStringPart3;
    text lv_aggressionCautionStringPart4;
    text lv_friendlyEnemyColor;
    text lv_blue;
    text lv_red;
    text lv_pingOutput;
    playergroup lv_pingPlayerGroup;
    soundlink lv_pingSoundLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localTeam = libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_pingingPlayer);
    lv_talentGapPluralController = StringExternal("Param/Value/lib_UIUI_574D7333");
    TextExpressionSetToken("Param/Expression/lib_UIUI_FD6BA4B8", "A", StringExternal("Param/Value/lib_UIUI_1194F704"));
    lv_blue = TextExpressionAssemble("Param/Expression/lib_UIUI_FD6BA4B8");
    TextExpressionSetToken("Param/Expression/lib_UIUI_72B1C2AD", "A", StringExternal("Param/Value/lib_UIUI_C03BC34D"));
    lv_red = TextExpressionAssemble("Param/Expression/lib_UIUI_72B1C2AD");
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingSoundLink = SoundLink("EditorDefaultSound", -1);

    // Implementation
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_pingingPlayer]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_teamXPPartySpamLockoutTimer[lv_localTeam]) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_7D89C67B", "A", FixedToText(TimerGetRemaining(libUIUI_gv_teamXPPartySpamLockoutTimer[lv_localTeam]), 1));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_7D89C67B"));
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]) > 0.0)) {
        TextExpressionSetToken("Notification", c_textExpressionTokenMain, libUIUI_gv_pingLockoutTimerNotification);
        TextExpressionSetToken("Notification", "Timer", FixedToText(TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]), 1));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Notification"));
        return ;
    }

    lv_talentTierGap = (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] - libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam]);
    if ((AbsI(lv_talentTierGap) > 1)) {
        lv_talentGapPluralController = StringExternal("Param/Value/lib_UIUI_6957578C");
    }

    lv_aggressionCautionStringPart3 = lv_talentGapPluralController;
    if ((lv_talentTierGap < 0)) {
        lv_aggressionCautionStringPart3 = lv_talentGapPluralController;
        if ((((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] < 4) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] > 3)) || ((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] < 4) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] > 3)))) {
            lv_aggressionCautionStringPart3 = StringExternal("Param/Value/lib_UIUI_3F24AD28");
        }
        else if ((((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] < 7) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] > 6)) || ((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] < 7) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] > 6)))) {
            lv_aggressionCautionStringPart3 = StringExternal("Param/Value/lib_UIUI_4DEEB399");
        }
        lv_friendlyEnemyColor = lv_red;
        TextExpressionSetToken("Param/Expression/lib_UIUI_0F487BFC", "C", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_UIUI_0F487BFC", "A", lv_friendlyEnemyColor);
        TextExpressionSetToken("Param/Expression/lib_UIUI_0F487BFC", "B", lv_aggressionCautionStringPart3);
        lv_aggressionCautionStringPart4 = TextExpressionAssemble("Param/Expression/lib_UIUI_0F487BFC");
    }
    else {
        if ((lv_talentTierGap > 0)) {
            lv_aggressionCautionStringPart3 = lv_talentGapPluralController;
            if ((((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] < 4) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] > 3)) || ((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] < 4) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] > 3)))) {
                lv_aggressionCautionStringPart3 = StringExternal("Param/Value/lib_UIUI_A402C8EB");
            }
            else if ((((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] < 7) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] > 6)) || ((libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_enemyTeam] < 7) && (libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_localTeam] > 6)))) {
                lv_aggressionCautionStringPart3 = StringExternal("Param/Value/lib_UIUI_E9244F03");
            }
            lv_friendlyEnemyColor = lv_blue;
            TextExpressionSetToken("Param/Expression/lib_UIUI_E93DAEF8", "C", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_E93DAEF8", "A", lv_friendlyEnemyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_E93DAEF8", "B", lv_aggressionCautionStringPart3);
            lv_aggressionCautionStringPart4 = TextExpressionAssemble("Param/Expression/lib_UIUI_E93DAEF8");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_E0E4BF7F", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            lv_aggressionCautionStringPart4 = TextExpressionAssemble("Param/Expression/lib_UIUI_E0E4BF7F");
        }
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_63D16F6F", "E", lv_blue);
    TextExpressionSetToken("Param/Expression/lib_UIUI_63D16F6F", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
    TextExpressionSetToken("Param/Expression/lib_UIUI_63D16F6F", "D", lv_aggressionCautionStringPart4);
    lv_pingOutput = TextExpressionAssemble("Param/Expression/lib_UIUI_63D16F6F");
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(lv_localTeam, false);
    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, lv_pingOutput);
    SoundPlayForPlayer(lv_pingSoundLink, lp_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
    libUIUI_gf_UIPartyFrameTeamXPUpdateandManageTeamSpamTimers(lv_localTeam);
}

void libUIUI_gf_PlayerAnnounceEnergy (int lp_pingingPlayer, string lp_output) {
    // Variable Declarations
    text lv_text;
    string lv_tmps;
    unit lv_itUnit;
    unit lv_targetUnit;
    string lv_targetUnitType;

    // Automatic Variable Declarations
    unitgroup auto63BD4F81_g;
    int auto63BD4F81_u;
    string auto6A12DD0E_val;

    // Variable Initialization
    lv_tmps = "";

    // Implementation
    if ((libUIUI_gf_PlayerAnnounceAllowedToAnnouce(lp_pingingPlayer) == false)) {
        return ;
    }

    lv_tmps = StringWord(lp_output, 2);
    auto63BD4F81_g = UnitGroupSelected(lp_pingingPlayer);
    auto63BD4F81_u = UnitGroupCount(auto63BD4F81_g, c_unitCountAll);
    for (;; auto63BD4F81_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto63BD4F81_g, auto63BD4F81_u);
        if (lv_itUnit == null) { break; }
        if ((lv_tmps == libCore_gf_UnitTagUI(lv_itUnit))) {
            lv_targetUnit = lv_itUnit;
            break;
        }

    }
    if (((lv_targetUnit == null) || (UnitIsValid(lv_targetUnit) == false))) {
        return ;
    }

    lv_targetUnitType = (StringWord(lp_output, 3));
    auto6A12DD0E_val = lv_targetUnitType;
    if (auto6A12DD0E_val == "HeroAuriel") {
        TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalAmount);
        TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lv_targetUnitType));
        TextExpressionSetToken("CustomExpression", "Amount", FixedToText(UnitGetPropertyFixed(lv_targetUnit, c_unitPropEnergy, c_unitPropCurrent), 0));
        TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/StoredHealing"));
        lv_text = TextExpressionAssemble("CustomExpression");
    }
    else if (auto6A12DD0E_val == "HeroTalandar") {
        TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalAmount);
        TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lv_targetUnitType));
        TextExpressionSetToken("CustomExpression", "Amount", FixedToText(UnitGetPropertyFixed(lv_targetUnit, c_unitPropEnergy, c_unitPropCurrent), 0));
        TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/Energy"));
        lv_text = TextExpressionAssemble("CustomExpression");
    }
    else {
        TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalPercent);
        TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lv_targetUnitType));
        TextExpressionSetToken("CustomExpression", "Percent", IntToText(UnitGetPropertyInt(lv_targetUnit, c_unitPropEnergyPercent, c_unitPropCurrent)));
        TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/Mana"));
        lv_text = TextExpressionAssemble("CustomExpression");
    }
    libUIUI_gf_PlayerAnnounceIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
    UIDisplayMessage(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, lv_text);
}

void libUIUI_gf_PlayerAnnounceCommandPanel (int lp_pingingPlayer, string lp_output) {
    // Variable Declarations
    text lv_text;
    string lv_tmps;
    unit lv_itUnit;
    unit lv_targetUnit;
    string lv_targetUnitType;
    string lv_commandButtonOutput;
    string lv_icon;
    int lv_itButton;
    int lv_row;
    int lv_column;
    string lv_buttonLink;
    string lv_ability;
    abilcmd lv_abilCmd;
    text lv_abilityName;
    text lv_hotkeyText;

    // Automatic Variable Declarations
    unitgroup auto5E3A2247_g;
    int auto5E3A2247_u;
    int auto54B8D678_ae;
    const int auto54B8D678_ai = 1;

    // Variable Initialization
    lv_tmps = "";
    lv_commandButtonOutput = "";
    lv_icon = "";

    // Implementation
    lv_tmps = StringWord(lp_output, 2);
    auto5E3A2247_g = UnitGroupSelected(lp_pingingPlayer);
    auto5E3A2247_u = UnitGroupCount(auto5E3A2247_g, c_unitCountAll);
    for (;; auto5E3A2247_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto5E3A2247_g, auto5E3A2247_u);
        if (lv_itUnit == null) { break; }
        if ((lv_tmps == libCore_gf_UnitTagUI(lv_itUnit))) {
            lv_targetUnit = lv_itUnit;
            break;
        }

    }
    if (((lv_targetUnit == null) || (UnitIsValid(lv_targetUnit) == false))) {
        return ;
    }

    lv_targetUnitType = (StringWord(lp_output, 3));
    lv_commandButtonOutput = StringWord(lp_output, 4);
    lv_icon = StringWord(lp_output, 5);
    lv_hotkeyText = StringToText(("[" + libCore_gf_ConvertTextToString(StringExternalHotkey(("UI/Hotkey/" + lv_commandButtonOutput))) + "] "));
    auto54B8D678_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny) - 1);
    lv_itButton = 0;
    for ( ; ( (auto54B8D678_ai >= 0 && lv_itButton <= auto54B8D678_ae) || (auto54B8D678_ai < 0 && lv_itButton >= auto54B8D678_ae) ) ; lv_itButton += auto54B8D678_ai ) {
        lv_buttonLink = (CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].Face", c_playerAny));
        if ((lv_icon != StringCase(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Icon", c_playerAny), false))) {
            continue;
        }

        lv_column = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].Column", c_playerAny);
        lv_row = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].Row", c_playerAny);
        lv_abilCmd = null;
        if ((lv_row == 0) && (lv_column == 0) && (lv_commandButtonOutput == "CommandButton00")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 0) && (lv_column == 1) && (lv_commandButtonOutput == "CommandButton01")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 0) && (lv_column == 2) && (lv_commandButtonOutput == "CommandButton02")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 0) && (lv_column == 3) && (lv_commandButtonOutput == "CommandButton03")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 0) && (lv_column == 4) && (lv_commandButtonOutput == "CommandButton04")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 1) && (lv_column == 3) && (lv_commandButtonOutput == "CommandButton08")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
        else if ((lv_row == 1) && (lv_column == 4) && (lv_commandButtonOutput == "CommandButton09")) {
            lv_abilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_targetUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_itButton) + "].AbilCmd", c_playerAny));
            if ((UnitCheckAbilCmdState(lv_targetUnit, lv_abilCmd, c_cmdStateHidden) == true)) {
                continue;
            }
            else {
                break;
            }
        }
    }
    if ((lv_abilCmd == null)) {
        return ;
    }

    lv_ability = AbilityCommandGetAbility(lv_abilCmd);
    if (((lv_ability == null) || (lv_ability == "") || (lv_ability == null))) {
        return ;
    }

    lv_abilityName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Name", c_playerAny));
    libUIUI_gf_PlayerAnnounceButtonAnnounce(lp_pingingPlayer, lv_ability, lv_abilityName, lv_abilCmd, lv_targetUnit, lv_targetUnitType, lv_hotkeyText);
}

void libUIUI_gf_PlayerAnnounceInventoryPanel (int lp_pingingPlayer, string lp_output) {
    // Variable Declarations
    text lv_text;
    string lv_tmps;
    unit lv_itUnit;
    unit lv_targetUnit;
    string lv_targetUnitType;
    string lv_commandButtonOutput;
    string lv_icon;
    int lv_itButton;
    int lv_row;
    int lv_column;
    string lv_buttonLink;
    string lv_ability;
    abilcmd lv_abilCmd;
    text lv_abilityName;
    unit lv_inventoryUnit;
    int lv_itItem;
    text lv_hotkeyText;

    // Automatic Variable Declarations
    unitgroup auto4D734F84_g;
    int auto4D734F84_u;
    const int auto1F07AF86_ae = libCore_gv_bALPlayerTotalInventorySlots;
    const int auto1F07AF86_ai = 1;

    // Variable Initialization
    lv_tmps = "";
    lv_commandButtonOutput = "";
    lv_icon = "";

    // Implementation
    lv_tmps = StringWord(lp_output, 2);
    auto4D734F84_g = UnitGroupSelected(lp_pingingPlayer);
    auto4D734F84_u = UnitGroupCount(auto4D734F84_g, c_unitCountAll);
    for (;; auto4D734F84_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto4D734F84_g, auto4D734F84_u);
        if (lv_itUnit == null) { break; }
        if ((lv_tmps == libCore_gf_UnitTagUI(lv_itUnit))) {
            lv_targetUnit = lv_itUnit;
            break;
        }

    }
    if (((lv_targetUnit == null) || (UnitIsValid(lv_targetUnit) == false))) {
        return ;
    }

    lv_targetUnitType = (StringWord(lp_output, 3));
    lv_commandButtonOutput = StringWord(lp_output, 4);
    lv_icon = StringWord(lp_output, 5);
    lv_itItem = 1;
    for ( ; ( (auto1F07AF86_ai >= 0 && lv_itItem <= auto1F07AF86_ae) || (auto1F07AF86_ai < 0 && lv_itItem >= auto1F07AF86_ae) ) ; lv_itItem += auto1F07AF86_ai ) {
        if ((lv_commandButtonOutput == ("InventoryButton0" + IntToString((lv_itItem - 1))))) {
            lv_inventoryUnit = libCore_gf_InventoryItemInInventoryPositionOfUnit(lv_targetUnit, lv_itItem);
            lv_ability = (CatalogFieldValueGet(c_gameCatalogItem, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_inventoryUnit), "Item", c_playerAny), "Abil", c_playerAny));
            lv_abilCmd = AbilityCommand(lv_ability, 0);
            lv_buttonLink = (CatalogFieldValueGet(c_gameCatalogItem, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_inventoryUnit), "Item", c_playerAny), "Face", lp_pingingPlayer));
            lv_hotkeyText = StringToText(("[" + libCore_gf_ConvertTextToString(StringExternalHotkey(("UI/Hotkey/InventoryButtonUse" + IntToString((lv_itItem - 1))))) + "] "));
            break;
        }

    }
    if ((lv_inventoryUnit == null)) {
        return ;
    }

    if (((lv_ability == null) || (lv_ability == "") || (lv_ability == null))) {
        return ;
    }

    lv_abilityName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Name", c_playerAny));
    libUIUI_gf_PlayerAnnounceButtonAnnounce(lp_pingingPlayer, lv_ability, lv_abilityName, lv_abilCmd, lv_targetUnit, lv_targetUnitType, lv_hotkeyText);
}

void libUIUI_gf_PlayerAnnounceButtonAnnounce (int lp_player, string lp_ability, text lp_abilityName, abilcmd lp_abilCmd, unit lp_unit, string lp_unitType, text lp_hotkey) {
    // Variable Declarations
    int lv_precision;
    fixed lv_cooldown;
    text lv_outputText;
    bool lv_chargeAmountIsValid;
    fixed lv_chargeUseAmount;
    fixed lv_chargeRemainingAmount;

    // Automatic Variable Declarations
    string auto07A4355F_val;
    string autoD0920B2F_val;
    string auto3FC1F7CD_val;
    string auto2F514B55_val;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_PlayerAnnounceAllowedToAnnouce(lp_player) == false)) {
        return ;
    }

    if (((libCore_gf_AbilityHasCategory(lp_ability, "AbilityCategories[SpellSteal]") == false) || (libGame_gf_HeroAbilityCooldownCanBeReset(lp_ability) == false))) {
        return ;
    }

    lv_cooldown = libCore_gf_AbilityCooldownTimeForPlayer(lp_unit, lp_ability, EventPlayer());
    lv_chargeRemainingAmount = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player) - UnitGetChargeUsed(lp_unit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", lp_player)));
    lv_chargeUseAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.CountUse", lp_player);
    lv_chargeAmountIsValid = ((lv_chargeRemainingAmount - lv_chargeUseAmount) >= 0.0);
    if ((lv_cooldown > 0.0)) {
        if ((lv_cooldown < 1.0)) {
            lv_precision = 1;
        }

        TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceCooldown);
        TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("CustomExpression", "Ability", lp_abilityName);
        TextExpressionSetToken("CustomExpression", "Hotkey", lp_hotkey);
        TextExpressionSetToken("CustomExpression", "Cooldown", FixedToText(lv_cooldown, lv_precision));
        lv_outputText = TextExpressionAssemble("CustomExpression");
    }
    else if ((libNtve_gf_CostOfAbility(lp_ability, "Life") > UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent))) {
        auto07A4355F_val = lp_unitType;
        {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalNotEnough);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Ability", lp_abilityName);
            TextExpressionSetToken("CustomExpression", "Hotkey", lp_hotkey);
            TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroLife"));
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
    }
    else if ((libNtve_gf_CostOfAbility(lp_ability, "Energy") > UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent))) {
        autoD0920B2F_val = lp_unitType;
        {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalNotEnough);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Ability", lp_abilityName);
            TextExpressionSetToken("CustomExpression", "Hotkey", lp_hotkey);
            TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/Mana"));
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
    }
    else if ((((UnitAbilityExists(lp_unit, lp_ability) == true) && (UnitAbilityCheck(lp_unit, lp_ability, true) == false)) || (lv_chargeAmountIsValid == false)) && (UnitIsAlive(lp_unit) == true) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, lp_unit) == false)) {
        auto3FC1F7CD_val = lp_ability;
        if (auto3FC1F7CD_val == "HeroAurielRayOfHeaven") {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalAmount);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Amount", FixedToText(UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent), 0));
            TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/StoredHealing"));
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
        else {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceDisabled);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Hotkey", lp_hotkey);
            TextExpressionSetToken("CustomExpression", "Ability", lp_abilityName);
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
    }
    else if (true) {
        auto2F514B55_val = lp_ability;
        if (auto2F514B55_val == "HeroAurielRayOfHeaven") {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceVitalAmount);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Amount", FixedToText(UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent), 0));
            TextExpressionSetToken("CustomExpression", "Vital", StringExternal("UI/HeroEnergyType/StoredHealing"));
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
        else {
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, libUIUI_gv_playerAnnounceReady);
            TextExpressionSetToken("CustomExpression", "Name", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("CustomExpression", "Ability", lp_abilityName);
            TextExpressionSetToken("CustomExpression", "Hotkey", lp_hotkey);
            lv_outputText = TextExpressionAssemble("CustomExpression");
        }
    }
    libUIUI_gf_PlayerAnnounceIncrementPingCountAndManageTimersForPlayer(lp_player);
    UIDisplayMessage(libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), c_messageAreaChat, lv_outputText);
}

void libUIUI_gf_PlayerAnnouncePartyPanel (int lp_pingingPlayer, string lp_output) {
    // Variable Declarations
    unit lv_targetUnit;
    string lv_targetUnitType;
    int lv_team;
    int lv_playerSlot;
    int lv_targetPlayerID;
    int lv_rosterSlot;
    int lv_vikingIndex;
    bool lv_valid;
    string lv_word;

    // Automatic Variable Declarations
    const int autoE39CAD17_ae = libCore_gv_bALMaxTeams;
    const int autoE39CAD17_ai = 1;
    const int autoDADA46A1_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoDADA46A1_ai = 1;
    playergroup auto3B4730E9_g;
    int auto3B4730E9_var;
    string auto9028E744_val;

    // Variable Initialization
    lv_word = "";

    // Implementation
    lv_word = StringWord(lp_output, 2);
    lv_team = 1;
    for ( ; ( (autoE39CAD17_ai >= 0 && lv_team <= autoE39CAD17_ae) || (autoE39CAD17_ai < 0 && lv_team >= autoE39CAD17_ae) ) ; lv_team += autoE39CAD17_ai ) {
        if ((lv_word == ("Team" + IntToString(lv_team)))) {
            lv_valid = true;
            break;
        }

    }
    if ((lv_valid == false)) {
        return ;
    }
    else {
        lv_valid = false;
    }
    lv_word = StringWord(lp_output, 3);
    lv_playerSlot = 1;
    for ( ; ( (autoDADA46A1_ai >= 0 && lv_playerSlot <= autoDADA46A1_ae) || (autoDADA46A1_ai < 0 && lv_playerSlot >= autoDADA46A1_ae) ) ; lv_playerSlot += autoDADA46A1_ai ) {
        if ((lv_word == ("HeroOverview" + IntToString(lv_playerSlot)))) {
            lv_valid = true;
            break;
        }

    }
    if ((lv_valid == false)) {
        return ;
    }
    else {
        lv_valid = false;
    }
    auto3B4730E9_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers;
    auto3B4730E9_var = -1;
    while (true) {
        auto3B4730E9_var = PlayerGroupNextPlayer(auto3B4730E9_g, auto3B4730E9_var);
        if (auto3B4730E9_var < 0) { break; }
        if ((libGame_gv_players[auto3B4730E9_var].lv_allySlot == lv_playerSlot)) {
            lv_valid = true;
            lv_targetPlayerID = auto3B4730E9_var;
            lv_rosterSlot = libGame_gv_players[auto3B4730E9_var].lv_rosterSlot;
            break;
        }

    }
    if ((lv_valid == false)) {
        return ;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayerID) == false)) {
        return ;
    }

    auto9028E744_val = StringWord(lp_output, 4);
    if (auto9028E744_val == "PartyAlertButton") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C];
    }
    else if (auto9028E744_val == "PartyAlertButtonPet") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C];
    }
    else if (auto9028E744_val == "PartyAlertButtonPetowner") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C];
    }
    else if (auto9028E744_val == "PartyAlertButtonA") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotA_C];
        lv_vikingIndex = libUIUI_gv_uIPartyFrameHeroSlotA_C;
    }
    else if (auto9028E744_val == "PartyAlertButtonB") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotB_C];
        lv_vikingIndex = libUIUI_gv_uIPartyFrameHeroSlotB_C;
    }
    else if (auto9028E744_val == "PartyAlertButtonC") {
        lv_targetUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotC_C];
        lv_vikingIndex = libUIUI_gv_uIPartyFrameHeroSlotC_C;
    }
    else {
        return ;
    }
    if ((libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer) == libGame_gf_TeamNumberOfPlayer(lv_targetPlayerID))) {
        libUIUI_gf_UIPartyFrameAllyPing(lp_pingingPlayer, lv_targetUnit, lv_targetPlayerID, lv_rosterSlot, lv_vikingIndex);
    }
    else {
        libUIUI_gf_UIPartyFrameEnemyPing(lp_pingingPlayer, lv_targetUnit, lv_targetPlayerID, lv_rosterSlot, lv_vikingIndex);
    }
}

bool libUIUI_gf_PlayerAnnounceAllowedToAnnouce (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(libUIUI_gv_playerAnnounceInputSuppressionTimer[lp_player]) > 0.0)) {
        return false;
    }

    if ((TimerGetRemaining(libUIUI_gv_playerAnnounceLockoutTimer[lp_player]) > 0.0)) {
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_player], c_messageAreaChat, libUIUI_gv_playerAnnouceTooMuchSpam);
        return false;
    }

    return true;
}

void libUIUI_gf_PlayerAnnounceIncrementPingCountAndManageTimersForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_dEBUGPingLimitEnabled == false)) {
        return ;
    }

    libUIUI_gv_playerAnnouncePingCount[lp_player] += 1;
    TimerStart(libUIUI_gv_playerAnnounceInputSuppressionTimer[lp_player], libUIUI_gv_uIPingInputSuppressionTime_C, false, c_timeGame);
    TimerStart(libUIUI_gv_playerAnnounceCountResetTime[lp_player], libUIUI_gv_uIPingCountResetTime_C, false, c_timeGame);
    if ((libUIUI_gv_playerAnnouncePingCount[lp_player] >= libUIUI_gv_uIPingMaxCount_C)) {
        TimerStart(libUIUI_gv_playerAnnounceLockoutTimer[lp_player], libUIUI_gv_uIPingLockoutTime_C, false, c_timeGame);
    }

}

void libUIUI_gf_UIBoostsInitializeBoostFX (int lp_player, unit lp_heroUnit) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libUIUI_gv_uIBoosts.lv_frameCount[lp_player] == libUIUI_gv_uIMaxBoostFrames) || (UnitTypeTestAttribute(UnitGetType(lp_heroUnit), c_unitAttributeHeroic) == false) || (UnitGetType(lp_heroUnit) == "HeroLostVikingsController") || (UnitGetType(lp_heroUnit) == "HeroDVaPilot") || (UnitGetType(lp_heroUnit) == "RexxarMisha"))) {
        return ;
    }

    if (((UnitGetType(lp_heroUnit) == "HeroCho") || (UnitGetType(lp_heroUnit) == "HeroGall"))) {
    }
    else {
        libUIUI_gv_uIBoosts.lv_frameCount[lp_player] += 1;
        lv_heroIndex = libUIUI_gv_uIBoosts.lv_frameCount[lp_player];
        DialogCreate(1, 1, c_anchorTop, 0, 0, true);
        libUIUI_gv_uIBoosts.lv_boostFXAnchor[lp_player][lv_heroIndex] = DialogLastCreated();
        DialogSetPositionRelativeToUnitWithAnchor(DialogLastCreated(), lp_heroUnit, "Ref_Overhead", c_anchorBottom, 0, 0);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        libUIUI_gv_uIBoosts.lv_boostFXAnchorFrame[lp_player][lv_heroIndex] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/BoostPanel");
        libUIUI_gv_uIBoosts.lv_boostPanel = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIBoosts.lv_boostPanel, c_triggerControlTypePanel, "InGameBoostCutsceneFrame/InGameBoostCutsceneFrame");
        libUIUI_gv_uIBoosts.lv_boostFXPanel[lp_player][lv_heroIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libUIUI_gv_uIBoosts.lv_boostFXAnchorFrame[lp_player][lv_heroIndex], c_anchorTop, 0, 50);
    }
}

void libUIUI_gf_UIBoostsInitializeBoostFXForPlayers (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto51ECC559_g;

    // Variable Initialization

    // Implementation
    auto51ECC559_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto51ECC559_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
    }
}

void libUIUI_gf_UIBoostsShowBoostFXFrames () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itFrame;

    // Automatic Variable Declarations
    playergroup auto9843811E_g;

    // Variable Initialization

    // Implementation
    auto9843811E_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9843811E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
    }
}

void libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_lowHPSoundPlaying == false)) {
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 50.0);
        libGame_gv_players[lp_player].lv_lowHPSoundPlaying = true;
        TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, true);
        if ((libGame_gv_players[lp_player].lv_lowHPStartSound == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealth_Warning_Start", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPStartSound = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_Breath_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPBreathLoop = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_HeartBeat_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = SoundLastPlayed();
        }

    }

}

void libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_players[lp_player].lv_lowHPSoundPlaying = false;
    DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.625, 100.0);
    if ((libGame_gv_players[lp_player].lv_lowHPStartSound != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPStartSound, true);
        libGame_gv_players[lp_player].lv_lowHPStartSound = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPBreathLoop, true);
        libGame_gv_players[lp_player].lv_lowHPBreathLoop = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop, true);
        libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = null;
    }

}

void libUIUI_gf_UILowHPSetSoundChannelsForLowHealth (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 0.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 35.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 80.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 2.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForSilence (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 30.0, 1.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForNormal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lp_player], 1.5);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 1.0);
}

void libUIUI_gf_DeathRecapShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_DeathRecapShowHideToastButtonForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    if ((lp_showHide == true)) {
        TimerStart(libGame_gv_players[lp_player].lv_deathToastTimer, libGame_gv_heroDeathToastDisplayTime, false, c_timeGame);
    }
    else {
        libNtve_gf_StopTimer(libGame_gv_players[lp_player].lv_deathToastTimer);
    }
}

text libUIUI_gf_DeathRecapCreateTooltipTextNoSentence (int lp_deadPlayer, int lp_effectIndex) {
    // Variable Declarations
    int lv_effectAmount;
    int lv_effectOverkill;
    int lv_effectShielded;
    text lv_effectorText;
    text lv_abilityText;
    text lv_abilityTooltipText;
    text lv_shieldAmountText;
    text lv_damageAmountText;
    text lv_simpleTooltip;
    text lv_finalText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amount;
    lv_effectShielded = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountAbsorbed;
    lv_effectOverkill = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountOverkill;
    TextExpressionSetToken("Param/Expression/lib_UIUI_DB341940", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "SimpleDisplayText", c_playerAny)));
    lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_DB341940");
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_isHeal == true)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_07BA6471", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_07BA6471");
        TextExpressionSetToken("Param/Expression/lib_UIUI_2813FF5E", "A", IntToText(lv_effectAmount));
        lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_2813FF5E");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_E50ACCA5", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_E50ACCA5");
        if ((lp_effectIndex == 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_B4600397", "A", IntToText(lv_effectAmount));
            TextExpressionSetToken("Param/Expression/lib_UIUI_B4600397", "B", IntToText(lv_effectOverkill));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_B4600397");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A286320C", "A", IntToText(lv_effectAmount));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_A286320C");
        }
        if ((lv_effectShielded > 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_979D3A36", "A", IntToText(lv_effectShielded));
            lv_shieldAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_979D3A36");
            TextExpressionSetToken("Param/Expression/lib_UIUI_96D1FF5B", "A", lv_damageAmountText);
            TextExpressionSetToken("Param/Expression/lib_UIUI_96D1FF5B", "B", lv_shieldAmountText);
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_96D1FF5B");
        }

    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_2B46C8C4", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_unitType, "Name", c_playerAny)));
    lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_2B46C8C4");
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "A", lv_effectorText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "D", lv_abilityText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "E", lv_damageAmountText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "F", lv_simpleTooltip);
    lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_421FC6D5");
    return lv_finalText;
}

void libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel (int lp_deadPlayer) {
    // Variable Declarations
    int lv_effectBarSize;
    int lv_healthBarSize;
    int lv_highestHealthPercent;
    int lv_thirtyPercentHealth;
    int lv_itEffect;
    int lv_totalDamage;
    int lv_postEffectHealth;
    int lv_effectAmount;
    int lv_deadHeroHighestHealth;
    int lv_deadHeroMaxHealth;

    // Automatic Variable Declarations
    int auto577EF4BA_ae;
    const int auto577EF4BA_ai = 1;
    int autoA66EE888_ae;
    const int autoA66EE888_ai = 1;
    const int autoBE84021F_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int autoBE84021F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    DialogControlSetEnabled(libUIUI_gv_deathRecapPanel.lv_tabScreenButton, libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_AA7F1CED", "A", IntToText(lp_deadPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_AA7F1CED"), true);
        return ;
    }

    lv_deadHeroHighestHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth;
    lv_deadHeroMaxHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth;
    lv_highestHealthPercent = FixedToInt(Round((IntToFixed(lv_deadHeroHighestHealth) / IntToFixed(lv_deadHeroMaxHealth) * 100)));
    if ((lv_highestHealthPercent <= libUIUI_gv_deathRecap_MPercentLifeReference_C)) {
        lv_thirtyPercentHealth = FixedToInt((IntToFixed(lv_deadHeroMaxHealth) * 0.3));
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel, IntToText(libUIUI_gv_deathRecap_MPercentLifeReference_C), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        autoA66EE888_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        lv_itEffect = 1;
        for ( ; ( (autoA66EE888_ai >= 0 && lv_itEffect <= autoA66EE888_ae) || (autoA66EE888_ai < 0 && lv_itEffect >= autoA66EE888_ae) ) ; lv_itEffect += autoA66EE888_ai ) {
            lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
            lv_postEffectHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth;
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_effectAmount / lv_thirtyPercentHealth);
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (lv_postEffectHealth - lv_effectAmount) / lv_thirtyPercentHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }

                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Heal");
            }
            else {
                lv_totalDamage += lv_effectAmount;
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_postEffectHealth / lv_thirtyPercentHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }

                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Damage");
            }
        }
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel, IntToText(lv_highestHealthPercent), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        auto577EF4BA_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        lv_itEffect = 1;
        for ( ; ( (auto577EF4BA_ai >= 0 && lv_itEffect <= auto577EF4BA_ae) || (auto577EF4BA_ai < 0 && lv_itEffect >= auto577EF4BA_ae) ) ; lv_itEffect += auto577EF4BA_ai ) {
            lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
            lv_postEffectHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth;
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * lv_effectAmount / lv_deadHeroHighestHealth);
            if ((lv_effectBarSize <= 1)) {
                lv_effectBarSize = 2;
            }

            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (lv_postEffectHealth - lv_effectAmount) / lv_deadHeroHighestHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }

                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Heal");
            }
            else {
                lv_totalDamage += lv_effectAmount;
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_postEffectHealth / lv_deadHeroHighestHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }

                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Damage");
            }
        }
    }
    libUIUI_gf_DeathRecapPopulateAbilityandHeroDataForAbilitiesPanel(lp_deadPlayer);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2E8AC5C8", "A", IntToText(lv_totalDamage));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2E8AC5C8", "B", FixedToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount].lv_time, 1));
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_mainGraphLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_2E8AC5C8"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    lv_itEffect = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount + 1);
    for ( ; ( (autoBE84021F_ai >= 0 && lv_itEffect <= autoBE84021F_ae) || (autoBE84021F_ai < 0 && lv_itEffect >= autoBE84021F_ae) ) ; lv_itEffect += autoBE84021F_ai ) {
        DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "NoData");
    }
}

void libUIUI_gf_DeathRecapPopulateAbilityandHeroDataForAbilitiesPanel (int lp_deadPlayer) {
    // Variable Declarations
    int lv_effectPlayer;
    int lv_itEffect;
    text lv_effectTooltipText;
    text lv_effectAmountText;

    // Automatic Variable Declarations
    int auto2D5993C6_ae;
    const int auto2D5993C6_ai = 1;

    // Variable Initialization

    // Implementation
    auto2D5993C6_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
    lv_itEffect = 1;
    for ( ; ( (auto2D5993C6_ai >= 0 && lv_itEffect <= auto2D5993C6_ae) || (auto2D5993C6_ai < 0 && lv_itEffect >= auto2D5993C6_ae) ) ; lv_itEffect += auto2D5993C6_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[lv_itEffect], (CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_button, "Icon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_nPCSource == true)) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_structureSource == true)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], "assets\\Textures\\storm_ui_icon_deathrecap_npc_structure.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
            else {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], "assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
        }
        else {
            lv_effectPlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_effectPlayer;
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_effectPlayer].lv_heroIndex].lv_portraitDeathRecap, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        lv_effectTooltipText = libUIUI_gf_DeathRecapCreateTooltipTextNoSentence(lp_deadPlayer, lv_itEffect);
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[lv_itEffect], lv_effectTooltipText, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((lv_itEffect == 1)) {
            DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "KillingBlowState", "IsKillingBlow");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_2077C173", "A", FixedToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_time, 1));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_2077C173"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents > 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3520A0C6", "A", IntToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_3520A0C6"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
    }
}

void libUIUI_gf_DeathRecapPopulateHighestDamagersForPlayer (int lp_deadPlayer) {
    // Variable Declarations
    int lv_itHighestDamager;
    int lv_itHighestDamagerAbilities;
    int lv_itEffect;
    int lv_totalDamage;
    int lv_highestDamagePlayer;
    int lv_highestDamagerPercent;

    // Automatic Variable Declarations
    const int autoA9EE3B8B_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int autoA9EE3B8B_ai = 1;
    int auto0CC92995_ae;
    const int auto0CC92995_ai = 1;
    const int auto8B6BC4B2_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
    const int auto8B6BC4B2_ai = 1;
    const int auto37C3B207_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    const int auto37C3B207_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    lv_itEffect = 1;
    for ( ; ( (autoA9EE3B8B_ai >= 0 && lv_itEffect <= autoA9EE3B8B_ae) || (autoA9EE3B8B_ai < 0 && lv_itEffect >= autoA9EE3B8B_ae) ) ; lv_itEffect += autoA9EE3B8B_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == false)) {
            lv_totalDamage += libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }

    }
    lv_highestDamagerPercent = ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount / lv_totalDamage) * 100);
    auto0CC92995_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount;
    lv_itHighestDamager = 1;
    for ( ; ( (auto0CC92995_ai >= 0 && lv_itHighestDamager <= auto0CC92995_ae) || (auto0CC92995_ai < 0 && lv_itHighestDamager >= auto0CC92995_ae) ) ; lv_itHighestDamager += auto0CC92995_ai ) {
        lv_highestDamagePlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_player;
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], FixedToText((IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount) / IntToFixed(lv_totalDamage) * 100), 0), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[lv_itHighestDamager], (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount / IntToFixed(lv_totalDamage) * 100), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((libGame_gf_PlayerIsHeroPlayer(lv_highestDamagePlayer) == true)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itHighestDamager], libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_highestDamagePlayer].lv_heroIndex].lv_portraitHeroSelectScreenButton, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            if ((PlayerType(lv_highestDamagePlayer) == c_playerTypeUser)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "Player");
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
            else {
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "AI");
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itHighestDamager], "assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], StringExternal("Param/Value/lib_UIUI_14DE28C1"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "NPC");
        }
        lv_itHighestDamagerAbilities = 1;
        for ( ; ( (auto8B6BC4B2_ai >= 0 && lv_itHighestDamagerAbilities <= auto8B6BC4B2_ae) || (auto8B6BC4B2_ai < 0 && lv_itHighestDamagerAbilities >= auto8B6BC4B2_ae) ) ; lv_itHighestDamagerAbilities += auto8B6BC4B2_ai ) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_maxDamageAbils[lv_itHighestDamagerAbilities].lv_amount > 0)) {
                libUIUI_gf_DeathRecapPopulateHighestDamagersAbilities(lp_deadPlayer, lv_itHighestDamager, lv_itHighestDamagerAbilities);
            }
            else {
                DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lv_itHighestDamager][lv_itHighestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            }
        }
    }
    lv_itHighestDamager = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount+1);
    for ( ; ( (auto37C3B207_ai >= 0 && lv_itHighestDamager <= auto37C3B207_ae) || (auto37C3B207_ai < 0 && lv_itHighestDamager >= auto37C3B207_ae) ) ; lv_itHighestDamager += auto37C3B207_ai ) {
        DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "NoData");
    }
}

void libUIUI_gf_DeathRecapPopulateHighestDamagersAbilities (int lp_deadPlayer, int lp_highestDamager, int lp_highestDamagerAbilities) {
    // Variable Declarations
    string lv_highestDamagerButton;
    text lv_simpleTooltip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_highestDamagerButton = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_button;
    TextExpressionSetToken("Param/Expression/lib_UIUI_B1925A06", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_highestDamagerButton, "SimpleDisplayText", c_playerAny)));
    lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_B1925A06");
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[lp_highestDamager][lp_highestDamagerAbilities], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_highestDamagerButton, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[lp_highestDamager][lp_highestDamagerAbilities], IntToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_amount), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[lp_highestDamager][lp_highestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], FixedToInt((IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_amount) / IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_amount) * 248.0)), 24);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[lp_highestDamager][lp_highestDamagerAbilities], lv_simpleTooltip, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lp_highestDamager][lp_highestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
}

fixed libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset (unit lp_casterUnit, unit lp_displayUnit) {
    // Variable Declarations
    fixed lv_horizOffset;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_horizOffset = RandomFixed(0.0, MinF(2.0, UnitGetPropertyFixed(lp_displayUnit, c_unitPropRadius, c_unitPropNormal)));
    lv_distance = (PointGetX(UnitGetPosition(lp_casterUnit)) - PointGetX(UnitGetPosition(lp_displayUnit)));
    if ((lv_distance > 0)) {
        lv_horizOffset *= -1.0;
    }
    else if ((lv_distance < 0)) {
        lv_horizOffset *= 1.0;
    }
    else if (true) {
        lv_horizOffset *= IntToFixed(RandomInt(-1, 1));
    }
    return lv_horizOffset;
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTag (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset) {
    // Variable Declarations
    text lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_UIUI_129E15B7", "A", StringToText(lp_style));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_129E15B7");
    TextExpressionSetToken("Param/Expression/lib_UIUI_9394471E", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_9394471E", "B", lp_displayText);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_9394471E"), 15, Point((PointGetX(UnitGetPosition(lp_displayUnit)) + lp_horizontalOffset), PointGetY(UnitGetPosition(lp_displayUnit))), lp_heightOffset, true, false, lp_displayPlayers);
    if (((lp_style == "FCT_XP_Normal") || (lp_style == "FCT_XP_Crit") || (lp_style == "FCT_XP_Greater") || (lp_style == "FCT_XP_Medium") || (lp_style == "FCT_XP_Self"))) {
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    else {
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    }
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset) {
    // Variable Declarations
    text lv_fontStyle;
    fixed lv_angle;
    fixed lv_speed;
    fixed lv_heightOffset;
    text lv_critIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    if ((lp_horizontalOffset > 0.0)) {
        lv_angle = (90.0 - RandomFixed(1.0, 35.0));
    }
    else if ((lp_horizontalOffset < 0.0)) {
        lv_angle = (90.0 + RandomFixed(1.0, 35.0));
    }
    else if (true) {
        lv_angle = 90.0;
    }
    lv_speed = (1.25 + RandomFixed(-0.75, 0.75));
    lv_heightOffset = (lp_heightOffset + RandomFixed(-0.5, 0.5));
    TextExpressionSetToken("Param/Expression/lib_UIUI_CA58C5B5", "A", StringToText(lp_style));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_CA58C5B5");
    if ((lp_style == "FCT_Spell_Crit")) {
        lv_critIcon = TextExpressionAssemble("Param/Expression/lib_UIUI_AE6BA05B");
    }
    else if ((lp_style == "FCT_Heal_Crit")) {
        lv_critIcon = TextExpressionAssemble("Param/Expression/lib_UIUI_61C2A100");
    }
    else if ((lp_style == "FCT_Physical_Crit")) {
        lv_critIcon = TextExpressionAssemble("Param/Expression/lib_UIUI_8409415E");
    }
    else if ((lp_style == "FCT_Pure_Crit")) {
        lv_critIcon = TextExpressionAssemble("Param/Expression/lib_UIUI_299A8D4A");
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_CFC0E931", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_CFC0E931", "C", lv_critIcon);
    TextExpressionSetToken("Param/Expression/lib_UIUI_CFC0E931", "B", lp_displayText);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_CFC0E931"), 15, Point((PointGetX(UnitGetPosition(lp_displayUnit)) + lp_horizontalOffset), PointGetY(UnitGetPosition(lp_displayUnit))), lv_heightOffset, true, false, lp_displayPlayers);
    TextTagSetVelocity(TextTagLastCreated(), lv_speed, lv_angle);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libUIUI_gf_UIFloatingCombatTextCreateQuestTagAtPoint (point lp_displayPoint, playergroup lp_displayPlayers) {
    // Variable Declarations
    text lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_UIUI_BF91AF33", "A", StringToText("FCT_Quest_Normal"));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_BF91AF33");
    TextExpressionSetToken("Param/Expression/lib_UIUI_438F2684", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_438F2684", "B", StringToText("1!"));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_438F2684"), 15, Point((PointGetX(lp_displayPoint) - 1.0), PointGetY(lp_displayPoint)), 1.5, true, false, lp_displayPlayers);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetBackgroundImage(TextTagLastCreated(), "assets\\Textures\\Storm_UI_Quest_Indicator_Frame.dds", false);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 2.0, 2.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 0.75);
}

void libUIUI_gf_UICombatFloatingElementsXP (playergroup lp_playerGroup, unit lp_target, text lp_amount, string lp_style) {
    // Variable Declarations
    text lv_displayText;

    // Automatic Variable Declarations
    // Variable Initialization
    TextExpressionSetToken("Param/Expression/lib_UIUI_24F83444", "A", lp_amount);
    lv_displayText = TextExpressionAssemble("Param/Expression/lib_UIUI_24F83444");

    // Implementation
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_target, lv_displayText, lp_playerGroup, lp_style, libUIUI_gv_floatingCombatTextDurationXP, libUIUI_gv_floatingCombatTextFadeDuration4, 0.0);
}

void libUIUI_gf_UICombatFloatingElementsLeashing (unit lp_unit) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_targetPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto41D0CC3A_g;

    // Variable Initialization
    lv_targetPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((UnitIsValid(lp_unit) == true) && (libUIUI_gv_floatingCombatTextSuppressLeashingText == false)) {
        auto41D0CC3A_g = libCore_gv_activeHumanPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto41D0CC3A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, lv_itPlayer) == true)) {
                PlayerGroupAdd(lv_targetPlayerGroup, lv_itPlayer);
            }

        }
        if ((PlayerGroupCount(lv_targetPlayerGroup) > 0)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_unit, StringExternal("Param/Value/lib_UIUI_8BBD4899"), lv_targetPlayerGroup, "FCT_Physical_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
        }

    }

}

void libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroHasCustomDeathDisableDeathCutscene") == true)) {
        return ;
    }
    else {
        if ((lp_showHide == true)) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
            TimerPause(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
            TimerStart(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimerDuration_C, false, c_timeGame);
        }
    }
}

void libUIUI_gf_FullscreenOverlaysStopSpecialOverlay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == false)) {
        return ;
    }

    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
    TimerStart(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimerDuration_C, false, c_timeGame);
}

void libUIUI_gf_FullscreenOverlaysShowSpecialOverlay (string lp_cutscene, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
    TimerPause(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], true);
}

void libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer (int lp_player, fixed lp_cCDuration) {
    // Variable Declarations
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fadeTime = 0.25;

    // Implementation
    libNtve_gf_SetDialogItemColor(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, Color(0.00, 0.00, 100.00), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 0.0);
    if ((lp_cCDuration > lv_fadeTime) && (lp_cCDuration < 32765.0)) {
        if ((libGame_gv_players[lp_player].lv_activeVehicle == null)) {
            while (((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_Stun, libGame_gv_players[lp_player].lv_heroUnit) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_heroUnit, 0, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_heroUnit, 0, UnitFilter(0, (1 << (c_targetFilterSilenced - 32)), 0, 0)) == true))) {
                Wait(0.0625, c_timeGame);
            }
        }
        else {
            while ((UnitIsAlive(libGame_gv_players[lp_player].lv_activeVehicle) == true) && ((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_Stun, libGame_gv_players[lp_player].lv_activeVehicle) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_activeVehicle, 0, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_activeVehicle, 0, UnitFilter(0, (1 << (c_targetFilterSilenced - 32)), 0, 0)) == true))) {
                Wait(0.0625, c_timeGame);
            }
        }
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_fadeTime, 100.0);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], (lv_fadeTime / 2.0), 100.0);
    }
}

void libUIUI_gf_FullscreenOverlayAddItemForPlayer (int lp_player, int lp_priority, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;
    int lv_allyTeam;

    // Automatic Variable Declarations
    playergroup autoE06D250F_g;
    int autoE06D250F_var;
    int auto20E11348_ae;
    const int auto20E11348_ai = 1;
    int autoCF65A1FC_ae;
    const int autoCF65A1FC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == false)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoE06D250F_g = libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupAlly, lp_player);
        autoE06D250F_var = -1;
        while (true) {
            autoE06D250F_var = PlayerGroupNextPlayer(autoE06D250F_g, autoE06D250F_var);
            if (autoE06D250F_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoE06D250F_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayAddItemForPlayer(autoE06D250F_var, lp_priority, lp_cutscene, lp_behavior);
            }

        }
    }

    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue >= libUIUI_gv_fullscreenOverlayMaxQueueSize_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_285F47E8", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_285F47E8"), true);
        return ;
    }

    auto20E11348_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (auto20E11348_ai >= 0 && lv_itQueuePosition <= auto20E11348_ae) || (auto20E11348_ai < 0 && lv_itQueuePosition >= auto20E11348_ae) ) ; lv_itQueuePosition += auto20E11348_ai ) {
        if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition])) {
            return ;
        }

    }
    lv_priorityInt = (lp_priority);
    lv_desiredPosition = 0;
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue == 0)) {
        lv_desiredPosition = 1;
    }
    else {
        autoCF65A1FC_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        lv_itQueuePosition = 1;
        for ( ; ( (autoCF65A1FC_ai >= 0 && lv_itQueuePosition <= autoCF65A1FC_ae) || (autoCF65A1FC_ai < 0 && lv_itQueuePosition >= autoCF65A1FC_ae) ) ; lv_itQueuePosition += autoCF65A1FC_ai ) {
            if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                lv_desiredPosition = lv_itQueuePosition;
                break;
            }

        }
        if ((lv_desiredPosition == 0)) {
            lv_desiredPosition = (libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue + 1);
        }

    }
    libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer(lp_player, lp_priority, lv_desiredPosition, lp_cutscene, lp_behavior);
    if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[1])) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, lp_cutscene);
    }

}

void libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_desiredInsertPosition, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Automatic Variable Declarations
    int auto5A3380DE_ae;
    const int auto5A3380DE_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_desiredInsertPosition > libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue)) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    }
    else {
        auto5A3380DE_ae = lp_desiredInsertPosition;
        lv_itQueuePosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (auto5A3380DE_ai >= 0 && lv_itQueuePosition <= auto5A3380DE_ae) || (auto5A3380DE_ai < 0 && lv_itQueuePosition >= auto5A3380DE_ae) ) ; lv_itQueuePosition += auto5A3380DE_ai ) {
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
        }
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_insertPosition] = lp_cutscene;
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_insertPosition] = lp_behavior;
}

void libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer (int lp_player, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;
    int lv_positionInQueue;
    int lv_itQueuePosition;

    // Automatic Variable Declarations
    playergroup autoA9B7F6D7_g;
    int autoA9B7F6D7_var;
    int autoFDECC8C7_ae;
    const int autoFDECC8C7_ai = 1;
    int autoB306ACFD_ae;
    const int autoB306ACFD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == false)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoA9B7F6D7_g = libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupAlly, lp_player);
        autoA9B7F6D7_var = -1;
        while (true) {
            autoA9B7F6D7_var = PlayerGroupNextPlayer(autoA9B7F6D7_g, autoA9B7F6D7_var);
            if (autoA9B7F6D7_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoA9B7F6D7_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(autoA9B7F6D7_var, lp_cutscene, lp_behavior);
            }

        }
    }

    lv_numberOfItemsInQueue = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    autoFDECC8C7_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (autoFDECC8C7_ai >= 0 && lv_itQueuePosition <= autoFDECC8C7_ae) || (autoFDECC8C7_ai < 0 && lv_itQueuePosition >= autoFDECC8C7_ae) ) ; lv_itQueuePosition += autoFDECC8C7_ai ) {
        if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition] == lp_behavior)) {
            lv_positionInQueue = lv_itQueuePosition;
            break;
        }

    }
    if ((lv_positionInQueue == 0)) {
        return ;
    }

    if ((lv_numberOfItemsInQueue == 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        return ;
    }

    autoB306ACFD_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = (lv_positionInQueue+1);
    for ( ; ( (autoB306ACFD_ai >= 0 && lv_itQueuePosition <= autoB306ACFD_ae) || (autoB306ACFD_ai < 0 && lv_itQueuePosition >= autoB306ACFD_ae) ) ; lv_itQueuePosition += autoB306ACFD_ai ) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
    if ((lv_positionInQueue == 1)) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[1]);
        return ;
    }

}

void libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue = 0;
    }

}

void libUIUI_gf_FullscreenOverlayPlayCutscene (int lp_player, string lp_cutscene) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
}

void libUIUI_gf_FullscreenOverlaysHideMainPanelForAllPlayers () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog, PlayerGroupAll(), false);
}

void libUIUI_gf_GameOverSplashDisplayForAllPlayers (int lp_winningTeam) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(true, lp_winningTeam);
}

void libUIUI_gf_GameOverSplashShowHideForAllPlayers (bool lp_showHide, int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto4360BE41_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto4360BE41_ai = 1;
    int autoC2ED41CE_val;
    int auto4AD4343C_val;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto4360BE41_ai >= 0 && lv_itPlayer <= auto4360BE41_ae) || (auto4360BE41_ai < 0 && lv_itPlayer >= auto4360BE41_ae) ) ; lv_itPlayer += auto4360BE41_ai ) {
        autoC2ED41CE_val = libGame_gv_players[lv_itPlayer].lv_victoryDefeat;
        if (autoC2ED41CE_val == c_gameOverVictory) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else if (autoC2ED41CE_val == c_gameOverDefeat) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        if ((lp_showHide == true)) {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, -1);
        }
        else {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitStatusGroupAll);
        }
    }
    auto4AD4343C_val = lp_winningTeam;
    if (auto4AD4343C_val == libGame_gv_teamOrderIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == libGame_gv_teamChaosIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == 0) {
        if ((lp_showHide == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_defeatLabel, StringExternal("Param/Value/lib_UIUI_8708F157"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }

        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_GameStatsShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_gameStats.lv_mainPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_GameStatsUpdateCountdownandLabel (fixed lp_countdownMaxTime, fixed lp_countdownCurrentTime, int lp_currentPlayerCount, int lp_targetPlayerCount) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_gameStats.lv_countdownProgressBar, lp_countdownMaxTime, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_gameStats.lv_countdownProgressBar, lp_countdownCurrentTime, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_CB29761A", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(lp_countdownCurrentTime)));
    libNtve_gf_SetDialogItemText(libUIUI_gv_gameStats.lv_countdownTextLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_CB29761A"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_DAE4C7FA", "A", IntToText(lp_currentPlayerCount));
    TextExpressionSetToken("Param/Expression/lib_UIUI_DAE4C7FA", "B", IntToText(lp_targetPlayerCount));
    libNtve_gf_SetDialogItemText(libUIUI_gv_gameStats.lv_exitButton, TextExpressionAssemble("Param/Expression/lib_UIUI_DAE4C7FA"), PlayerGroupAll());
}

void libUIUI_gf_UIGameUIToggleMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer(lp_player);
}

void libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libUIUI_gf_UIGameUITurnOnFactionStateForPlayer (int lp_faction, int lp_player) {
    // Automatic Variable Declarations
    int auto9C671E8C_val;

    // Implementation
    auto9C671E8C_val = lp_faction;
    if (auto9C671E8C_val == libGame_ge_Faction_Order) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamOrder");
    }
    else if (auto9C671E8C_val == libGame_ge_Faction_Chaos) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamChaos");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamOrder");
    }
}

void libUIUI_gf_UIGameUISetPlayerHeroUnit (int lp_player, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIGameUIHandles.lv_playerHeroUnit[lp_player], lp_hero, PlayerGroupAll());
}

void libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam (int lp_team) {
    // Variable Declarations
    unitgroup lv_healingFountainsGroup;
    int lv_itTextTag;
    unit lv_itU;
    text lv_helpLabel;

    // Automatic Variable Declarations
    unitgroup autoC4DBCF89_g;
    int autoC4DBCF89_u;
    unitgroup auto9D4B9789_g;
    int auto9D4B9789_u;

    // Variable Initialization
    lv_healingFountainsGroup = UnitGroupEmpty();

    // Implementation
    autoC4DBCF89_g = UnitGroup(null, libGame_gv_teams[lp_team].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4DBCF89_u = UnitGroupCount(autoC4DBCF89_g, c_unitCountAll);
    for (;; autoC4DBCF89_u -= 1) {
        lv_itU = UnitGroupUnitFromEnd(autoC4DBCF89_g, autoC4DBCF89_u);
        if (lv_itU == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(lv_itU), c_unitFlagTownStructureMoonwell) == true)) {
            UnitGroupAdd(lv_healingFountainsGroup, lv_itU);
        }

    }
    lv_helpLabel = StringExternal("Param/Value/lib_UIUI_CC40B72C");
    auto9D4B9789_g = lv_healingFountainsGroup;
    auto9D4B9789_u = UnitGroupCount(auto9D4B9789_g, c_unitCountAll);
    for (;; auto9D4B9789_u -= 1) {
        lv_itU = UnitGroupUnitFromEnd(auto9D4B9789_g, auto9D4B9789_u);
        if (lv_itU == null) { break; }
        lv_itTextTag += 1;
        TextTagCreate(lv_helpLabel, 24, UnitGetPosition(lv_itU), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, false, false, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_textTag = TextTagLastCreated();
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_healingFountain = lv_itU;
    }
}

void libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer (int lp_player, bool lp_showHide) {
    // Variable Declarations
    int lv_itTextTag;
    int lv_arrayToUse;

    // Automatic Variable Declarations
    const int autoC8570ACF_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    const int autoC8570ACF_ai = 1;

    // Variable Initialization
    lv_arrayToUse = libGame_gf_TeamNumberOfPlayer(lp_player);

    // Implementation
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = true;
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = false;
    }
    lv_itTextTag = 1;
    for ( ; ( (autoC8570ACF_ai >= 0 && lv_itTextTag <= autoC8570ACF_ae) || (autoC8570ACF_ai < 0 && lv_itTextTag >= autoC8570ACF_ae) ) ; lv_itTextTag += autoC8570ACF_ai ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag == c_textTagNone)) {
            break;
        }
        else {
            if (((lp_showHide == false) || (UnitIsAlive(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_healingFountain) == true))) {
                TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            }

        }
    }
}

void libUIUI_gf_AttachHelpButtonToUnit (unit lp_attachedUnit, trigger lp_callback, text lp_helpText, int lp_xOffset, int lp_yOffset) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_helpButtonCount >= libUIUI_gv_helpButtonMaxCount_C)) {
        return ;
    }

    libUIUI_gv_helpButtonCount += 1;
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "AttachPointFrame", lp_attachedUnit);
    libUIUI_gv_helpButtonFrames[libUIUI_gv_helpButtonCount] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_xOffset, lp_yOffset);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HelpText", lp_attachedUnit);
    libUIUI_gv_helpButtonLabels[libUIUI_gv_helpButtonCount] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/lib_UIUI_B7F63CF6", "A", StringExternal("Param/Value/lib_UIUI_06030C1A"));
    TextExpressionSetToken("Param/Expression/lib_UIUI_B7F63CF6", "B", lp_helpText);
    libNtve_gf_SetDialogItemText(libUIUI_gv_helpButtonLabels[libUIUI_gv_helpButtonCount], TextExpressionAssemble("Param/Expression/lib_UIUI_B7F63CF6"), PlayerGroupAll());
    UnitStatusBarOverride(lp_attachedUnit, c_unitStatusGroupAll);
    libUIUI_gv_helpButtonCallbacks[libUIUI_gv_helpButtonCount] = lp_callback;
    libUIUI_gv_helpButtonUnits[libUIUI_gv_helpButtonCount] = lp_attachedUnit;
}

void libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer (int lp_player, bool lp_showHide, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
}

int libUIUI_gf_HelpButtonClickedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libUIUI_gv_helpButtonDataTableKey_C);
}

void libUIUI_gf_SetHelpButtonText (unit lp_unit, text lp_text, playergroup lp_players) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libUIUI_gf_HelpButtonFromUnit(lp_unit);
    if ((lv_index <= 0)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_helpButtonLabels[lv_index], lp_text, lp_players);
}

int libUIUI_gf_HelpButtonFromUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto61B794A0_ae;
    const int auto61B794A0_ai = 1;

    // Variable Initialization

    // Implementation
    auto61B794A0_ae = libUIUI_gv_helpButtonCount;
    lv_itIndex = 1;
    for ( ; ( (auto61B794A0_ai >= 0 && lv_itIndex <= auto61B794A0_ae) || (auto61B794A0_ai < 0 && lv_itIndex >= auto61B794A0_ae) ) ; lv_itIndex += auto61B794A0_ai ) {
        if ((libUIUI_gv_helpButtonUnits[lv_itIndex] == lp_unit)) {
            return lv_itIndex;
        }

    }
    return 0;
}

void libUIUI_gf_UIHeroConsoleShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeCommandPanel, lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeInventoryPanel, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_syncFrameTypeCommandPanel, lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_syncFrameTypeInventoryPanel, lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    int auto69350215_val;
    int auto9C9D0073_val;

    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    if ((UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle) != "VolskayaVehicle") && (UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle) != "VolskayaVehicleGunner") && ((libGame_gv_players[lp_player].lv_activeVehicle == null) || (UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) != "HeroAbathur"))) {
        auto9C9D0073_val = libUIUI_gf_UIGetHeroResourceType(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
        if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_None) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Orange) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Pink) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Breath) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto9C9D0073_val == libUIUI_ge_UIHeroResourceType_Rage) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
    }
    else {
        auto69350215_val = libUIUI_gf_UIGetHeroResourceType(UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle));
        if (auto69350215_val == libUIUI_ge_UIHeroResourceType_None) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Orange) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Pink) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Breath) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else if (auto69350215_val == libUIUI_ge_UIHeroResourceType_Rage) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
        }
    }
}

void libUIUI_gf_UIHeroConsoleSetUpForPlayer (unit lp_unit, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto1155DEA3_val;
    int auto151260CD_val;
    string autoB39E3999_val;

    // Variable Initialization

    // Implementation
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    if ((UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle) != "VolskayaVehicle") && (UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle) != "VolskayaVehicleGunner") && ((libGame_gv_players[lp_player].lv_activeVehicle == null) || (UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) != "HeroAbathur"))) {
        auto151260CD_val = libUIUI_gf_UIGetHeroResourceType(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
        if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_None) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Orange) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Breath) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Rage) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Pink) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto151260CD_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    else {
        auto1155DEA3_val = libUIUI_gf_UIGetHeroResourceType(UnitGetType(libGame_gv_players[lp_player].lv_activeVehicle));
        if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_None) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Orange) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Breath) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Rage) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Pink) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (auto1155DEA3_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    autoB39E3999_val = UnitGetType(libGame_gv_players[lp_player].lv_heroUnit);
    {
    }
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_StunDeath = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Channel = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Behavior = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame_Right, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar (string lp_newBehavior, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    if ((lp_newBehavior == "Dead")) {
        DialogControlSetAnimationState(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], "DeadOrStunned", "Dead");
        libUIUI_gv_heroConsoleUnits[lp_player].lv_stunDeathBarCurrentBehavior = lp_newBehavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_AAAA9A3C"), libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, "@UI/HUD_Bar_DeathStun_Icon_Stun", libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        if ((lp_newBehavior == "GuldanDarkBargainDuration")) {
        }
        else {
            if ((UnitBehaviorDuration(libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_StunDeath, lp_newBehavior) >= UnitBehaviorDuration(libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_StunDeath, libUIUI_gv_heroConsoleUnits[lp_player].lv_stunDeathBarCurrentBehavior))) {
                DialogControlSetAnimationState(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], "DeadOrStunned", "Stunned");
                libUIUI_gv_heroConsoleUnits[lp_player].lv_stunDeathBarCurrentBehavior = lp_newBehavior;
                libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lp_player]);
                libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lp_player]);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_CC44E0FC"), libCore_gv_playerGroupFromPlayer[lp_player]);
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_newBehavior, "InfoIcon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
            }

        }
    }
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_behaviorDurationRemaining;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_StunDeath, libUIUI_gv_heroConsoleUnits[lp_player].lv_stunDeathBarCurrentBehavior);
    if ((lv_behaviorDurationRemaining > 0.0)) {
        if ((lv_behaviorDurationRemaining < 32767.0)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, FixedToText(lv_behaviorDurationRemaining, 1), libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Behavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Behavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame_Right, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar (int lp_player, string lp_behavior) {
    // Variable Declarations
    unit lv_heroUnit;
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Channel;
    if (((UnitBehaviorDurationTotal(lv_heroUnit, lp_behavior) >= UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior)) || (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "InfoTooltipPriority", c_playerAny) > CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior, "InfoTooltipPriority", c_playerAny)))) {
        if ((libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior != null) && (UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior) > 0.0) && (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "InfoTooltipPriority", c_playerAny) < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior, "InfoTooltipPriority", c_playerAny))) {
            return ;
        }

        libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_face = (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Face", c_playerAny));
        if ((lv_face != null) && (CatalogEntryIsValid(c_gameCatalogButton, lv_face) == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarRight (int lp_player, string lp_behavior) {
    // Variable Declarations
    unit lv_heroUnit;
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libUIUI_gv_heroConsoleUnits[lp_player].lv_monitorUnit_Channel;
    if (((UnitBehaviorDurationTotal(lv_heroUnit, lp_behavior) >= UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right)) || (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "InfoTooltipPriority", c_playerAny) > CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right, "InfoTooltipPriority", c_playerAny)))) {
        if ((libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right != null) && (UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right) > 0.0) && (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "InfoTooltipPriority", c_playerAny) < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right, "InfoTooltipPriority", c_playerAny))) {
            return ;
        }

        libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior_Right = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar_Right, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_face = (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Face", c_playerAny));
        if ((lv_face != null) && (CatalogEntryIsValid(c_gameCatalogButton, lv_face) == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel_Right, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel_Right, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame_Right, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarFromUnit (int lp_player, string lp_behavior, unit lp_unit) {
    // Variable Declarations
    unit lv_heroUnit;
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = lp_unit;
    if ((UnitBehaviorDurationTotal(lv_heroUnit, lp_behavior) >= UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior))) {
        libUIUI_gv_heroConsoleUnits[lp_player].lv_behaviorChannelBarCurrentBehavior = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_face = (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Face", c_playerAny));
        if ((lv_face != null) && (CatalogEntryIsValid(c_gameCatalogButton, lv_face) == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_UIHeroLeaderboardAssignPlayeronLeaderboardToSlotForPlayerGroup (int lp_player, int lp_slot, playergroup lp_observingPlayerGroup) {
    // Variable Declarations
    string lv_playerScoreValue;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto3EA25C22_g;

    // Variable Initialization

    // Implementation
    lv_playerScoreValue = (("HeroLeaderboardPlayerFromSlot" + IntToString(lp_slot)));
    auto3EA25C22_g = lp_observingPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto3EA25C22_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerScoreValueSetFromInt(lv_itPlayer, lv_playerScoreValue, lp_player);
    }
}

void libUIUI_gf_UIHeroLeaderboardResetSlotForPlayer (int lp_slot, playergroup lp_observingPlayerGroup) {
    // Variable Declarations
    string lv_playerScoreValue;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6EA276ED_g;

    // Variable Initialization

    // Implementation
    lv_playerScoreValue = (("HeroLeaderboardPlayerFromSlot" + IntToString(lp_slot)));
    auto6EA276ED_g = lp_observingPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6EA276ED_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerScoreValueSetFromInt(lv_itPlayer, lv_playerScoreValue, -1);
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingUpdateSortingTab (int lp_sortingTab) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto734F6B15_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    auto734F6B15_g = libCore_gv_allHeroPlayersPlusObservers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto734F6B15_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lp_sortingTab == libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lv_itPlayer])) {
            PlayerGroupAdd(lv_playerGroup, lv_itPlayer);
        }

    }
    if ((PlayerGroupCount(lv_playerGroup) > 0)) {
        libUIUI_gf_UIHeroLeaderboardSortingUpdatePlayerGroupToState(lv_playerGroup, lp_sortingTab);
    }

}

void libUIUI_gf_UIHeroLeaderboardSortingUpdatePlayerGroupToState (playergroup lp_observingPlayerGroup, int lp_sorting) {
    // Variable Declarations
    int lv_index;
    int lv_itSlot;
    int lv_itPlayer;
    int lv_highestPlayer;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup autoD16722D2_g;
    int auto6DE158D7_ae;
    const int auto6DE158D7_ai = 1;
    playergroup autoFCF4CDD7_g;
    int auto1507A4B8_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_sorting == libUIUI_ge_UIHeroLeaderboardSortType_Default)) {
        autoD16722D2_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoD16722D2_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libUIUI_gf_UIHeroLeaderboardAssignPlayeronLeaderboardToSlotForPlayerGroup(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_gameSlot, lp_observingPlayerGroup);
        }
        return ;
    }

    lv_heroGroup = PlayerGroupCopy(libCore_gv_allHeroPlayers);
    auto6DE158D7_ae = PlayerGroupCount(libCore_gv_allHeroPlayers);
    lv_itSlot = 1;
    for ( ; ( (auto6DE158D7_ai >= 0 && lv_itSlot <= auto6DE158D7_ae) || (auto6DE158D7_ai < 0 && lv_itSlot >= auto6DE158D7_ae) ) ; lv_itSlot += auto6DE158D7_ai ) {
        lv_highestPlayer = PlayerGroupPlayer(lv_heroGroup, 1);
        autoFCF4CDD7_g = lv_heroGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoFCF4CDD7_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            auto1507A4B8_val = lp_sorting;
            if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_Kills) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_kills > libGame_gv_scoreValues[lv_highestPlayer].lv_kills)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_Assists) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_assists > libGame_gv_scoreValues[lv_highestPlayer].lv_assists)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_Deaths) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_deaths < libGame_gv_scoreValues[lv_highestPlayer].lv_deaths)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_SiegeDamage) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage > libGame_gv_scoreValues[lv_highestPlayer].lv_siegeDamage)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_HeroDamage) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage > libGame_gv_scoreValues[lv_highestPlayer].lv_heroDamage)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_SelfHealing) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_selfHealing > libGame_gv_scoreValues[lv_highestPlayer].lv_selfHealing)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_Healing) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_healing > libGame_gv_scoreValues[lv_highestPlayer].lv_healing)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else if (auto1507A4B8_val == libUIUI_ge_UIHeroLeaderboardSortType_Experience) {
                if ((libGame_gv_scoreValues[lv_itPlayer].lv_experience > libGame_gv_scoreValues[lv_highestPlayer].lv_experience)) {
                    lv_highestPlayer = lv_itPlayer;
                }

            }
            else {
            }
        }
        libUIUI_gf_UIHeroLeaderboardAssignPlayeronLeaderboardToSlotForPlayerGroup(lv_highestPlayer, lv_itSlot, lp_observingPlayerGroup);
        PlayerGroupRemove(lv_heroGroup, lv_highestPlayer);
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingSetState (int lp_player, int lp_sorting) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_uIHeroLeaderboardSortingPlayerOldSort[lp_player] = libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player];
    if ((lp_sorting == libUIUI_gv_uIHeroLeaderboardSortingPlayerOldSort[lp_player])) {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player] = libUIUI_ge_UIHeroLeaderboardSortType_Default;
    }
    else {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player] = lp_sorting;
    }
}

bool libUIUI_gf_UIHeroLeaderboardSortingSortTypeGT0 (int lp_sorting) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto8DBA120E_val;
    playergroup auto9A220760_g;
    playergroup auto2EE3777F_g;
    playergroup auto7CF23089_g;
    playergroup auto0F2F9305_g;
    playergroup auto8EBAF39E_g;
    playergroup auto4FA4DF37_g;
    playergroup auto7A473143_g;
    playergroup autoD86B2130_g;

    // Variable Initialization

    // Implementation
    auto8DBA120E_val = lp_sorting;
    if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_Kills) {
        auto9A220760_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto9A220760_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_kills > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_Assists) {
        auto2EE3777F_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto2EE3777F_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_assists > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_Deaths) {
        auto7CF23089_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto7CF23089_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_deaths > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_SiegeDamage) {
        auto0F2F9305_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto0F2F9305_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_HeroDamage) {
        auto8EBAF39E_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto8EBAF39E_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_Healing) {
        auto4FA4DF37_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4FA4DF37_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_healing > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_SelfHealing) {
        auto7A473143_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto7A473143_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_selfHealing > 0.0)) {
                return true;
            }

        }
    }
    else if (auto8DBA120E_val == libUIUI_ge_UIHeroLeaderboardSortType_Experience) {
        autoD86B2130_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoD86B2130_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_scoreValues[lv_itPlayer].lv_experience > 0.0)) {
                return true;
            }

        }
    }
    else {
    }
    return false;
}

void libUIUI_gf_UIHeroLeaderboardHideMainPanelForAllPlayers () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_mainDialog, PlayerGroupAll(), false);
}

bool libUIUI_gf_HSUICompareHeroSearchTextForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_heroSelection.lv_filterEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_description), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIHeroFilterRoleAllowedForPlayer (int lp_heroIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleTank == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleBruiser == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleRangedAssasin == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleMeleeAssasin == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleSupport == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleHealer == false)) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleTank == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "Tank")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleBruiser == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "Bruiser")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleRangedAssasin == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "AssassinRanged")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleMeleeAssasin == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "AssassinMelee")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleSupport == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "Support")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterRoleHealer == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role == "Healer")) {
        return true;
    }
    return false;
}

bool libUIUI_gf_HSUIHeroFilterUniverseAllowedForPlayer (int lp_heroIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseWarCraft == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseStarCraft == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseOverwatch == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseDiablo == false) && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseNexus == false)) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseWarCraft == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_universe == "WarCraft")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseStarCraft == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_universe == "StarCraft")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseOverwatch == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_universe == "Overwatch")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseDiablo == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_universe == "Diablo")) {
        return true;
    }
    else if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_filterUniverseNexus == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_universe == "Nexus")) {
        return true;
    }
    return false;
}

bool libUIUI_gf_HSUIHeroSelectedByTeam (int lp_heroIndex, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto9B4060CC_g;

    // Variable Initialization

    // Implementation
    auto9B4060CC_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9B4060CC_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero == lp_heroIndex)) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIGoodToLockInForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_team;

    // Automatic Variable Declarations
    playergroup auto7B4602C3_g;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_lockedIn == true)) {
        return false;
    }

    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero <= 0)) {
        return false;
    }

    if ((libCore_gv_sYSIsSameHeroEnabled == true)) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    auto7B4602C3_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7B4602C3_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer != lp_player) && (libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == true) && (libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero == libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero)) {
            return false;
        }

    }
    return true;
}

int libUIUI_gf_HSUISelectRandomHeroForPlayer (int lp_player) {
    int init_i;

    // Variable Declarations
    int lv_itPlayer;
    int lv_team;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_allowedHeroesArray;
    int lv_int_DummyPlayerIndex;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_lockedHero;
    int lv_itHeroIndex;
    int lv_int_HeroDummyIndex;
    int lv_playerHeroIndex;
    bool lv_heroAllowed;

    // Automatic Variable Declarations
    playergroup auto8030E913_g;
    int auto44B4028C_ae;
    const int auto44B4028C_ai = 1;
    const int auto4F9A1D13_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto4F9A1D13_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayersOnATeam; init_i += 1) {
        lv_lockedHero[init_i] = -1;
    }

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    auto8030E913_g = libCore_gf_PlayerGroupExceptOfPlayer(libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, lp_player);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8030E913_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero > 0)) {
            lv_int_DummyPlayerIndex += 1;
            lv_lockedHero[lv_int_DummyPlayerIndex] = libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero;
        }

    }
    auto44B4028C_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; ( (auto44B4028C_ai >= 0 && lv_itHeroIndex <= auto44B4028C_ae) || (auto44B4028C_ai < 0 && lv_itHeroIndex >= auto44B4028C_ae) ) ; lv_itHeroIndex += auto44B4028C_ai ) {
        lv_itPlayer = 1;
        for ( ; ( (auto4F9A1D13_ai >= 0 && lv_itPlayer <= auto4F9A1D13_ae) || (auto4F9A1D13_ai < 0 && lv_itPlayer >= auto4F9A1D13_ae) ) ; lv_itPlayer += auto4F9A1D13_ai ) {
            if ((lv_itHeroIndex == lv_lockedHero[lv_itPlayer])) {
                lv_heroAllowed = false;
                break;
            }
            else {
                lv_heroAllowed = true;
            }
        }
        if ((lv_heroAllowed == true)) {
            lv_int_HeroDummyIndex += 1;
            lv_allowedHeroesArray[lv_int_HeroDummyIndex] = lv_itHeroIndex;
            lv_heroAllowed = false;
        }

    }
    lv_playerHeroIndex = lv_allowedHeroesArray[RandomInt(1, lv_int_HeroDummyIndex)];
    return lv_playerHeroIndex;
}

void libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection (bool lp_muteUnmute) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser11, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteUnmute);
}

void libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_heroButton;
    int lv_itHeroIndex;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto24DD0308_g;
    int auto5F08821A_ae;
    const int auto5F08821A_ai = 1;

    // Variable Initialization

    // Implementation
    auto24DD0308_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto24DD0308_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroButton = 0;
        libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_filledHeroCount = 0;
        auto5F08821A_ae = libCore_gv_dataHeroesNumberOfHeroes;
        lv_itHeroIndex = 1;
        for ( ; ( (auto5F08821A_ai >= 0 && lv_itHeroIndex <= auto5F08821A_ae) || (auto5F08821A_ai < 0 && lv_itHeroIndex >= auto5F08821A_ae) ) ; lv_itHeroIndex += auto5F08821A_ai ) {
            if ((libUIUI_gf_HSUIHeroFilterRoleAllowedForPlayer(lv_itHeroIndex, lv_itPlayer) == true) && (libUIUI_gf_HSUIHeroFilterUniverseAllowedForPlayer(lv_itHeroIndex, lv_itPlayer) == true) && (libUIUI_gf_HSUICompareHeroSearchTextForPlayer(lv_itHeroIndex, lv_itPlayer) == true)) {
                lv_heroButton += 1;
                libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_filledHeroArray[lv_heroButton] = lv_itHeroIndex;
            }

        }
        libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_filledHeroCount = lv_heroButton;
    }
}

void libUIUI_gf_HSUILockUnlockHeroChoise (int lp_player, bool lp_lockUnlock) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_heroSelectionSetting.lv_finalCountdownStarted == true)) {
        return ;
    }

    if ((lp_lockUnlock == true) && (libUIUI_gf_HSUIGoodToLockInForPlayer(lp_player) == false)) {
        return ;
    }

    libUIUI_gv_heroSelectionPlayer[lp_player].lv_lockedIn = lp_lockUnlock;
    if ((lp_lockUnlock == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonUnlock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonLock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    if ((TimerIsPaused(libUIUI_gv_heroSelectionSetting.lv_countdownTimer) == false) && (libUIUI_gf_HSUIAllPlayersLockedIn() == true)) {
        TriggerExecute(libUIUI_gt_HSUIIngameCountdownTimerExpires, true, false);
    }

}

void libUIUI_gf_HSUISelectHeroForPlayer (int lp_player, int lp_buttonIndex) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero == libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroArray[lp_buttonIndex])) {
        return ;
    }

    if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_lockedIn == true)) {
        return ;
    }

    libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroArray[lp_buttonIndex];
    libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm = false;
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    if ((lv_heroIndex > 0)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_abilitiesButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libUIUI_gv_hSUILoadout.lv_loadoutButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }

    if ((libUIUI_gf_HSUIGoodToLockInForPlayer(lp_player) == true)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer(lp_player, 1);
    libUIUI_gf_HSUIUpdateTalentTierLevelsForPlayer(lp_player);
    libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection(lp_player);
    libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lp_player);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[1], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1], libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[2], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2], libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer(lp_player, false);
    libUIUI_gf_HSUILoadBankDataForPlayer(lp_player);
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel == libUIUI_ge_HSUIPanelType_None)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_SkinPanel, lp_player);
    }

    libUIUI_gf_HSUIVariationsSelectVariationForPlayer(libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex, lp_player);
    libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer(lp_player);
}

bool libUIUI_gf_HSUIAllPlayersLockedIn () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7EE42AFA_g;

    // Variable Initialization

    // Implementation
    auto7EE42AFA_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7EE42AFA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == false)) {
            return false;
        }

    }
    return true;
}

void libUIUI_gf_HSUICountdownDisableAndHideStuff () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_changeHeroPanel, PlayerGroupAll(), false);
}

void libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto1A7E509D_g;

    // Variable Initialization

    // Implementation
    auto1A7E509D_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1A7E509D_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_HSUIIngameUpdateHeroButtonIconsForPlayer(lv_itPlayer);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsVisibilityForPlayer(lv_itPlayer);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsStateForPlayer(lv_itPlayer);
    }
}

void libUIUI_gf_HSUIIngameUpdateHeroButtonIconsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itButton;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto4E05546A_ae = libUIUI_gv_hSUIIngameHeroButtons;
    const int auto4E05546A_ai = 1;
    int auto0A4E6698_ae;
    const int auto0A4E6698_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itButton = (libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroCount+1);
    for ( ; ( (auto4E05546A_ai >= 0 && lv_itButton <= auto4E05546A_ae) || (auto4E05546A_ai < 0 && lv_itButton >= auto4E05546A_ae) ) ; lv_itButton += auto4E05546A_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lv_itButton], (""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    auto0A4E6698_ae = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroCount;
    lv_itButton = 1;
    for ( ; ( (auto0A4E6698_ai >= 0 && lv_itButton <= auto0A4E6698_ae) || (auto0A4E6698_ai < 0 && lv_itButton >= auto0A4E6698_ae) ) ; lv_itButton += auto0A4E6698_ai ) {
        lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroArray[lv_itButton];
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lv_itButton], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitHeroSelectScreenButton, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIIngameUpdateHeroButtonsVisibilityForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroCount;
    int lv_itButton;

    // Automatic Variable Declarations
    int auto50653B24_ae;
    const int auto50653B24_ai = 1;
    const int autoBD29801D_ae = libUIUI_gv_hSUIIngameHeroButtons;
    const int autoBD29801D_ai = 1;

    // Variable Initialization
    lv_heroCount = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroCount;

    // Implementation
    if ((libUIUI_gv_hSUIIngameHeroButtons > libUIUI_gv_hSUIIngameHeroButtonsNonCollapsed)) {
        if ((lv_heroCount < libUIUI_gv_hSUIIngameHeroButtonsNonCollapsed)) {
            lv_itButton = (libUIUI_gv_hSUIIngameHeroButtonsNonCollapsed+1);
            for ( ; ( (autoBD29801D_ai >= 0 && lv_itButton <= autoBD29801D_ae) || (autoBD29801D_ai < 0 && lv_itButton >= autoBD29801D_ae) ) ; lv_itButton += autoBD29801D_ai ) {
                DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
        }
        else {
            auto50653B24_ae = lv_heroCount;
            lv_itButton = 1;
            for ( ; ( (auto50653B24_ai >= 0 && lv_itButton <= auto50653B24_ae) || (auto50653B24_ai < 0 && lv_itButton >= auto50653B24_ae) ) ; lv_itButton += auto50653B24_ai ) {
                DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
            }
        }
    }

}

void libUIUI_gf_HSUIIngameUpdateHeroButtonsStateForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itButtonIndex;
    int lv_itPlayer;
    int lv_targetPlayer;
    int lv_heroIndex;
    int lv_heroButton;
    playergroup lv_allyTeam;

    // Automatic Variable Declarations
    const int auto6C60D0F2_ae = libUIUI_gv_hSUIIngameHeroButtons;
    const int auto6C60D0F2_ai = 1;
    int auto318DF63D_ae;
    const int auto318DF63D_ai = 1;
    playergroup auto99EE1889_g;

    // Variable Initialization
    lv_heroButton = c_invalidDialogControlId;
    lv_allyTeam = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);
    lv_itButtonIndex = 1;
    for ( ; ( (auto6C60D0F2_ai >= 0 && lv_itButtonIndex <= auto6C60D0F2_ae) || (auto6C60D0F2_ai < 0 && lv_itButtonIndex >= auto6C60D0F2_ae) ) ; lv_itButtonIndex += auto6C60D0F2_ai ) {
        lv_heroButton = libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButtonIndex];
        libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_None, lv_heroButton, lp_player);
    }
    auto318DF63D_ae = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroCount;
    lv_itButtonIndex = 1;
    for ( ; ( (auto318DF63D_ai >= 0 && lv_itButtonIndex <= auto318DF63D_ae) || (auto318DF63D_ai < 0 && lv_itButtonIndex >= auto318DF63D_ae) ) ; lv_itButtonIndex += auto318DF63D_ai ) {
        lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroArray[lv_itButtonIndex];
        lv_heroButton = libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButtonIndex];
        auto99EE1889_g = lv_allyTeam;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto99EE1889_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if (((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero <= 0) || (libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero != libUIUI_gv_heroSelectionPlayer[lp_player].lv_filledHeroArray[lv_itButtonIndex]))) {
                continue;
            }

            if ((lp_player != lv_itPlayer) && (libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero != libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero)) {
                libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_SelectedByAlly, lv_heroButton, lp_player);
                if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == true)) {
                    libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_LockedByAlly, lv_heroButton, lp_player);
                }
                else {
                    libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_Thinking, lv_heroButton, lp_player);
                }
            }
            else if ((lp_player == lv_itPlayer)) {
                libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_SelectedByMe, lv_heroButton, lp_player);
                if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == true)) {
                    libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer(libUIUI_ge_HSUIIngameCellState_LockedByMe, lv_heroButton, lp_player);
                }

            }
        }
        if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_lockedIn == true)) {
            if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero == lv_heroIndex)) {
                libUIUI_gf_HSUIIngameEnableDisableHeroButtonForPlayer(true, lv_itButtonIndex, lp_player, false);
            }
            else {
                libUIUI_gf_HSUIIngameEnableDisableHeroButtonForPlayer(false, lv_itButtonIndex, lp_player, true);
            }
        }
        else {
            libUIUI_gf_HSUIIngameEnableDisableHeroButtonForPlayer(true, lv_itButtonIndex, lp_player, false);
        }
    }
}

void libUIUI_gf_HSUIIngameUpdateSelectedHeroFrameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_selectedHeroName, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_selectedHeroRole, libCore_gf_HeroDataHeroRoleName(lv_heroIndex), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer (int lp_state, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    int auto2F3DEAC0_val;

    // Implementation
    auto2F3DEAC0_val = lp_state;
    if (auto2F3DEAC0_val == libUIUI_ge_HSUIIngameCellState_LockedByMe) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "LockedByMe", "True");
    }
    else if (auto2F3DEAC0_val == libUIUI_ge_HSUIIngameCellState_LockedByAlly) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "LockedByAlly", "True");
    }
    else if (auto2F3DEAC0_val == libUIUI_ge_HSUIIngameCellState_SelectedByMe) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedByMe", "True");
    }
    else if (auto2F3DEAC0_val == libUIUI_ge_HSUIIngameCellState_SelectedByAlly) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedByAlly", "True");
    }
    else if (auto2F3DEAC0_val == libUIUI_ge_HSUIIngameCellState_Thinking) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Thinking", "True");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "LockedByMe", "False");
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "LockedByAlly", "False");
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedByMe", "False");
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedByAlly", "False");
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Thinking", "False");
    }
}

void libUIUI_gf_HSUIIngameEnableDisableHeroButtonForPlayer (bool lp_enableDisable, int lp_button, int lp_player, bool lp_desaturated) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_heroSelectionIngame.lv_heroButton[lp_button], libCore_gv_playerGroupFromPlayer[lp_player], lp_enableDisable);
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lp_button], false, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        if ((lp_desaturated == true)) {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lp_button], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemDesaturationColor(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lp_button], Color(78.43, 78.43, 78.43), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lp_button], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_HSUIIngameUpdateTeamPanels () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itViewer;
    int lv_itRow;
    int lv_playerSlot;
    int lv_itTeam;
    int lv_heroIndex;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoA866D65E_g;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();
    lv_enemyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    autoA866D65E_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA866D65E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((GameIsOnline() == true) && (libGame_gf_PlayerIsHumanActivePlayer(lv_itPlayer) == false)) {
            continue;
        }

        lv_itTeam = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
        lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam), false);
        lv_playerSlot = libGame_gv_players[lv_itPlayer].lv_allySlot;
        lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero;
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_teamPlayerName[lv_itTeam][lv_playerSlot], libGame_gv_players[lv_itPlayer].lv_playerName, PlayerGroupAll());
        libUIUI_gf_HSUIIngameUpdatePlayerNameStyleForPlayer(lv_itPlayer);
        if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == true)) {
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Thinking", "False");
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Locked", "True");
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Selected", "False");
        }
        else {
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Thinking", "True");
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Locked", "False");
            DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Selected", "True");
        }
        if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero > 0)) {
            if ((libUIUI_gv_heroSelectionSetting.lv_finalCountdownStarted == true)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelectionIngame.lv_teamHeroImage[lv_itTeam][lv_playerSlot], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitHeroSelectScreenButton, PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_teamHeroName[lv_itTeam][lv_playerSlot], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, PlayerGroupAll());
                libUIUI_gf_HSUIIngameSetRoleAnimationStateOfDialogForPlayerGroup(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_role, libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll());
                DialogControlSetAnimationState(libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupAll(), "Selected", "False");
            }
            else {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelectionIngame.lv_teamHeroImage[lv_itTeam][lv_playerSlot], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitHeroSelectScreenButton, PlayerGroupExceptOfPlayerGroup(PlayerGroupAll(), lv_enemyPlayerGroup));
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_teamHeroName[lv_itTeam][lv_playerSlot], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, PlayerGroupExceptOfPlayerGroup(PlayerGroupAll(), lv_enemyPlayerGroup));
                libUIUI_gf_HSUIIngameSetRoleAnimationStateOfDialogForPlayerGroup(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_role, libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_playerSlot], PlayerGroupExceptOfPlayerGroup(PlayerGroupAll(), lv_enemyPlayerGroup));
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelectionIngame.lv_teamHeroImage[lv_itTeam][lv_playerSlot], "assets\\Textures\\Storm_UI_Ingame_HeroSelect_Btn_Placeholder.dds", PlayerGroupAll());
        }
    }
}

void libUIUI_gf_HSUIIngameSetRoleAnimationStateOfDialogForPlayerGroup (string lp_role, int lp_dialogItem, playergroup lp_playerGroup) {
    // Variable Declarations
    string lv_state;

    // Automatic Variable Declarations
    string auto5D58F398_val;

    // Variable Initialization
    lv_state = "";

    // Implementation
    auto5D58F398_val = lp_role;
    if (auto5D58F398_val == "Tank") {
        lv_state = "Tank";
    }
    else if (auto5D58F398_val == "Bruiser") {
        lv_state = "Bruiser";
    }
    else if (auto5D58F398_val == "AssassinRanged") {
        lv_state = "Ranged";
    }
    else if (auto5D58F398_val == "AssassinMelee") {
        lv_state = "Melee";
    }
    else if (auto5D58F398_val == "Healer") {
        lv_state = "Healer";
    }
    else if (auto5D58F398_val == "Support") {
        lv_state = "Support";
    }
    else {
        lv_state = "None";
    }
    DialogControlSetAnimationState(lp_dialogItem, lp_playerGroup, "Role", lv_state);
}

void libUIUI_gf_HSUIIngameUpdatePlayerNameStyleForPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_slot = libGame_gv_players[lp_player].lv_allySlot;

    // Implementation
    if ((libGame_gf_TeamNumberIsValid(lv_team) == true)) {
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_heroSelectionIngame.lv_teamPlayerName[lv_team][lv_slot], "CurateHeroSelection_TeamPlayerNameMe_Left", libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if ((lv_team == libGame_gv_teamChaosIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_heroSelectionIngame.lv_teamPlayerName[lv_team][lv_slot], "CurateHeroSelection_TeamPlayerNameMe", libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }

}

trigger auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_Trigger = null;
timer auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_lp_timer;

void libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown (timer lp_timer) {
    auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_lp_timer = lp_timer;

    if (auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_Trigger == null) {
        auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_Trigger = TriggerCreate("auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_Trigger, false, false);
}

bool auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown_lp_timer;

    // Variable Declarations
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_countdownLabel, FixedToText(TimerGetRemaining(lp_timer), 0), PlayerGroupAll());
        if ((TimerGetRemaining(lp_timer) < 11.0) && (TimerGetRemaining(lp_timer) > 1.0) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((TimerGetRemaining(lp_timer) < 6.0) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
        }

        if ((TimerGetRemaining(lp_timer) <= 0.0)) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

void libUIUI_gf_HSUIAttributeAbilityPanelInitialize (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;
    int lv_itAbil;
    int lv_tooltip;
    int lv_itPairedHero;
    int lv_itAbilityVariationSelector;

    // Automatic Variable Declarations
    const int autoE5439340_ae = libCore_gv_dataHeroesNumberOfPairedHeroesPerHero;
    const int autoE5439340_ai = 1;
    const int autoF3819C6A_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    const int autoF3819C6A_ai = 1;
    const int auto4DEE2FFB_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto4DEE2FFB_ai = 1;
    const int autoF721F2C0_ae = libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero;
    int autoF721F2C0_var;
    const int auto919E7A20_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto919E7A20_ai = 1;
    const int auto7DC15BE5_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto7DC15BE5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypeButton, "AbilitiesButton");
    libUIUI_gv_heroSelection.lv_abilitiesButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "HeroSelectAbilitiesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_abilitiesPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PairedHeroFrame/PairedHeroTileList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "PairedHeroFrame/FormLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList;
    lv_itPairedHero = 1;
    for ( ; ( (autoE5439340_ai >= 0 && lv_itPairedHero <= autoE5439340_ae) || (autoE5439340_ai < 0 && lv_itPairedHero >= autoE5439340_ae) ) ; lv_itPairedHero += autoE5439340_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString((lv_itPairedHero - 1)))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[lv_itPairedHero] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroContainerFrame/PortraitPanel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[lv_itPairedHero] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itAbil = 0;
    for ( ; ( (autoF3819C6A_ai >= 0 && lv_itAbil <= autoF3819C6A_ae) || (autoF3819C6A_ai < 0 && lv_itAbil >= autoF3819C6A_ae) ) ; lv_itAbil += autoF3819C6A_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(lv_itAbil))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itAbil] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_itAbil] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        lv_itAbilityVariationSelector = 1;
        for ( ; ( (auto4DEE2FFB_ai >= 0 && lv_itAbilityVariationSelector <= auto4DEE2FFB_ae) || (auto4DEE2FFB_ai < 0 && lv_itAbilityVariationSelector >= auto4DEE2FFB_ae) ) ; lv_itAbilityVariationSelector += auto4DEE2FFB_ai ) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
            libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_itAbil][lv_itAbilityVariationSelector] = DialogControlLastCreated();
        }
        lv_itCurrentPanelLayer -= 1;
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TraitTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "HeroAbilHotkeyFrame", "HotkeyAbility");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroicTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    autoF721F2C0_var = 1;
    for ( ; autoF721F2C0_var <= autoF721F2C0_ae; autoF721F2C0_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(autoF721F2C0_var))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[autoF721F2C0_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[autoF721F2C0_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[autoF721F2C0_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "ActiveTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itAbilityVariationSelector = 1;
    for ( ; ( (auto919E7A20_ai >= 0 && lv_itAbilityVariationSelector <= auto919E7A20_ae) || (auto919E7A20_ai < 0 && lv_itAbilityVariationSelector >= auto919E7A20_ae) ) ; lv_itAbilityVariationSelector += auto919E7A20_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilityVariationSelector] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PassiveTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itAbilityVariationSelector = 1;
    for ( ; ( (auto7DC15BE5_ai >= 0 && lv_itAbilityVariationSelector <= auto7DC15BE5_ae) || (auto7DC15BE5_ai < 0 && lv_itAbilityVariationSelector >= auto7DC15BE5_ae) ) ; lv_itAbilityVariationSelector += auto7DC15BE5_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilityVariationSelector] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
}

void libUIUI_gf_HSUIAttributeTalentPanelInitialize (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;
    int lv_itTalentButton;
    int lv_itTier;
    int lv_tooltip;
    int lv_itBuild;

    // Automatic Variable Declarations
    const int autoDC5FA00B_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoDC5FA00B_ai = 1;
    const int autoAF6AD588_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoAF6AD588_ai = 1;
    const int autoEE73845B_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoEE73845B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypeButton, "TalentsButton");
    libUIUI_gv_heroSelection.lv_talentsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "HeroSelectTalentsPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_talentsPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itBuild = 1;
    for ( ; ( (autoDC5FA00B_ai >= 0 && lv_itBuild <= autoDC5FA00B_ae) || (autoDC5FA00B_ai < 0 && lv_itBuild >= autoDC5FA00B_ae) ) ; lv_itBuild += autoDC5FA00B_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentBuildSelection/PageButton" + IntToString(lv_itBuild))));
        libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TalentTreePanel");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itTalentButton = 1;
    for ( ; ( (autoAF6AD588_ai >= 0 && lv_itTalentButton <= autoAF6AD588_ae) || (autoAF6AD588_ai < 0 && lv_itTalentButton >= autoAF6AD588_ae) ) ; lv_itTalentButton += autoAF6AD588_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeButton" + IntToString(lv_itTalentButton))));
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalentButton] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[(lv_itCurrentPanelLayer-1)], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Label");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[lv_itTalentButton] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itTier = 1;
    for ( ; ( (autoEE73845B_ai >= 0 && lv_itTier <= autoEE73845B_ae) || (autoEE73845B_ai < 0 && lv_itTier >= autoEE73845B_ae) ) ; lv_itTier += autoEE73845B_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTierButton" + IntToString(lv_itTier))));
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], IntToText(lv_itTier), PlayerGroupAll());
    }
    lv_itCurrentPanelLayer -= 1;
}

void libUIUI_gf_HSUIAttributeInfoPanelInitialize (int lp_parentPanel) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypeButton, "InfoButton");
    libUIUI_gv_heroSelection.lv_brawlButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void libUIUI_gf_HSUIChangeHeroChangeHeroPanelInitialize (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "ChangeHeroPanel");
    libUIUI_gv_heroSelection.lv_changeHeroPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroFilterPanel");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterTankButton");
    libUIUI_gv_heroSelection.lv_filterRoleTankButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterBruiserButton");
    libUIUI_gv_heroSelection.lv_filterRoleBruiserButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterRangedDamageButton");
    libUIUI_gv_heroSelection.lv_filterRoleRangedAssasinButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterMeleeDamageButton");
    libUIUI_gv_heroSelection.lv_filterRoleMeleeAssasinButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterHealerButton");
    libUIUI_gv_heroSelection.lv_filterRoleHealerButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterSupportButton");
    libUIUI_gv_heroSelection.lv_filterRoleSupportButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterWarcraftButton");
    libUIUI_gv_heroSelection.lv_filterUniverseWarCraftButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterStarCraftButton");
    libUIUI_gv_heroSelection.lv_filterUniverseStarCraftButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterDiabloButton");
    libUIUI_gv_heroSelection.lv_filterUniverseDiabloButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterOverwatchButton");
    libUIUI_gv_heroSelection.lv_filterUniverseOverwatchButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "FilterRetroButton");
    libUIUI_gv_heroSelection.lv_filterUniverseNexusButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeEditBox, "FilterEditBox");
    libUIUI_gv_heroSelection.lv_filterEditBox = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;
}

void libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer (int lp_player, bool lp_choosePaired) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_abilityIndex;
    int lv_itHeroicAbil;
    int lv_itInt;
    int lv_basicAbilitySlot;
    int lv_itAbil;
    int lv_itAbilSelectorButton;
    int lv_itAbilVariations;
    string lv_currentAbilityType;
    string lv_currentAbilitySlot;

    // Automatic Variable Declarations
    const int autoE8A25AF0_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    const int autoE8A25AF0_ai = 1;
    const int auto7C03C7B7_ae = libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero;
    const int auto7C03C7B7_ai = 1;
    int auto4073EC61_ae;
    const int auto4073EC61_ai = 1;
    string autoA75CCBDA_val;
    string autoFC65CEFB_val;
    const int auto0C7EFA4A_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto0C7EFA4A_ai = 1;
    int autoF8895002_ae;
    const int autoF8895002_ai = 1;
    const int auto7D38F3AB_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto7D38F3AB_ai = 1;
    int autoB7D269FF_ae;
    const int autoB7D269FF_ai = 1;
    const int autoDB2FA0D5_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoDB2FA0D5_ai = 1;
    int auto81647F6C_ae;
    const int auto81647F6C_ai = 1;
    const int auto4F63161D_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto4F63161D_ai = 1;
    int autoC4256DC9_ae;
    const int autoC4256DC9_ai = 1;
    const int autoD1764FFA_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoD1764FFA_ai = 1;
    int autoF7C4B4CF_ae;
    const int autoF7C4B4CF_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    lv_itInt = 0;
    for ( ; ( (autoE8A25AF0_ai >= 0 && lv_itInt <= autoE8A25AF0_ae) || (autoE8A25AF0_ai < 0 && lv_itInt >= autoE8A25AF0_ae) ) ; lv_itInt += autoE8A25AF0_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_itInt = 1;
    for ( ; ( (auto7C03C7B7_ai >= 0 && lv_itInt <= auto7C03C7B7_ae) || (auto7C03C7B7_ai < 0 && lv_itInt >= auto7C03C7B7_ae) ) ; lv_itInt += auto7C03C7B7_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm = lp_choosePaired;
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[1], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1], libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[2], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2], libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], true);
        if ((libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm == true)) {
            libUIUI_gf_HSUIUpdatePairedSelectionForPlayer(lp_player, 2);
        }
        else {
            libUIUI_gf_HSUIUpdatePairedSelectionForPlayer(lp_player, 1);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel, libCore_gf_HeroDataHeroRoleName(lv_heroIndex), libCore_gv_playerGroupFromPlayer[lp_player]);
    auto4073EC61_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; ( (auto4073EC61_ai >= 0 && lv_itAbil <= auto4073EC61_ae) || (auto4073EC61_ai < 0 && lv_itAbil >= auto4073EC61_ae) ) ; lv_itAbil += auto4073EC61_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_ShowInHeroSelection == false)) {
            continue;
        }

        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired == true)) {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired1") && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm == true)) {
                continue;
            }
            else if ((libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2") && (libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm == false)) {
                continue;
            }
        }

        lv_currentAbilityType = libCore_gv_abilityData[lv_abilityIndex].lv_type;
        lv_currentAbilitySlot = libCore_gv_abilityData[lv_abilityIndex].lv_slot;
        autoA75CCBDA_val = lv_currentAbilityType;
        if (autoA75CCBDA_val == "Basic") {
            autoFC65CEFB_val = lv_currentAbilitySlot;
            if (autoFC65CEFB_val == "Mount") {
                lv_basicAbilitySlot = 0;
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            else if (autoFC65CEFB_val == "Basic1") {
                lv_basicAbilitySlot = 1;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic1", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto0C7EFA4A_ai >= 0 && lv_itAbilSelectorButton <= auto0C7EFA4A_ae) || (auto0C7EFA4A_ai < 0 && lv_itAbilSelectorButton >= auto0C7EFA4A_ae) ) ; lv_itAbilSelectorButton += auto0C7EFA4A_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        autoF8895002_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoF8895002_ai >= 0 && lv_itAbilSelectorButton <= autoF8895002_ae) || (autoF8895002_ai < 0 && lv_itAbilSelectorButton >= autoF8895002_ae) ) ; lv_itAbilSelectorButton += autoF8895002_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else if (autoFC65CEFB_val == "Basic2") {
                lv_basicAbilitySlot = 2;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic2", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto7D38F3AB_ai >= 0 && lv_itAbilSelectorButton <= auto7D38F3AB_ae) || (auto7D38F3AB_ai < 0 && lv_itAbilSelectorButton >= auto7D38F3AB_ae) ) ; lv_itAbilSelectorButton += auto7D38F3AB_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        autoB7D269FF_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoB7D269FF_ai >= 0 && lv_itAbilSelectorButton <= autoB7D269FF_ae) || (autoB7D269FF_ai < 0 && lv_itAbilSelectorButton >= autoB7D269FF_ae) ) ; lv_itAbilSelectorButton += autoB7D269FF_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else if (autoFC65CEFB_val == "Basic3") {
                lv_basicAbilitySlot = 3;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic3", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoDB2FA0D5_ai >= 0 && lv_itAbilSelectorButton <= autoDB2FA0D5_ae) || (autoDB2FA0D5_ai < 0 && lv_itAbilSelectorButton >= autoDB2FA0D5_ae) ) ; lv_itAbilSelectorButton += autoDB2FA0D5_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        auto81647F6C_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto81647F6C_ai >= 0 && lv_itAbilSelectorButton <= auto81647F6C_ae) || (auto81647F6C_ai < 0 && lv_itAbilSelectorButton >= auto81647F6C_ae) ) ; lv_itAbilSelectorButton += auto81647F6C_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else {
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, lv_currentAbilitySlot);
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Trait") {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Heroic") {
            lv_itHeroicAbil += 1;
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itHeroicAbil], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Active") {
            lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Active", lp_choosePaired);
            if ((lv_itAbilVariations > 1)) {
                if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                    continue;
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], true);
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (auto4F63161D_ai >= 0 && lv_itAbilSelectorButton <= auto4F63161D_ae) || (auto4F63161D_ai < 0 && lv_itAbilSelectorButton >= auto4F63161D_ae) ) ; lv_itAbilSelectorButton += auto4F63161D_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    }
                    autoC4256DC9_ae = lv_itAbilVariations;
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoC4256DC9_ai >= 0 && lv_itAbilSelectorButton <= autoC4256DC9_ae) || (autoC4256DC9_ai < 0 && lv_itAbilSelectorButton >= autoC4256DC9_ae) ) ; lv_itAbilSelectorButton += autoC4256DC9_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    }
                }
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, "Active");
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Passive") {
            lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "[Default]", false);
            if ((lv_itAbilVariations > 1)) {
                if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                    continue;
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], true);
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoD1764FFA_ai >= 0 && lv_itAbilSelectorButton <= autoD1764FFA_ae) || (autoD1764FFA_ai < 0 && lv_itAbilSelectorButton >= autoD1764FFA_ae) ) ; lv_itAbilSelectorButton += autoD1764FFA_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    }
                    autoF7C4B4CF_ae = lv_itAbilVariations;
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoF7C4B4CF_ai >= 0 && lv_itAbilSelectorButton <= autoF7C4B4CF_ae) || (autoF7C4B4CF_ai < 0 && lv_itAbilSelectorButton >= autoF7C4B4CF_ae) ) ; lv_itAbilSelectorButton += autoF7C4B4CF_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    }
                }
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, "[Default]");
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
        }
    }
}

void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer (int lp_player, int lp_newVariation, string lp_heroAbilitySlot) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbilVariation;
    int lv_oldVariation;
    int lv_abilityIndex;
    int lv_basicAbilitySlot;
    bool lv_paired;

    // Automatic Variable Declarations
    string autoDCBE3016_val;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_paired = libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm;

    // Implementation
    if ((libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, lp_heroAbilitySlot, lv_paired) == 1)) {
        return ;
    }

    autoDCBE3016_val = lp_heroAbilitySlot;
    if (autoDCBE3016_val == "Active") {
        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledActive;
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledActive = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoDCBE3016_val == "Passive") {
        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledPassive;
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledPassive = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        if ((lp_heroAbilitySlot == "Basic1")) {
            lv_basicAbilitySlot = 1;
        }
        else if ((lp_heroAbilitySlot == "Basic2")) {
            lv_basicAbilitySlot = 2;
        }
        else if ((lp_heroAbilitySlot == "Basic3")) {
            lv_basicAbilitySlot = 3;
        }
        if ((lv_basicAbilitySlot == 0)) {
            return ;
        }

        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledBasic[lv_basicAbilitySlot];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledBasic[lv_basicAbilitySlot] = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple (int lp_player, int lp_newVariation, string lp_heroAbilitySlot) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_oldVariation;
    int lv_basicAbilitySlot;
    bool lv_paired;

    // Automatic Variable Declarations
    string auto06E990AD_val;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_paired = libUIUI_gv_heroSelectionPlayer[lp_player].lv_pairedHeroForm;

    // Implementation
    if ((libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, lp_heroAbilitySlot, lv_paired) == 1)) {
        return ;
    }

    auto06E990AD_val = lp_heroAbilitySlot;
    if (auto06E990AD_val == "Active") {
        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledActive;
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledActive = lp_newVariation;
    }
    else if (auto06E990AD_val == "Passive") {
        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledPassive;
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledPassive = lp_newVariation;
    }
    else {
        if ((lp_heroAbilitySlot == "Basic1")) {
            lv_basicAbilitySlot = 1;
        }
        else if ((lp_heroAbilitySlot == "Basic2")) {
            lv_basicAbilitySlot = 2;
        }
        else if ((lp_heroAbilitySlot == "Basic3")) {
            lv_basicAbilitySlot = 3;
        }
        if ((lv_basicAbilitySlot == 0)) {
            return ;
        }

        lv_oldVariation = libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledBasic[lv_basicAbilitySlot];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionPlayer[lp_player].lv_abilitySelectorToggledBasic[lv_basicAbilitySlot] = lp_newVariation;
    }
}

void libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer (int lp_player, int lp_talentTier) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;
    int lv_itTalent;
    int lv_itTierButton;
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoBDEFB2FD_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoBDEFB2FD_ai = 1;
    const int autoD3ED2C65_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoD3ED2C65_ai = 1;
    string autoA8982FDF_val;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libUIUI_gv_heroSelectionPlayer[lp_player].lv_talentTierPressedButton = lp_talentTier;
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelNameLabel, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel, libCore_gf_HeroDataHeroRoleName(lv_heroIndex), libCore_gv_playerGroupFromPlayer[lp_player]);
    lv_itTierButton = 1;
    for ( ; ( (autoBDEFB2FD_ai >= 0 && lv_itTierButton <= autoBDEFB2FD_ae) || (autoBDEFB2FD_ai < 0 && lv_itTierButton >= autoBDEFB2FD_ae) ) ; lv_itTierButton += autoBDEFB2FD_ai ) {
        if ((lv_itTierButton == lp_talentTier)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lp_talentTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTierButton], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    lv_itTalent = 1;
    for ( ; ( (autoD3ED2C65_ai >= 0 && lv_itTalent <= autoD3ED2C65_ae) || (autoD3ED2C65_ai < 0 && lv_itTalent >= autoD3ED2C65_ae) ) ; lv_itTalent += autoD3ED2C65_ai ) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_talentTier][lv_itTalent];
        if ((lv_talentIndex == 0)) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], libCore_gv_playerGroupFromPlayer[lp_player]);
            autoA8982FDF_val = libCore_gv_talentData[lv_talentIndex].lv_talentType;
            if (autoA8982FDF_val == "Active") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Active, lp_player);
                if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else if (autoA8982FDF_val == "Passive") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Passive, lp_player);
                if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else {
                if ((libCore_gv_abilityData[libCore_gv_talentData[lv_talentIndex].lv_abilityIndex].lv_slot == "Heroic")) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Heroic, lp_player);
                    if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                }
                else if (true) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Basic, lp_player);
                    if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                }
            }
        }
    }
}

void libUIUI_gf_HSUIUpdateTalentTierLevelsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto87840017_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto87840017_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto87840017_ai >= 0 && lv_itTier <= auto87840017_ae) || (auto87840017_ai < 0 && lv_itTier >= auto87840017_ae) ) ; lv_itTier += auto87840017_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], IntToText(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier]), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIUpdatePairedSelectionForPlayer (int lp_player, int lp_pairedSelectedPortraitNumber) {
    // Variable Declarations
    int lv_number;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_number = (lp_pairedSelectedPortraitNumber-1);
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_namePaired[lp_pairedSelectedPortraitNumber], libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], "SelectionText", ("Item" + IntToString(lv_number) + "Selected"));
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[lp_pairedSelectedPortraitNumber], libCore_gv_playerGroupFromPlayer[lp_player], "SelectionToggle", "Selected");
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[(3 - lp_pairedSelectedPortraitNumber)], libCore_gv_playerGroupFromPlayer[lp_player], "SelectionToggle", "Unselected");
}

void libUIUI_gf_HSUILoadoutInitialization (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itButton;
    int lv_tooltip;

    // Automatic Variable Declarations
    const int auto63453698_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto63453698_ai = 1;
    const int autoBABAFA33_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int autoBABAFA33_ai = 1;
    const int auto424BF27C_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto424BF27C_ai = 1;
    const int autoE4F1A0EB_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int autoE4F1A0EB_ai = 1;
    const int auto4BB2F29E_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto4BB2F29E_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypeButton, "LoadoutsButton");
    libUIUI_gv_hSUILoadout.lv_loadoutButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "HeroSelectLoadoutPanel");
    libUIUI_gv_hSUILoadout.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CutscenePreviewFrame");
    libUIUI_gv_hSUILoadout.lv_previewPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "CutscenePreviewFrame/MountPreviewCutscene");
    libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseInfoPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PurchaseInfoPanel/NameLabel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PurchaseInfoPanel/DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelDescription = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseCurrencySelectPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseConfirmPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PurchaseConfirmPanel/ConfirmButton");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelConfirmButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PurchaseConfirmPanel/CancelButton");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelCancelButton = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutSelectionPanel");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "LoadoutSelectionPanel/LoadoutSelectorPulldown");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("1"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("2"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[2] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("3"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[3] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "LoadoutSelectionPanel/LoadoutNameEditBox");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LoadoutPanelTabs/SkinsButton");
    libUIUI_gv_hSUILoadout.lv_skinsButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LoadoutPanelTabs/MountsButton");
    libUIUI_gv_hSUILoadout.lv_mountButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LoadoutPanelTabs/AnnouncerPacksButton");
    libUIUI_gv_hSUILoadout.lv_announcerPacksButton = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutPanelTabs/PanelContainer/SkinsPanel");
    libUIUI_gv_hSUILoadout.lv_skinsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedContentLabel");
    libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "OwnershipFilterPulldown");
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/AllContent"));
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/NewContent"));
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[2] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "SearchEditBox");
    libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "ScrollEditBox");
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "ContentTileList/ScrollBar");
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (auto63453698_ai >= 0 && lv_itButton <= auto63453698_ae) || (auto63453698_ai < 0 && lv_itButton >= auto63453698_ae) ) ; lv_itButton += auto63453698_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itButton] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeCutscene, "PortraitCutscene");
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButtonCutscene[lv_itButton] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutPanelTabs/PanelContainer/MountsPanel");
    libUIUI_gv_hSUILoadout.lv_mountsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedContentLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "OwnershipFilterPulldown");
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/AllContent"));
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/NewContent"));
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[2] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "SearchEditBox");
    libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "ScrollEditBox");
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "ContentTileList/ScrollBar");
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (autoBABAFA33_ai >= 0 && lv_itButton <= autoBABAFA33_ae) || (autoBABAFA33_ai < 0 && lv_itButton >= autoBABAFA33_ae) ) ; lv_itButton += autoBABAFA33_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton] = DialogControlLastCreated();
    }
    lv_itButton = 1;
    for ( ; ( (auto424BF27C_ai >= 0 && lv_itButton <= auto424BF27C_ae) || (auto424BF27C_ai < 0 && lv_itButton >= auto424BF27C_ae) ) ; lv_itButton += auto424BF27C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("CategoryTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MountReplacementContainer/MountReplacementTileList/Item0");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_currentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_currentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltip = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemHotkeyLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternalHotkey("UI/Hotkey/CommandButton08"), PlayerGroupAll());
    lv_currentPanelLayer -= 1;

    lv_currentPanelLayer -= 1;

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutPanelTabs/PanelContainer/AnnouncerPacksPanel");
    libUIUI_gv_hSUILoadout.lv_announcersPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedContentLabel");
    libUIUI_gv_hSUILoadout.lv_announcersPanelSelectedContentLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "OwnershipFilterPulldown");
    libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/AllContent"));
    libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/NewContent"));
    libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldownListItem[2] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "SearchEditBox");
    libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "ScrollEditBox");
    libUIUI_gv_hSUILoadout.lv_announcersPanelScrollEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "ContentTileList/ScrollBar");
    libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (autoE4F1A0EB_ai >= 0 && lv_itButton <= autoE4F1A0EB_ae) || (autoE4F1A0EB_ai < 0 && lv_itButton >= autoE4F1A0EB_ae) ) ; lv_itButton += autoE4F1A0EB_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)) + "/PreviewButton")));
        libUIUI_gv_hSUILoadout.lv_announcersPanelItemPreviewButton[lv_itButton] = DialogControlLastCreated();
    }
    lv_itButton = 1;
    for ( ; ( (auto4BB2F29E_ai >= 0 && lv_itButton <= auto4BB2F29E_ae) || (auto4BB2F29E_ai < 0 && lv_itButton >= auto4BB2F29E_ae) ) ; lv_itButton += auto4BB2F29E_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("CategoryTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itButton] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;

    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutEditBoxTextChanges, true);
}

int libUIUI_gf_HSUILoadoutGetMaxLaneCount (int lp_maxItemsCount, int lp_itemsPerLane, int lp_panel) {
    // Variable Declarations
    fixed lv_remainder;
    int lv_laneCount;

    // Automatic Variable Declarations
    int auto90624106_val;

    // Variable Initialization

    // Implementation
    lv_laneCount = (lp_maxItemsCount / lp_itemsPerLane);
    lv_remainder = ModF(lp_maxItemsCount, lp_itemsPerLane);
    if ((lv_remainder > 0.0)) {
        lv_laneCount += 1;
    }

    auto90624106_val = lp_panel;
    if (auto90624106_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        lv_laneCount -= libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C;
    }
    else if (auto90624106_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        lv_laneCount -= libUIUI_gv_hSUILoadoutMaxMountLaneCount_C;
    }
    else if (auto90624106_val == libUIUI_ge_HSUIPanelType_AnnouncerPanel) {
        lv_laneCount -= libUIUI_gv_hSUILoadoutMaxAnnouncerLaneCount_C;
    }
    else {
    }
    lv_laneCount += 1;
    return lv_laneCount;
}

void libUIUI_gf_HSUISetScrollBarValueForPlayer (int lp_scrollBar, fixed lp_value, int lp_player) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = (lp_value - 1.0);
    libNtve_gf_SetDialogItemCurrentValue(lp_scrollBar, (lv_value * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer (int lp_scrollBar, fixed lp_valueMin, fixed lp_valueMax, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMinimumValue(lp_scrollBar, (lp_valueMin * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemMaximumValue(lp_scrollBar, (lp_valueMax * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUIVariationsFillVariationDataForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, lp_player);
}

void libUIUI_gf_HSUIVariationsUpdateEditBoxNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_selectedLoadout;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libNtve_gf_SetDialogItemEditorValue(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox, libCore_gf_ConvertTextToString(libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutName[lv_selectedLoadout]), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUIVariationsSelectVariationForPlayer (int lp_variation, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, libCore_gv_playerGroupFromPlayer[lp_player], lp_variation);
}

bool libUIUI_gf_HSUISkinsSkinItemButtonIsSelectedForPlayer (int lp_player, int lp_item) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_item] > 0) && (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_item] == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex)) {
        return true;
    }

    return false;
}

bool libUIUI_gf_HSUISkinsCompareSearchTextForPlayer (int lp_skin, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataSkinsSkinData[lp_skin].lv_name), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataSkinsSkinData[lp_skin].lv_additionalSearchText), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

void libUIUI_gf_HSUISkinsSetLoadoutSkinItemToSkinForPlayer (int lp_skinIndex, int lp_dialogItemIndex, int lp_player) {
    // Variable Declarations
    int lv_cutsceneFrame;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cutsceneFrame = c_invalidDialogControlId;

    // Implementation
    lv_cutsceneFrame = libUIUI_gv_hSUILoadout.lv_skinsPanelItemButtonCutscene[lp_dialogItemIndex];
    lv_variation = libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinVariationNumber;
    libNtve_gf_SetDialogItemCutscene(lv_cutsceneFrame, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_miniPortraitCutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_dialogItemIndex] = lp_skinIndex;
}

void libUIUI_gf_HSUISkinsFillLoadoutSkinDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentLane;
    int lv_maxSkinCount;
    int lv_maxItemsPerLane;
    int lv_heroIndex;
    int lv_minSkinInItem;
    int lv_maxSkinInItem;
    int lv_itSkin;
    int lv_itSkinArrayIndex;
    int lv_laneDiff;
    int lv_filledSkinTotalCountCalculation;

    // Automatic Variable Declarations
    int auto8A84A0E3_ae;
    const int auto8A84A0E3_ai = 1;
    const int auto2DD37790_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto2DD37790_ai = 1;
    int autoD32F9F4E_ae;
    const int autoD32F9F4E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_maxSkinCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
    lv_maxItemsPerLane = (libUIUI_gv_hSUILoadoutMaxSkinItemCount_C / libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C);
    if ((lv_maxSkinCount <= libUIUI_gv_hSUILoadoutMaxSkinItemCount_C)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount = 1;
        lv_itSkin = lv_maxSkinCount;
        for ( ; ( (auto2DD37790_ai >= 0 && lv_itSkin <= auto2DD37790_ae) || (auto2DD37790_ai < 0 && lv_itSkin >= auto2DD37790_ae) ) ; lv_itSkin += auto2DD37790_ai ) {
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = 0;
        }
        lv_itSkin = 0;
        autoD32F9F4E_ae = lv_maxSkinCount;
        lv_itSkinArrayIndex = 1;
        for ( ; ( (autoD32F9F4E_ai >= 0 && lv_itSkinArrayIndex <= autoD32F9F4E_ae) || (autoD32F9F4E_ai < 0 && lv_itSkinArrayIndex >= autoD32F9F4E_ae) ) ; lv_itSkinArrayIndex += autoD32F9F4E_ai ) {
            lv_itSkin += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkinArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] > 0)) {
                lv_filledSkinTotalCountCalculation += 1;
            }

        }
    }
    else {
        lv_currentLane = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinCurrentLane;
        lv_minSkinInItem = ((lv_maxItemsPerLane*lv_currentLane)-lv_maxItemsPerLane+1);
        lv_laneDiff = (libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C - 1);
        lv_maxSkinInItem = (lv_maxItemsPerLane*(lv_currentLane+lv_laneDiff));
        lv_itSkin = 0;
        auto8A84A0E3_ae = lv_maxSkinInItem;
        lv_itSkinArrayIndex = lv_minSkinInItem;
        for ( ; ( (auto8A84A0E3_ai >= 0 && lv_itSkinArrayIndex <= auto8A84A0E3_ae) || (auto8A84A0E3_ai < 0 && lv_itSkinArrayIndex >= auto8A84A0E3_ae) ) ; lv_itSkinArrayIndex += auto8A84A0E3_ai ) {
            lv_itSkin += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkinArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] > 0)) {
                lv_filledSkinTotalCountCalculation += 1;
            }

        }
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount = libUIUI_gf_HSUILoadoutGetMaxLaneCount(lv_maxSkinCount, lv_maxItemsPerLane, libUIUI_ge_HSUIPanelType_SkinPanel);
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinTotalCount = lv_filledSkinTotalCountCalculation;
}

void libUIUI_gf_HSUISkinsFillTempArrayForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itSkin;
    int lv_skinIndex;

    // Automatic Variable Declarations
    int auto5B6256BD_ae;
    const int auto5B6256BD_ai = 1;
    int auto4A1C01E7_val;
    int autoB14DA1FD_ae;
    const int autoB14DA1FD_ai = 1;
    int auto29B884F9_ae;
    const int auto29B884F9_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    auto5B6256BD_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto5B6256BD_ai >= 0 && lv_itSkin <= auto5B6256BD_ae) || (auto5B6256BD_ai < 0 && lv_itSkin >= auto5B6256BD_ae) ) ; lv_itSkin += auto5B6256BD_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkin] = 0;
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount = 0;
    auto4A1C01E7_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, lp_player);
    if (auto4A1C01E7_val == 1) {
        autoB14DA1FD_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (autoB14DA1FD_ai >= 0 && lv_itSkin <= autoB14DA1FD_ae) || (autoB14DA1FD_ai < 0 && lv_itSkin >= autoB14DA1FD_ae) ) ; lv_itSkin += autoB14DA1FD_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
        }
    }
    else if (auto4A1C01E7_val == 2) {
        auto29B884F9_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (auto29B884F9_ai >= 0 && lv_itSkin <= auto29B884F9_ae) || (auto29B884F9_ai < 0 && lv_itSkin >= auto29B884F9_ae) ) ; lv_itSkin += auto29B884F9_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            if ((libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_isNew == true)) {
                libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
            }

        }
    }
    else {
    }
}

void libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer (int lp_skinIndex, int lp_player) {
    // Variable Declarations
    int lv_storedSkinCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUISkinsCompareSearchTextForPlayer(lp_skinIndex, lp_player) == true)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount += 1;
        lv_storedSkinCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_storedSkinCount] = lp_skinIndex;
    }

}

bool libUIUI_gf_HSUIMountsMountItemButtonIsSelectedForPlayer (int lp_player, int lp_item) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_item] > 0) && (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_item] == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex)) {
        return true;
    }

    return false;
}

bool libUIUI_gf_HSUIMountsMountIsInTempArrayForPlayer (int lp_mountIndex, int lp_player) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoFD0EDBD0_ae;
    const int autoFD0EDBD0_ai = 1;

    // Variable Initialization

    // Implementation
    autoFD0EDBD0_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_itMount = 1;
    for ( ; ( (autoFD0EDBD0_ai >= 0 && lv_itMount <= autoFD0EDBD0_ae) || (autoFD0EDBD0_ai < 0 && lv_itMount >= autoFD0EDBD0_ae) ) ; lv_itMount += autoFD0EDBD0_ai ) {
        if ((lp_mountIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMount])) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIMountsCollapsedForPlayer (int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }

    return false;
}

int libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBoxValue[lp_player] == null)) {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_Collapsed_C;
    }
    else {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    }
}

bool libUIUI_gf_HSUIMountsCompareSearchTextForPlayer (int lp_mount, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataMountsMountData[lp_mount].lv_mountName), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataMountsMountData[lp_mount].lv_mountAdditionalSearchTextWord), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

int libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer (int lp_player) {
    // Variable Declarations
    int lv_mountIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;

    // Implementation
    return libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory);
}

void libUIUI_gf_HSUISetMountCategoryItemTextForPlayer (int lp_dialogItem, text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_dialogItem, c_triggerControlTypeLabel, "CategoryLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUISetLoadoutMountItemToMountForPlayer (int lp_mountIndex, int lp_dialogItemIndex, int lp_player) {
    // Variable Declarations
    int lv_cutsceneFrame;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cutsceneFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lp_dialogItemIndex], c_triggerControlTypeCutscene, "PortraitCutscene");
    lv_cutsceneFrame = DialogControlLastCreated();
    lv_variation = libCore_gv_dataMountsMountData[lp_mountIndex].lv_mountVariation;
    libNtve_gf_SetDialogItemCutscene(lv_cutsceneFrame, libCore_gv_dataMountsMountData[lp_mountIndex].lv_miniPortraitCutsceneFile, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_dialogItemIndex] = lp_mountIndex;
}

void libUIUI_gf_HSUIMountsFillLoadoutMountDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentLane;
    int lv_maxMountCount;
    int lv_maxItemsPerLane;
    int lv_heroIndex;
    int lv_minSkinInItem;
    int lv_maxSkinInItem;
    int lv_itMount;
    int lv_itMountArrayIndex;
    int lv_laneDiff;
    bool lv_playerAccesMount;
    int lv_mountIndex;
    int lv_maxVisibleItems;
    bool lv_collapsed;
    int lv_filledMountTotalCountCalculation;

    // Automatic Variable Declarations
    int autoDE727823_ae;
    const int autoDE727823_ai = 1;
    int auto3A4B078D_ae;
    const int auto3A4B078D_ai = 1;
    int auto5FA94F98_ae;
    const int auto5FA94F98_ai = 1;

    // Variable Initialization

    // Implementation
    lv_collapsed = libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player);
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_maxMountCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_maxVisibleItems = libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItemsPerLane = (lv_maxVisibleItems / libUIUI_gv_hSUILoadoutMaxMountLaneCount_C);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountTotalCount = lv_maxMountCount;
    if ((lv_maxMountCount <= lv_maxVisibleItems)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount = 1;
        auto3A4B078D_ae = lv_maxVisibleItems;
        lv_itMount = lv_maxMountCount;
        for ( ; ( (auto3A4B078D_ai >= 0 && lv_itMount <= auto3A4B078D_ae) || (auto3A4B078D_ai < 0 && lv_itMount >= auto3A4B078D_ae) ) ; lv_itMount += auto3A4B078D_ai ) {
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = 0;
        }
        lv_itMount = 0;
        auto5FA94F98_ae = lv_maxMountCount;
        lv_itMountArrayIndex = 1;
        for ( ; ( (auto5FA94F98_ai >= 0 && lv_itMountArrayIndex <= auto5FA94F98_ae) || (auto5FA94F98_ai < 0 && lv_itMountArrayIndex >= auto5FA94F98_ae) ) ; lv_itMountArrayIndex += auto5FA94F98_ai ) {
            lv_itMount += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMountArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] > 0)) {
                lv_filledMountTotalCountCalculation += 1;
            }

        }
    }
    else {
        lv_currentLane = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountCurrentLane;
        lv_minSkinInItem = ((lv_maxItemsPerLane*lv_currentLane)-lv_maxItemsPerLane+1);
        lv_laneDiff = (libUIUI_gv_hSUILoadoutMaxMountLaneCount_C - 1);
        lv_maxSkinInItem = (lv_maxItemsPerLane*(lv_currentLane+lv_laneDiff));
        lv_itMount = 0;
        autoDE727823_ae = lv_maxSkinInItem;
        lv_itMountArrayIndex = lv_minSkinInItem;
        for ( ; ( (autoDE727823_ai >= 0 && lv_itMountArrayIndex <= autoDE727823_ae) || (autoDE727823_ai < 0 && lv_itMountArrayIndex >= autoDE727823_ae) ) ; lv_itMountArrayIndex += autoDE727823_ai ) {
            lv_itMount += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMountArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] > 0)) {
                lv_filledMountTotalCountCalculation += 1;
            }

        }
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount = libUIUI_gf_HSUILoadoutGetMaxLaneCount(lv_maxMountCount, lv_maxItemsPerLane, libUIUI_ge_HSUIPanelType_MountPanel);
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinTotalCount = lv_filledMountTotalCountCalculation;
}

void libUIUI_gf_HSUIMountsFillTempArrayForPlayer (int lp_categoryButtonIndex, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itMount;
    int lv_mountIndex;

    // Automatic Variable Declarations
    int auto8157E975_ae;
    const int auto8157E975_ai = 1;
    int auto4A73335E_val;
    int autoE5BAF6DD_ae;
    const int autoE5BAF6DD_ai = 1;
    int auto95482336_ae;
    const int auto95482336_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    auto8157E975_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_itMount = 1;
    for ( ; ( (auto8157E975_ai >= 0 && lv_itMount <= auto8157E975_ae) || (auto8157E975_ai < 0 && lv_itMount >= auto8157E975_ae) ) ; lv_itMount += auto8157E975_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMount] = 0;
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount = 0;
    auto4A73335E_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, lp_player);
    if (auto4A73335E_val == 1) {
        autoE5BAF6DD_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (autoE5BAF6DD_ai >= 0 && lv_itMount <= autoE5BAF6DD_ae) || (autoE5BAF6DD_ai < 0 && lv_itMount >= autoE5BAF6DD_ae) ) ; lv_itMount += autoE5BAF6DD_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
        }
    }
    else if (auto4A73335E_val == 2) {
        auto95482336_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (auto95482336_ai >= 0 && lv_itMount <= auto95482336_ae) || (auto95482336_ai < 0 && lv_itMount >= auto95482336_ae) ) ; lv_itMount += auto95482336_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_isNew == true)) {
                libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
            }

        }
    }
    else {
    }
}

void libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itCategoryButton;
    int lv_mountIndex;
    int lv_itMount;
    int lv_categoryIndex;
    string lv_itInstance;

    // Automatic Variable Declarations
    const int auto86D6C403_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto86D6C403_ai = 1;
    string auto1D5F86D7_userType;
    int auto1D5F86D7_i;
    int autoC55E851D_ae;
    const int autoC55E851D_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (auto86D6C403_ai >= 0 && lv_itCategoryButton <= auto86D6C403_ae) || (auto86D6C403_ai < 0 && lv_itCategoryButton >= auto86D6C403_ae) ) ; lv_itCategoryButton += auto86D6C403_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] = 0;
    }
    lv_itCategoryButton = 0;
    auto1D5F86D7_userType = "MountCollectionCategory";
    auto1D5F86D7_i = 1;
    for ( ; auto1D5F86D7_i <= UserDataInstanceCount(auto1D5F86D7_userType) ; auto1D5F86D7_i += 1 ) {
        lv_itInstance = UserDataInstance(auto1D5F86D7_userType, auto1D5F86D7_i);
        autoC55E851D_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (autoC55E851D_ai >= 0 && lv_itMount <= autoC55E851D_ae) || (autoC55E851D_ai < 0 && lv_itMount >= autoC55E851D_ae) ) ; lv_itMount += autoC55E851D_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            if ((lv_itInstance == libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory) && (libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayPulldownAccessForPlayer(lv_mountIndex, lp_player) == true)) {
                lv_itCategoryButton += 1;
                lv_categoryIndex = libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", lv_itInstance);
                libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] = lv_categoryIndex;
                break;
            }

        }
    }
}

void libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player) {
    // Variable Declarations
    int lv_storedMountCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUIMountsFillTempArrayMountIsValidForPlayer(lp_categoryButtonIndex, lp_mountIndex, lp_player) == true)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount += 1;
        lv_storedMountCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_storedMountCount] = lp_mountIndex;
    }

}

bool libUIUI_gf_HSUIMountsFillTempArrayMountIsValidForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player) {
    // Variable Declarations
    string lv_categoryInstance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player) == false)) {
        if ((libUIUI_gf_HSUIMountsCompareSearchTextForPlayer(lp_mountIndex, lp_player) == true)) {
            return true;
        }

    }
    else {
        lv_categoryInstance = libCore_gv_dataMountsMountData[lp_mountIndex].lv_collectionCategory;
        if ((libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", lv_categoryInstance) == lp_categoryButtonIndex)) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayPulldownAccessForPlayer (int lp_mountIndex, int lp_player) {
    // Automatic Variable Declarations
    int auto51242C98_val;

    // Implementation
    auto51242C98_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, lp_player);
    if (auto51242C98_val == 1) {
        return true;
    }
    else if (auto51242C98_val == 2) {
        return libCore_gv_dataMountsMountData[lp_mountIndex].lv_isNew;
    }
    else {
    }
    return true;
}

void libUIUI_gf_HSUIMountsUpdateMountCollectionCategoryButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itCategoryButton;

    // Automatic Variable Declarations
    const int autoE347A98D_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoE347A98D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (autoE347A98D_ai >= 0 && lv_itCategoryButton <= autoE347A98D_ae) || (autoE347A98D_ai < 0 && lv_itCategoryButton >= autoE347A98D_ae) ) ; lv_itCategoryButton += autoE347A98D_ai ) {
        if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] > 0)) {
            libUIUI_gf_HSUISetMountCategoryItemTextForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], UserDataGetText("MountCollectionCategory", UserDataInstance("MountCollectionCategory", libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton]), "Name", 1), lp_player);
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton])) {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
        else {
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
}

void libUIUI_gf_HSUIMountsFillMountReplacementContainerForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbil;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto8085274C_ae;
    const int auto8085274C_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    auto8085274C_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; ( (auto8085274C_ai >= 0 && lv_itAbil <= auto8085274C_ae) || (auto8085274C_ai < 0 && lv_itAbil >= auto8085274C_ae) ) ; lv_itAbil += auto8085274C_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_MountReplacement == true)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            break;
        }

    }
}

bool libUIUI_gf_HSUIAnnouncersAnnouncerItemButtonIsSelectedForPlayer (int lp_player, int lp_item) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lp_item] > 0) && (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lp_item] == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex)) {
        return true;
    }

    return false;
}

bool libUIUI_gf_HSUIAnnouncersAnnouncerIsInTempArrayForPlayer (int lp_announcerIndex, int lp_player) {
    // Variable Declarations
    int lv_itAnnouncer;

    // Automatic Variable Declarations
    int autoA5D47C8A_ae;
    const int autoA5D47C8A_ai = 1;

    // Variable Initialization

    // Implementation
    autoA5D47C8A_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount;
    lv_itAnnouncer = 1;
    for ( ; ( (autoA5D47C8A_ai >= 0 && lv_itAnnouncer <= autoA5D47C8A_ae) || (autoA5D47C8A_ai < 0 && lv_itAnnouncer >= autoA5D47C8A_ae) ) ; lv_itAnnouncer += autoA5D47C8A_ai ) {
        if ((lp_announcerIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerArray[lv_itAnnouncer])) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIAnnouncersCollapsedForPlayer (int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }

    return false;
}

int libUIUI_gf_HSUIAnnouncersCurrentMaxItemCountForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBoxValue[lp_player] == null)) {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_Collapsed_C;
    }
    else {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    }
}

bool libUIUI_gf_HSUIAnnouncersCompareSearchTextForPlayer (int lp_announcer, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBoxValue[lp_player];

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataAnnouncerVOPacks[lp_announcer].lv_name), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataAnnouncerVOPacks[lp_announcer].lv_searchText), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

int libUIUI_gf_HSUIAnnouncersCollectionCategoryIndexForSelectedAnnouncerForPlayer (int lp_player) {
    // Variable Declarations
    int lv_announcerIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_announcerIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex;

    // Implementation
    return libNtve_gf_UserDataInstanceGetIndex("AnnouncerCollectionCategory", libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_collectionCategory);
}

void libUIUI_gf_HSUISetAnnouncerCategoryItemTextForPlayer (int lp_dialogItem, text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_dialogItem, c_triggerControlTypeLabel, "CategoryLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUISetLoadoutAnnouncerItemToAnnouncerForPlayer (int lp_announcerIndex, int lp_dialogItemIndex, int lp_player) {
    // Variable Declarations
    int lv_tileImage;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tileImage = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lp_dialogItemIndex], c_triggerControlTypeImage, "AudioTileImageContainer/AudioTileImage");
    lv_tileImage = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(lv_tileImage, libCore_gv_dataAnnouncerVOPacks[lp_announcerIndex].lv_previewImage, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lp_dialogItemIndex] = lp_announcerIndex;
}

void libUIUI_gf_HSUIAnnouncersFillLoadoutAnnouncerDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentLane;
    int lv_maxAnnouncerCount;
    int lv_maxItemsPerLane;
    int lv_heroIndex;
    int lv_minSkinInItem;
    int lv_maxSkinInItem;
    int lv_itAnnouncer;
    int lv_itAnnouncerArrayIndex;
    int lv_laneDiff;
    bool lv_playerAccesAnnouncer;
    int lv_announcerIndex;
    int lv_maxVisibleItems;
    bool lv_collapsed;
    int lv_filledAnnouncerTotalCountCalculation;

    // Automatic Variable Declarations
    int autoAEF7281F_ae;
    const int autoAEF7281F_ai = 1;
    int autoF4589C74_ae;
    const int autoF4589C74_ai = 1;
    int auto60DC8939_ae;
    const int auto60DC8939_ai = 1;

    // Variable Initialization

    // Implementation
    lv_collapsed = libUIUI_gf_HSUIAnnouncersCollapsedForPlayer(lp_player);
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_maxAnnouncerCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount;
    lv_maxVisibleItems = libUIUI_gf_HSUIAnnouncersCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItemsPerLane = (lv_maxVisibleItems / libUIUI_gv_hSUILoadoutMaxAnnouncerLaneCount_C);
    if ((lv_maxAnnouncerCount <= lv_maxVisibleItems)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerAnnouncerCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerAnnouncerMaxLaneCount = 1;
        autoF4589C74_ae = lv_maxVisibleItems;
        lv_itAnnouncer = lv_maxAnnouncerCount;
        for ( ; ( (autoF4589C74_ai >= 0 && lv_itAnnouncer <= autoF4589C74_ae) || (autoF4589C74_ai < 0 && lv_itAnnouncer >= autoF4589C74_ae) ) ; lv_itAnnouncer += autoF4589C74_ai ) {
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itAnnouncer] = 0;
        }
        lv_itAnnouncer = 0;
        auto60DC8939_ae = lv_maxAnnouncerCount;
        lv_itAnnouncerArrayIndex = 1;
        for ( ; ( (auto60DC8939_ai >= 0 && lv_itAnnouncerArrayIndex <= auto60DC8939_ae) || (auto60DC8939_ai < 0 && lv_itAnnouncerArrayIndex >= auto60DC8939_ae) ) ; lv_itAnnouncerArrayIndex += auto60DC8939_ai ) {
            lv_itAnnouncer += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itAnnouncer] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerArray[lv_itAnnouncerArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itAnnouncer] > 0)) {
                lv_filledAnnouncerTotalCountCalculation += 1;
            }

        }
    }
    else {
        lv_currentLane = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerAnnouncerCurrentLane;
        lv_minSkinInItem = ((lv_maxItemsPerLane*lv_currentLane)-lv_maxItemsPerLane+1);
        lv_laneDiff = (libUIUI_gv_hSUILoadoutMaxAnnouncerLaneCount_C - 1);
        lv_maxSkinInItem = (lv_maxItemsPerLane*(lv_currentLane+lv_laneDiff));
        lv_itAnnouncer = 0;
        autoAEF7281F_ae = lv_maxSkinInItem;
        lv_itAnnouncerArrayIndex = lv_minSkinInItem;
        for ( ; ( (autoAEF7281F_ai >= 0 && lv_itAnnouncerArrayIndex <= autoAEF7281F_ae) || (autoAEF7281F_ai < 0 && lv_itAnnouncerArrayIndex >= autoAEF7281F_ae) ) ; lv_itAnnouncerArrayIndex += autoAEF7281F_ai ) {
            lv_itAnnouncer += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itAnnouncer] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerArray[lv_itAnnouncerArrayIndex];
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itAnnouncer] > 0)) {
                lv_filledAnnouncerTotalCountCalculation += 1;
            }

        }
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerAnnouncerMaxLaneCount = libUIUI_gf_HSUILoadoutGetMaxLaneCount(lv_maxAnnouncerCount, lv_maxItemsPerLane, libUIUI_ge_HSUIPanelType_AnnouncerPanel);
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerTotalCount = lv_filledAnnouncerTotalCountCalculation;
}

void libUIUI_gf_HSUIAnnouncersFillTempArrayForPlayer (int lp_categoryButtonIndex, int lp_player) {
    // Variable Declarations
    int lv_itAnnouncer;

    // Automatic Variable Declarations
    int autoC76E6FB2_ae;
    const int autoC76E6FB2_ai = 1;
    int auto9DB1268A_val;
    int auto171CBEDB_ae;
    const int auto171CBEDB_ai = 1;
    int auto984B29A5_ae;
    const int auto984B29A5_ai = 1;

    // Variable Initialization

    // Implementation
    autoC76E6FB2_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_itAnnouncer = 1;
    for ( ; ( (autoC76E6FB2_ai >= 0 && lv_itAnnouncer <= autoC76E6FB2_ae) || (autoC76E6FB2_ai < 0 && lv_itAnnouncer >= autoC76E6FB2_ae) ) ; lv_itAnnouncer += autoC76E6FB2_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerArray[lv_itAnnouncer] = 0;
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount = 0;
    auto9DB1268A_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown, lp_player);
    if (auto9DB1268A_val == 1) {
        auto171CBEDB_ae = libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks;
        lv_itAnnouncer = 1;
        for ( ; ( (auto171CBEDB_ai >= 0 && lv_itAnnouncer <= auto171CBEDB_ae) || (auto171CBEDB_ai < 0 && lv_itAnnouncer >= auto171CBEDB_ae) ) ; lv_itAnnouncer += auto171CBEDB_ai ) {
            if ((libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_previewHidden == false)) {
                libUIUI_gf_HSUIAnnouncersAddAnnouncerToTempArrayForPlayer(lp_categoryButtonIndex, lv_itAnnouncer, lp_player);
            }

        }
    }
    else if (auto9DB1268A_val == 2) {
        auto984B29A5_ae = libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks;
        lv_itAnnouncer = 1;
        for ( ; ( (auto984B29A5_ai >= 0 && lv_itAnnouncer <= auto984B29A5_ae) || (auto984B29A5_ai < 0 && lv_itAnnouncer >= auto984B29A5_ae) ) ; lv_itAnnouncer += auto984B29A5_ai ) {
            if ((libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_previewHidden == false) && (libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_isNew == true)) {
                libUIUI_gf_HSUIAnnouncersAddAnnouncerToTempArrayForPlayer(lp_categoryButtonIndex, lv_itAnnouncer, lp_player);
            }

        }
    }
    else {
    }
}

void libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itCategoryButton;
    int lv_itAnnouncer;
    int lv_categoryIndex;
    string lv_itInstance;

    // Automatic Variable Declarations
    const int auto76CD8158_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto76CD8158_ai = 1;
    string auto0529EAE2_userType;
    int auto0529EAE2_i;
    int autoF8BA64D0_ae;
    const int autoF8BA64D0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (auto76CD8158_ai >= 0 && lv_itCategoryButton <= auto76CD8158_ae) || (auto76CD8158_ai < 0 && lv_itCategoryButton >= auto76CD8158_ae) ) ; lv_itCategoryButton += auto76CD8158_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCategoryArray[lv_itCategoryButton] = 0;
    }
    lv_itCategoryButton = 0;
    auto0529EAE2_userType = "AnnouncerCollectionCategory";
    auto0529EAE2_i = 1;
    for ( ; auto0529EAE2_i <= UserDataInstanceCount(auto0529EAE2_userType) ; auto0529EAE2_i += 1 ) {
        lv_itInstance = UserDataInstance(auto0529EAE2_userType, auto0529EAE2_i);
        autoF8BA64D0_ae = libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks;
        lv_itAnnouncer = 1;
        for ( ; ( (autoF8BA64D0_ai >= 0 && lv_itAnnouncer <= autoF8BA64D0_ae) || (autoF8BA64D0_ai < 0 && lv_itAnnouncer >= autoF8BA64D0_ae) ) ; lv_itAnnouncer += autoF8BA64D0_ai ) {
            if ((lv_itInstance == libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_collectionCategory) && (libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_previewHidden == false) && (libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayPulldownAccessForPlayer(lv_itAnnouncer, lp_player) == true)) {
                lv_itCategoryButton += 1;
                lv_categoryIndex = libNtve_gf_UserDataInstanceGetIndex("AnnouncerCollectionCategory", lv_itInstance);
                libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCategoryArray[lv_itCategoryButton] = lv_categoryIndex;
                break;
            }

        }
    }
}

void libUIUI_gf_HSUIAnnouncersAddAnnouncerToTempArrayForPlayer (int lp_categoryButtonIndex, int lp_announcerIndex, int lp_player) {
    // Variable Declarations
    int lv_storedAnnouncerCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUIAnnouncersFillTempArrayAnnouncerIsValidForPlayer(lp_categoryButtonIndex, lp_announcerIndex, lp_player) == true)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount += 1;
        lv_storedAnnouncerCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerArray[lv_storedAnnouncerCount] = lp_announcerIndex;
    }

}

bool libUIUI_gf_HSUIAnnouncersFillTempArrayAnnouncerIsValidForPlayer (int lp_categoryButtonIndex, int lp_announcerIndex, int lp_player) {
    // Variable Declarations
    string lv_categoryInstance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUIAnnouncersCollapsedForPlayer(lp_player) == false)) {
        if ((libUIUI_gf_HSUIAnnouncersCompareSearchTextForPlayer(lp_announcerIndex, lp_player) == true)) {
            return true;
        }

    }
    else {
        lv_categoryInstance = libCore_gv_dataAnnouncerVOPacks[lp_announcerIndex].lv_collectionCategory;
        if ((libNtve_gf_UserDataInstanceGetIndex("AnnouncerCollectionCategory", lv_categoryInstance) == lp_categoryButtonIndex)) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayPulldownAccessForPlayer (int lp_announcerIndex, int lp_player) {
    // Automatic Variable Declarations
    int autoF67FC355_val;

    // Implementation
    autoF67FC355_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown, lp_player);
    if (autoF67FC355_val == 1) {
        return true;
    }
    else if (autoF67FC355_val == 2) {
        return libCore_gv_dataAnnouncerVOPacks[lp_announcerIndex].lv_isNew;
    }
    else {
    }
    return true;
}

void libUIUI_gf_HSUIAnnouncersUpdateAnnouncerCollectionCategoryButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itCategoryButton;

    // Automatic Variable Declarations
    const int autoA6A8A80A_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoA6A8A80A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (autoA6A8A80A_ai >= 0 && lv_itCategoryButton <= autoA6A8A80A_ae) || (autoA6A8A80A_ai < 0 && lv_itCategoryButton >= autoA6A8A80A_ae) ) ; lv_itCategoryButton += autoA6A8A80A_ai ) {
        if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCategoryArray[lv_itCategoryButton] > 0)) {
            libUIUI_gf_HSUISetAnnouncerCategoryItemTextForPlayer(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itCategoryButton], UserDataGetText("AnnouncerCollectionCategory", UserDataInstance("AnnouncerCollectionCategory", libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCategoryArray[lv_itCategoryButton]), "Name", 1), lp_player);
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerCollectionCategoryIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCategoryArray[lv_itCategoryButton])) {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itCategoryButton], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itCategoryButton], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
        else {
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
}

void libUIUI_gf_HSUIAnnouncersPlayPreviewSoundForPlayer (int lp_buttonItem, int lp_player) {
    // Variable Declarations
    int lv_announcer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_announcer = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lp_buttonItem];
    SoundStop(libUIUI_gv_hSUILoadoutAnnouncerPreviewSound[lp_player], true);
    SoundPlayForPlayer(SoundLink(libCore_gv_dataAnnouncerVOPacks[lv_announcer].lv_previewSound, c_soundIndexAny), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libUIUI_gv_hSUILoadoutAnnouncerPreviewSound[lp_player] = SoundLastPlayed();
}

void libUIUI_gf_HSUISetSkinContainerNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_skinIndex;
    bool lv_fill;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount > 0)) {
        lv_skinIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex;
        if ((libUIUI_gf_HSUISkinsCompareSearchTextForPlayer(lv_skinIndex, lp_player) == true)) {
            lv_fill = true;
        }

    }

    if ((lv_fill == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel, libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel, StringToText(""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUISetMountContainerNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_mountIndex;
    bool lv_fill;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount > 0)) {
        lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;
        if ((libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player) == true)) {
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex == libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory))) {
                lv_fill = true;
            }

        }
        else {
            if ((libUIUI_gf_HSUIMountsCompareSearchTextForPlayer(lv_mountIndex, lp_player) == true)) {
                lv_fill = true;
            }

        }
    }

    if ((lv_fill == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel, libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountName, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel, StringToText(""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUISetAnnouncerContainerNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_announcerIndex;
    bool lv_fill;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempAnnouncerCount > 0)) {
        lv_announcerIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex;
        if ((libUIUI_gf_HSUIAnnouncersCollapsedForPlayer(lp_player) == true)) {
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerCollectionCategoryIndex == libNtve_gf_UserDataInstanceGetIndex("AnnouncerCollectionCategory", libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_collectionCategory))) {
                lv_fill = true;
            }

        }
        else {
            if ((libUIUI_gf_HSUIAnnouncersCompareSearchTextForPlayer(lv_announcerIndex, lp_player) == true)) {
                lv_fill = true;
            }

        }
    }

    if ((lv_fill == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_announcersPanelSelectedContentLabel, libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_announcersPanelSelectedContentLabel, StringToText(""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer (bool lp_selectDeselect, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_selectDeselect == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Selection", "Selected");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Selection", "NotSelected");
    }
}

void libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer (bool lp_lockedUnlocked, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lockedUnlocked == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Locked", "Locked");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Locked", "NotLocked");
    }
}

void libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer (string lp_event, int lp_button, int lp_player) {
    // Variable Declarations
    string lv_eventName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventName = "";

    // Implementation
    if ((libCore_gf_UserDataInstanceisUsed(lp_event) == true)) {
        lv_eventName = (lp_event);
    }
    else {
        lv_eventName = "Default";
    }
    DialogControlSetAnimationState(lp_button, libCore_gv_playerGroupFromPlayer[lp_player], "EventImageStates", lv_eventName);
}

void libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer (bool lp_f2P, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_f2P == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "F2P", "F2P");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "F2P", "NotF2P");
    }
}

void libUIUI_gf_HSUILoadBankDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_loadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;
    lv_loadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer(lp_player);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutAnnouncerItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerCollectionCategoryIndex = libUIUI_gf_HSUIAnnouncersCollectionCategoryIndexForSelectedAnnouncerForPlayer(lp_player);
}

void libUIUI_gf_HSUILoadBankDataForSelectedVariationForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_loadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    lv_loadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer(lp_player);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutAnnouncerItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerCollectionCategoryIndex = libUIUI_gf_HSUIAnnouncersCollectionCategoryIndexForSelectedAnnouncerForPlayer(lp_player);
}

void libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer (int lp_panel, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel = lp_panel;
}

void libUIUI_gf_HSUIFillLoadoutPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_itButton;
    int lv_selectedPanel;

    // Automatic Variable Declarations
    int autoEB8AF57B_val;

    // Variable Initialization
    lv_selectedPanel = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel;

    // Implementation
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    autoEB8AF57B_val = lv_selectedPanel;
    if (autoEB8AF57B_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        libUIUI_gf_HSUISkinsFillTempArrayForPlayer(lp_player);
        libUIUI_gf_HSUISkinsFillLoadoutSkinDataForPlayer(lp_player);
        libUIUI_gf_HSUIFillLoadoutSkinPanelForPlayer(lp_player);
    }
    else if (autoEB8AF57B_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMount == false)) {
            DialogControlSetAnimationState(libUIUI_gv_hSUILoadout.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "HeroUsesMounts", "NotUses");
            libUIUI_gf_HSUIMountsFillMountReplacementContainerForPlayer(lp_player);
        }
        else {
            DialogControlSetAnimationState(libUIUI_gv_hSUILoadout.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "HeroUsesMounts", "Uses");
            libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayForPlayer(lp_player);
            libUIUI_gf_HSUIMountsFillTempArrayForPlayer(libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex, lp_player);
            libUIUI_gf_HSUIMountsFillLoadoutMountDataForPlayer(lp_player);
            libUIUI_gf_HSUIMountsUpdateMountCollectionCategoryButtonsForPlayer(lp_player);
            libUIUI_gf_HSUIFillLoadoutMountPanelForPlayer(lp_player);
        }
    }
    else if (autoEB8AF57B_val == libUIUI_ge_HSUIPanelType_AnnouncerPanel) {
        libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayForPlayer(lp_player);
        libUIUI_gf_HSUIAnnouncersFillTempArrayForPlayer(libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerCollectionCategoryIndex, lp_player);
        libUIUI_gf_HSUIAnnouncersFillLoadoutAnnouncerDataForPlayer(lp_player);
        libUIUI_gf_HSUIAnnouncersUpdateAnnouncerCollectionCategoryButtonsForPlayer(lp_player);
        libUIUI_gf_HSUIFillLoadoutAnnouncerPanelForPlayer(lp_player);
    }
    else {
    }
    libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lp_player);
}

void libUIUI_gf_HSUIFillLoadoutSkinPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_maxSkins;
    int lv_itItemIndex;
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_skinIndex;
    int lv_buttonItem;

    // Automatic Variable Declarations
    const int auto0546005C_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto0546005C_ai = 1;
    int auto5BC9254F_ae;
    const int auto5BC9254F_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_maxSkins = MinI(libUIUI_gv_hSUILoadoutMaxSkinItemCount_C, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinTotalCount);
    libUIUI_gf_HSUISetSkinContainerNameForPlayer(lp_player);
    lv_itItemIndex = 1;
    for ( ; ( (auto0546005C_ai >= 0 && lv_itItemIndex <= auto0546005C_ae) || (auto0546005C_ai < 0 && lv_itItemIndex >= auto0546005C_ae) ) ; lv_itItemIndex += auto0546005C_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex];
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(null, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(false, lv_buttonItem, lp_player);
    }
    auto5BC9254F_ae = lv_maxSkins;
    lv_itItemIndex = 1;
    for ( ; ( (auto5BC9254F_ai >= 0 && lv_itItemIndex <= auto5BC9254F_ae) || (auto5BC9254F_ai < 0 && lv_itItemIndex >= auto5BC9254F_ae) ) ; lv_itItemIndex += auto5BC9254F_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex];
        lv_skinIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itItemIndex];
        libUIUI_gf_HSUISkinsSetLoadoutSkinItemToSkinForPlayer(lv_skinIndex, lv_itItemIndex, lp_player);
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_event, lv_buttonItem, lp_player);
        if ((libUIUI_gf_HSUISkinsSkinItemButtonIsSelectedForPlayer(lp_player, lv_itItemIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex], lp_player);
        }

    }
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount <= 1)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, 0.0, (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount - 1), lp_player);
    }
}

void libUIUI_gf_HSUIFillLoadoutMountPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_maxVisibleItemCount;
    int lv_mountIndex;
    int lv_maxItem;
    int lv_itItemIndex;
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_buttonItem;

    // Automatic Variable Declarations
    int auto11E5988A_ae;
    const int auto11E5988A_ai = 1;
    int auto3D010B6C_ae;
    const int auto3D010B6C_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_maxVisibleItemCount = libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItem = MinI(lv_maxVisibleItemCount, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountTotalCount);
    libUIUI_gf_HSUISetMountContainerNameForPlayer(lp_player);
    auto11E5988A_ae = lv_maxVisibleItemCount;
    lv_itItemIndex = 1;
    for ( ; ( (auto11E5988A_ai >= 0 && lv_itItemIndex <= auto11E5988A_ae) || (auto11E5988A_ai < 0 && lv_itItemIndex >= auto11E5988A_ae) ) ; lv_itItemIndex += auto11E5988A_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itItemIndex];
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(null, lv_buttonItem, lp_player);
    }
    auto3D010B6C_ae = lv_maxItem;
    lv_itItemIndex = 1;
    for ( ; ( (auto3D010B6C_ai >= 0 && lv_itItemIndex <= auto3D010B6C_ae) || (auto3D010B6C_ai < 0 && lv_itItemIndex >= auto3D010B6C_ae) ) ; lv_itItemIndex += auto3D010B6C_ai ) {
        lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itItemIndex];
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itItemIndex];
        libUIUI_gf_HSUISetLoadoutMountItemToMountForPlayer(lv_mountIndex, lv_itItemIndex, lp_player);
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(libCore_gv_dataMountsMountData[lv_mountIndex].lv_event, lv_buttonItem, lp_player);
        if ((libUIUI_gf_HSUIMountsMountItemButtonIsSelectedForPlayer(lp_player, lv_itItemIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, lv_buttonItem, lp_player);
        }

    }
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount <= 1)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, 0.0, (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount - 1), lp_player);
    }
}

void libUIUI_gf_HSUIFillLoadoutAnnouncerPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_maxVisibleItemCount;
    int lv_announcerIndex;
    int lv_maxItem;
    int lv_itItemIndex;
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_buttonItem;

    // Automatic Variable Declarations
    int auto4D71D360_ae;
    const int auto4D71D360_ai = 1;
    int autoBCE2C193_ae;
    const int autoBCE2C193_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_maxVisibleItemCount = libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItem = MinI(lv_maxVisibleItemCount, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerTotalCount);
    libUIUI_gf_HSUISetAnnouncerContainerNameForPlayer(lp_player);
    auto4D71D360_ae = lv_maxVisibleItemCount;
    lv_itItemIndex = 1;
    for ( ; ( (auto4D71D360_ai >= 0 && lv_itItemIndex <= auto4D71D360_ae) || (auto4D71D360_ai < 0 && lv_itItemIndex >= auto4D71D360_ae) ) ; lv_itItemIndex += auto4D71D360_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itItemIndex];
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(null, lv_buttonItem, lp_player);
    }
    autoBCE2C193_ae = lv_maxItem;
    lv_itItemIndex = 1;
    for ( ; ( (autoBCE2C193_ai >= 0 && lv_itItemIndex <= autoBCE2C193_ae) || (autoBCE2C193_ai < 0 && lv_itItemIndex >= autoBCE2C193_ae) ) ; lv_itItemIndex += autoBCE2C193_ai ) {
        lv_announcerIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itItemIndex];
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itItemIndex];
        libUIUI_gf_HSUISetLoadoutAnnouncerItemToAnnouncerForPlayer(lv_announcerIndex, lv_itItemIndex, lp_player);
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_event, lv_buttonItem, lp_player);
        if ((libUIUI_gf_HSUIAnnouncersAnnouncerItemButtonIsSelectedForPlayer(lp_player, lv_itItemIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, lv_buttonItem, lp_player);
        }

    }
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount <= 1)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer(libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar, 0.0, (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount - 1), lp_player);
    }
}

void libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    libUIUI_gf_HSUIVariationsFillVariationDataForPlayer(lp_player);
    libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer(lv_heroIndex, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex, lp_player);
    libUIUI_gf_HSUILoadBankDataForSelectedVariationForPlayer(lp_player);
    libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lp_player);
    libUIUI_gf_HSUIVariationsUpdateEditBoxNameForPlayer(lp_player);
}

void libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer (int lp_player) {
    // Variable Declarations
    bool lv_accessItem;
    int lv_elementIndex;
    text lv_name;
    text lv_description;
    int lv_selectedPanel;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto1510C655_val;

    // Variable Initialization
    lv_selectedPanel = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel;
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;

    // Implementation
    if ((lv_selectedPanel != libUIUI_ge_HSUIPanelType_MountPanel)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    auto1510C655_val = lv_selectedPanel;
    if (auto1510C655_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex;
        lv_name = libCore_gv_dataSkinsSkinData[lv_elementIndex].lv_name;
    }
    else if (auto1510C655_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;
        lv_name = libCore_gv_dataMountsMountData[lv_elementIndex].lv_mountName;
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMount == true) && (libUIUI_gf_HSUIMountsMountIsInTempArrayForPlayer(lv_elementIndex, lp_player) == true)) {
            libNtve_gf_SetDialogItemCutscene(libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene, libCore_gv_dataMountsMountData[lv_elementIndex].lv_heroSelectCutsceneFile, libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSendAnimationEvent(libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Play");
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
            lv_accessItem = true;
        }
    }
    else if (auto1510C655_val == libUIUI_ge_HSUIPanelType_AnnouncerPanel) {
        lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedAnnouncerIndex;
        lv_name = libCore_gv_dataAnnouncerVOPacks[lv_elementIndex].lv_name;
        lv_description = libCore_gv_dataAnnouncerVOPacks[lv_elementIndex].lv_description;
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitNameLabel/Label", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroTrackerArrowShowHideHeroUnitForPlayer (bool lp_showHide, int lp_player, unit lp_unit) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    const int autoEC4F848C_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    const int autoEC4F848C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoEC4F848C_ai >= 0 && lv_index <= autoEC4F848C_ae) || (autoEC4F848C_ai < 0 && lv_index >= autoEC4F848C_ae) ) ; lv_index += autoEC4F848C_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] == lp_unit)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            return ;
        }

    }
}

void libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_heroCount;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    libUIUI_gv_uIHeroTrackerArrows.lv_unitCount = 0;
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lp_player);
}

int libUIUI_gf_KillLogGetUnusedItemIndex () {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int auto232DA6AB_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto232DA6AB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i_Item = 1;
    for ( ; ( (auto232DA6AB_ai >= 0 && lv_i_Item <= auto232DA6AB_ae) || (auto232DA6AB_ai < 0 && lv_i_Item >= auto232DA6AB_ae) ) ; lv_i_Item += auto232DA6AB_ai ) {
        if ((libUIUI_gv_killLogItems[lv_i_Item].lv_player == 0)) {
            return lv_i_Item;
        }

    }
    return 0;
}

int libUIUI_gf_KillLogGetItemIndexForUnit (int lp_sourcePlayer, int lp_type) {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int auto5A5CD883_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto5A5CD883_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i_Item = 1;
    for ( ; ( (auto5A5CD883_ai >= 0 && lv_i_Item <= auto5A5CD883_ae) || (auto5A5CD883_ai < 0 && lv_i_Item >= auto5A5CD883_ae) ) ; lv_i_Item += auto5A5CD883_ai ) {
        if ((libUIUI_gv_killLogItems[lv_i_Item].lv_player == lp_sourcePlayer) && (libUIUI_gv_killLogItems[lv_i_Item].lv_type == lp_type) && (((lp_type == libUIUI_ge_KillLogItemType_Kill) && (libUIUI_gv_killLogItems[lv_i_Item].lv_combo < (libUIUI_gv_killLogMaxComboPortraitsD0A1 - 1))) || ((lp_type == libUIUI_ge_KillLogItemType_Quest) && (libUIUI_gv_killLogItems[lv_i_Item].lv_combo < (libUIUI_gv_killLogMaxComboIconsD0A1 - 1))))) {
            return lv_i_Item;
        }

    }
    return 0;
}

int libUIUI_gf_KillLogGetItemWithLeastRemainingTime () {
    // Variable Declarations
    int lv_i_Item;
    int lv_itemIndexWithLeastRemainingTime;

    // Automatic Variable Declarations
    const int autoB4C5DAE1_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int autoB4C5DAE1_ai = 1;

    // Variable Initialization
    lv_itemIndexWithLeastRemainingTime = 1;

    // Implementation
    lv_i_Item = 2;
    for ( ; ( (autoB4C5DAE1_ai >= 0 && lv_i_Item <= autoB4C5DAE1_ae) || (autoB4C5DAE1_ai < 0 && lv_i_Item >= autoB4C5DAE1_ae) ) ; lv_i_Item += autoB4C5DAE1_ai ) {
        if ((TimerGetRemaining(libUIUI_gv_killLogItems[lv_i_Item].lv_timer) < TimerGetRemaining(libUIUI_gv_killLogItems[lv_itemIndexWithLeastRemainingTime].lv_timer))) {
            lv_itemIndexWithLeastRemainingTime = lv_i_Item;
        }

    }
    return lv_itemIndexWithLeastRemainingTime;
}

string libUIUI_gf_KillLogGetPortraitPathForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    string auto1936E3C6_val;

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(lp_unit)) == false)) {
        if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            return "assets\\Textures\\storm_ui_icon_deathrecap_npc_structure.dds";
        }
        else {
            return "assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds";
        }
    }

    auto1936E3C6_val = UnitGetType(lp_unit);
    {
        return libCore_gv_dataHeroesHeroData[libGame_gv_players[UnitGetOwner(lp_unit)].lv_heroIndex].lv_portraitHeroSelectScreenButton;
    }
}

int libUIUI_gf_KillLogAddNewItem (int lp_sourcePlayer, int lp_eventType) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_itemFrame;
    int lv_i_ItemIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;

    // Implementation
    lv_itemIndex = libUIUI_gf_KillLogGetUnusedItemIndex();
    if ((lv_itemIndex <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_24C1C8C5"), true);
        return 0;
    }

    libUIUI_gv_killLogItems[lv_itemIndex].lv_player = lp_sourcePlayer;
    libUIUI_gv_killLogItems[lv_itemIndex].lv_type = lp_eventType;
    TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
    lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
    if ((lp_eventType == libUIUI_ge_KillLogItemType_Kill)) {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "KillLogItemType", "Kill");
    }
    else {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "KillLogItemType", "Quest");
    }
    if ((lv_itemIndex > 1)) {
        DialogControlSetPositionRelative(lv_itemFrame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogItems[(lv_itemIndex - 1)].lv_frame, c_anchorLeft, 0, 0);
    }
    else {
        DialogControlSetPositionRelative(lv_itemFrame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogPanel, c_anchorTopLeft, 0, libUIUI_gv_killLogTopOffset_D0A1);
    }
    DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "SlideUp");
    DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, "SrcPortrait/PortraitImage");
    if ((libGame_gf_PlayerIsHeroPlayer(lp_sourcePlayer) == true)) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_sourcePlayer].lv_heroIndex].lv_portraitHeroSelectScreenButton, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds", PlayerGroupAll());
    }
    if ((libGame_gf_TeamNumberOfPlayer(lp_sourcePlayer) == libGame_gv_teamChaosIndex_C)) {
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "SrcColor", "Red");
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "SrcColor", "Blue");
        DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SrcColor", "Red");
    }
    else if ((libGame_gf_TeamNumberOfPlayer(lp_sourcePlayer) == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "SrcColor", "Blue");
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "SrcColor", "Red");
        DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SrcColor", "Blue");
    }
    else if (true) {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "SrcColor", "Purple");
    }
    if ((lv_itemIndex > libUIUI_gv_killLogMaxVisibleItemCountD0A1)) {
        libUIUI_gf_KillLogHideItem(libUIUI_gf_KillLogGetItemWithLeastRemainingTime());
    }

    return lv_itemFrame;
}

void libUIUI_gf_KillLogAnnounceKill (int lp_sourcePlayer, unit lp_target) {
    // Variable Declarations
    int lv_itemFrame;
    int lv_itemIndex;
    int lv_combo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_BBBCCAA6"), true);
        return ;
    }

    lv_itemIndex = libUIUI_gf_KillLogGetItemIndexForUnit(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
    if (((libGame_gf_PlayerIsHeroPlayer(lp_sourcePlayer) == true) || ((lv_itemIndex > 0) && (UnitGetType(lp_target) == "HeroGall")))) {
        if ((lv_itemIndex == 0)) {
            lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
            if ((lv_itemFrame == c_invalidDialogControlId)) {
                return ;
            }

            DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
            if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_target)) == libGame_gv_teamChaosIndex_C) && (lv_itemFrame != c_invalidDialogControlId)) {
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Red");
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Blue");
                DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Red");
            }
            else {
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Blue");
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Red");
                DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Blue");
            }
        }
        else {
            if ((libUIUI_gv_killLogItems[lv_itemIndex].lv_combo >= (libUIUI_gv_killLogMaxComboPortraitsD0A1 - 1))) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_D242FF9B"), true);
                return ;
            }

            TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
            lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
            libUIUI_gv_killLogItems[lv_itemIndex].lv_combo += 1;
            lv_combo = libUIUI_gv_killLogItems[lv_itemIndex].lv_combo;
        }
    }
    else {
        lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
        if ((lv_itemFrame == c_invalidDialogControlId)) {
            return ;
        }

        DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_target)) == libGame_gv_teamChaosIndex_C) && (lv_itemFrame != c_invalidDialogControlId)) {
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Red");
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Blue");
            DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Red");
        }
        else {
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Blue");
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Red");
            DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Blue");
        }
    }
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, "TgtPortrait" + IntToString(lv_combo) + "/PortraitImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libUIUI_gf_KillLogGetPortraitPathForUnit(lp_target), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypePanel, "TgtPortrait" + IntToString(lv_combo));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeIn");
    Wait(0.125, c_timeGame);
    libUIUI_gf_KillLogDisplayQuestResetDataFromCache(UnitGetOwner(lp_target), DialogControlLastCreated());
}

void libUIUI_gf_KillLogAnnounceQuestCompletion (int lp_player, string lp_questToken, fixed lp_progress) {
    // Variable Declarations
    int lv_itemFrame;
    string lv_icon;
    string lv_questTalent;
    text lv_questName;
    int lv_itemIndex;
    int lv_combo;
    int lv_playerTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;
    lv_questTalent = "";

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_55F47934", "Player", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_55F47934"), true);
        return ;
    }

    if ((lp_questToken == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_2F2E60D1"), true);
    }

    lv_itemIndex = libUIUI_gf_KillLogGetItemIndexForUnit(lp_player, libUIUI_ge_KillLogItemType_Quest);
    if ((lv_itemIndex > 0)) {
        if ((libUIUI_gv_killLogItems[lv_itemIndex].lv_combo >= (libUIUI_gv_killLogMaxComboIconsD0A1 - 1))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_338664DD"), true);
            return ;
        }

        TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
        libUIUI_gv_killLogItems[lv_itemIndex].lv_combo += 1;
        lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
        lv_combo = libUIUI_gv_killLogItems[lv_itemIndex].lv_combo;
    }
    else {
        lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_player, libUIUI_ge_KillLogItemType_Quest);
    }
    lv_icon = CatalogFieldValueGet(c_gameCatalogBehavior, lp_questToken, "InfoIcon", c_playerAny);
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/IconImage")));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_icon, PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/TimestampLabel")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/ProgressValue")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lp_progress, c_fixedPrecisionAny), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo))));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeIn");
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_playerTeam);
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteAlly", -1), c_maxPlayers, libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupAlly, lp_player), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteEnemy", -1), c_maxPlayers, libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupEnemy, lp_player), 100.0, 0.0);
    lv_questName = StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_questToken, "Name", c_playerAny));
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Null, "ShowQuestNotification", StringExternal("Param/Value/lib_UIUI_3BF16344"), lv_questName, null, null, lv_icon, libGame_gv_announcement_LongAnnouncementDuration_C, false);
}

void libUIUI_gf_KillLogSaveQuestResetDataToCache (int lp_player, string lp_questTokenCounter) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    const int auto94745006_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int auto94745006_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itBehavior = 1;
    for ( ; ( (auto94745006_ai >= 0 && lv_itBehavior <= auto94745006_ae) || (auto94745006_ai < 0 && lv_itBehavior >= auto94745006_ae) ) ; lv_itBehavior += auto94745006_ai ) {
        if ((libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehavior] == null)) {
            libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehavior] = lp_questTokenCounter;
            return ;
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_A7F2B75D"), true);
}

void libUIUI_gf_KillLogClearQuestResetDataCacheForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    const int auto61EB27AC_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int auto61EB27AC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itBehavior = 1;
    for ( ; ( (auto61EB27AC_ai >= 0 && lv_itBehavior <= auto61EB27AC_ae) || (auto61EB27AC_ai < 0 && lv_itBehavior >= auto61EB27AC_ae) ) ; lv_itBehavior += auto61EB27AC_ai ) {
        libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehavior] = null;
    }
}

void libUIUI_gf_KillLogDisplayQuestResetDataFromCache (int lp_player, int lp_portraitFrame) {
    // Variable Declarations
    int lv_itBehaviorIndex;
    int lv_questIconFrame;
    string lv_icon;

    // Automatic Variable Declarations
    const int autoAC60E08E_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int autoAC60E08E_ai = 1;

    // Variable Initialization
    lv_questIconFrame = c_invalidDialogControlId;
    lv_icon = "";

    // Implementation
    lv_itBehaviorIndex = 1;
    for ( ; ( (autoAC60E08E_ai >= 0 && lv_itBehaviorIndex <= autoAC60E08E_ae) || (autoAC60E08E_ai < 0 && lv_itBehaviorIndex >= autoAC60E08E_ae) ) ; lv_itBehaviorIndex += autoAC60E08E_ai ) {
        if ((libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehaviorIndex] != null)) {
            DialogControlHookup(lp_portraitFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestResetIcon" + IntToString(lv_itBehaviorIndex))));
            lv_questIconFrame = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            lv_icon = CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehaviorIndex], "InfoIcon", c_playerAny);
            DialogControlHookup(lv_questIconFrame, c_triggerControlTypeImage, "IconImage");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (lv_icon), PlayerGroupAll());
            libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_itBehaviorIndex] = null;
        }

    }
    libUIUI_gf_KillLogClearQuestResetDataCacheForPlayer(lp_player);
}

void libUIUI_gf_KillLogHideItem (int lp_indexToRemove) {
    // Variable Declarations
    int lv_i_Item;
    int lv_temp_Frame;
    timer lv_temp_Timer;

    // Automatic Variable Declarations
    int autoAFFF5F8D_ae;
    const int autoAFFF5F8D_ai = 1;

    // Variable Initialization
    lv_temp_Frame = c_invalidDialogControlId;
    lv_temp_Timer = TimerCreate();

    // Implementation
    libNtve_gf_StopTimer(libUIUI_gv_killLogItems[lp_indexToRemove].lv_timer);
    lv_temp_Timer = libUIUI_gv_killLogItems[lp_indexToRemove].lv_timer;
    lv_temp_Frame = libUIUI_gv_killLogItems[lp_indexToRemove].lv_frame;
    if ((libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_player > 0)) {
        if ((lp_indexToRemove > 1)) {
            DialogControlSetPositionRelative(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogItems[(lp_indexToRemove - 1)].lv_frame, c_anchorLeft, 0, 0);
        }
        else {
            DialogControlSetPositionRelative(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogPanel, c_anchorTopLeft, 0, libUIUI_gv_killLogTopOffset_D0A1);
        }
        DialogControlSendAnimationEvent(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), "SlideUp");
    }

    autoAFFF5F8D_ae = (libUIUI_gv_killLogMaxItemCountD0A1 - 1);
    lv_i_Item = lp_indexToRemove;
    for ( ; ( (autoAFFF5F8D_ai >= 0 && lv_i_Item <= autoAFFF5F8D_ae) || (autoAFFF5F8D_ai < 0 && lv_i_Item >= autoAFFF5F8D_ae) ) ; lv_i_Item += autoAFFF5F8D_ai ) {
        libUIUI_gv_killLogItems[lv_i_Item].lv_player = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_player;
        libUIUI_gv_killLogItems[lv_i_Item].lv_frame = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_frame;
        libUIUI_gv_killLogItems[lv_i_Item].lv_timer = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_timer;
        libUIUI_gv_killLogItems[lv_i_Item].lv_combo = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_combo;
        libUIUI_gv_killLogItems[lv_i_Item].lv_type = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_type;
    }
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_player = 0;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_frame = lv_temp_Frame;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_timer = lv_temp_Timer;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_combo = 0;
    DialogControlSendAnimationEvent(libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_frame, PlayerGroupAll(), "FadeOut");
}

void libUIUI_gf_KillLogDebugInitPanel () {
    // Variable Declarations
    int lv_i_Player;
    int lv_killFrame;
    int lv_questFrame;

    // Automatic Variable Declarations
    const int auto70EE42AF_ae = libCore_gv_bALMaxPlayers;
    const int auto70EE42AF_ai = 1;
    const int auto56CFEEF0_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto56CFEEF0_ai = 1;

    // Variable Initialization
    lv_killFrame = c_invalidDialogControlId;
    lv_questFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/KillLogDebugPanel");
    libUIUI_gv_killLogDebugPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_killLogDebugPanel.lv_closeButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypePanel, "KillFrame");
    lv_killFrame = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypePanel, "QuestFrame");
    lv_questFrame = DialogControlLastCreated();
    lv_i_Player = 1;
    for ( ; ( (auto70EE42AF_ai >= 0 && lv_i_Player <= auto70EE42AF_ae) || (auto70EE42AF_ai < 0 && lv_i_Player >= auto70EE42AF_ae) ) ; lv_i_Player += auto70EE42AF_ai ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_i_Player) == true)) {
            DialogControlHookup(lv_killFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
            libUIUI_gv_killLogDebugPanel.lv_killButtons[lv_i_Player] = DialogControlLastCreated();
            DialogControlHookup(lv_questFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
            libUIUI_gv_killLogDebugPanel.lv_questButtons[lv_i_Player] = DialogControlLastCreated();
        }

    }
    lv_i_Player = (libCore_gv_bALMaxPlayers + 1);
    for ( ; ( (auto56CFEEF0_ai >= 0 && lv_i_Player <= auto56CFEEF0_ae) || (auto56CFEEF0_ai < 0 && lv_i_Player >= auto56CFEEF0_ae) ) ; lv_i_Player += auto56CFEEF0_ai ) {
        DialogControlHookup(lv_killFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
    }
    DialogControlHookup(lv_killFrame, c_triggerControlTypeCheckBox, "Checkbox");
    libUIUI_gv_killLogDebugPanel.lv_killCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_questFrame, c_triggerControlTypeCheckBox, "Checkbox");
    libUIUI_gv_killLogDebugPanel.lv_questCheckbox = DialogControlLastCreated();
}

string libUIUI_gf_KillLogDebugRandomQuestBehavior () {
    // Automatic Variable Declarations
    int auto5DF28FC5_val;

    // Implementation
    auto5DF28FC5_val = RandomInt(0, 5);
    if (auto5DF28FC5_val == 1) {
        return "HeroMalfurionTalentElunesChosen@TokenCounter";
    }
    else if (auto5DF28FC5_val == 2) {
        return "HeroMalfurionTalentEntanglingRootsDangerousRoots@TokenCounter";
    }
    else if (auto5DF28FC5_val == 3) {
        return "HeroMalfurionTalentMoonfireHinderingMoonfire@TokenCounter";
    }
    else if (auto5DF28FC5_val == 4) {
        return "HeroSelendisTalentBladesofaZealot@TokenCounter";
    }
    else if (auto5DF28FC5_val == 5) {
        return "HeroSelendisTalentExecutorBladeExecutorPower@TokenCounter";
    }
    else {
        return "HeroTalandarTalentAccumulatedShieldShieldCapacitor@TokenCounter";
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto7F6DAF98_val;

    // Implementation
    auto7F6DAF98_val = lp_mode;
    if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    }
    else if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
        TimerPause(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon;
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowChestsSpawnedFrame () {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode != libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), true);
        TimerStart(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimerDuration_C, false, c_timeGame);
    }

}

void libUIUI_gf_MapMechanicsBlackheartsBayShowCannonballForTeam (int lp_team) {
    // Variable Declarations
    int lv_itCannonball;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto504D77C3_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int auto504D77C3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_team <= 0) || (lp_team > libCore_gv_bALMaxTeams))) {
        return ;
    }

    lv_enemyTeam = (3 - lp_team);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_enemyTeam], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    lv_itCannonball = 1;
    for ( ; ( (auto504D77C3_ai >= 0 && lv_itCannonball <= auto504D77C3_ae) || (auto504D77C3_ai < 0 && lv_itCannonball >= auto504D77C3_ae) ) ; lv_itCannonball += auto504D77C3_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetDoubloonCountForTeam (int lp_count, int lp_maxCount, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "B", IntToText(lp_maxCount));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_A34101EA"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetShotCountForTeam (int lp_count, int lp_team) {
    // Variable Declarations
    int lv_itCannonball;

    // Automatic Variable Declarations
    const int autoDE847449_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int autoDE847449_ai = 1;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "B", IntToText(libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_DD5F74BB"), PlayerGroupAll());
    lv_itCannonball = 1;
    for ( ; ( (autoDE847449_ai >= 0 && lv_itCannonball <= autoDE847449_ae) || (autoDE847449_ai < 0 && lv_itCannonball >= autoDE847449_ae) ) ; lv_itCannonball += autoDE847449_ai ) {
        if ((lp_count >= lv_itCannonball)) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), false);
        }
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto88BA1DCC_val;

    // Implementation
    auto88BA1DCC_val = lp_mode;
    if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Golem) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lp_team], IntToText(lp_count), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining (int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_820DF91D", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_820DF91D"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam (unit lp_golemUnit, int lp_skullCount, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed, int lp_skullCountTeamBlue, int lp_skullCountTeamRed) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnitTeamBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnitTeamRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamBlue), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamRed), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_MapMechanicsDragonShireShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsDragonShireSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto61B79793_val;

    // Implementation
    auto61B79793_val = lp_mode;
    if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Shrines) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Dragon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam (unit lp_dragonUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus, lp_dragonUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/DragonKnight"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/EnemyDragonKnight"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto2F14A2A1_ae = libCore_gv_bALMaxTeams;
    const int auto2F14A2A1_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "GardenOfTerrorPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SeedsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto2F14A2A1_ai >= 0 && lv_itTeam <= auto2F14A2A1_ae) || (auto2F14A2A1_ai < 0 && lv_itTeam >= auto2F14A2A1_ae) ) ; lv_itTeam += auto2F14A2A1_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SeedCounter");
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashGold");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashRed");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashGold");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashRed");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterMediumLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterMediumRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TimeOfDayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_ED1EDD0E"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_7D113FCF"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideNightWarning (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetNightWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemSummonPossibleForTeam (int lp_team, bool lp_summonPossible) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team] = lp_summonPossible;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (text lp_countText, int lp_team, bool lp_golemSummonPossible) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_golemSummonPossible == true)) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
    }
    else {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Disabled", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Disabled", PlayerGroupAll());
        }
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, lp_golemSummonPossible);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], lp_countText, PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam (int lp_team, bool lp_golemSummonPossible) {
    // Automatic Variable Declarations
    int auto7BB64B15_val;

    // Implementation
    auto7BB64B15_val = libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team];
    if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Growing", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Growing", PlayerGroupAll());
        return ;
    }
    else if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Ready", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Ready", PlayerGroupAll());
        return ;
    }
    else {
    }
    if ((lp_golemSummonPossible == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Open", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Open", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Closed", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Closed", PlayerGroupAll());
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideGolemFrame (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (unit lp_golemUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto341CE353_val;
    int autoCB91FB17_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((UnitIsAlive(lp_golemUnit) == true)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoCB91FB17_val = lp_team;
        if (autoCB91FB17_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoCB91FB17_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto341CE353_val = lp_team;
        if (auto341CE353_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto341CE353_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemRemainingTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto7583335C_val;
    int autoADF0E974_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoADF0E974_val = lp_team;
        if (autoADF0E974_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoADF0E974_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto7583335C_val = lp_team;
        if (auto7583335C_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto7583335C_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemGrowTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemStatusTextForTeam (int lp_team, int lp_status) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int autoDDBF81C0_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    autoDDBF81C0_val = lp_status;
    if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringToText(""), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringToText(""), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_15F600E1"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_5C0AA065"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_224BB1DA"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_85A746C8"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_DF8A73F2"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_2CFBAC22"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_68E79991"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_4F70E363"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameStatusTextForTeam (int lp_team, int lp_status) {
    // Automatic Variable Declarations
    int auto62734E53_val;

    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team] = lp_status;
    auto62734E53_val = lp_status;
    if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_8E8B516A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1F207391"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_A4731006"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_66D64EAA"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1D28BE3A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_F8344D7A"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else {
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team]);
}

trigger auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = null;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

void libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText (int lp_team, bool lp_flash, int lp_level) {
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team = lp_team;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash = lp_flash;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level = lp_level;

    if (auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger == null) {
        auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = TriggerCreate("auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger, false, false);
}

bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
    bool lp_flash = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
    int lp_level = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

    // Variable Declarations
    int lv_localFlashLevel;

    // Automatic Variable Declarations
    int autoE6F84108_val;
    int auto4215CB88_val;

    // Variable Initialization

    // Implementation
    if ((lp_flash == false)) {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == 0)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = 0;
    }
    else {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == lp_level)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = lp_level;
    }
    if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] > 0)) {
        lv_localFlashLevel = libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team];
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        autoE6F84108_val = lv_localFlashLevel;
        if (autoE6F84108_val == 1) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        }
        else if (autoE6F84108_val == 2) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        }
        else {
        }
        while (true) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            auto4215CB88_val = lv_localFlashLevel;
            if (auto4215CB88_val == 1) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            }
            else if (auto4215CB88_val == 2) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            }
            else {
            }
            Wait(0.5, c_timeGame);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            Wait(0.6, c_timeGame);
            if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] != lv_localFlashLevel)) {
                return true;
            }

        }
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
    }
    return true;
}

void libUIUI_gf_MapMechanicsCursedHollowInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoD2AB2912_ae = libCore_gv_bALMaxTeams;
    const int autoD2AB2912_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "CursedHollowPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TributeSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CurseFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_itTeam = 1;
    for ( ; ( (autoD2AB2912_ai >= 0 && lv_itTeam <= autoD2AB2912_ae) || (autoD2AB2912_ai < 0 && lv_itTeam >= autoD2AB2912_ae) ) ; lv_itTeam += autoD2AB2912_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "TributeFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeCounter");
        libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeCounterLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsCursedHollowShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam (int lp_mode, int lp_teamThatWonTheCurse) {
    // Variable Declarations
    int lv_cursedTeam;

    // Automatic Variable Declarations
    int auto348ADB36_val;
    int auto3D4A9C4D_val;

    // Variable Initialization

    // Implementation
    auto348ADB36_val = lp_mode;
    if (auto348ADB36_val == libUIUI_ge_MapMechanicsCursedHollowModes_NoActivity) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeFrame[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeFrame[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
    else if (auto348ADB36_val == libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawning) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_08460FA1"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnTimerLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (auto348ADB36_val == libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawned) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_7A76887B"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnTimerLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (auto348ADB36_val == libUIUI_ge_MapMechanicsCursedHollowModes_Curse) {
        lv_cursedTeam = (3 - lp_teamThatWonTheCurse);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Blue", libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Red", libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/TeamCursed"), libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/EnemyTeamCursed"), libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        auto3D4A9C4D_val = lv_cursedTeam;
        if (auto3D4A9C4D_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_29A85930"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else if (auto3D4A9C4D_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_1C20E3BA"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsCursedHollowSetTributeCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_E123CB78", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_E123CB78", "B", IntToText(libMapM_gv_mMRavenTributeThreshold));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTeamTributeCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_E123CB78"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsCursedHollowSetRemainingCurseTimeForTeam (int lp_remainingSeconds, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowCurseTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsCursedHollowSetRemainingTributeSpawnTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_cursedHollowTributeSpawnTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsWinterveilInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "SnowBallFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_winterveilPanel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsWinterveilShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_winterveilPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIEnableMapMechanicButtonForPlayer (int lp_playerID, bool lp_playIntroAnim) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupSingle(lp_playerID), libUIUI_gv_defaultButtonSize_C, libUIUI_gv_defaultButtonSize_C);
    if ((lp_playIntroAnim == true)) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupSingle(lp_playerID), "PlayOnceAnimationState", "IntroOn");
    }

}

void libUIUI_gf_UIEnableMapMechanicButtonAllPlayers (bool lp_playIntroAnim) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupAll(), libUIUI_gv_defaultButtonSize_C, libUIUI_gv_defaultButtonSize_C);
    if ((lp_playIntroAnim == true)) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupAll(), "PlayOnceAnimationState", "IntroOn");
    }

}

void libUIUI_gf_UIDisableMapMechanicButtonForPlayer (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupSingle(lp_playerID), -1, -1);
    DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupSingle(lp_playerID), "PlayOnceAnimationState", "IntroOff");
}

void libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer (int lp_player, text lp_titleText, text lp_numberText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel, lp_titleText, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel, lp_numberText, libCore_gv_playerGroupFromPlayer[lp_player]);
}

int libUIUI_gf_UIPartyFrameHeroTypeofHero (unit lp_hero) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = "";

    // Implementation
    lv_unitType = (UnitGetType(lp_hero));
    if (((lv_unitType == "HeroLostVikingsController") || (lv_unitType == "HeroOlaf") || (lv_unitType == "HeroErik") || (lv_unitType == "HeroBaleog"))) {
        return libUIUI_ge_UIPartyFrameHeroType_LostVikings;
    }
    else if ((lv_unitType == "HeroRexxar")) {
        return libUIUI_ge_UIPartyFrameHeroType_PetHero;
    }
    return libUIUI_ge_UIPartyFrameHeroType_NormalHero;
}

int libUIUI_gf_UIPartyFrameUIIndexofHeroUnit (unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    int auto89BE8C66_val;

    // Variable Initialization
    lv_unitType = "";

    // Implementation
    auto89BE8C66_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_heroUnit);
    if (auto89BE8C66_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        if ((lp_heroUnit == libGame_gv_players[lp_player].lv_heroUnit)) {
            return libUIUI_gv_uIPartyFrameHeroSlot_C;
        }
        else {
            return libUIUI_gv_uIPartyFrameHeroPetSlot_C;
        }
    }
    else if (auto89BE8C66_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
        lv_unitType = (UnitGetType(lp_heroUnit));
        if ((lv_unitType == "HeroOlaf")) {
            return libUIUI_gv_uIPartyFrameHeroSlotA_C;
        }
        else if ((lv_unitType == "HeroErik")) {
            return libUIUI_gv_uIPartyFrameHeroSlotB_C;
        }
        else if ((lv_unitType == "HeroBaleog")) {
            return libUIUI_gv_uIPartyFrameHeroSlotC_C;
        }
    }
    else {
    }
    return libUIUI_gv_uIPartyFrameHeroSlot_C;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_hero) == "HeroTracer")) {
        return true;
    }
    else {
        return false;
    }
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroUsesPairedRespawnTimer (unit lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_heroUnit) == UnitTypeFromString("HeroGall"))) {
        return true;
    }
    else {
        return false;
    }
}

timer libUIUI_gf_UIPartyFrameSpecialCaseHeroPairedRespawnTimer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_heroRosterSlotIndex;
    int lv_playerTeam;

    // Automatic Variable Declarations
    const int auto750EC6CB_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto750EC6CB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_heroIndex = 1;
    for ( ; ( (auto750EC6CB_ai >= 0 && lv_heroIndex <= auto750EC6CB_ae) || (auto750EC6CB_ai < 0 && lv_heroIndex >= auto750EC6CB_ae) ) ; lv_heroIndex += auto750EC6CB_ai ) {
        lv_heroRosterSlotIndex = ((lv_playerTeam-1)*libCore_gv_bALMaxPlayersOnATeam+lv_heroIndex);
        if ((UnitGetType(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_heroRosterSlotIndex][libUIUI_gv_uIPartyFrameHeroSlot_C]) == "HeroCho")) {
        }

    }
    return null;
}

timer libUIUI_gf_UIPartyFrameDeathTimer (int lp_player, unit lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroUsesPairedRespawnTimer(lp_heroUnit) == true)) {
        return libUIUI_gf_UIPartyFrameSpecialCaseHeroPairedRespawnTimer(lp_player);
    }

    return libGame_gv_players[lp_player].lv_respawnTimer;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasExtendedDeath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasCondensedDeath (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_hero) == "HeroChromie")) {
        return true;
    }
    else {
        return false;
    }
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicCoolup (string lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_hero == "HeroTracer")) {
        return true;
    }
    else {
        return false;
    }
}

void libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideHeroicAbility (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[libGame_gv_players[lp_player].lv_rosterSlot], PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameHeroicTalentUpdate (int lp_player, int lp_talentTierIndex) {
    // Variable Declarations
    int lv_abilityIndex;
    string lv_buttonEntry;
    int lv_rosterSlot;
    int lv_heroIndex;
    string lv_talentIcon;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_talentTierIndex];
    if (((lp_talentTierIndex != libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier) || (lv_talentIndex == 0))) {
        return ;
    }

    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C]) == false)) {
        lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
        lv_talentIcon = libCore_gv_talentData[lv_talentIndex].lv_buttonIcon;
        lv_abilityIndex = libCore_gv_talentData[lv_talentIndex].lv_abilityIndex;
        libUIUI_gf_UIPartyFrameHeroicTalentIconSet(lv_talentIcon, lp_player);
        libUIUI_gf_UIPartyFrameHeroicAbilitySet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink, lp_player);
    }

    if ((libGame_gv_players[lp_player].lv_isDead == false)) {
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lp_player);
    }

}

void libUIUI_gf_UIPartyFrameAddPlayerToPartyFrame (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_partyFrameHeroUnitIndex;
    unit lv_heroUnit;
    unit lv_unitIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto3496F6D5_val;
    int auto53488DD6_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gf_TeamNumberOfPlayer(lp_player)] = true;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto3496F6D5_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_heroUnit);
    if (auto3496F6D5_val == libUIUI_ge_UIPartyFrameHeroType_NormalHero) {
        libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C] = libGame_gv_players[lp_player].lv_heroUnit;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPartyFrame, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], libGame_gv_players[lp_player].lv_heroUnit, PlayerGroupAll());
        auto53488DD6_val = libUIUI_gf_UIGetHeroResourceTypeForPartyFrame(UnitGetType(lv_heroUnit));
        if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_None) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_Blue) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_Orange) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_Pink) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto53488DD6_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_017CAD1C"), true);
        }
        if ((UnitGetType(lv_heroUnit) == "HeroLeoric")) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }

    }
    else if (auto3496F6D5_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C] = lv_heroUnit;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPartyFrame, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], lv_heroUnit, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
    }
    else if (auto3496F6D5_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), true);
    libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(true, lp_player, libGame_gf_AlliedPlayerGroupOfPlayer(lp_player));
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotA_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotB_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotC_C], PlayerGroupAll(), false);
    libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lp_player);
}

void libUIUI_gf_UIPartyFrameHeroicAbilitySet (string lp_heroicAbility, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[libGame_gv_players[lp_player].lv_rosterSlot] = lp_heroicAbility;
}

void libUIUI_gf_UIPartyFrameHeroicTalentIconSet (string lp_icon, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[libGame_gv_players[lp_player].lv_rosterSlot], lp_icon, PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_itAbilityIndex;
    int lv_abilityIndex;
    string lv_abilityButtonEntry;
    unit lv_heroUnit;
    int lv_heroIndex;
    int lv_heroicTalentTier;

    // Automatic Variable Declarations
    int auto02956E44_ae;
    const int auto02956E44_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gf_TeamNumberOfPlayer(lp_player)] = true;
    lv_heroicTalentTier = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier;
    libUIUI_gf_UIPartyFrameHeroicAbilitySet(null, lp_player);
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] = false;
    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(lv_heroUnit) == true)) {
        auto02956E44_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
        lv_itAbilityIndex = 1;
        for ( ; ( (auto02956E44_ai >= 0 && lv_itAbilityIndex <= auto02956E44_ae) || (auto02956E44_ai < 0 && lv_itAbilityIndex >= auto02956E44_ae) ) ; lv_itAbilityIndex += auto02956E44_ai ) {
            lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbilityIndex];
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Heroic")) {
                lv_abilityButtonEntry = libCore_gv_abilityData[lv_abilityIndex].lv_abilityButtonLink;
                libUIUI_gf_UIPartyFrameHeroicTalentIconSet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, lp_player);
                libUIUI_gf_UIPartyFrameHeroicAbilitySet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink, lp_player);
                libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lp_player);
                break;
            }

        }
    }
    else if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_heroicTalentTier] > 0)) {
        libUIUI_gf_UIPartyFrameHeroicTalentUpdate(lp_player, lv_heroicTalentTier);
    }
    else if (true) {
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(false, lp_player);
    }
}

void libUIUI_gf_UIPartyFrameShowHidePlayerForPartyFrame (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPanels[libGame_gv_players[lp_player].lv_rosterSlot], PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup (bool lp_showHide, int lp_player, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    int auto55BB42CE_val;
    int auto07873020_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_rosterSlot], lp_playerGroup, false);
    }

    auto55BB42CE_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(libGame_gv_players[lp_player].lv_heroUnit);
    if (auto55BB42CE_val == libUIUI_ge_UIPartyFrameHeroType_NormalHero) {
        auto07873020_val = libUIUI_gf_UIGetHeroResourceTypeForPartyFrame(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
        if (auto07873020_val == libUIUI_ge_UIHeroResourceType_Blue) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_Orange) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_Pink) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_None) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (auto07873020_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_3789B0E0"), true);
        }
    }
    else if (auto55BB42CE_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_rosterSlot], lp_playerGroup, lp_showHide);
    }
    else if (auto55BB42CE_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_rosterSlot], lp_playerGroup, lp_showHide);
    }
    else {
    }
}

void libUIUI_gf_UIPartyFrameShowHideCoreHealth (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthLabel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning (int lp_teamNumber, bool lp_showHide) {
    // Variable Declarations
    playergroup lv_warningGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_warningGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, lv_warningGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lv_warningGroup);
    if ((lp_showHide == true)) {
        DialogControlSetAnimationState(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_teamNumber], lv_warningGroup, "CoreWarning", "WarningOn");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_teamNumber], lv_warningGroup, "CoreWarning", "WarningOff");
    }
}

void libUIUI_gf_UIPartyFrameShowHideTeamPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_teamNumber > libCore_gv_bALMaxTeams) && (lp_teamNumber <= 0)) {
        return ;
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[lp_teamNumber], lp_playerGroup, lp_showHide);
    }
}

void libUIUI_gf_UIPartyFrameShowHideLevelInfoPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_teamNumber > libCore_gv_bALMaxTeams) && (lp_teamNumber <= 0)) {
        return ;
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lp_teamNumber], lp_playerGroup, lp_showHide);
    }
}

void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameMainPanel (string lp_animationEvent, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_mainPanel, lp_playerGroup, lp_animationEvent);
}

void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameHeroPanelforPlayer (string lp_animationEvent, int lp_player, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[libGame_gv_players[lp_player].lv_rosterSlot], lp_playerGroup, lp_animationEvent);
}

void libUIUI_gf_UIPartyFrameHeroDies (int lp_killedPlayer, unit lp_killedUnit) {
    // Variable Declarations
    int lv_rosterSlot;
    timer lv_deathTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deathTimer = TimerCreate();

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_killedPlayer].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)] = false;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_killedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)], PlayerGroupAll(), true);
    }
    else {
        if ((UnitBehaviorDurationTotal(lp_killedUnit, "Dead") > 0.0)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), true);
            lv_deathTimer = libUIUI_gf_UIPartyFrameDeathTimer(lp_killedPlayer, lp_killedUnit);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(lv_deathTimer), 0), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], StringToText(""), PlayerGroupAll());
        }
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), true);
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(false, lp_killedPlayer);
        libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(false, lp_killedPlayer, libGame_gf_AlliedPlayerGroupOfPlayer(lp_killedPlayer));
        if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasExtendedDeath(lp_killedPlayer) == true)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_rosterSlot], PlayerGroupAll(), true);
        }

        if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasCondensedDeath(lp_killedUnit) == true)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_rosterSlot], PlayerGroupAll(), true);
        }

        if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_killedUnit) == libUIUI_ge_UIPartyFrameHeroType_PetHero)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
        }

        if ((UnitGetType(lp_killedUnit) == "HeroLeoric")) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], PlayerGroupAll(), true);
        }

    }
}

void libUIUI_gf_UIPartyFrameSetUpCoreHealthBarforTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_teams[lp_team].lv_core != null)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_team], libGame_gv_teams[lp_team].lv_core, PlayerGroupAll());
    }

}

void libUIUI_gf_UIPartyFrameTalentAdvantageUpdate () {
    // Variable Declarations
    int[libCore_gv_bALMaxTeams + 1] lv_teamPlayer;
    int[libCore_gv_bALMaxTeams + 1] lv_teamCurrentTalentTier;
    int lv_teamIndex;
    int lv_playerIndex;
    bool lv_allHeroesAreSpecialCase;

    // Automatic Variable Declarations
    const int auto95628094_ae = libCore_gv_bALMaxTeams;
    const int auto95628094_ai = 1;
    playergroup auto691AB3E9_g;

    // Variable Initialization
    lv_allHeroesAreSpecialCase = true;

    // Implementation
    if (((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true)) <= 0) || (PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true)) <= 0))) {
        return ;
    }

    lv_teamIndex = 1;
    for ( ; ( (auto95628094_ai >= 0 && lv_teamIndex <= auto95628094_ae) || (auto95628094_ai < 0 && lv_teamIndex >= auto95628094_ae) ) ; lv_teamIndex += auto95628094_ai ) {
        lv_allHeroesAreSpecialCase = true;
        auto691AB3E9_g = libGame_gf_PlayersOnTeamHeroes(lv_teamIndex, false);
        lv_playerIndex = -1;
        while (true) {
            lv_playerIndex = PlayerGroupNextPlayer(auto691AB3E9_g, lv_playerIndex);
            if (lv_playerIndex < 0) { break; }
            if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing) && (libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent(libGame_gv_players[lv_playerIndex].lv_heroUnit) == false)) {
                lv_allHeroesAreSpecialCase = false;
                lv_teamPlayer[lv_teamIndex] = lv_playerIndex;
                break;
            }

        }
        if ((lv_allHeroesAreSpecialCase == true)) {
            lv_teamPlayer[lv_teamIndex] = libGame_gf_GetPlayerIDfromTeamSlot(1, lv_teamIndex);
        }

        lv_teamCurrentTalentTier[lv_teamIndex] = libGame_gf_TalentChoicesCurrentTalentTierOfPlayer(lv_teamPlayer[lv_teamIndex]);
        libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_teamIndex] = lv_teamCurrentTalentTier[lv_teamIndex];
    }
    if (((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] == lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C]) || (libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gv_teamOrderIndex_C] == false) || (libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gv_teamChaosIndex_C] == false))) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else if ((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] > lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C])) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else if ((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] < lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C])) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIPartyFrameTeamLevelUpdate (int lp_team, int lp_level) {
    // Variable Declarations
    int lv_playerIndex;
    bool lv_allHeroesSpecialCase;
    int lv_alliedTeamPlayer;
    int lv_talentTierIndex;
    bool lv_nextIsNewTalentTier;

    // Automatic Variable Declarations
    playergroup auto08EDF46F_g;
    const int autoA69088B2_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoA69088B2_ai = 1;

    // Variable Initialization
    lv_allHeroesSpecialCase = true;

    // Implementation
    libUIUI_gf_UIPartyFrameTalentAdvantageUpdate();
    if ((lp_level > libUIUI_gv_uIPartyFrameMaxLevelForTeam[lp_team])) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[lp_team], IntToText(lp_level), PlayerGroupAll());
        libUIUI_gv_uIPartyFrameMaxLevelForTeam[lp_team] = lp_level;
    }

    if ((lp_level > 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lp_team], PlayerGroupAll(), "LevelUp");
    }

    auto08EDF46F_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto08EDF46F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing) && (libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent(libGame_gv_players[lv_playerIndex].lv_heroUnit) == false)) {
            lv_allHeroesSpecialCase = false;
            lv_alliedTeamPlayer = lv_playerIndex;
            break;
        }

    }
    if ((lv_allHeroesSpecialCase == true)) {
        lv_alliedTeamPlayer = libGame_gf_GetPlayerIDfromTeamSlot(1, lp_team);
    }

    lv_talentTierIndex = 1;
    for ( ; ( (autoA69088B2_ai >= 0 && lv_talentTierIndex <= autoA69088B2_ae) || (autoA69088B2_ai < 0 && lv_talentTierIndex >= autoA69088B2_ae) ) ; lv_talentTierIndex += autoA69088B2_ai ) {
        if ((lp_level == (libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_alliedTeamPlayer].lv_heroIndex].lv_talentTierLevel[lv_talentTierIndex] - 1))) {
            lv_nextIsNewTalentTier = true;
            break;
        }

    }
    if ((lv_nextIsNewTalentTier == true)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lp_team], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lp_team], PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIPartyFrameSetPetFrame (unit lp_petUnit, int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = lp_petUnit;
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_rexxar_misha.dds", PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], lp_petUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_rosterSlot], lp_petUnit, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_rosterSlot], PlayerGroupAll(), true);
}

void libUIUI_gf_UIPartyFrameSetVikingFrame (int lp_player, unit lp_vikingUnit) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_uIVikingIndex;

    // Automatic Variable Declarations
    string autoC0D39E87_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_uIVikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_vikingUnit, lp_player);
    autoC0D39E87_val = UnitGetType(lp_vikingUnit);
    if (autoC0D39E87_val == "HeroOlaf") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotA_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_olaf.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else if (autoC0D39E87_val == "HeroBaleog") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotB_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_baelog.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else if (autoC0D39E87_val == "HeroErik") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotC_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_eric.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][lv_uIVikingIndex], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_rosterSlot][lv_uIVikingIndex], lp_vikingUnit, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_rosterSlot], PlayerGroupAll(), true);
}

void libUIUI_gf_UIPartyFrameSetDVaFrame (int lp_playerID, bool lp_inMech) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_playerID].lv_rosterSlot;
    if ((lp_inMech == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_dva_mech.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_dva.dds", PlayerGroupAll());
    }
}

void libUIUI_gf_UIPartyFramePetDies (int lp_player, timer lp_petDeathTimer) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot] = lp_petDeathTimer;
    if ((libGame_gv_players[lp_player].lv_isDead == false)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], StringToText(""), PlayerGroupAll());
    }

}

void libUIUI_gf_UIPartyFrameVikingDies (int lp_player, unit lp_viking, timer lp_deathTimer) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_vikingIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libUIUI_gf_UIPartyFrameHeroDies(lp_player, lp_viking);
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_vikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_viking, lp_player);
    libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_vikingIndex] = lp_deathTimer;
}

void libUIUI_gf_UIPartyFrameHeroHearthstoneStart (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_unit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), ("HearthstoneStartHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_unit, lp_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), "HearthstoneStartDefault");
    }
}

void libUIUI_gf_UIPartyFrameHeroHearthstoneFizzle (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_unit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), ("HearthstoneFizzleHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_unit, lp_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), "HearthstoneFizzleDefault");
    }
}

void libUIUI_gf_UIPartyFrameSpecialCaseAurielRevivesHero (int lp_revivedPlayer, unit lp_revivedUnit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_revivedPlayer].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_revivedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("AurielReviveHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_revivedUnit, lp_revivedPlayer))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "AurielReviveDefault");
    }
}

void libUIUI_gf_UIPartyFrameGameTimerUpdate (text lp_gameTimeText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_gameTimerLabel, lp_gameTimeText, PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameHeroicTalentCooldownUpdate () {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_playerUnit;
    string lv_heroicAbilityLink;
    fixed lv_abilityCooldownTime;
    int lv_playerRosterSlot;
    fixed lv_heroicCoolupCharges;
    fixed lv_heroicCoolupChargesMax;
    playergroup lv_alliedPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto63570E6C_g;

    // Variable Initialization
    lv_alliedPlayerGroup = PlayerGroupEmpty();

    // Implementation
    auto63570E6C_g = libCore_gv_allHeroPlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto63570E6C_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        lv_playerRosterSlot = libGame_gv_players[lv_playerIndex].lv_rosterSlot;
        lv_alliedPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex);
        if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing) && (libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_playerRosterSlot] != null)) {
            lv_heroicAbilityLink = libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_playerRosterSlot];
            lv_playerUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_playerRosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C];
            if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicCoolup(UnitGetType(lv_playerUnit)) == true)) {
                lv_heroicCoolupCharges = UnitGetChargeUsed(lv_playerUnit, CatalogFieldValueGet(c_gameCatalogAbil, lv_heroicAbilityLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_playerIndex));
                lv_heroicCoolupChargesMax = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_heroicAbilityLink, "Cost[" + IntToString(0) + "].Charge.CountMax", lv_playerIndex));
                lv_heroicCoolupCharges = (lv_heroicCoolupChargesMax - lv_heroicCoolupCharges);
                if ((lv_heroicCoolupCharges < lv_heroicCoolupChargesMax)) {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], lv_alliedPlayerGroup, true);
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], StringToText(""), lv_alliedPlayerGroup);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], lv_alliedPlayerGroup, false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], lv_alliedPlayerGroup, true);
                    if ((lv_heroicCoolupChargesMax == 0.0)) {
                        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], 0.0, lv_alliedPlayerGroup);
                    }
                    else {
                        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], (100*(lv_heroicCoolupCharges/lv_heroicCoolupChargesMax)), lv_alliedPlayerGroup);
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], lv_alliedPlayerGroup, false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], lv_alliedPlayerGroup, true);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], lv_alliedPlayerGroup, false);
                }
            }
            else {
                lv_abilityCooldownTime = libCore_gf_AbilityCooldownTimeForPlayer(lv_playerUnit, lv_heroicAbilityLink, UnitGetOwner(lv_playerUnit));
                if ((lv_abilityCooldownTime > 0.0)) {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], lv_alliedPlayerGroup, true);
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], FixedToText(lv_abilityCooldownTime, 0), lv_alliedPlayerGroup);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], lv_alliedPlayerGroup, false);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], lv_alliedPlayerGroup, false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], lv_alliedPlayerGroup, true);
                }
            }
        }

    }
}

void libUIUI_gf_UIPartyFrameSpecialCaseUpdatePetDeath (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_petUISlot;
    unit lv_petUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_petUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C];
    lv_petUISlot = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_petUnit, lp_player);
    if ((UnitIsAlive(lv_petUnit) == false)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot]), 0), PlayerGroupAll());
        if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot]) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_petUISlot] == false)) {
            libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_petUISlot] = true;
            DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroAlmostRespawnedPet");
        }

    }

}

void libUIUI_gf_UIPartyFrameSpecialCaseUpdateVikingsDeath (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto6B2BE994_ae = libCore_gv_dataHeroesMaxAlternateHeroes;
    const int auto6B2BE994_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroIndex = 1;
    for ( ; ( (auto6B2BE994_ai >= 0 && lv_heroIndex <= auto6B2BE994_ae) || (auto6B2BE994_ai < 0 && lv_heroIndex >= auto6B2BE994_ae) ) ; lv_heroIndex += auto6B2BE994_ai ) {
        if ((UnitIsAlive(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][lv_heroIndex]) == false)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][lv_heroIndex], FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_heroIndex]), 0), PlayerGroupAll());
            if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_heroIndex]) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_heroIndex] == false)) {
                libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_heroIndex] = true;
                DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("HeroAlmostRespawnedHero" + IntToString(lv_heroIndex)));
            }

        }

    }
}

void libUIUI_gf_UIPartyFrameAllyPing (int lp_pingingPlayer, unit lp_targetUnit, int lp_targetPlayerID, int lp_uIRosterSlot, int lp_vikingIndex) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_targetPlayerHeroUnit;
    playergroup lv_pingTargetGroup;
    text lv_pingText;
    text lv_friendlyColor;
    int lv_deathTimerPrecision;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = lp_targetUnit;
    lv_pingTargetGroup = PlayerGroupEmpty();
    lv_friendlyColor = StringExternal("Param/Value/lib_UIUI_74717847");

    // Implementation
    if (((libGame_gf_PlayerIsHeroPlayer(lp_pingingPlayer) == false) || (libGame_gf_PlayerIsHeroPlayer(lp_targetPlayerID) == false))) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_pingingPlayer]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]) > 0.0)) {
        TextExpressionSetToken("Notification", c_textExpressionTokenMain, libUIUI_gv_pingLockoutTimerNotification);
        TextExpressionSetToken("Notification", "Timer", FixedToText(TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]), 1));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Notification"));
        return ;
    }

    lv_pingTargetGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_pingingPlayer, true));
    if ((UnitIsAlive(lv_targetUnit) == true) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, lv_targetUnit) == false)) {
        if ((libGame_gv_players[lp_pingingPlayer].lv_activeVehicle != null)) {
            lv_targetUnit = libGame_gv_players[lp_pingingPlayer].lv_activeVehicle;
        }

        libUIUI_gf_UIPingPlayerPingsUnit(lp_pingingPlayer, lv_targetUnit, lv_pingTargetGroup);
        libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
    }
    else {
        if ((UnitIsValid(lv_targetUnit) == true)) {
            if ((TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer) > 0.0) && (TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer) < 1)) {
                lv_deathTimerPrecision = 1;
            }

            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "E", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "D", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "C", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_targetPlayerID].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_87890E43", "A", FixedToText(TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer), lv_deathTimerPrecision));
            lv_pingText = TextExpressionAssemble("Param/Expression/lib_UIUI_87890E43");
            if ((libGame_gv_players[lp_targetPlayerID].lv_heroUsesAnnouncementAlias == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "E", lv_friendlyColor);
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "D", lv_friendlyColor);
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "C", libGame_gv_players[lp_targetPlayerID].lv_heroAnnouncementAliasText);
                TextExpressionSetToken("Param/Expression/lib_UIUI_92065BE2", "A", FixedToText(TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer), lv_deathTimerPrecision));
                lv_pingText = TextExpressionAssemble("Param/Expression/lib_UIUI_92065BE2");
            }

            if (((UnitGetType(lp_targetUnit) == "HeroOlaf") || (UnitGetType(lp_targetUnit) == "HeroBaleog") || (UnitGetType(lp_targetUnit) == "HeroErik"))) {
                if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]) > 0.0) && (TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]) < 1)) {
                    lv_deathTimerPrecision = 1;
                }

                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "E", lv_friendlyColor);
                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "D", lv_friendlyColor);
                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "C", UnitGetName(lv_targetUnit));
                TextExpressionSetToken("Param/Expression/lib_UIUI_C63C2D87", "A", FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]), lv_deathTimerPrecision));
                lv_pingText = TextExpressionAssemble("Param/Expression/lib_UIUI_C63C2D87");
            }

            libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
            UIDisplayMessage(lv_pingTargetGroup, c_messageAreaChat, lv_pingText);
        }
        else {
            if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]) > 0.0) && (TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]) < 1)) {
                lv_deathTimerPrecision = 1;
            }

            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "E", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "B", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "D", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "C", UnitTypeGetName("RexxarMisha"));
            TextExpressionSetToken("Param/Expression/lib_UIUI_06D4797D", "A", FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]), lv_deathTimerPrecision));
            lv_pingText = TextExpressionAssemble("Param/Expression/lib_UIUI_06D4797D");
            libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
            UIDisplayMessage(lv_pingTargetGroup, c_messageAreaChat, lv_pingText);
        }
    }
}

void libUIUI_gf_UIPartyFrameEnemyPing (int lp_pingingPlayer, unit lp_targetUnit, int lp_targetPlayerID, int lp_uIRosterSlot, int lp_vikingIndex) {
    // Variable Declarations
    text lv_pingMessage;
    point lv_location;
    text lv_friendlyColor;
    text lv_hostileColor;
    soundlink lv_pingSoundlink;
    playergroup lv_pingPlayerGroup;
    text lv_targetUnitName;
    unit lv_targetUnit;
    unit lv_transportUnit;
    bool lv_foundVisibleUnit;
    unit lv_activeVehicleUnit;
    int lv_deathTimerPrecision;

    // Automatic Variable Declarations
    unitgroup autoEF527C03_g;
    int autoEF527C03_u;
    unit autoEF527C03_var;

    // Variable Initialization
    lv_friendlyColor = StringExternal("Param/Value/lib_UIUI_FB41BDF3");
    lv_hostileColor = StringExternal("Param/Value/lib_UIUI_EF939E7E");
    lv_pingSoundlink = SoundLink("EditorDefaultSound", -1);
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_targetUnitName = UnitTypeGetName(UnitGetType(lp_targetUnit));
    lv_targetUnit = lp_targetUnit;

    // Implementation
    if (((libGame_gf_PlayerIsHeroPlayer(lp_pingingPlayer) == false) || (libGame_gf_PlayerIsHeroPlayer(lp_targetPlayerID) == false))) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_pingingPlayer]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]) > 0.0)) {
        TextExpressionSetToken("Notification", c_textExpressionTokenMain, libUIUI_gv_pingLockoutTimerNotification);
        TextExpressionSetToken("Notification", "Timer", FixedToText(TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_pingingPlayer]), 1));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Notification"));
        return ;
    }

    if ((UnitIsValid(lp_targetUnit) == false)) {
        lv_targetUnitName = UnitTypeGetName("RexxarMisha");
        if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]) > 0.0) && (TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]) < 1)) {
            lv_deathTimerPrecision = 1;
        }

        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "C", lv_friendlyColor);
        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "D", lv_hostileColor);
        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "B", lv_targetUnitName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_C77DE4BC", "E", FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lp_uIRosterSlot]), lv_deathTimerPrecision));
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_C77DE4BC");
        lv_pingSoundlink = SoundLink("UI_Game_Ping_General", -1);
        lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_pingingPlayer, true));
        libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        SoundPlayForPlayer(lv_pingSoundlink, lp_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
        return ;
    }

    if ((libGame_gv_players[lp_targetPlayerID].lv_heroUsesAnnouncementAlias == true)) {
        if ((UnitGetType(lp_targetUnit) == "HeroGall")) {
        }

        lv_targetUnitName = libGame_gv_players[lp_targetPlayerID].lv_heroAnnouncementAliasText;
    }

    if ((libGame_gv_players[lp_targetPlayerID].lv_activeVehicle != null)) {
        lv_activeVehicleUnit = libGame_gv_players[lp_targetPlayerID].lv_activeVehicle;
    }

    if ((libNtve_gf_UnitIsInsideTransport(lp_targetUnit) == true)) {
        lv_transportUnit = UnitTransport(lp_targetUnit);
        while ((UnitIsValid(UnitTransport(lv_transportUnit)) == true)) {
            lv_transportUnit = UnitTransport(lp_targetUnit);
            Wait(0.0, c_timeGame);
        }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_transportUnit, lp_pingingPlayer) == true)) {
            lv_targetUnit = lv_transportUnit;
            lv_targetUnitName = UnitGetName(lv_transportUnit);
        }

    }

    if (((UnitIsAlive(lv_targetUnit) == false) || (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, lv_targetUnit) == true))) {
        if ((TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer) > 0.0) && (TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer) < 1)) {
            lv_deathTimerPrecision = 1;
        }

        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "C", lv_friendlyColor);
        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "D", lv_hostileColor);
        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "B", lv_targetUnitName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_CF1D937B", "E", FixedToText(TimerGetRemaining(libGame_gv_players[lp_targetPlayerID].lv_respawnTimer), lv_deathTimerPrecision));
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_CF1D937B");
        lv_pingSoundlink = SoundLink("UI_Game_Ping_General", -1);
        lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_pingingPlayer, true));
        if (((UnitGetType(lp_targetUnit) == "HeroOlaf") || (UnitGetType(lp_targetUnit) == "HeroBaleog") || (UnitGetType(lp_targetUnit) == "HeroErik"))) {
            if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]) > 0.0) && (TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]) < 1)) {
                lv_deathTimerPrecision = 1;
            }

            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "C", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "D", lv_hostileColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "B", lv_targetUnitName);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B0489070", "E", FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lp_uIRosterSlot][lp_vikingIndex]), lv_deathTimerPrecision));
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_B0489070");
        }

        libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        SoundPlayForPlayer(lv_pingSoundlink, lp_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
        return ;
    }
    else {
        lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_pingingPlayer), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_pingingPlayer, true));
        if ((lv_activeVehicleUnit != null) && ((UnitHasBehavior2(lv_activeVehicleUnit, "MinionAIAttackableStructure") == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_activeVehicleUnit, lp_pingingPlayer) == true))) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lv_activeVehicleUnit);
            libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, "StormPingGeneral", UnitGetPosition(lv_activeVehicleUnit), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
            lv_targetUnitName = UnitTypeGetName(UnitGetType(lv_activeVehicleUnit));
            lv_foundVisibleUnit = true;
        }

        if ((lv_activeVehicleUnit == null) && ((UnitHasBehavior2(lv_targetUnit, "MinionAIAttackableStructure") == true) || ((libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lp_pingingPlayer) == true)))) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lv_targetUnit);
            libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, "StormPingGeneral", UnitGetPosition(lv_targetUnit), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
            lv_foundVisibleUnit = true;
        }

        if ((UnitGroupCount(libGame_gv_players[lp_targetPlayerID].lv_altClickPartyFrameAnnouncementUnitGroup, c_unitCountAlive) > 0)) {
            autoEF527C03_g = libGame_gv_players[lp_targetPlayerID].lv_altClickPartyFrameAnnouncementUnitGroup;
            autoEF527C03_u = UnitGroupCount(autoEF527C03_g, c_unitCountAll);
            for (;; autoEF527C03_u -= 1) {
                autoEF527C03_var = UnitGroupUnitFromEnd(autoEF527C03_g, autoEF527C03_u);
                if (autoEF527C03_var == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(autoEF527C03_var, lp_pingingPlayer) == true)) {
                    if ((lv_activeVehicleUnit != null)) {
                        lv_targetUnitName = UnitTypeGetName(UnitGetType(lv_activeVehicleUnit));
                    }

                    UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", autoEF527C03_var);
                    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, "StormPingGeneral", UnitGetPosition(autoEF527C03_var), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
                    lv_foundVisibleUnit = true;
                }

            }
        }

        if ((lv_foundVisibleUnit == true)) {
            lv_pingSoundlink = SoundLink("UI_Game_Ping_General", -1);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_321CFCD0", "C", lv_friendlyColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_321CFCD0", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_321CFCD0", "A", libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_pingingPlayer].lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_UIUI_321CFCD0", "D", lv_hostileColor);
            TextExpressionSetToken("Param/Expression/lib_UIUI_321CFCD0", "B", lv_targetUnitName);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_321CFCD0");
            lv_pingSoundlink = SoundLink("UI_Game_Ping_General", -1);
            libSond_gf_HeroVOPlayHeroLine("VOPing_EnemyMissing", lp_pingingPlayer, lv_pingPlayerGroup);
            UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        }
        libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSoundlink, lp_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
    }
}

void libUIUI_gf_UIPartyFrameTeamXPUpdateandManageTeamSpamTimers (int lp_teamNumber) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_teamXPPartySpamCounter[lp_teamNumber] += 1;
    if ((libUIUI_gv_teamXPPartySpamCounter[lp_teamNumber] >= libUIUI_gv_teamXPPartyFrameTeamPingCap_C)) {
        TimerStart(libUIUI_gv_teamXPPartySpamLockoutTimer[lp_teamNumber], 8.0, false, c_timeGame);
        libUIUI_gv_teamXPPartySpamCounter[lp_teamNumber] = 0;
    }
    else {
        TimerStart(libUIUI_gv_teamXPPartyFrameDecrementPingCountTimer[lp_teamNumber], 4.0, false, c_timeGame);
    }
}

void libUIUI_gf_UIPartyFrameSetCoreLifeTo0 (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_team], c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0%"), PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel (int lp_team, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[lp_team], lp_unit, PlayerGroupAll());
}

unit libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint (point lp_point, bool lp_pingFromMinimap, int lp_pingingPlayer) {
    // Variable Declarations
    const fixed lv_worldSearchRange_C = 3.0;
    const fixed lv_minimapSearchRange_C = 4.0;
    fixed lv_searchRange;
    unit lv_itUnit;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    unitgroup auto073004AE_g;
    int auto073004AE_u;
    unitgroup autoA8D3C773_g;
    int autoA8D3C773_u;
    unitgroup auto88B33712_g;
    int auto88B33712_u;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_pingFromMinimap == true)) {
        lv_searchRange = lv_minimapSearchRange_C;
    }
    else {
        lv_searchRange = lv_worldSearchRange_C;
    }
    lv_scanGroup = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lv_searchRange), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto073004AE_g = lv_scanGroup;
    auto073004AE_u = UnitGroupCount(auto073004AE_g, c_unitCountAll);
    for (;; auto073004AE_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto073004AE_g, auto073004AE_u);
        if (lv_itUnit == null) { break; }
        if ((UnitHasBehavior2(lv_itUnit, "UnitCannotBePinged") == true)) {
            UnitGroupRemove(lv_scanGroup, lv_itUnit);
        }

    }
    autoA8D3C773_g = lv_scanGroup;
    autoA8D3C773_u = UnitGroupCount(autoA8D3C773_g, c_unitCountAll);
    for (;; autoA8D3C773_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoA8D3C773_g, autoA8D3C773_u);
        if (lv_itUnit == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_itUnit, lp_pingingPlayer) == true)) {
            return lv_itUnit;
        }

    }
    auto88B33712_g = lv_scanGroup;
    auto88B33712_u = UnitGroupCount(auto88B33712_g, c_unitCountAll);
    for (;; auto88B33712_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto88B33712_g, auto88B33712_u);
        if (lv_itUnit == null) { break; }
        if (((libUIUI_gf_PingDeterminePingTargetType(lv_itUnit) != 0) || (libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) != libGame_ge_TownStructureTypes_None))) {
            return lv_itUnit;
        }

    }
    return null;
}

void libUIUI_gf_UIPingPlayerPingsUnit (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    // Variable Declarations
    bool lv_targetIsAllied;
    text lv_colorForTarget;
    text lv_colorForPingingHero;
    text lv_nameOfPingingHero;
    int lv_targetType;
    bool lv_targetFound;
    text lv_nameOfTarget;
    text lv_textExpression;
    text lv_pingMessage;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_townStructureTypeForUnit;

    // Automatic Variable Declarations
    int auto29D47EC1_val;

    // Variable Initialization

    // Implementation
    lv_pingModel = "StormPingGeneral";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
    lv_targetIsAllied = PlayerGetAlliance(lp_pingingPlayer, c_allianceIdChat, UnitGetOwner(lp_targetUnit));
    if ((lv_targetIsAllied == true)) {
        lv_colorForTarget = StringExternal("<c val=\"#PingAlly\">");
    }
    else {
        if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
            lv_colorForTarget = StringExternal("<c val=\"ffffff\">");
        }
        else {
            lv_colorForTarget = StringExternal("<c val=\"#PingEnemy\">");
        }
    }
    lv_colorForPingingHero = StringExternal("<c val=\"#PingAlly\">");
    lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_pingingPlayer].lv_heroUnit));
    if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
        lv_nameOfTarget = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
    }
    else {
        lv_nameOfTarget = UnitGetName(lp_targetUnit);
    }
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType != 0)) {
        lv_targetFound = true;
        if ((libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_nameOfTarget = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }

        if ((lv_targetIsAllied == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_pingPingTarget[lv_targetType].lv_textMessageAlliedTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_pingPingTarget[lv_targetType].lv_pingSoundAlliedTarget;
            libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineAlliedTarget, lp_pingingPlayer, lp_pingPlayerGroup);
        }
        else {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_pingPingTarget[lv_targetType].lv_textMessageEnemyTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_pingPingTarget[lv_targetType].lv_pingSoundEnemyTarget;
            libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineEnemyTarget, lp_pingingPlayer, lp_pingPlayerGroup);
            libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineHumanPingingPlayer, lp_pingingPlayer, lp_pingPlayerGroup);
        }
    }

    if ((lv_targetFound == false) && (UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == true)) {
        lv_targetFound = true;
        if ((UnitGroupHasUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnitGroup, lp_targetUnit) == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            TextExpressionSetToken("Param/Expression/lib_UIUI_DA93CAEF", "C", lv_colorForPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_DA93CAEF", "A", lv_nameOfPingingHero);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_DA93CAEF");
            lv_pingSound = SoundLink("UI_Game_Ping_Help", c_soundIndexAny);
            libSond_gf_HeroVOPlayHeroLine("Ping_AssistMe", lp_pingingPlayer, lp_pingPlayerGroup);
        }
        else {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_61D7611D");
                lv_pingSound = SoundLink("UI_Game_Ping_Help", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine("Ping_AssistHero", lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_99D3624E");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine("Ping_AttackHero", lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
    }

    lv_townStructureTypeForUnit = libGame_gf_TownGetTownStructurePresetFromUnit(lp_targetUnit);
    if ((lv_targetFound == false) && (lv_townStructureTypeForUnit != libGame_ge_TownStructureTypes_None)) {
        lv_targetFound = true;
        auto29D47EC1_val = lv_townStructureTypeForUnit;
        if (auto29D47EC1_val == libGame_ge_TownStructureTypes_Moonwell) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_4974ED36");
                lv_pingSound = SoundLink("UI_Game_Ping_General", c_soundIndexAny);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_199215ED");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine("Ping_AttackTown", lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else if (auto29D47EC1_val == libGame_ge_TownStructureTypes_Core) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_E05F9719");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", c_soundIndexAny);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine("Ping_DefendCore", lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_9196EE91");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine("Ping_AttackCore", lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_444068AE");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", c_soundIndexAny);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine("Ping_DefendTown", lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_0C071A0A");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine("Ping_AttackTown", lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
    }

    if ((lv_targetFound == true)) {
        UIDisplayMessage(lp_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        libCore_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, UnitGetPosition(lp_targetUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
    else {
        libCore_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, EventPingPoint(), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
}

void libUIUI_gf_UIPingPlayerUsesOnMyWayPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_OMW", -1);
    lv_pingModel = "OnMyWayPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    libSond_gf_HeroVOPlayHeroLine("VOPing_OnMyWay", lp_player, lv_pingPlayerGroup);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_activeVehicle, "OnMyWayPing", lp_location);
    }
    else {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "OnMyWayPing", lp_location);
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_105A74D1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_105A74D1"), 24, lp_location, 2.0, true, false, lv_pingPlayerGroup);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_F6660140", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_F6660140", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F6660140"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_TeamNumberOfPlayer(lp_player))) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "B", lv_targetName);
            UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_3F375D3C"));
        }
        else {
            if ((UnitGetOwner(lp_pingedUnit) == libCore_gv_cOMPUTER_Neutral)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_A57199B1"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F22FB677"));
            }
        }
    }
    PathDestroy(libGame_gv_players[lp_player].lv_onMyWayPathDisplay);
    if ((UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) == "HeroLostVikingsController")) {
        PathCreateForUnit(lv_pingPlayerGroup, UnitGroupUnit(UnitGroupSelected(lp_player), 1));
    }
    else {
        if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_activeVehicle);
        }
        else {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_heroUnit);
        }
    }
    PathSetDestinationPoint(PathLastCreated(), lp_location);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "assets\\Textures\\Storm_Waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 0.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    PathSetColor(PathLastCreated(), c_pathLocationAll, Color(80.39, 98.04, 68.63));
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 0.8);
    libGame_gv_players[lp_player].lv_onMyWayPathDisplay = PathLastCreated();
    TimerStart(libUIUI_gv_uIOnMyWayPingPathDisplayTimer[lp_player], libUIUI_gv_uIOnMyWayPingPathDisplayDuration, false, c_timeGame);
}

void libUIUI_gf_UIPingPlayerUsesDefendPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    text lv_pingingHeroName;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    text lv_pingedTargetName;
    int lv_targetType;

    // Automatic Variable Declarations
    string auto2A9B1099_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingingHeroName = UnitTypeGetName(UnitGetType(lv_pingingPlayerHero));
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
    lv_pingModel = "DefendPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    libSond_gf_HeroVOPlayHeroLine("VOPing_Defend", lp_player, lv_pingPlayerGroup);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DefendPing", lp_location);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_FCA8BA0C", "A", lv_pingingHeroName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_FCA8BA0C", "A", lv_pingingHeroName);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_FCA8BA0C"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_pingedTargetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingedTargetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_pingedTargetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_B37EFD44"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_824F7234", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_824F7234", "A", lv_pingingHeroName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_824F7234"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_pingedUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D7C47D03"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitHasBehavior2(lp_pingedUnit, "TownDeadController@DeadBehavior") == false)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_1B92FDE8"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                auto2A9B1099_val = UnitGetType(lp_pingedUnit);
                if (auto2A9B1099_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D46730AC", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D46730AC", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D46730AC"));
                }
                else if (auto2A9B1099_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FCD0655", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FCD0655", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_9FCD0655"));
                }
                else if (auto2A9B1099_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_852AF192", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_852AF192", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_852AF192"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C9C6E3EC", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C9C6E3EC", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C9C6E3EC"));
                }
            }
            else if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4B754EFF"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_47C52613", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_47C52613", "A", lv_pingingHeroName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_47C52613"));
            }
        }
    }
}

void libUIUI_gf_UIPingPlayerUsesRetreatPing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Retreat", -1);
    lv_pingModel = "RetreatPingMinimap";
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    libSond_gf_HeroVOPlayHeroLine("VOPing_Retreat", lp_player, lv_pingPlayerGroup);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    PlayerCreateEffectPoint(lp_player, "RetreatPing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2BCF1489", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2BCF1489", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_2BCF1489"));
}

void libUIUI_gf_UIPingPlayerUsesDangerPing (int lp_player, point lp_location, unit lp_targetUnit) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Careful", -1);
    lv_pingModel = "DangerPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    libSond_gf_HeroVOPlayHeroLine("VOPing_Danger", lp_player, lv_pingPlayerGroup);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_81F0DFCD"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) != libGame_gf_TeamNumberOfPlayer(lp_player))) {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C45AA731"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "B", lv_targetName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_0B869758"));
                }
            }
            else {
                UnitCreateEffectPoint(lv_pingingPlayerHero, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D367A3EE", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_D367A3EE", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D367A3EE"));
            }
        }
        else {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "B", libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "B", libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_04EC3978"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C8853800"));
                }
            }
            else {
                UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4282C808", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_4282C808", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4282C808"));
            }
        }
    }
}

void libUIUI_gf_UIPingPlayerUsesAssistMePing (int lp_player, unit lp_targetUnit, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    string auto623DCDD1_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
    lv_pingModel = "AssistMePingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    libSond_gf_HeroVOPlayHeroLine("VOPing_AssistMe", lp_player, lv_pingPlayerGroup);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "AssistMePing", lp_location);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_8A243501", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_8A243501", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_8A243501"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6D8BF5D2"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_340274A5"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_EBDD69FB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_EBDD69FB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_EBDD69FB"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_E5B3BD95"));
            }
            else if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_32C24EF0"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                auto623DCDD1_val = UnitGetType(lp_targetUnit);
                if (auto623DCDD1_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_7F583839"));
                }
                else if (auto623DCDD1_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_558A378C"));
                }
                else if (auto623DCDD1_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_85C5B017", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_85C5B017", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_85C5B017"));
                }
                else if (auto623DCDD1_val == "DocksPirateCaptain") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_58E3038C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_58E3038C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_58E3038C"));
                }
                else if (auto623DCDD1_val == "DocksTreasureChest") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_F80DD1DB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_F80DD1DB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F80DD1DB"));
                }
                else if (auto623DCDD1_val == "RavenLordTribute") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6B127AD6", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6B127AD6", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6B127AD6"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_31D2CD55", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_31D2CD55", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_31D2CD55"));
                }
            }
            else if ((UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C234381B"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_3E6BAAE0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_3E6BAAE0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_3E6BAAE0"));
            }
        }
    }
}

int libUIUI_gf_PingDeterminePingTargetType (unit lp_unit) {
    // Variable Declarations
    int lv_itPingTarget;
    string lv_unitTypeofUnit;
    bool lv_unitHasOccupiedVehicleBehavior;

    // Automatic Variable Declarations
    int auto0AB250A3_ae;
    const int auto0AB250A3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitTypeofUnit = UnitGetType(lp_unit);
    lv_unitHasOccupiedVehicleBehavior = UnitHasBehavior2(lp_unit, "GenericVehicleBehaviorOccupied");
    auto0AB250A3_ae = libUIUI_gv_pingTargetCount;
    lv_itPingTarget = 1;
    for ( ; ( (auto0AB250A3_ai >= 0 && lv_itPingTarget <= auto0AB250A3_ae) || (auto0AB250A3_ai < 0 && lv_itPingTarget >= auto0AB250A3_ae) ) ; lv_itPingTarget += auto0AB250A3_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_itPingTarget].lv_pingIsForOccupiedVehicle == lv_unitHasOccupiedVehicleBehavior) && (UnitGetType(lp_unit) == libUIUI_gv_pingPingTarget[lv_itPingTarget].lv_unitType)) {
            return lv_itPingTarget;
        }

    }
    return 0;
}

int libUIUI_gf_PingLastCreatedPingTarget () {
    // Automatic Variable Declarations
    // Implementation
    return libUIUI_gv_pingTargetCount;
}

void libUIUI_gf_PingPlayerStartsHearthStonePing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    text lv_pingingUnitName;
    int lv_pingTargetType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormPingGeneral";

    // Implementation
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_player]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_player]) > 0.0)) {
        return ;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_player);
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    if ((UnitGetType(lv_pingingPlayerHero) == "HeroLostVikingsController")) {
        if ((libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingingUnitName = libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroAnnouncementAliasText;
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    else {
        if ((UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive) == 1)) {
            lv_pingingUnitName = UnitGetName(UnitGroupUnit(UnitGroupSelected(lp_player), 1));
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingModel = "HearthstonePingMinimap";
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(0.0, 5.49, 73.33), 0.0, 270.0, lp_player);
    libUIUI_gv_pingPlayerHearthstonePing[lp_player] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.6);
    if ((TimerGetRemaining(libUIUI_gv_hearthPingTextLockoutTimer[lp_player]) == 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_672B6E44", "A", UnitGetName(lv_pingingPlayerHero));
        TextExpressionSetToken("Param/Expression/lib_UIUI_672B6E44", "A", UnitGetName(lv_pingingPlayerHero));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UIUI_672B6E44"));
        TimerStart(libUIUI_gv_hearthPingTextLockoutTimer[lp_player], 10.0, false, c_timeGame);
    }

}

void libUIUI_gf_PingCancelPlayersHearthStonePing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_pingPlayerHearthstonePing[lp_player] != c_invalidPingId)) {
        PingDestroy(libUIUI_gv_pingPlayerHearthstonePing[lp_player]);
        libUIUI_gv_pingPlayerHearthstonePing[lp_player] = c_invalidPingId;
    }

}

void libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_dEBUGPingLimitEnabled == false)) {
        return ;
    }

    libUIUI_gv_pingCount[lp_player] += 1;
    TimerStart(libUIUI_gv_pingInputSuppressionTimer[lp_player], libUIUI_gv_uIPingInputSuppressionTime_C, false, c_timeGame);
    TimerStart(libUIUI_gv_pingCountResetTime[lp_player], libUIUI_gv_uIPingCountResetTime_C, false, c_timeGame);
    if ((libUIUI_gv_pingCount[lp_player] >= libUIUI_gv_uIPingMaxCount_C)) {
        TimerStart(libUIUI_gv_pingLockoutTimer[lp_player], libUIUI_gv_uIPingLockoutTime_C, false, c_timeGame);
    }

}

void libUIUI_gf_PingResetPingLockoutTimeandPingCount (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingCount[lp_player] = 0;
    libNtve_gf_StopTimer(libUIUI_gv_pingInputSuppressionTimer[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingCountResetTime[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingLockoutTimer[lp_player]);
}

void libUIUI_gf_PingAIResponse (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    // Variable Declarations
    int lv_targetIsAllied;
    int lv_targetType;
    int lv_townStructuretypeForUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType != 0)) {
        if ((libUIUI_gv_pingPingTarget[lv_targetType].lv_customPingResponseTrigger != null)) {
            libUIUI_gv_pingPingCallbackPingingPlayer = lp_pingingPlayer;
            libUIUI_gv_pingPingCallbackTargetUnit = lp_targetUnit;
            TriggerExecute(libUIUI_gv_pingPingTarget[lv_targetType].lv_customPingResponseTrigger, true, false);
        }

    }

}

void libUIUI_gf_PingCreateNewPingTarget (string lp_unitType, bool lp_pingIsForOccupiedVehicle, text lp_pingTargetNameOverride, text lp_alliedTargetMessageText, text lp_enemyTargetMessageText, soundlink lp_alliedTargetPingSound, soundlink lp_enemyTargetPingSound) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingTargetCount += 1;
    if ((libUIUI_gv_pingTargetCount > libUIUI_gv_uIPingTargetMaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_880B8287", "A", IntToText(libUIUI_gv_pingTargetCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_880B8287"), true);
        libUIUI_gv_pingTargetCount = libUIUI_gv_uIPingTargetMaxCount_C;
    }

    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_unitType = lp_unitType;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingIsForOccupiedVehicle = lp_pingIsForOccupiedVehicle;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_targetNameOverride = lp_pingTargetNameOverride;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_textMessageAlliedTarget = lp_alliedTargetMessageText;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_textMessageEnemyTarget = lp_enemyTargetMessageText;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingSoundAlliedTarget = lp_alliedTargetPingSound;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingSoundEnemyTarget = lp_enemyTargetPingSound;
}

void libUIUI_gf_PingCreateNewPingTargetNameOverrideOnly (string lp_unitType, text lp_pingTargetNameOverride) {
    // Variable Declarations
    int lv_itPing;

    // Automatic Variable Declarations
    int auto07767596_ae;
    const int auto07767596_ai = 1;

    // Variable Initialization

    // Implementation
    auto07767596_ae = libUIUI_gv_pingTargetCount;
    lv_itPing = 1;
    for ( ; ( (auto07767596_ai >= 0 && lv_itPing <= auto07767596_ae) || (auto07767596_ai < 0 && lv_itPing >= auto07767596_ae) ) ; lv_itPing += auto07767596_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_itPing].lv_unitType == lp_unitType)) {
            libUIUI_gv_pingPingTarget[lv_itPing].lv_targetNameOverride = lp_pingTargetNameOverride;
            return ;
        }

    }
}

void libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget (int lp_pingTarget, string lp_allyTargetHeroVO, string lp_enemyTargetHeroVO) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineAlliedTarget = lp_allyTargetHeroVO;
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineEnemyTarget = lp_enemyTargetHeroVO;
}

void libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget (int lp_pingTarget, string lp_humanSourceHeroVO, string lp_aISourceHeroVO) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineHumanPingingPlayer = lp_humanSourceHeroVO;
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineAIPingingPlayer = lp_aISourceHeroVO;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingTarget (int lp_pingTarget, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_customPingResponseTrigger = lp_trigger;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingbyUnitType (string lp_pingUnitType, trigger lp_responseTrigger) {
    // Variable Declarations
    int lv_pingIndex;

    // Automatic Variable Declarations
    int auto5F20FA65_ae;
    const int auto5F20FA65_ai = 1;

    // Variable Initialization

    // Implementation
    auto5F20FA65_ae = libUIUI_gv_pingTargetCount;
    lv_pingIndex = 1;
    for ( ; ( (auto5F20FA65_ai >= 0 && lv_pingIndex <= auto5F20FA65_ae) || (auto5F20FA65_ai < 0 && lv_pingIndex >= auto5F20FA65_ae) ) ; lv_pingIndex += auto5F20FA65_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_pingIndex].lv_unitType == lp_pingUnitType)) {
            libUIUI_gv_pingPingTarget[lv_pingIndex].lv_customPingResponseTrigger = lp_responseTrigger;
            return ;
        }

    }
}

void libUIUI_gf_PreloadPanelShowHideHeader (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_preloadPanel.lv_headerLabel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_PreloadPanelShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    fixed autoAC176FAA_at;

    // Implementation
    if ((GameIsOnline() == false)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libUIUI_gf_PreloadPanelShowHideHeader(false);
        DialogControlSetVisible(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), true);
        autoAC176FAA_at = 0;
        while (!((TimerGetRemaining(libUIUI_gv_preloadPanelTimer) <= 0.0)) && autoAC176FAA_at <= libUIUI_gv_preloadPanelDisplayDuration) {
            Wait(1.0, c_timeGame);
            autoAC176FAA_at = autoAC176FAA_at + 1.0;
        }
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), "OnHiddenCustom");
        Wait(1.0, c_timeGame);
        DialogControlSetVisible(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), false);
    }
}

void libUIUI_gf_PreloadPanelSetNewTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_preloadPanel.lv_title, lp_title, PlayerGroupAll());
}

void libUIUI_gf_UITabScreenPanelUpdateTeamKills (int lp_team, int lp_kills) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamKillsLabel[lp_team], IntToText(lp_kills), PlayerGroupAll());
}

void libUIUI_gf_UITabScreenPanelUpdateTeamLevel (int lp_team, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_A63FED56", "A", StringExternal("UI/Scoreboard/Level"));
    TextExpressionSetToken("Param/Expression/lib_UIUI_A63FED56", "B", IntToText(lp_level));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamLevelLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_A63FED56"), PlayerGroupAll());
}

void libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer (int lp_player, int lp_buttonItem, string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(lp_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], "ButtonStates", (lp_state));
}

void libUIUI_gf_UITalentChoicePanelFillPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;
    int lv_itColumn;
    int lv_talentIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoDCE9CB4C_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoDCE9CB4C_ai = 1;
    int auto9F347EA8_ae;
    const int auto9F347EA8_ai = 1;
    string auto1A9B3069_val;
    const int autoCE2088F8_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoCE2088F8_ai = 1;

    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoDCE9CB4C_ai >= 0 && lv_itTier <= autoDCE9CB4C_ae) || (autoDCE9CB4C_ai < 0 && lv_itTier >= autoDCE9CB4C_ae) ) ; lv_itTier += autoDCE9CB4C_ai ) {
        auto9F347EA8_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTier];
        lv_itColumn = 1;
        for ( ; ( (auto9F347EA8_ai >= 0 && lv_itColumn <= auto9F347EA8_ae) || (auto9F347EA8_ai < 0 && lv_itColumn >= auto9F347EA8_ae) ) ; lv_itColumn += auto9F347EA8_ai ) {
            lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTier][lv_itColumn];
            DialogControlSetVisible(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentChoicePanel.lv_talentButtonIcon[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButtonName[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipNameLabel[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipInfoLabel[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipDescriptionLabel[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyLabel[lv_itTier][lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            auto1A9B3069_val = libCore_gv_talentData[lv_talentIndex].lv_talentType;
            if (auto1A9B3069_val == "Active") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], libCore_ge_HeroTalentType_Active, libCore_gv_playerGroupFromPlayer[lp_player]);
                if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                }
            }
            else if (auto1A9B3069_val == "Passive") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], libCore_ge_HeroTalentType_Passive, libCore_gv_playerGroupFromPlayer[lp_player]);
                if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                }
            }
            else {
                if ((libCore_gv_abilityData[libCore_gv_talentData[lv_talentIndex].lv_abilityIndex].lv_slot == "Heroic")) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], libCore_ge_HeroTalentType_Heroic, libCore_gv_playerGroupFromPlayer[lp_player]);
                    if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                    }
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], libCore_ge_HeroTalentType_Basic, libCore_gv_playerGroupFromPlayer[lp_player]);
                    if ((libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn], lp_player);
                    }
                }
            }
        }
        lv_itColumn = (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTier]+1);
        for ( ; ( (autoCE2088F8_ai >= 0 && lv_itColumn <= autoCE2088F8_ae) || (autoCE2088F8_ai < 0 && lv_itColumn >= autoCE2088F8_ae) ) ; lv_itColumn += autoCE2088F8_ai ) {
            DialogControlSetVisible(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    libUIUI_gf_UITalentChoicePanelSetTierButtonLevelsForPlayer(lp_player);
    libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerIngame(lp_player);
    libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lp_player);
}

void libUIUI_gf_UITalentChoicePanelUpdateTalentButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;
    int lv_itColumn;
    int lv_talentIndex;
    int lv_preresquiteTalentIndex;
    bool lv_tierHasChosenTalent;
    int lv_buttonItem;

    // Automatic Variable Declarations
    const int auto8C777F1D_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto8C777F1D_ai = 1;
    int auto14B49325_ae;
    const int auto14B49325_ai = 1;
    int auto49AF38A6_ae;
    const int auto49AF38A6_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto8C777F1D_ai >= 0 && lv_itTier <= auto8C777F1D_ae) || (auto8C777F1D_ai < 0 && lv_itTier >= auto8C777F1D_ae) ) ; lv_itTier += auto8C777F1D_ai ) {
        lv_tierHasChosenTalent = libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lv_itTier);
        if ((lv_itTier <= libGame_gf_TalentChoicesCurrentTalentTierOfPlayer(lp_player))) {
            auto14B49325_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTier];
            lv_itColumn = 1;
            for ( ; ( (auto14B49325_ai >= 0 && lv_itColumn <= auto14B49325_ae) || (auto14B49325_ai < 0 && lv_itColumn >= auto14B49325_ae) ) ; lv_itColumn += auto14B49325_ai ) {
                lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTier][lv_itColumn];
                lv_buttonItem = libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn];
                if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, lv_talentIndex) == true)) {
                    if ((libGame_gf_TalentChoicesPlayerHasTalentOnTier(lp_player, lv_talentIndex, lv_itTier) == true)) {
                        libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Selected");
                    }
                    else {
                        libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Disabled");
                    }
                }
                else if ((libGame_gf_TalentChoicesPlayerCanPrepickTalentTier(lp_player, lv_itTier) == true)) {
                    libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Enabled");
                }
                else if ((libGame_gf_TalentChoicesPlayerCanChooseTalentTier(lp_player, lv_itTier) == false)) {
                    libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Disabled");
                }
                else if (true) {
                    lv_preresquiteTalentIndex = libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex;
                    if ((lv_preresquiteTalentIndex == 0)) {
                        if ((lv_tierHasChosenTalent == true)) {
                            libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Disabled");
                        }
                        else {
                            libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "EnabledToSelect");
                        }
                    }
                    else {
                        if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, lv_preresquiteTalentIndex) == true)) {
                            if ((lv_tierHasChosenTalent == true)) {
                                libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Disabled");
                            }
                            else {
                                libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "EnabledToSelect");
                            }
                        }
                        else {
                            libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Disabled");
                        }
                    }
                }
            }
        }
        else {
            auto49AF38A6_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTier];
            lv_itColumn = 1;
            for ( ; ( (auto49AF38A6_ai >= 0 && lv_itColumn <= auto49AF38A6_ae) || (auto49AF38A6_ai < 0 && lv_itColumn >= auto49AF38A6_ae) ) ; lv_itColumn += auto49AF38A6_ai ) {
                lv_buttonItem = libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn];
                libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer(lp_player, lv_buttonItem, "Enabled");
            }
        }
    }
}

void libUIUI_gf_UITalentChoicePanelChooseTierForPlayer (int lp_tier, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_uITalentChoicePanel.lv_talentsPanelTabControl, libCore_gv_playerGroupFromPlayer[lp_player], ("SetSelectedIndex_" + IntToString((lp_tier - 1))));
}

void libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionForPlayer (int lp_player) {
    // Variable Declarations
    int lv_tier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_talentChoices[lp_player].lv_talentPoints == 0)) {
        libUIUI_gf_UITalentChoicePanelSetToggleButtonStateForPlayer(false, lp_player);
    }
    else {
        libUIUI_gf_UITalentChoicePanelSetToggleButtonStateForPlayer(true, lp_player);
        lv_tier = libGame_gf_TalentChoicesNextTierOfPlayer(lp_player);
        libUIUI_gf_UITalentChoicePanelChooseTierForPlayer(lv_tier, lp_player);
    }
}

void libUIUI_gf_UITalentChoicePanelSetTierButtonLevelsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoEA998FE2_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoEA998FE2_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoEA998FE2_ai >= 0 && lv_itTier <= autoEA998FE2_ae) || (autoEA998FE2_ai < 0 && lv_itTier >= autoEA998FE2_ae) ) ; lv_itTier += autoEA998FE2_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], IntToText(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier]), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_UITalentChoicePanelSetToggleButtonStateForPlayer (bool lp_toggled, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_toggled == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionToggleButton, libCore_gv_playerGroupFromPlayer[lp_player], "ShowEventAnimation");
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionToggleButton, libCore_gv_playerGroupFromPlayer[lp_player], "HideEventAnimation");
    }
}

void libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionIndicatorForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_talentChoices[lp_player].lv_talentPoints > 0)) {
        DialogControlSetAnimationState(libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer, libCore_gv_playerGroupFromPlayer[lp_player], "TalentAvailability", "Available");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer, libCore_gv_playerGroupFromPlayer[lp_player], "TalentAvailability", "Default");
    }
}

void libUIUI_gf_UITalentChoisePanelUpdateTierButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;
    int lv_talentIndex;
    int lv_nextTier;

    // Automatic Variable Declarations
    const int auto343AF856_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto343AF856_ai = 1;

    // Variable Initialization
    lv_nextTier = libGame_gf_TalentChoicesNextTierOfPlayer(lp_player);

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto343AF856_ai >= 0 && lv_itTier <= auto343AF856_ae) || (auto343AF856_ai < 0 && lv_itTier >= auto343AF856_ae) ) ; lv_itTier += auto343AF856_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier];
        if ((lv_talentIndex > 0)) {
            DialogControlSetAnimationState(libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconFrame[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TalentState", "TalentSelected");
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconImage[lv_itTier], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipNameLabel[lv_itTier], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipInfoLabel[lv_itTier], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipDescriptionLabel[lv_itTier], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconImage[lv_itTier], "", libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSetAnimationState(libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconFrame[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TalentState", "TalentNotAvailable");
        }
        if ((lv_nextTier == lv_itTier) && (libGame_gf_TalentChoicesPlayerCanChooseTalentTier(lp_player, lv_itTier) == true)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TierAvailable");
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TierNotAvailable");
        }
    }
}

void libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_questTokenCounterBehavior;
    int lv_talentIndex;
    int lv_itTier;
    fixed lv_targetValue;
    fixed lv_currentValue;

    // Automatic Variable Declarations
    const int autoA83199C8_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoA83199C8_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoA83199C8_ai >= 0 && lv_itTier <= autoA83199C8_ae) || (autoA83199C8_ai < 0 && lv_itTier >= autoA83199C8_ae) ) ; lv_itTier += autoA83199C8_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier];
        lv_questTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance);
        if ((lv_questTokenCounterBehavior == null)) {
            libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier], 0.0, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            lv_currentValue = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
            lv_targetValue = libGame_gf_TokenCounterGetTargetTokenCount(lv_questTokenCounterBehavior);
            libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier], lv_currentValue, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier], lv_targetValue, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsBehaviorForPlayer (int lp_player, string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_questTokenCounterBehavior;
    int lv_talentIndex;
    int lv_itTier;
    fixed lv_targetValue;
    fixed lv_currentValue;

    // Automatic Variable Declarations
    const int auto5847A5E7_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto5847A5E7_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((lp_tokenCounterBehavior == null)) {
        return ;
    }

    lv_itTier = 1;
    for ( ; ( (auto5847A5E7_ai >= 0 && lv_itTier <= auto5847A5E7_ae) || (auto5847A5E7_ai < 0 && lv_itTier >= auto5847A5E7_ae) ) ; lv_itTier += auto5847A5E7_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier];
        lv_questTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance);
        if ((lp_tokenCounterBehavior == lv_questTokenCounterBehavior)) {
            lv_currentValue = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
            lv_targetValue = libGame_gf_TokenCounterGetTargetTokenCount(lv_questTokenCounterBehavior);
            libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier], lv_currentValue, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier], lv_targetValue, libCore_gv_playerGroupFromPlayer[lp_player]);
            return ;
        }

    }
}

void libUIUI_gf_UITalentPanelSetUpPlayeronLeaderboard (int lp_player) {
    // Variable Declarations
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    lv_slot = libGame_gv_players[lp_player].lv_gameSlot;
    DialogControlHookup(libUIUI_gv_uITalentPanel.lv_unitStatusFrame[lv_slot], c_triggerControlTypeLabel, "PlayerHandleFrame");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_player), PlayerGroupAll());
}

void libUIUI_gf_UITalentPanelSetupStartQuestOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_gameSlot;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSlot = libGame_gv_players[lp_player].lv_gameSlot;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((libCore_gf_HeroDataHeroHasQuest(lv_heroIndex) == true)) {
        DialogControlSetVisible(libUIUI_gv_uITalentPanel.lv_talentFrame[lv_gameSlot][0], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentPanel.lv_talentTooltipNameLabel[lv_gameSlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataName, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentPanel.lv_talentTooltipDescriptionLabel[lv_gameSlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTooltipText[lp_player], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentPanel.lv_talentIcon[lv_gameSlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIcon, PlayerGroupAll());
        libUIUI_gf_UITalentPanelSetTalentTierStateOfPlayer(lp_player, "TalentSelected", 0);
        libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, 0, "HasQuest");
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITalentPanel.lv_talentFrame[lv_gameSlot][0], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_UITalentPanelUpdateTalentTierOfPlayer (int lp_player, int lp_talentTier) {
    // Variable Declarations
    int lv_gameSlot;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSlot = libGame_gv_players[lp_player].lv_gameSlot;

    // Implementation
    lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_talentTier];
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentPanel.lv_talentIcon[lv_gameSlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentPanel.lv_talentTooltipNameLabel[lv_gameSlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonName, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentPanel.lv_talentTooltipInfoLabel[lv_gameSlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentPanel.lv_talentTooltipDescriptionLabel[lv_gameSlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], PlayerGroupAll());
}

void libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer (int lp_player) {
    // Variable Declarations
    string lv_talentState;
    int lv_heroIndex;
    int lv_itTalentTier;
    int lv_level;

    // Automatic Variable Declarations
    const int autoFC2D1246_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoFC2D1246_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_level = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit);

    // Implementation
    lv_itTalentTier = 1;
    for ( ; ( (autoFC2D1246_ai >= 0 && lv_itTalentTier <= autoFC2D1246_ae) || (autoFC2D1246_ai < 0 && lv_itTalentTier >= autoFC2D1246_ae) ) ; lv_itTalentTier += autoFC2D1246_ai ) {
        if ((lv_level >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier])) {
            if ((libGame_gf_TalentChoicesTierIsHeroic(lv_heroIndex, lv_itTalentTier) == true)) {
                if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTalentTier] > 0)) {
                    lv_talentState = "UltimateSelected";
                }
                else {
                    lv_talentState = "UltimateAvailable";
                }
            }
            else {
                if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTalentTier] > 0)) {
                    lv_talentState = "TalentSelected";
                }
                else {
                    lv_talentState = "TalentAvailable";
                }
            }
        }
        else {
            if ((libGame_gf_TalentChoicesTierIsHeroic(lv_heroIndex, lv_itTalentTier) == true)) {
                lv_talentState = "UltimateNotAvailable";
            }
            else {
                lv_talentState = "TalentNotAvailable";
            }
        }
        libUIUI_gf_UITalentPanelSetTalentTierStateOfPlayer(lp_player, lv_talentState, lv_itTalentTier);
    }
}

void libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTalentTier;
    int lv_talentIndex;
    int lv_questIndex;
    fixed lv_currentCount;
    fixed lv_targetCount;
    fixed lv_maxCount;
    string lv_questTokenCounterBehavior;
    int lv_index;

    // Automatic Variable Declarations
    const int auto54E129D6_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto54E129D6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itTalentTier = 0;
    for ( ; ( (auto54E129D6_ai >= 0 && lv_itTalentTier <= auto54E129D6_ae) || (auto54E129D6_ai < 0 && lv_itTalentTier >= auto54E129D6_ae) ) ; lv_itTalentTier += auto54E129D6_ai ) {
        lv_questTokenCounterBehavior = null;
        if ((lv_itTalentTier == 0)) {
            if ((libCore_gf_HeroDataHeroHasQuest(lv_heroIndex) == false)) {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "NoQuest");
                continue;
            }

            lv_questTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance);
        }
        else {
            lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTalentTier];
            if (((lv_talentIndex == 0) || (libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == false))) {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "NoQuest");
                continue;
            }

            lv_questTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance);
        }
        lv_index = libCore_gf_TokenTokenCounterIndex(lv_questTokenCounterBehavior);
        lv_currentCount = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        lv_targetCount = libCore_gv_tokenCounterData[lv_index].lv_targetAmount;
        lv_maxCount = libCore_gv_tokenCounterData[lv_index].lv_maxAmount;
        if ((lv_currentCount < lv_targetCount)) {
            libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer(Trunc(lv_currentCount), lv_targetCount, lp_player, lv_itTalentTier);
            libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "HasQuest");
        }
        else {
            libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer(Trunc(lv_currentCount), Trunc(lv_currentCount), lp_player, lv_itTalentTier);
            if ((lv_targetCount == lv_maxCount)) {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "FinishedQuest");
            }
            else {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "FinishedUnlimitedQuest");
            }
        }
    }
}

void libUIUI_gf_UITalentPanelUpdateTalentsQuestsBehaviorOfPlayer (int lp_player, string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTalentTier;
    int lv_talentIndex;
    int lv_questIndex;
    fixed lv_currentCount;
    fixed lv_targetCount;
    fixed lv_maxCount;
    string lv_itTokenCounterBehavior;
    int lv_index;

    // Automatic Variable Declarations
    const int auto4C79BB74_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto4C79BB74_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itTalentTier = 0;
    for ( ; ( (auto4C79BB74_ai >= 0 && lv_itTalentTier <= auto4C79BB74_ae) || (auto4C79BB74_ai < 0 && lv_itTalentTier >= auto4C79BB74_ae) ) ; lv_itTalentTier += auto4C79BB74_ai ) {
        if ((lv_itTalentTier == 0)) {
            if ((libCore_gf_HeroDataHeroHasQuest(lv_heroIndex) == false)) {
                continue;
            }

            lv_itTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance);
            if ((lp_tokenCounterBehavior != lv_itTokenCounterBehavior)) {
                continue;
            }

        }
        else {
            lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTalentTier];
            if (((lv_talentIndex == 0) || (libCore_gf_TalentDataTalentHasQuest(lv_talentIndex) == false))) {
                continue;
            }

            lv_itTokenCounterBehavior = libCore_gf_TokenGetBehavior(libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance);
            if ((lp_tokenCounterBehavior != lv_itTokenCounterBehavior)) {
                continue;
            }

        }
        lv_index = libCore_gf_TokenTokenCounterIndex(lp_tokenCounterBehavior);
        lv_currentCount = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
        lv_targetCount = libCore_gv_tokenCounterData[lv_index].lv_targetAmount;
        lv_maxCount = libCore_gv_tokenCounterData[lv_index].lv_maxAmount;
        if ((lv_currentCount < lv_targetCount)) {
            libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer(Trunc(lv_currentCount), lv_targetCount, lp_player, lv_itTalentTier);
            libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "HasQuest");
        }
        else {
            libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer(Trunc(lv_currentCount), Trunc(lv_currentCount), lp_player, lv_itTalentTier);
            if ((lv_targetCount == lv_maxCount)) {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "FinishedQuest");
            }
            else {
                libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer(lp_player, lv_itTalentTier, "FinishedUnlimitedQuest");
            }
        }
        return ;
    }
}

void libUIUI_gf_UIHeroLeaderboardTalentsHeroicAbilityLinkUpdate2 (int lp_player) {
    // Variable Declarations
    int lv_abilityIndex;
    int lv_heroIndex;
    int lv_heroicLevel;
    int lv_talentIndex;
    int lv_itLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_talentIndex = libGame_gf_TalentChoicesHeroicTalentIndexOfPlayer(lp_player);
    if ((lv_talentIndex > 0)) {
        lv_abilityIndex = libCore_gv_talentData[lv_talentIndex].lv_abilityIndex;
        libUIUI_gv_uITalentPanel.lv_heroicAbilityLink[lp_player] = libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink;
        return ;
    }

    libUIUI_gv_uITalentPanel.lv_heroicAbilityLink[lp_player] = null;
    PlayerScoreValueSetFromFixed(lp_player, "HeroicAbilityCooldown", 0.0);
}

void libUIUI_gf_UIHeroLeaderboardTalentsUpdateHeroicTalentCooldown2 () {
    // Variable Declarations
    int lv_itPlayer;
    string lv_heroicAbilityLink;
    fixed lv_abilityCooldownTime;

    // Automatic Variable Declarations
    playergroup auto9BCCB48F_g;

    // Variable Initialization

    // Implementation
    auto9BCCB48F_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9BCCB48F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_uITalentPanel.lv_heroicAbilityLink[lv_itPlayer] != null)) {
            lv_heroicAbilityLink = libUIUI_gv_uITalentPanel.lv_heroicAbilityLink[lv_itPlayer];
            lv_abilityCooldownTime = libCore_gf_AbilityCooldownTimeForPlayer(libGame_gv_players[lv_itPlayer].lv_heroUnit, lv_heroicAbilityLink, lv_itPlayer);
            PlayerScoreValueSetFromFixed(lv_itPlayer, "HeroicAbilityCooldown", lv_abilityCooldownTime);
        }

    }
}

void libUIUI_gf_UITalentPanelSetTalentTierStateOfPlayer (int lp_targetPlayer, string lp_talentState, int lp_talentTier) {
    // Variable Declarations
    int lv_gameSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSlot = libGame_gv_players[lp_targetPlayer].lv_gameSlot;

    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uITalentPanel.lv_talentFrame[lv_gameSlot][lp_talentTier], PlayerGroupAll(), "TalentState", (lp_talentState));
}

void libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer (int lp_targetPlayer, int lp_talentLevel, string lp_talentLevelQuestState) {
    // Variable Declarations
    int lv_gameSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSlot = libGame_gv_players[lp_targetPlayer].lv_gameSlot;

    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uITalentPanel.lv_talentFrame[lv_gameSlot][lp_talentLevel], PlayerGroupAll(), "TalentQuestProgress", (lp_talentLevelQuestState));
}

void libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer (fixed lp_currentValue, fixed lp_maxValue, int lp_targetPlayer, int lp_talentLevel) {
    // Variable Declarations
    int lv_gameSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSlot = libGame_gv_players[lp_targetPlayer].lv_gameSlot;

    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentPanel.lv_talentQuestProgressBar[lv_gameSlot][lp_talentLevel], lp_maxValue, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uITalentPanel.lv_talentQuestProgressBar[lv_gameSlot][lp_talentLevel], lp_currentValue, PlayerGroupAll());
}

void libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerIngame (int lp_player) {
    // Variable Declarations
    int lv_itBuild;
    int lv_heroIndex;
    int lv_playerBuild;

    // Automatic Variable Declarations
    const int autoD89CFB09_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoD89CFB09_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_playerBuild = libGame_gf_LoadoutGetPlayerBuildForHero(lp_player, lv_heroIndex);

    // Implementation
    lv_itBuild = 1;
    for ( ; ( (autoD89CFB09_ai >= 0 && lv_itBuild <= autoD89CFB09_ae) || (autoD89CFB09_ai < 0 && lv_itBuild >= autoD89CFB09_ae) ) ; lv_itBuild += autoD89CFB09_ai ) {
        if ((lv_itBuild == lv_playerBuild)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentChoicePanel.lv_buildButton[lv_itBuild], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentChoicePanel.lv_buildButton[lv_itBuild], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection (int lp_player) {
    // Variable Declarations
    int lv_itBuild;
    int lv_heroIndex;
    int lv_playerBuild;

    // Automatic Variable Declarations
    const int auto4CBBF329_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int auto4CBBF329_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_playerBuild = libGame_gf_LoadoutGetPlayerBuildForHero(lp_player, lv_heroIndex);

    // Implementation
    lv_itBuild = 1;
    for ( ; ( (auto4CBBF329_ai >= 0 && lv_itBuild <= auto4CBBF329_ae) || (auto4CBBF329_ai < 0 && lv_itBuild >= auto4CBBF329_ae) ) ; lv_itBuild += auto4CBBF329_ai ) {
        if ((lv_itBuild == lv_playerBuild)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_build;
    int lv_itTier;
    int lv_itColumn;
    int lv_prepickedColumn;

    // Automatic Variable Declarations
    const int auto18B1FE04_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto18B1FE04_ai = 1;
    int auto264A1024_ae;
    const int auto264A1024_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_build = libGame_gf_LoadoutGetPlayerBuildForHero(lp_player, lv_heroIndex);

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto18B1FE04_ai >= 0 && lv_itTier <= auto18B1FE04_ae) || (auto18B1FE04_ai < 0 && lv_itTier >= auto18B1FE04_ae) ) ; lv_itTier += auto18B1FE04_ai ) {
        lv_prepickedColumn = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_itTier];
        if ((lv_prepickedColumn > 0)) {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        auto264A1024_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTier];
        lv_itColumn = 1;
        for ( ; ( (auto264A1024_ai >= 0 && lv_itColumn <= auto264A1024_ae) || (auto264A1024_ai < 0 && lv_itColumn >= auto264A1024_ae) ) ; lv_itColumn += auto264A1024_ai ) {
            if ((lv_prepickedColumn == lv_itColumn)) {
                libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
    }
}

void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_build;
    int lv_currentTier;
    int lv_itTier;
    int lv_itColumn;
    int lv_prepickedColumn;
    int lv_prepickedTier;
    bool lv_prepicked;

    // Automatic Variable Declarations
    const int auto52210A1F_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto52210A1F_ai = 1;
    int autoFFEC547F_ae;
    const int autoFFEC547F_ai = 1;

    // Variable Initialization
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lp_player].lv_selectedHero;
    lv_build = libGame_gf_LoadoutGetPlayerBuildForHero(lp_player, lv_heroIndex);
    lv_currentTier = libUIUI_gv_heroSelectionPlayer[lp_player].lv_talentTierPressedButton;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto52210A1F_ai >= 0 && lv_itTier <= auto52210A1F_ae) || (auto52210A1F_ai < 0 && lv_itTier >= auto52210A1F_ae) ) ; lv_itTier += auto52210A1F_ai ) {
        lv_prepickedColumn = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_itTier];
        if ((lv_prepickedColumn > 0)) {
            lv_prepicked = true;
        }
        else {
            lv_prepicked = false;
        }
        libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], lv_prepicked, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    lv_prepickedColumn = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_currentTier];
    if ((lv_prepickedColumn > 0)) {
        lv_prepicked = true;
    }
    else {
        lv_prepicked = false;
    }
    autoFFEC547F_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_currentTier];
    lv_itColumn = 1;
    for ( ; ( (autoFFEC547F_ai >= 0 && lv_itColumn <= autoFFEC547F_ae) || (autoFFEC547F_ai < 0 && lv_itColumn >= autoFFEC547F_ae) ) ; lv_itColumn += autoFFEC547F_ai ) {
        if ((lv_prepickedColumn == lv_itColumn)) {
            lv_prepicked = true;
        }
        else {
            lv_prepicked = false;
        }
        libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itColumn], lv_prepicked, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup (int lp_dialogItem, bool lp_prepicked, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_prepicked == true)) {
        DialogControlSetAnimationState(lp_dialogItem, lp_playerGroup, "PrepickedState", "Prepicked");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, lp_playerGroup, "PrepickedState", "None");
    }
}

void libUIUI_gf_UITargetInfoPanelUpdateUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UITargetInfoPanelUpdateUnitStatValue(libUIUI_gv_uITargetInfoPanel.lv_spellPowerLabel, "SpellDamageMultiplier", lp_player);
    libUIUI_gf_UITargetInfoPanelUpdateUnitStatValue(libUIUI_gv_uITargetInfoPanel.lv_physicalArmorLabel, "PhysicalArmor", lp_player);
    libUIUI_gf_UITargetInfoPanelUpdateUnitStatValue(libUIUI_gv_uITargetInfoPanel.lv_spellArmorLabel, "SpellArmor", lp_player);
}

void libUIUI_gf_UITargetInfoPanelUpdateUnitStatValue (int lp_dialogItem, string lp_unitStats, int lp_player) {
    // Variable Declarations
    fixed lv_statValue;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_statValue = libGame_gf_UnitStatsGetUserDataFromUnitGeneral(libUIUI_gv_uITargetInfoPanelPlayer[lp_player].lv_unit, lp_unitStats);
    if ((lv_statValue > 0.0)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "BuffDebuffStates", "Buff");
    }
    else if ((lv_statValue < 0.0)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "BuffDebuffStates", "Debuff");
    }
    else if (true) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "BuffDebuffStates", "Default");
    }
    lv_text = FixedToText(lv_statValue, 0);
    if (((lp_unitStats == "HealReceived") || (lp_unitStats == "PhysicalDamageMultiplier") || (lp_unitStats == "SpellDamageMultiplier") || (lp_unitStats == "Relentless"))) {
        lv_text = (lv_text + StringToText("%"));
    }

    libNtve_gf_SetDialogItemText(lp_dialogItem, lv_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

string libUIUI_gf_UITargetInfoPanelGetUnitIcon (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    int auto4AF1A397_val;
    int auto177EB434_val;
    string auto900A2A4D_val;
    int autoD34522A8_val;
    int auto73135FBC_val;
    int autoC0CB5A8C_val;
    int auto78191659_val;
    int auto8A668D13_val;
    string autoFF7E5680_val;
    int auto91DAE4A4_val;
    int auto6C15515C_val;
    int auto92670B65_val;
    int autoBEED83A3_val;
    int autoCD3BFFF6_val;
    int autoB1BD732F_val;
    int auto4055CF3D_val;
    int auto7CE8F49B_val;
    string auto522378E1_val;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureGate) == true)) {
        auto4AF1A397_val = libCore_gv_mAPTileset;
        if (auto4AF1A397_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Gate.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Gate.dds";
        }
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureWall) == true)) {
        auto177EB434_val = libCore_gv_mAPTileset;
        if (auto177EB434_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Wall.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Wall.dds";
        }
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureMoonwell) == true)) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Building_Moonwell.dds";
    }
    auto900A2A4D_val = UnitGetType(lp_unit);
    if (auto900A2A4D_val == "KingsCore") {
        autoD34522A8_val = libCore_gv_mAPTileset;
        if (autoD34522A8_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Core.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Core.dds";
        }
    }
    else if (auto900A2A4D_val == "TownTownHallL2") {
        auto73135FBC_val = libCore_gv_mAPTileset;
        if (auto73135FBC_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Fort.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Fort.dds";
        }
    }
    else if (auto900A2A4D_val == "TownTownHallL3") {
        autoC0CB5A8C_val = libCore_gv_mAPTileset;
        if (autoC0CB5A8C_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Keep.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Keep.dds";
        }
    }
    else if (auto900A2A4D_val == "TownCannonTowerL2Standalone") {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Building_Tower_0.dds";
    }
    else if (auto900A2A4D_val == "TownCannonTowerL2") {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Building_Tower_0.dds";
    }
    else if (auto900A2A4D_val == "TownCannonTowerL3Standalone") {
        auto78191659_val = libCore_gv_mAPTileset;
        if (auto78191659_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Tower_1.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Tower_1.dds";
        }
    }
    else if (auto900A2A4D_val == "TownCannonTowerL3") {
        auto8A668D13_val = libCore_gv_mAPTileset;
        if (auto8A668D13_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Building_Tower_1.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Building_Tower_1.dds";
        }
    }
    else {
    }

    autoFF7E5680_val = lv_unitType;
    if (autoFF7E5680_val == "FootmanMinion") {
        auto91DAE4A4_val = libCore_gv_mAPTileset;
        {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Minion_Melee.dds";
        }
    }
    else if (autoFF7E5680_val == "WizardMinion") {
        auto6C15515C_val = libCore_gv_mAPTileset;
        {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Minion_Wizard.dds";
        }
    }
    else if (autoFF7E5680_val == "RangedMinion") {
        auto92670B65_val = libCore_gv_mAPTileset;
        {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Bb_Minion_Ranged.dds";
        }
    }
    else if (autoFF7E5680_val == "CatapultMinion") {
        autoBEED83A3_val = libCore_gv_mAPTileset;
        if (autoBEED83A3_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Minion_Catapult.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Minion_Catapult.dds";
        }
    }
    else {
    }

    if (((lv_unitType == "MercDefenderSiegeGiant") || (lv_unitType == "MercLanerSiegeGiant"))) {
        autoCD3BFFF6_val = libCore_gv_mAPTileset;
        if (autoCD3BFFF6_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Merc_Siege.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Merc_Siege.dds";
        }
    }
    else if (((lv_unitType == "MercDefenderMeleeKnight") || (lv_unitType == "MercLanerMeleeKnight"))) {
        autoB1BD732F_val = libCore_gv_mAPTileset;
        if (autoB1BD732F_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Merc_Bruiser_Knight.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Merc_Bruiser_Knight.dds";
        }
    }
    else if (((lv_unitType == "MercDefenderRangedMage") || (lv_unitType == "MercLanerRangedMage"))) {
        auto4055CF3D_val = libCore_gv_mAPTileset;
        if (auto4055CF3D_val == libCore_ge_MAPTileset_RavenCourt) {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Merc_Bruiser_Wizard.dds";
        }
        else {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Dragonshire_Merc_Bruiser_Wizard.dds";
        }
    }
    else if (((lv_unitType == "JungleGraveGolemDefender") || (lv_unitType == "JungleGraveGolemLaner"))) {
        auto7CE8F49B_val = libCore_gv_mAPTileset;
        {
            return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Cursedhollow_Boss_Gravegolem.dds";
        }
    }
    else if (((lv_unitType == "MercGoblinSapperDefender") || (lv_unitType == "MercGoblinSapperLaner"))) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Towersofdoom_Merc_Siege.dds";
    }

    if ((lv_unitType == "EvilSnowman")) {
        return "assets\\Textures\\Storm_UI_LoadScreen_Snow_Brawl_Icon3.dds";
    }
    else if (((lv_unitType == "HeroAbathurLocust@Assault") || (lv_unitType == "HeroAbathurLocust@Bombard") || (lv_unitType == "HeroAbathurLocust@Normal"))) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Abathur_Locust.dds";
    }
    else if ((lv_unitType == "HeroAbathurLocustNest")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Abathur_LocustNest.dds";
    }
    else if ((lv_unitType == "HeroAbathurEvolveMonstrosity")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Abathur_Monstrosity.dds";
    }
    else if ((lv_unitType == "HeroAbathurToxicNest")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Abathur_ToxicNest.dds";
    }
    else if ((lv_unitType == "AzmodanDemonGrunt")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetInfoPanel_Unit_Azmodan_DemonicGrunt.dds";
    }
    else if ((lv_unitType == "AzmodanDemonLieutenant")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetInfoPanel_Unit_Azmodan_DemonLieutenant.dds";
    }
    else if ((lv_unitType == "AzmodanDemonWarrior")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetInfoPanel_Unit_Azmodan_DemonWarrior.dds";
    }
    else if ((lv_unitType == "AnubarakBeetle")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Anubarak_Beetle.dds";
    }
    else if (((lv_unitType == "AnubarakCocoon@Normal") || (lv_unitType == "AnubarakCocoon@Fat"))) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Anubarak_Cocoon.dds";
    }
    else if ((lv_unitType == "HeroJainaWaterElemental")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Jaina_Waterelemental.dds";
    }
    else if ((lv_unitType == "KerriganUltralisk")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Kerrigan_Ultralisk.dds";
    }
    else if ((lv_unitType == "KharazimAirAlly@MysticAlly")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Kharazim_Airally.dds";
    }
    else if ((lv_unitType == "KharazimEarthAlly@MysticAlly")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Kharazim_Earthally.dds";
    }
    else if ((lv_unitType == "KharazimSpiritAlly@MysticAlly")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Kharazim_Spiritally.dds";
    }
    else if ((lv_unitType == "HeroMalfurionTreant")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Malfurion_Treant.dds";
    }
    else if ((lv_unitType == "HeroRagnarosMoltenCore")) {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Ragnaros.dds";
    }
    else if ((lv_unitType == "TychusLaserDrill")) {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Tychus_Drakkanlaserdrill.dds";
    }

    auto522378E1_val = lv_unitType;
    if (auto522378E1_val == "HeroAbathur") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Abathur.dds";
    }
    else if (auto522378E1_val == "AnduinHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Anduin.dds";
    }
    else if (auto522378E1_val == "AnubarakHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Anubarak.dds";
    }
    else if (auto522378E1_val == "HeroArtanis") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Artanis.dds";
    }
    else if (auto522378E1_val == "HeroArthas") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Arthas.dds";
    }
    else if (auto522378E1_val == "HeroAuriel") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Auriel.dds";
    }
    else if (auto522378E1_val == "AzmodanHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Azmodan.dds";
    }
    else if (auto522378E1_val == "BrightwingHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_BRightWing.dds";
    }
    else if (auto522378E1_val == "DeltaHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Delta.dds";
    }
    else if (auto522378E1_val == "HeroDiablo") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Diablo.dds";
    }
    else if (auto522378E1_val == "ETCHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Etc.dds";
    }
    else if (auto522378E1_val == "HeroFalstad") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Falstad.dds";
    }
    else if (auto522378E1_val == "GreymaneHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Greymane.dds";
    }
    else if (auto522378E1_val == "HeroJaina") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Jaina.dds";
    }
    else if (auto522378E1_val == "JohannaHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Johanna.dds";
    }
    else if (auto522378E1_val == "KerriganHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Kerrigan.dds";
    }
    else if (auto522378E1_val == "KharazimHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Kharazim.dds";
    }
    else if (auto522378E1_val == "LiMingHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Liming.dds";
    }
    else if (auto522378E1_val == "HeroMalfurion") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Malfurion.dds";
    }
    else if (auto522378E1_val == "MuradinHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Muradin.dds";
    }
    else if (auto522378E1_val == "HeroRagnaros") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Ragnaros.dds";
    }
    else if (auto522378E1_val == "HeroSelendis") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Selendis.dds";
    }
    else if (auto522378E1_val == "HeroTalandar") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Talandar.dds";
    }
    else if (auto522378E1_val == "TychusHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Tychus.dds";
    }
    else if (auto522378E1_val == "TyrandeHero") {
        return "assets\\Textures\\Storm_UI_Ingame_PartyFrame_Tyrande.dds";
    }
    else {
    }

    return "assets\\Textures\\btn-missing-kaeo.dds";
}

bool libUIUI_gf_UIUnitStatusStatsDisplayUnitHasStatsDisplay (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true) || (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureTownHall) == true) || (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureCore) == true))) {
        return true;
    }

    return false;
}

void libUIUI_gf_UIUnitStatusStatsDisplayUpdateOnUnit (unit lp_unit) {
    // Variable Declarations
    string lv_itBehavior;
    string lv_physicalArmorBuff;
    string lv_spellArmorBuff;
    string lv_healReceivedBuff;
    bool lv_timed;
    int lv_armorPhysical;
    int lv_armorSpell;
    int lv_healReceived;
    bool lv_physicalArmorTimed;
    bool lv_spellArmorTimed;
    bool lv_healReceivedTimed;

    // Automatic Variable Declarations
    unit auto547627F1_u;
    int auto547627F1_i;

    // Variable Initialization

    // Implementation
    lv_armorPhysical = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnitGeneral(lp_unit, "PhysicalArmor"));
    lv_armorSpell = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnitGeneral(lp_unit, "SpellArmor"));
    lv_healReceived = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnitGeneral(lp_unit, "HealReceived"));
    auto547627F1_u = lp_unit;
    auto547627F1_i = 1;
    for ( ; auto547627F1_i <= UnitBehaviorCountAll(auto547627F1_u) ; auto547627F1_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(auto547627F1_u, auto547627F1_i)) ) {
        lv_itBehavior = UnitBehaviorGet(auto547627F1_u, auto547627F1_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagUser1) == true) && (UnitBehaviorCount(lp_unit, lv_itBehavior) > 0)) {
            if ((UnitBehaviorDuration(lp_unit, lv_itBehavior) < libCore_gv_behaviorInfinityDuration)) {
                lv_timed = true;
            }
            else {
                lv_timed = false;
            }
            if ((libGame_gf_StormBehaviorHasCategory(lv_itBehavior, libGame_ge_StormBehaviorCategories_PhysicalArmor) == true)) {
                if ((lv_timed == true)) {
                    if (((lv_physicalArmorTimed == false) || (lv_physicalArmorBuff == null))) {
                        lv_physicalArmorTimed = true;
                        lv_physicalArmorBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_physicalArmorBuff = lv_itBehavior;
                        }

                    }
                }
                else {
                    if ((lv_physicalArmorTimed == false)) {
                        lv_physicalArmorBuff = lv_itBehavior;
                    }

                }
            }

            if ((libGame_gf_StormBehaviorHasCategory(lv_itBehavior, libGame_ge_StormBehaviorCategories_SpellArmor) == true)) {
                if ((lv_timed == true)) {
                    if (((lv_spellArmorTimed == false) || (lv_spellArmorBuff == null))) {
                        lv_spellArmorTimed = true;
                        lv_spellArmorBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_spellArmorBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_spellArmorBuff = lv_itBehavior;
                        }

                    }
                }
                else {
                    if ((lv_spellArmorTimed == false)) {
                        lv_spellArmorBuff = lv_itBehavior;
                    }

                }
            }

            if ((libGame_gf_StormBehaviorHasCategory(lv_itBehavior, libGame_ge_StormBehaviorCategories_HealReceivedModifying) == true)) {
                if ((lv_timed == true)) {
                    if (((lv_healReceivedTimed == false) || (lv_healReceivedBuff == null))) {
                        lv_healReceivedTimed = true;
                        lv_healReceivedBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_healReceivedBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_healReceivedBuff = lv_itBehavior;
                        }

                    }
                }
                else {
                    if ((lv_healReceivedTimed == false)) {
                        lv_healReceivedBuff = lv_itBehavior;
                    }

                }
            }

        }

    }
    UnitBehaviorRemove(lp_unit, "UIUnitStatusAllArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusPhysicalArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusSpellArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusHealingModifier", 1);
    if ((lv_armorPhysical == lv_armorSpell) && (lv_physicalArmorTimed == lv_spellArmorTimed)) {
        if ((lv_physicalArmorBuff != null)) {
            if ((lv_armorPhysical == 0) && (lv_physicalArmorTimed == false)) {
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true)) {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/AllArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorPhysical), PlayerGroupAll());
                    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/AllArmorFrame/BehaviorIcon", lp_unit);
                }
                else {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "UnitStatsStatusDisplay/AllArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorPhysical), PlayerGroupAll());
                    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "UnitStatsStatusDisplay/AllArmorFrame/BehaviorIcon", lp_unit);
                }
                if ((lv_armorPhysical > 0)) {
                    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
                }
                else {
                    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
                }
                UnitBehaviorAdd(lp_unit, "UIUnitStatusAllArmor", lp_unit, 1);
                if ((lv_physicalArmorTimed == true)) {
                    UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDurationTotal(lp_unit, lv_physicalArmorBuff));
                    UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff));
                }
                else {
                    UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", 0.0);
                    UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", 0.0);
                }
            }
        }

    }
    else {
        if ((lv_physicalArmorBuff != null)) {
            if ((lv_armorPhysical == 0) && (lv_physicalArmorTimed == false)) {
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true)) {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/PhysicalArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorPhysical), PlayerGroupAll());
                    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/PhysicalArmorFrame/BehaviorIcon", lp_unit);
                }
                else {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "UnitStatsStatusDisplay/PhysicalArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorPhysical), PlayerGroupAll());
                    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "UnitStatsStatusDisplay/PhysicalArmorFrame/BehaviorIcon", lp_unit);
                }
                if ((lv_armorPhysical > 0)) {
                    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
                }
                else {
                    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
                }
                UnitBehaviorAdd(lp_unit, "UIUnitStatusPhysicalArmor", lp_unit, 1);
                if ((lv_physicalArmorTimed == true)) {
                    UnitBehaviorSetDuration(lp_unit, "UIUnitStatusPhysicalArmor", UnitBehaviorDurationTotal(lp_unit, lv_physicalArmorBuff));
                    UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusPhysicalArmor", UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff));
                }
                else {
                    UnitBehaviorSetDuration(lp_unit, "UIUnitStatusPhysicalArmor", 0.0);
                    UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusPhysicalArmor", 0.0);
                }
            }
        }

        if ((lv_spellArmorBuff != null)) {
            if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true)) {
                DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/AbilityArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorSpell), PlayerGroupAll());
                DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/AbilityArmorFrame/BehaviorIcon", lp_unit);
            }
            else {
                DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "UnitStatsStatusDisplay/SpellArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_armorSpell), PlayerGroupAll());
                DialogControlHookupUnitStatus(c_triggerControlTypePanel, "UnitStatsStatusDisplay/SpellArmorFrame/BehaviorIcon", lp_unit);
            }
            if ((lv_armorSpell > 0)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            UnitBehaviorAdd(lp_unit, "UIUnitStatusSpellArmor", lp_unit, 1);
            if ((lv_spellArmorTimed == true)) {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusSpellArmor", UnitBehaviorDurationTotal(lp_unit, lv_spellArmorBuff));
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusSpellArmor", UnitBehaviorDuration(lp_unit, lv_spellArmorBuff));
            }
            else {
                UnitBehaviorSetDuration(lp_unit, lv_spellArmorBuff, 0.0);
                UnitBehaviorSetDurationRemaining(lp_unit, lv_spellArmorBuff, 0.0);
            }
        }

    }
    if ((lv_healReceivedBuff != null)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/HealingFrame/BehaviorIcon/StatusLabel", lp_unit);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_healReceived), PlayerGroupAll());
        DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/UnitStatsStatusDisplay/HealingFrame/BehaviorIcon", lp_unit);
        if ((lv_healReceived > 0)) {
            if ((lv_healReceived < 100)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "BuffedMax");
            }
        }
        else {
            if ((lv_healReceived > -99)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "DebuffedMax");
            }
        }
        UnitBehaviorAdd(lp_unit, "UIUnitStatusHealingModifier", lp_unit, 1);
        if ((lv_healReceivedTimed == true)) {
            UnitBehaviorSetDuration(lp_unit, "UIUnitStatusHealingModifier", UnitBehaviorDurationTotal(lp_unit, lv_healReceivedBuff));
            UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusHealingModifier", UnitBehaviorDuration(lp_unit, lv_healReceivedBuff));
        }
        else {
            UnitBehaviorSetDuration(lp_unit, "UIUnitStatusHealingModifier", 0.0);
            UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusHealingModifier", 0.0);
        }
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_IncludeUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_IncludeUI_Init () {
    libUIUI_gt_IncludeUI = TriggerCreate("libUIUI_gt_IncludeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA84DD4B9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleOverrideWorld);
    UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupAll);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    if ((GameIsOnline() == true)) {
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    }
    else {
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    }
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeCommandPanel);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    TriggerExecute(libUIUI_gt_UIInitializeHealingFountainsHelpText, true, true);
    TriggerExecute(libUIUI_gt_UIInitializePartyFrameUI, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeGameUIHandles, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHeroConsole, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeTalentChoicePanel, true, true);
    TriggerExecute(libUIUI_gt_GameOverSplashInitialize, true, true);
    TriggerExecute(libUIUI_gt_GameStatsInitialize, true, true);
    TriggerExecute(libUIUI_gt_HeroConsoleUnitStatusBarsInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitializeRework, true, true);
    TriggerExecute(libUIUI_gt_MapMechanicsPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeDamageFlashUI, true, true);
    TriggerExecute(libUIUI_gt_KillLogInitialize, true, true);
    TriggerExecute(libUIUI_gt_NotificationDisplayInitialize, true, true);
    TriggerExecute(libUIUI_gt_HSUIIngameUIInit, true, true);
    TriggerExecute(libUIUI_gt_InitializeBaseModPingData, true, true);
    TriggerExecute(libUIUI_gt_PlayerAnnounceInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeTabScreenPanel, true, true);
    TriggerExecute(libUIUI_gt_UIHeroLeaderboardInitialize, true, true);
    TriggerExecute(libUIUI_gt_UITalentPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIDeathRecapPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UITargetInfoPanelInitialize, true, true);
    TriggerExecute(libGlue_gt_GlueInitializeGlueUI, true, true);
    TriggerExecute(libUIUI_gt_UIGameUISetGameData, true, true);
    autoA84DD4B9_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA84DD4B9_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeUI_Init () {
    libUIUI_gt_InitializeUI = TriggerCreate("libUIUI_gt_InitializeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Update Time Labels Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateTimeLabels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init () {
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires = TriggerCreate("libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_UIUpdateTimeLabelsTimerExpires, libUIUI_gv_uITimeLabelUpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Announce - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PlayerAnnounceInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoAC01F1C3_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAC01F1C3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "$Announcer/CommandPanel");
    libUIUI_gv_playerAnnounceCommandPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "$Announcer/Output");
    libUIUI_gv_playerAnnounceEditBox = DialogControlLastCreated();
    lv_itPlayer = 0;
    for ( ; ( (autoAC01F1C3_ai >= 0 && lv_itPlayer <= autoAC01F1C3_ae) || (autoAC01F1C3_ai < 0 && lv_itPlayer >= autoAC01F1C3_ae) ) ; lv_itPlayer += autoAC01F1C3_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlayerInteraction@InteractionUnit", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
        libGame_gv_players[lv_itPlayer].lv_interactiveUnit = UnitLastCreated();
        libNtve_gf_SetDialogItemUnitGroup(libUIUI_gv_playerAnnounceCommandPanel, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libUIUI_gf_PlayerAnnounceEnableDisableForPlayer(false, lv_itPlayer);
    }
    TriggerEnable(libUIUI_gt_PlayerAnnounceListenForAnnounce, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PlayerAnnounceInitialize_Init () {
    libUIUI_gt_PlayerAnnounceInitialize = TriggerCreate("libUIUI_gt_PlayerAnnounceInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Announce - Listen For Announce
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PlayerAnnounceListenForAnnounce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_output;

    // Automatic Variable Declarations
    string auto7924A8C9_val;

    // Variable Initialization
    lv_output = "";

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_playerAnnounceEditBox))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_output = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    if (((lv_output == "") || (lv_output == null))) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_playerAnnounceTimer[EventPlayer()]) == 0.0)) {
        TimerStart(libUIUI_gv_playerAnnounceTimer[EventPlayer()], 0.0625, false, c_timeGame);
    }
    else {
        return true;
    }
    auto7924A8C9_val = StringWord(lv_output, 1);
    if (auto7924A8C9_val == "Health") {
        libUIUI_gf_PlayerAnnounceHealth(EventPlayer(), lv_output);
    }
    else if (auto7924A8C9_val == "Energy") {
        libUIUI_gf_PlayerAnnounceEnergy(EventPlayer(), lv_output);
    }
    else if (auto7924A8C9_val == "XPContribution") {
        libUIUI_gf_PlayerAnnounceXPContribution(EventPlayer());
    }
    else if (auto7924A8C9_val == "PartyPanel") {
        libUIUI_gf_PlayerAnnouncePartyPanel(EventPlayer(), lv_output);
    }
    else if (auto7924A8C9_val == "CommandPanel") {
        libUIUI_gf_PlayerAnnounceCommandPanel(EventPlayer(), lv_output);
    }
    else if (auto7924A8C9_val == "InventoryPanel") {
        libUIUI_gf_PlayerAnnounceInventoryPanel(EventPlayer(), lv_output);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PlayerAnnounceListenForAnnounce_Init () {
    libUIUI_gt_PlayerAnnounceListenForAnnounce = TriggerCreate("libUIUI_gt_PlayerAnnounceListenForAnnounce_Func");
    TriggerEnable(libUIUI_gt_PlayerAnnounceListenForAnnounce, false);
    TriggerAddEventDialogControl(libUIUI_gt_PlayerAnnounceListenForAnnounce, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Announce - Ping Count Reset Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto26A6D8BA_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto26A6D8BA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto26A6D8BA_ai >= 0 && lv_itPlayer <= auto26A6D8BA_ae) || (auto26A6D8BA_ai < 0 && lv_itPlayer >= auto26A6D8BA_ae) ) ; lv_itPlayer += auto26A6D8BA_ai ) {
        if ((EventTimer() == libUIUI_gv_playerAnnounceCountResetTime[lv_itPlayer])) {
            libUIUI_gv_playerAnnouncePingCount[lv_itPlayer] = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires_Init () {
    libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires = TriggerCreate("libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[0]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[1]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[2]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[3]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[4]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[5]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[6]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[7]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[8]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[9]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[10]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[11]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[12]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[13]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[14]);
    TriggerAddEventTimer(libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires, libUIUI_gv_playerAnnounceCountResetTime[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Damage Flash UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeDamageFlashUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DamageOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LightDamageSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IntenseSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PersistentLowHealthSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeDamageFlashUI_Init () {
    libUIUI_gt_UIInitializeDamageFlashUI = TriggerCreate("libUIUI_gt_UIInitializeDamageFlashUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Trigger Damage Flash
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentHP;
    fixed lv_damagePercentage;
    fixed lv_flashOpacity;
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flashOpacity = 100.0;
    lv_fadeTime = 0.625;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentHP = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    lv_currentHP += 1.0;
    lv_damagePercentage = (EventUnitDamageAmount() / lv_currentHP);
    if ((UnitHasBehavior2(EventUnit(), "HeroAbathurSymbiote@CasterDummyBehavior") == true)) {
        lv_flashOpacity -= 100.0;
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold)) {
            if ((lv_damagePercentage >= 0.1)) {
                lv_flashOpacity -= 30.0;
            }

            if ((lv_damagePercentage >= 0.25)) {
                lv_flashOpacity -= 40.0;
                lv_fadeTime += 0.125;
            }

            if ((lv_damagePercentage >= 0.35)) {
                lv_flashOpacity -= 30.0;
                lv_fadeTime += 0.25;
            }

            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
        }
        else {
            libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(EventPlayer());
            if ((lv_damagePercentage >= 0.05)) {
                lv_flashOpacity -= 30.0;
                if ((lv_damagePercentage >= 0.1)) {
                    lv_flashOpacity -= 40.0;
                    lv_fadeTime += 0.125;
                }

                if ((lv_damagePercentage >= 0.2)) {
                    lv_flashOpacity -= 30.0;
                    lv_fadeTime += 0.25;
                }

                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
            }
            else {
                lv_flashOpacity -= 60.0;
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], lv_fadeTime, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init () {
    libUIUI_gt_UIDamageFlashTriggerDamageFlash = TriggerCreate("libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Low HP Sounds Looper
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    bool lv_triggerInUse;

    // Automatic Variable Declarations
    playergroup autoEF0060A4_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF0060A4_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEF0060A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_lowHPSoundPlaying == true)) {
            if (((libCore_gv_gameOver == true) || (UnitGetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold))) {
                libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_itPlayer);
            }
            else {
                lv_triggerInUse = true;
            }
        }

    }
    if ((lv_triggerInUse == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init () {
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper = TriggerCreate("libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func");
    TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Death Recap Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDeathRecapPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTimeZone;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbilities;
    int[7] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    const int auto593DE6FC_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    const int auto593DE6FC_ai = 1;
    const int auto3D116A6B_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
    const int auto3D116A6B_ai = 1;
    const int auto69040DD4_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int auto69040DD4_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, c_triggerControlTypeButton, "DeathRecapButton");
    libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/ShowDeathRecapButton");
    libUIUI_gv_deathRecapPanel.lv_tabScreenButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/DeathRecapContainerFrame/DeathRecapPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_deathRecapPanel.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GraphLabel");
    libUIUI_gv_deathRecapPanel.lv_mainGraphLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamagersPanel");
    libUIUI_gv_deathRecapPanel.lv_highestDamagersPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itMaxDamager = 1;
    for ( ; ( (auto593DE6FC_ai >= 0 && lv_itMaxDamager <= auto593DE6FC_ae) || (auto593DE6FC_ai < 0 && lv_itMaxDamager >= auto593DE6FC_ae) ) ; lv_itMaxDamager += auto593DE6FC_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/HighestDamagerPortrait");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/HighestDamagerPercentProgressBar");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAmountLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerHeroNameLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPlayerNameLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        lv_itMaxDamagerAbilities = 1;
        for ( ; ( (auto3D116A6B_ai >= 0 && lv_itMaxDamagerAbilities <= auto3D116A6B_ae) || (auto3D116A6B_ai < 0 && lv_itMaxDamagerAbilities >= auto3D116A6B_ae) ) ; lv_itMaxDamagerAbilities += auto3D116A6B_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamage" +IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityFrame" + IntToString(lv_itMaxDamagerAbilities));
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityImage");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityImage/AbilityProgressBar");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityLabel");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityAmount");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTooltip");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilitiesPanel/ScrollableList/ContainerFrame");
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itTimeZone = 1;
    for ( ; ( (auto69040DD4_ai >= 0 && lv_itTimeZone <= auto69040DD4_ae) || (auto69040DD4_ai < 0 && lv_itTimeZone >= auto69040DD4_ae) ) ; lv_itTimeZone += auto69040DD4_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone));
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/DamageChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealingChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealthChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIcon");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIconBorder");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIconBorders[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/EventCountLabel");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/TimeLabel");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HeroImageChunkContainer/HeroImageChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/TooltipFrame/BarGraphTooltipFrame");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[lv_itTimeZone] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilitiesPanel/GraphTopLabel");
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDeathRecapPanelInitialize_Init () {
    libUIUI_gt_UIDeathRecapPanelInitialize = TriggerCreate("libUIUI_gt_UIDeathRecapPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Open Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapOpenButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, EventPlayer());
    DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "Show");
    DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_tabControl, libCore_gv_playerGroupFromPlayer[EventPlayer()], "SetSelectedIndex_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapOpenButtonClicked_Init () {
    libUIUI_gt_DeathRecapOpenButtonClicked = TriggerCreate("libUIUI_gt_DeathRecapOpenButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_DeathRecapOpenButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Quest Progress Via Tokens
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_impactUnit;
    unit lv_launchUnit;
    int lv_launchPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_impactUnit = libGame_gf_QuestIncreaseImpactUnit();
    lv_launchUnit = libGame_gf_QuestIncreaseLaunchUnit();
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_launchPlayer) == true))) {
            return false;
        }

        if (!((lv_launchUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIFloatingCombatTextCreateQuestTagAtPoint(UnitGetPosition(lv_impactUnit), libCore_gv_playerGroupFromPlayer[lv_launchPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Init () {
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens = TriggerCreate("libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Func");
    libGame_gf_QuestIncrease(libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Quest Progress Via Effect
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_launchUnit;
    unit lv_impactUnit;
    int lv_launchPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_launchUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_impactUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_launchPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIFloatingCombatTextCreateQuestTagAtPoint(UnitGetPosition(lv_impactUnit), libCore_gv_playerGroupFromPlayer[lv_launchPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect_Init () {
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect = TriggerCreate("libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect, c_playerAny, "TalentQuestProgressDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Damage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    bool lv_isCrit;
    string lv_style;
    int lv_damageType;
    fixed lv_horizOffset;
    fixed lv_horizMultiplier;

    // Automatic Variable Declarations
    int autoEB0FFEE3_val;

    // Variable Initialization
    lv_damageType = libCore_ge_StormDamagingEffectKind_Any;

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != EventPlayer()))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExist(c_gameCatalogEffect, EventUnitDamageEffect(), "StormFlag IgnoredByTextTags") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = libCore_gf_CombatCalculateDamageAmount();
    if ((lv_amount < 1.0)) {
        return true;
    }

    lv_isCrit = libCore_gf_CombatCheckCritState(EventUnit(), UnitGetOwner(EventUnitDamageSourceUnit()), EventUnitDamageEffect());
    lv_damageType = libCore_gf_CombatDamageKindFromEffect(EventUnitDamageEffect());
    autoEB0FFEE3_val = lv_damageType;
    if (autoEB0FFEE3_val == libCore_ge_StormDamagingEffectKind_Physical) {
        if ((lv_isCrit == false)) {
            lv_style = "FCT_Physical_Normal";
        }
        else {
            lv_style = "FCT_Physical_Crit";
        }
    }
    else if (autoEB0FFEE3_val == libCore_ge_StormDamagingEffectKind_Spell) {
        if ((lv_isCrit == false)) {
            lv_style = "FCT_Spell_Normal";
        }
        else {
            lv_style = "FCT_Spell_Crit";
        }
    }
    else if (autoEB0FFEE3_val == libCore_ge_StormDamagingEffectKind_Pure) {
        if ((lv_isCrit == false)) {
            lv_style = "FCT_Pure_Normal";
        }
        else {
            lv_style = "FCT_Pure_Crit";
        }
    }
    else {
        if ((lv_isCrit == false)) {
            lv_style = "FCT_Physical_Normal";
        }
        else {
            lv_style = "FCT_Physical_Crit";
        }
    }
    lv_horizOffset = libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset(EventUnitDamageSourceUnit(), EventUnit());
    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_amount, 0), libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnitDamageSourceUnit())], lv_style, libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, lv_horizOffset);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsDamage_Init () {
    libUIUI_gt_UICombatFloatingElementsDamage = TriggerCreate("libUIUI_gt_UICombatFloatingElementsDamage_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UICombatFloatingElementsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libUIUI_gt_UICombatFloatingElementsDamage, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Damage Response No Leech
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_casterPlayer;
    fixed lv_amount;
    string lv_behavior;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_behavior = EventUnitBehavior();
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExist(c_gameCatalogBehavior, lv_behavior, "StormFlag IgnoredByTextTags") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_caster = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, (UnitBehaviorCount(EventUnit(), EventUnitBehavior())-1));
    lv_casterPlayer = UnitGetOwner(lv_caster);
    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimit", lv_casterPlayer) > 0.0)) {
        lv_amount += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimit", lv_casterPlayer);
    }

    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Life]", lv_casterPlayer) > 0.0)) {
        lv_amount += (UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)*libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Life]", lv_casterPlayer));
    }

    if ((lv_amount > 1.0)) {
        PlayerGroupAdd(lv_playerGroup, lv_casterPlayer);
        if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true)) {
            PlayerGroupAdd(lv_playerGroup, UnitGetOwner(EventUnit()));
        }

        libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_amount, 0), lv_playerGroup, "FCT_Shield_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset(lv_caster, EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Init () {
    libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech = TriggerCreate("libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech, null, c_unitBehaviorFlagUser2, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Heal
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;
    bool lv_isCrit;
    string lv_style;
    fixed lv_healGiven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExist(c_gameCatalogEffect, EventUnitHealEffect(), "StormFlag IgnoredByTextTags") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healGiven = EventUnitHealAmount();
    if ((lv_healGiven < 1.0)) {
        return true;
    }

    lv_isCrit = libCore_gf_CombatCheckCritState(EventUnit(), EventUnitHealLaunchPlayer(), EventUnitHealEffect());
    lv_playerGroup = libNtve_gf_UnionOfPlayerGroups(libCore_gv_playerGroupFromPlayer[EventUnitHealLaunchPlayer()], libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    if ((lv_isCrit == true)) {
        lv_style = "FCT_Heal_Crit";
    }
    else {
        lv_style = "FCT_Heal_Normal";
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_healGiven, 0), lv_playerGroup, lv_style, libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, RandomInt(-1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsHeal_Init () {
    libUIUI_gt_UICombatFloatingElementsHeal = TriggerCreate("libUIUI_gt_UICombatFloatingElementsHeal_Func");
    TriggerAddEventUnitHealed(libUIUI_gt_UICombatFloatingElementsHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Heal Prevented
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsHealPrevented_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_preventedHeal;
    unit lv_displayAtUnit;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_preventedHeal = libGame_gf_HeroHealPreventedAmount();
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[libGame_gf_HeroHealPreventedPlayer()].lv_activeVehicle == null)) {
        lv_displayAtUnit = libGame_gv_players[libGame_gf_HeroHealPreventedPlayer()].lv_heroUnit;
    }
    else {
        lv_displayAtUnit = libGame_gv_players[libGame_gf_HeroHealPreventedPlayer()].lv_activeVehicle;
    }
    lv_playerGroup = libCore_gv_playerGroupFromPlayer[libGame_gf_HeroHealPreventedPlayer()];
    TextExpressionSetToken("Param/Expression/lib_UIUI_53193EA3", "A", FixedToText(lv_preventedHeal, 0));
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_displayAtUnit, TextExpressionAssemble("Param/Expression/lib_UIUI_53193EA3"), lv_playerGroup, "FCT_Heal_Prevented", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsHealPrevented_Init () {
    libUIUI_gt_UICombatFloatingElementsHealPrevented = TriggerCreate("libUIUI_gt_UICombatFloatingElementsHealPrevented_Func");
    libGame_gf_HeroHealPrevented(libUIUI_gt_UICombatFloatingElementsHealPrevented);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Damage Prevented
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsDamagePrevented_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_preventedDamage;
    unit lv_target;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_preventedDamage = libGame_gf_HeroDamagePreventedAmount();
    lv_target = libGame_gf_HeroDamagePreventedTargetUnit();
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = libCore_gv_playerGroupFromPlayer[libGame_gf_HeroDamagePreventedPlayer()];
    TextExpressionSetToken("Param/Expression/lib_UIUI_9828680A", "A", FixedToText(lv_preventedDamage, 0));
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_target, TextExpressionAssemble("Param/Expression/lib_UIUI_9828680A"), lv_playerGroup, "FCT_Shield_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsDamagePrevented_Init () {
    libUIUI_gt_UICombatFloatingElementsDamagePrevented = TriggerCreate("libUIUI_gt_UICombatFloatingElementsDamagePrevented_Func");
    libGame_gf_HeroDamagePrevented(libUIUI_gt_UICombatFloatingElementsDamagePrevented);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Mana
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsMana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;
    string lv_style;
    bool lv_isCrit;
    fixed lv_manaGiven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NotManaUserDummy") == false))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExist(c_gameCatalogEffect, EventUnitHealEffect(), "StormFlag IgnoredByTextTags") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_manaGiven = EventUnitHealAmount();
    if ((lv_manaGiven < 1.0)) {
        return true;
    }

    lv_isCrit = libCore_gf_TechAliasExist(c_gameCatalogEffect, EventUnitHealEffect(), "StormFlag Critical");
    lv_playerGroup = libNtve_gf_UnionOfPlayerGroups(libCore_gv_playerGroupFromPlayer[EventUnitHealLaunchPlayer()], libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    if ((lv_isCrit == true)) {
        lv_style = "FCT_Mana_Crit";
    }
    else {
        lv_style = "FCT_Mana_Normal";
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_manaGiven, 0), lv_playerGroup, lv_style, libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsMana_Init () {
    libUIUI_gt_UICombatFloatingElementsMana = TriggerCreate("libUIUI_gt_UICombatFloatingElementsMana_Func");
    TriggerAddEventUnitHealed(libUIUI_gt_UICombatFloatingElementsMana, null, c_unitVitalEnergy, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Missing
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsMissing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    unit lv_displayUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
        if ((EventPlayerEffectUsed() == "BlindMissedDummy")) {
            if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == false)) {
                return true;
            }
            else {
                PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
                PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
                lv_displayUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
            }
        }
        else {
            if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitSource)) == false)) {
                return true;
            }
            else {
                PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
                PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
                lv_displayUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
            }
        }
    }

    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_displayUnit, StringExternal("Param/Value/lib_UIUI_26DD633F"), lv_players, "FCT_Physical_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsMissing_Init () {
    libUIUI_gt_UICombatFloatingElementsMissing = TriggerCreate("libUIUI_gt_UICombatFloatingElementsMissing_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsMissing, c_playerAny, "BlindMissedDummy");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsMissing, c_playerAny, "BlindMissedDummyCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Blocked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsBlocked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_5875544C"), lv_players, "FCT_Physical_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsBlocked_Init () {
    libUIUI_gt_UICombatFloatingElementsBlocked = TriggerCreate("libUIUI_gt_UICombatFloatingElementsBlocked_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsBlocked, c_playerAny, "TalentBlock@ImpactDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbathurSymbioteOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CCOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "FlashBangOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "DeathOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitialize_Init () {
    libUIUI_gt_FullscreenOverlaysInitialize = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Death Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE2CDF856_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2CDF856_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE2CDF856_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[11]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[12]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[14]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Special Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6D542AC8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D542AC8_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6D542AC8_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[11]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[12]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[14]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize Rework
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitializeRework_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanelRework");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitializeRework_Init () {
    libUIUI_gt_FullscreenOverlaysInitializeRework = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitializeRework_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game Info Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameInfoInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[7] lv_panels;
    int lv_currentPanelLayer;
    int lv_itDataSet;
    int lv_itHoverableTick;
    int lv_itPlayer;
    int lv_itButton;
    int lv_itPanel;

    // Automatic Variable Declarations
    const int auto6BAA0C68_ae = libCore_gv_bALMaxPlayers;
    const int auto6BAA0C68_ai = 1;
    const int auto183D1132_ae = libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C;
    const int auto183D1132_ai = 1;
    const int auto56862424_ae = libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C;
    const int auto56862424_ai = 1;
    const int auto1E23832A_ae = libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C;
    const int auto1E23832A_ai = 1;
    const int autoA0018C7B_ae = libUIUI_gv_uIGameInfoHeroOverviewGraphDataSetMax_C;
    const int autoA0018C7B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "$GameInfoPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIGameInfo.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "$GameInfoHeroOverviewPanel");
    libUIUI_gv_uIGameInfo.lv_heroOverviewPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("HeroSelectionPanel/SettingButtonPanel/IndividualButton"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonIndividual = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("HeroSelectionPanel/SettingButtonPanel/CompareCombinedButton"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonCompareCombined = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("HeroSelectionPanel/SettingButtonPanel/CompareCombinedTeamButton"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonCompareCombinedTeam = DialogControlLastCreated();
    lv_itPlayer = 1;
    for ( ; ( (auto6BAA0C68_ai >= 0 && lv_itPlayer <= auto6BAA0C68_ae) || (auto6BAA0C68_ai < 0 && lv_itPlayer >= auto6BAA0C68_ae) ) ; lv_itPlayer += auto6BAA0C68_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectionPanel/PlayerList/Player" + IntToString(lv_itPlayer))));
        libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonPlayer[lv_itPlayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
        libUIUI_gv_uIGameInfo.lv_heroOverviewPlayerListButtonPlayerHeroImage[lv_itPlayer] = DialogControlLastCreated();
    }

    lv_itPanel = 1;
    for ( ; ( (auto183D1132_ai >= 0 && lv_itPanel <= auto183D1132_ae) || (auto183D1132_ai < 0 && lv_itPanel >= auto183D1132_ae) ) ; lv_itPanel += auto183D1132_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("FilterSelectionPanel/FilterPanelFrame" + IntToString(lv_itPanel) + "/SettingButtonPanel/CompareButton")));
        libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCompareButton[lv_itPanel] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("FilterSelectionPanel/FilterPanelFrame" + IntToString(lv_itPanel) + "/SettingButtonPanel/CombineButton")));
        libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCombineButton[lv_itPanel] = DialogControlLastCreated();
        lv_itButton = 1;
        for ( ; ( (auto56862424_ai >= 0 && lv_itButton <= auto56862424_ae) || (auto56862424_ai < 0 && lv_itButton >= auto56862424_ae) ) ; lv_itButton += auto56862424_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, libNtve_gf_ConvertStringToUILayoutFrameName(("FilterSelectionPanel/FilterPanelFrame" + IntToString(lv_itPanel) + "/ScrollableFrame/ContainerFrame/PreplacedButton" + IntToString(lv_itButton))));
            libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCheckbox[lv_itPanel][lv_itButton] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("FilterSelectionPanel/FilterPanelFrame" + IntToString(lv_itPanel) + "/ScrollableFrame/ContainerFrame/PreplacedButton" + IntToString(lv_itButton) + "/Button/Label")));
            libUIUI_gv_uIGameInfo.lv_heroOverviewFilterPanelCheckboxLabel[lv_itPanel][lv_itButton] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(("Filter Panel " + IntToString(lv_itPanel) + " Checkbox " + IntToString(lv_itButton))), PlayerGroupAll());
        }
    }

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeGraphFrame, libNtve_gf_ConvertStringToUILayoutFrameName("GraphFrame"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itHoverableTick = 1;
    for ( ; ( (auto1E23832A_ai >= 0 && lv_itHoverableTick <= auto1E23832A_ae) || (auto1E23832A_ai < 0 && lv_itHoverableTick >= auto1E23832A_ae) ) ; lv_itHoverableTick += auto1E23832A_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("HoverableTickPanel/HoverableTickFrame" + IntToString(lv_itHoverableTick))));
        libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTick[lv_itHoverableTick] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itDataSet = 1;
        for ( ; ( (autoA0018C7B_ai >= 0 && lv_itDataSet <= autoA0018C7B_ae) || (autoA0018C7B_ai < 0 && lv_itDataSet >= autoA0018C7B_ae) ) ; lv_itDataSet += autoA0018C7B_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString((lv_itDataSet - 1)))));
            libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTickLabel[lv_itHoverableTick][lv_itDataSet] = DialogControlLastCreated();
        }
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Total"));
        libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanelHoverableTickLabelTotal[lv_itHoverableTick] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("TimePanel"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, libNtve_gf_ConvertStringToUILayoutFrameName("SliderMin"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanelSliderMin = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, libNtve_gf_ConvertStringToUILayoutFrameName("SliderMax"));
    libUIUI_gv_uIGameInfo.lv_heroOverviewTimePanelSliderMax = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;

    lv_currentPanelLayer -= 1;

    DialogControlAddDataPoint(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), 0.0, 0.0, 1);
    DialogControlAddDataPoint(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), 1600.0, 500.0, 1);
    DialogControlAddDataPoint(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), 0.0, 0.0, 2);
    DialogControlAddDataPoint(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), 1600.0, 2000.0, 2);
    DialogControlSetDataName(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), StringToText("WoW"), 1);
    DialogControlSetDataColor(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), Color(100.00, 50.20, 25.10), 1);
    DialogControlSetDataColor(libUIUI_gv_uIGameInfo.lv_heroOverviewGraphPanel, PlayerGroupAll(), Color(0.00, 50.20, 50.20), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameInfoInitialize_Init () {
    libUIUI_gt_UIGameInfoInitialize = TriggerCreate("libUIUI_gt_UIGameInfoInitialize_Func");
    TriggerAddEventMapInit(libUIUI_gt_UIGameInfoInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Splash Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GameOverSplashInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/GameOverSplash");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_gameOverSplash.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "VictoryBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_victoryFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "VictoryBackground/VictoryLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_184306D1"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_VictoryLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DefeatBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_defeatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DefeatBackground/DefeatLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_51E2F601"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DefeatLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_gameOverSplash.lv_defeatLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GameOverSplashInitialize_Init () {
    libUIUI_gt_GameOverSplashInitialize = TriggerCreate("libUIUI_gt_GameOverSplashInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Stats Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GameStatsInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/GameStatsPanel");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_gameStats.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "GameOverExitButton");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameStats.lv_exitButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "Countdown/ProgressBar");
    libUIUI_gv_gameStats.lv_countdownProgressBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Countdown/CountdownLabel");
    libUIUI_gv_gameStats.lv_countdownTextLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GameStatsInitialize_Init () {
    libUIUI_gt_GameStatsInitialize = TriggerCreate("libUIUI_gt_GameStatsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Game UI Handles
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeGameUIHandles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itButton;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoBE5FCC9E_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoBE5FCC9E_ai = 1;
    const int autoB3F2B481_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoB3F2B481_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "$this");
    libUIUI_gv_uIGameUIHandles.lv_gameUI = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton05");
    libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton = DialogControlLastCreated();
    DialogControlSetSize(libUIUI_gv_uIGameUIHandles.lv_mapMechanicButton, PlayerGroupAll(), 0, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    libUIUI_gv_uIGameUIHandles.lv_helpButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeLabel, "GameInfoLabel");
    libUIUI_gv_uIGameUIHandles.lv_gameInfoLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypePanel, "HeroSpecificStatusContainer");
    libUIUI_gv_uIGameUIHandles.lv_heroSpecificStatusContainer = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_gameUI, c_triggerControlTypeLabel, "PlayerIDLabel");
    libUIUI_gv_uIGameUIHandles.lv_playerIDLabel = DialogControlLastCreated();
    lv_itPlayer = 0;
    for ( ; ( (autoBE5FCC9E_ai >= 0 && lv_itPlayer <= autoBE5FCC9E_ae) || (autoBE5FCC9E_ai < 0 && lv_itPlayer >= autoBE5FCC9E_ae) ) ; lv_itPlayer += autoBE5FCC9E_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIGameUIHandles.lv_playerIDLabel, IntToText(lv_itPlayer), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
    }
    lv_itPlayer = 0;
    for ( ; ( (autoB3F2B481_ai >= 0 && lv_itPlayer <= autoB3F2B481_ae) || (autoB3F2B481_ai < 0 && lv_itPlayer >= autoB3F2B481_ae) ) ; lv_itPlayer += autoB3F2B481_ai ) {
        DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_gameUI, c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerHeroList/Player" + IntToString(lv_itPlayer))));
        libUIUI_gv_uIGameUIHandles.lv_playerHeroUnit[lv_itPlayer] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeGameUIHandles_Init () {
    libUIUI_gt_UIInitializeGameUIHandles = TriggerCreate("libUIUI_gt_UIInitializeGameUIHandles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game UI - Turn On Faction States
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameUITurnOnFactionStates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto795321CA_g;
    playergroup auto8D4EB5B9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto795321CA_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto795321CA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIGameUITurnOnFactionStateForPlayer(libGame_ge_Faction_Order, lv_itPlayer);
    }
    auto8D4EB5B9_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8D4EB5B9_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIGameUITurnOnFactionStateForPlayer(libGame_ge_Faction_Chaos, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameUITurnOnFactionStates_Init () {
    libUIUI_gt_UIGameUITurnOnFactionStates = TriggerCreate("libUIUI_gt_UIGameUITurnOnFactionStates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game UI - Set GameData
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameUISetGameData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_UIUI_DAA9B363", "A", StringToText(libGame_gv_gameDataVersion));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIGameUIHandles.lv_gameInfoLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_DAA9B363"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameUISetGameData_Init () {
    libUIUI_gt_UIGameUISetGameData = TriggerCreate("libUIUI_gt_UIGameUISetGameData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Healing Fountains Help Text
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHealingFountainsHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamOrderIndex_C);
    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamChaosIndex_C);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, true);
    // libGame_gt_StartGame
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHealingFountainsHelpText_Init () {
    libUIUI_gt_UIInitializeHealingFountainsHelpText = TriggerCreate("libUIUI_gt_UIInitializeHealingFountainsHelpText_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Player Uses Healing Fountain
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
    libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, false);
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, c_playerAny, "HeroGenericFountainDrink@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Text Display Controller
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTextTag;
    fixed lv_moonwellCooldown;

    // Automatic Variable Declarations
    const int autoFA1FE25E_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoFA1FE25E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoFA1FE25E_ai >= 0 && lv_itPlayer <= autoFA1FE25E_ae) || (autoFA1FE25E_ai < 0 && lv_itPlayer >= autoFA1FE25E_ae) ) ; lv_itPlayer += autoFA1FE25E_ai ) {
        if (((UnitIsValid(libGame_gv_players[lv_itPlayer].lv_heroUnit) == false) || (libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == false) || (libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_itPlayer] == true))) {
            continue;
        }

        if ((UnitGetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsValid(libGame_gv_players[lv_itPlayer].lv_activeVehicle) == false)) {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_itPlayer] == false)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_itPlayer, true);
            }

        }
        else {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_itPlayer] == true)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_itPlayer, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Healing Fountain Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    const int autoF49E9685_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    const int autoF49E9685_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagTownStructureMoonwell) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder) || (UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    lv_iter = 1;
    for ( ; ( (autoF49E9685_ai >= 0 && lv_iter <= autoF49E9685_ae) || (autoF49E9685_ai < 0 && lv_iter >= autoF49E9685_ae) ) ; lv_iter += autoF49E9685_ai ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_healingFountain == EventUnit())) {
            TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_textTag, PlayerGroupAll(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, false);
    TriggerAddEventUnitDied(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help Button Debug Position
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HelpButtonDebugPosition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetPosition(libUIUI_gv_helpButtonFrames[1], PlayerGroupAll(), c_anchorTopLeft, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HelpButtonDebugPosition_Init () {
    libUIUI_gt_HelpButtonDebugPosition = TriggerCreate("libUIUI_gt_HelpButtonDebugPosition_Func");
    TriggerAddEventChatMessage(libUIUI_gt_HelpButtonDebugPosition, c_playerAny, "-sss", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Console
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroConsole_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroConsolePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroStatsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrange");
    libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellow");
    libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePink");
    libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameBreath");
    libUIUI_gv_uIHeroConsole.lv_heroStatsBreathStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameRage");
    libUIUI_gv_uIHeroConsole.lv_heroStatsRageStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergy");
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergyNoShield");
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyNoShieldStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameBlinking");
    libUIUI_gv_uIHeroConsole.lv_heroStatsBlinkingEnergyStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/HealthBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/EnergyBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroConsole_Init () {
    libUIUI_gt_UIInitializeHeroConsole = TriggerCreate("libUIUI_gt_UIInitializeHeroConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroDeathStunFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarLeft");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarRight");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeathStunIcon");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunTimeLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroCastChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrameRight");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame_Right = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar_Right = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel_Right = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoF0A0619D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0A0619D_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoF0A0619D_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func");
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Channel Behavior Added
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroUnit = libUIUI_gv_heroConsoleUnits[lv_player].lv_monitorUnit_Channel;
    if ((lv_heroUnit != EventUnit())) {
        return true;
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, EventUnitBehavior(), "InfoTooltipPriority", c_playerAny) >= 1000)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarRight(EventPlayer(), EventUnitBehavior());
    }
    else {
        libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar(EventPlayer(), EventUnitBehavior());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded, null, c_unitBehaviorFlagRestorable, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Hero Leaderboard - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHeroLeaderboardInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[21] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayer;
    int lv_itButton;

    // Automatic Variable Declarations
    const int auto5F01B2A9_ae = libCore_gv_bALMaxPlayers;
    const int auto5F01B2A9_ai = 1;
    const int auto680EA3CE_ae = libUIUI_gv_uIHeroLeaderboardMaxSortButtons;
    const int auto680EA3CE_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uIHeroLeaderboardMaxSortButtons != ((libUIUI_ge_UIHeroLeaderboardSortType_SortTypeLatest) - 1))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_060FAE44", "A", IntToText(libUIUI_gv_uIHeroLeaderboardMaxSortButtons));
        TextExpressionSetToken("Param/Expression/lib_UIUI_060FAE44", "B", IntToText(((libUIUI_ge_UIHeroLeaderboardSortType_SortTypeLatest) - 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_060FAE44"), true);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "HeroLeaderPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroLeaderboard.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroLeaderPanelContainer");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TabControl");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itPlayer = 1;
    for ( ; ( (auto5F01B2A9_ai >= 0 && lv_itPlayer <= auto5F01B2A9_ae) || (auto5F01B2A9_ai < 0 && lv_itPlayer >= auto5F01B2A9_ae) ) ; lv_itPlayer += auto5F01B2A9_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("StatsContainerFrame/PlayerFrame" + IntToString(lv_itPlayer))));
        libUIUI_gv_uIHeroLeaderboard.lv_unitStatusFrame[lv_itPlayer] = DialogControlLastCreated();
    }
    lv_itButton = 1;
    for ( ; ( (auto680EA3CE_ai >= 0 && lv_itButton <= auto680EA3CE_ae) || (auto680EA3CE_ai < 0 && lv_itButton >= auto680EA3CE_ae) ) ; lv_itButton += auto680EA3CE_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("StatsContainerFrame/SortButton" + IntToString(lv_itButton))));
        libUIUI_gv_uIHeroLeaderboard.lv_sortButtons[lv_itButton] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHeroLeaderboardInitialize_Init () {
    libUIUI_gt_UIHeroLeaderboardInitialize = TriggerCreate("libUIUI_gt_UIHeroLeaderboardInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Hero Leaderboard - Sorting - Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHeroLeaderboardSortingUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itSort;

    // Automatic Variable Declarations
    int auto1064FB9D_ae;
    const int auto1064FB9D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libGame_gf_ScoreValueTrackingUpdatePlayers();
    auto1064FB9D_ae = ((libUIUI_ge_UIHeroLeaderboardSortType_SortTypeLatest) - 1);
    lv_itSort = (libUIUI_ge_UIHeroLeaderboardSortType_Default);
    for ( ; ( (auto1064FB9D_ai >= 0 && lv_itSort <= auto1064FB9D_ae) || (auto1064FB9D_ai < 0 && lv_itSort >= auto1064FB9D_ae) ) ; lv_itSort += auto1064FB9D_ai ) {
        libUIUI_gf_UIHeroLeaderboardSortingUpdateSortingTab(lv_itSort);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHeroLeaderboardSortingUpdate_Init () {
    libUIUI_gt_UIHeroLeaderboardSortingUpdate = TriggerCreate("libUIUI_gt_UIHeroLeaderboardSortingUpdate_Func");
    TriggerEnable(libUIUI_gt_UIHeroLeaderboardSortingUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHeroLeaderboardSortingUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Ingame - Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUIIngameButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetPlayer;
    int lv_targetDialogItem;
    int lv_itButton;
    int lv_itAbilSlot;
    int lv_itSelectorButton;
    int lv_itBuild;
    int lv_itColumn;
    int lv_itTier;
    int lv_heroIndex;
    int lv_build;
    int lv_tier;

    // Automatic Variable Declarations
    const int auto138B7FC2_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int auto138B7FC2_ai = 1;
    const int auto056A5458_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto056A5458_ai = 1;
    int auto7C023975_ae;
    const int auto7C023975_ai = 1;
    const int auto54D85826_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto54D85826_ai = 1;
    const int autoCB7B0A97_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    const int autoCB7B0A97_ai = 1;
    const int auto7A3900D4_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto7A3900D4_ai = 1;
    int autoE8720BA9_val;
    const int autoC6A45294_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoC6A45294_ai = 1;

    // Variable Initialization
    lv_targetDialogItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPlayer = EventPlayer();
    lv_targetDialogItem = EventDialogControl();
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_selectedHero;
    lv_itBuild = 1;
    for ( ; ( (auto138B7FC2_ai >= 0 && lv_itBuild <= auto138B7FC2_ae) || (auto138B7FC2_ai < 0 && lv_itBuild >= auto138B7FC2_ae) ) ; lv_itBuild += auto138B7FC2_ai ) {
        if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild])) {
            libGame_gf_LoadoutPrepickedTalentBuildStoreBuildIndexOfHeroForPlayer(lv_heroIndex, lv_itBuild, true, lv_targetPlayer);
            libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection(lv_targetPlayer);
            libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_targetPlayer);
            return true;
        }

    }
    lv_itColumn = 1;
    for ( ; ( (auto056A5458_ai >= 0 && lv_itColumn <= auto056A5458_ae) || (auto056A5458_ai < 0 && lv_itColumn >= auto056A5458_ae) ) ; lv_itColumn += auto056A5458_ai ) {
        if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itColumn])) {
            lv_build = libGame_gf_LoadoutGetPlayerBuildForHero(lv_targetPlayer, lv_heroIndex);
            lv_tier = libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_talentTierPressedButton;
            if ((lv_itColumn == libGame_gv_players[lv_targetPlayer].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier])) {
                libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer(lv_heroIndex, lv_build, lv_tier, 0, true, lv_targetPlayer);
            }
            else {
                libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer(lv_heroIndex, lv_build, lv_tier, lv_itColumn, true, lv_targetPlayer);
            }
            libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection(lv_targetPlayer);
            libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_targetPlayer);
            return true;
        }

    }
    if ((libUIUI_gf_CanUseDialogItemTime(lv_targetPlayer) == true)) {
        auto7C023975_ae = libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filledHeroCount;
        lv_itButton = 1;
        for ( ; ( (auto7C023975_ai >= 0 && lv_itButton <= auto7C023975_ae) || (auto7C023975_ai < 0 && lv_itButton >= auto7C023975_ae) ) ; lv_itButton += auto7C023975_ai ) {
            if ((lv_targetDialogItem == libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButton])) {
                if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_lockedIn == true)) {
                    return true;
                }

                libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_targetPlayer);
                libUIUI_gf_HSUISelectHeroForPlayer(lv_targetPlayer, lv_itButton);
                libUIUI_gf_HSUIIngameUpdateSelectedHeroFrameForPlayer(lv_targetPlayer);
                libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_targetPlayer), false));
                libUIUI_gf_HSUIIngameUpdateTeamPanels();
                libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection(lv_targetPlayer);
                libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_targetPlayer);
                return true;
            }

        }
    }

    if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleTankButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleTank == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleTank = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleTank = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleBruiserButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleBruiser == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleBruiser = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleBruiser = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleRangedAssasinButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleRangedAssasin == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleRangedAssasin = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleRangedAssasin = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleMeleeAssasinButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleMeleeAssasin == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleMeleeAssasin = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleMeleeAssasin = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleHealerButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleHealer == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleHealer = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleHealer = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterRoleSupportButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleSupport == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleSupport = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterRoleSupport = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterUniverseWarCraftButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseWarCraft == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseWarCraft = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseWarCraft = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterUniverseStarCraftButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseStarCraft == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseStarCraft = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseStarCraft = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterUniverseDiabloButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseDiablo == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseDiablo = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseDiablo = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterUniverseOverwatchButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseOverwatch == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseOverwatch = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseOverwatch = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_filterUniverseNexusButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseNexus == false)) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseNexus = true;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_filterUniverseNexus = false;
        }
        libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_targetPlayer]);
        return true;
    }
    if ((lv_targetDialogItem != libUIUI_gv_heroSelection.lv_talentsPanelTierButton[libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_talentTierPressedButton]) && ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[1] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[2] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[3] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[4] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[5] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[6] == lv_targetDialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[7] == lv_targetDialogItem))) {
        lv_itTier = 1;
        for ( ; ( (auto54D85826_ai >= 0 && lv_itTier <= auto54D85826_ae) || (auto54D85826_ai < 0 && lv_itTier >= auto54D85826_ae) ) ; lv_itTier += auto54D85826_ai ) {
            if ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier] == lv_targetDialogItem)) {
                libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer(lv_targetPlayer, lv_itTier);
                libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_targetPlayer);
                return true;
            }

        }
    }
    else if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_lockButton)) {
        if ((libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_lockedIn == false)) {
            libUIUI_gf_HSUILockUnlockHeroChoise(lv_targetPlayer, true);
            SoundPlayForPlayer(SoundLink("UI_BNet_Ready", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_targetPlayer], 100.0, 0.0);
        }
        else {
            libUIUI_gf_HSUILockUnlockHeroChoise(lv_targetPlayer, false);
            SoundPlayForPlayer(SoundLink("UI_BNet_Customize", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_targetPlayer], 100.0, 0.0);
        }
        libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_targetPlayer), false));
        libUIUI_gf_HSUIIngameUpdateTeamPanels();
        return true;
    }
    else if (((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[1]) || (lv_targetDialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[2]))) {
        if ((lv_targetDialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[1])) {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_pairedHeroForm = false;
        }
        else {
            libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_pairedHeroForm = true;
        }
        libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer(lv_targetPlayer, libUIUI_gv_heroSelectionPlayer[lv_targetPlayer].lv_pairedHeroForm);
        return true;
    }
    lv_itAbilSlot = 0;
    for ( ; ( (autoCB7B0A97_ai >= 0 && lv_itAbilSlot <= autoCB7B0A97_ae) || (autoCB7B0A97_ai < 0 && lv_itAbilSlot >= autoCB7B0A97_ae) ) ; lv_itAbilSlot += autoCB7B0A97_ai ) {
        lv_itSelectorButton = 1;
        for ( ; ( (auto7A3900D4_ai >= 0 && lv_itSelectorButton <= auto7A3900D4_ae) || (auto7A3900D4_ai < 0 && lv_itSelectorButton >= auto7A3900D4_ae) ) ; lv_itSelectorButton += auto7A3900D4_ai ) {
            if ((libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_itAbilSlot][lv_itSelectorButton] == lv_targetDialogItem)) {
                autoE8720BA9_val = lv_itAbilSlot;
                if (autoE8720BA9_val == 0) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Mount");
                }
                else if (autoE8720BA9_val == 1) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Basic1");
                }
                else if (autoE8720BA9_val == 2) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Basic2");
                }
                else if (autoE8720BA9_val == 3) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Basic3");
                }
                else {
                }
                return true;
            }

        }
    }
    lv_itSelectorButton = 1;
    for ( ; ( (autoC6A45294_ai >= 0 && lv_itSelectorButton <= autoC6A45294_ae) || (autoC6A45294_ai < 0 && lv_itSelectorButton >= autoC6A45294_ae) ) ; lv_itSelectorButton += autoC6A45294_ai ) {
        if ((libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itSelectorButton] == lv_targetDialogItem)) {
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Active");
            return true;
        }
        else if ((libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itSelectorButton] == lv_targetDialogItem)) {
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_targetPlayer, lv_itSelectorButton, "Passive");
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUIIngameButtonUsed_Init () {
    libUIUI_gt_HSUIIngameButtonUsed = TriggerCreate("libUIUI_gt_HSUIIngameButtonUsed_Func");
    TriggerEnable(libUIUI_gt_HSUIIngameButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUIIngameButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Ingame - Filter Edit Box
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUIIngameFilterEditBox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_heroSelection.lv_filterEditBox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_heroSelection.lv_filterEditBoxValue[EventPlayer()] = libNtve_gf_DialogItemEditValue(libUIUI_gv_heroSelection.lv_filterEditBox, EventPlayer());
    libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUIIngameFilterEditBox_Init () {
    libUIUI_gt_HSUIIngameFilterEditBox = TriggerCreate("libUIUI_gt_HSUIIngameFilterEditBox_Func");
    TriggerEnable(libUIUI_gt_HSUIIngameFilterEditBox, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUIIngameFilterEditBox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Ingame - Show Hero Selection
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUIIngameShowHeroSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection(true);
    TriggerExecute(libGame_gt_PreloadingFXStoreModels, true, false);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Heroes_Toys18", PlayerGroupAll());
    libGame_gf_SetStormMapLighting("StormLightMiniPortraitBase", PlayerGroupAll(), 0.0);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_mapNameLabel, libCore_gf_MapDataGetMapName(libCore_gv_sYSMapIndex), PlayerGroupAll());
    DialogSetVisible(libUIUI_gv_heroSelectionIngame.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_countdownLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelectionIngame.lv_countdownLabel, FixedToText(libCore_gv_bALHeroSelectTime, 0), PlayerGroupAll());
    libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup(libCore_gv_allHeroPlayers);
    libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_allHeroPlayers);
    libUIUI_gf_HSUIIngameUpdateTeamPanels();
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(libUIUI_gt_HSUIIngameButtonUsed, true);
    TriggerEnable(libUIUI_gt_HSUIIngameFilterEditBox, true);
    TriggerEnable(libUIUI_gt_HSUIIngameCountdownTimerExpires, true);
    if ((libGame_gv_pLAYERSoloMode == true)) {
        TimerStart(libUIUI_gv_heroSelectionSetting.lv_countdownTimer, 3000.0, false, c_timeGame);
    }
    else {
        TimerStart(libUIUI_gv_heroSelectionSetting.lv_countdownTimer, libCore_gv_bALHeroSelectTime, false, c_timeGame);
    }
    libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUIIngameShowHeroSelection_Init () {
    libUIUI_gt_HSUIIngameShowHeroSelection = TriggerCreate("libUIUI_gt_HSUIIngameShowHeroSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Ingame - Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUIIngameCountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_crowdSound;
    int lv_itHero;

    // Automatic Variable Declarations
    playergroup auto8A7ED393_g;
    playergroup autoCC0C4E70_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
    auto8A7ED393_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8A7ED393_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_lockedIn == true)) {
            libGame_gv_players[lv_itPlayer].lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero;
        }
        else {
            if ((libUIUI_gf_HSUIGoodToLockInForPlayer(lv_itPlayer) == true)) {
                libGame_gv_players[lv_itPlayer].lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero;
                libUIUI_gf_HSUILockUnlockHeroChoise(lv_itPlayer, true);
            }
            else {
                libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero = libUIUI_gf_HSUISelectRandomHeroForPlayer(lv_itPlayer);
                libGame_gv_players[lv_itPlayer].lv_heroIndex = libUIUI_gv_heroSelectionPlayer[lv_itPlayer].lv_selectedHero;
                libUIUI_gf_HSUILockUnlockHeroChoise(lv_itPlayer, true);
            }
        }
    }
    libUIUI_gv_heroSelectionSetting.lv_finalCountdownStarted = true;
    libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup(libCore_gv_allHeroPlayers);
    libUIUI_gf_HSUIIngameUpdateTeamPanels();
    libUIUI_gf_HSUICountdownDisableAndHideStuff();
    TriggerExecute(libGame_gt_PreloadingForceHeroPreloadingOriginal, true, true);
    TriggerEnable(libUIUI_gt_HSUIIngameButtonUsed, false);
    TriggerEnable(libUIUI_gt_HSUIIngameFilterEditBox, false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    autoCC0C4E70_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCC0C4E70_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CameraPan(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_spawnPoint, 0.0, -1, 0.0, false);
    }
    if (true) {
        DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_finalCountdownFrame, PlayerGroupAll(), false);
        DialogDestroy(libUIUI_gv_heroSelectionIngame.lv_dialog);
        TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, false);
        TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, false);
        TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, false);
        TriggerEnable(libUIUI_gt_HSUILoadoutEditBoxTextChanges, false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
        TriggerExecute(libGame_gt_StartGame, true, false);
        UISetWorldVisible(PlayerGroupAll(), true);
        libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, PlayerGroupActive(), 0.0);
        CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection(false);
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_FinalCountdown02", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(libUIUI_gv_heroSelectionIngame.lv_mainPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroSelectionIngame.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogDestroy(libUIUI_gv_heroSelectionIngame.lv_dialog);
    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, false);
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, false);
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, false);
    TriggerEnable(libUIUI_gt_HSUILoadoutEditBoxTextChanges, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    TriggerExecute(libGame_gt_StartGame, true, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, PlayerGroupAll(), 0.0);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUIIngameCountdownTimerExpires_Init () {
    libUIUI_gt_HSUIIngameCountdownTimerExpires = TriggerCreate("libUIUI_gt_HSUIIngameCountdownTimerExpires_Func");
    TriggerEnable(libUIUI_gt_HSUIIngameCountdownTimerExpires, false);
    TriggerAddEventTimer(libUIUI_gt_HSUIIngameCountdownTimerExpires, libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Ingame - UI Init
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUIIngameUIInit_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;
    int lv_itButton;
    int lv_itPlayerSlot;
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoDE2A3499_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoDE2A3499_ai = 1;
    const int auto817A5072_ae = libCore_gv_bALMaxTeams;
    const int auto817A5072_ai = 1;
    const int autoB2C55E20_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoB2C55E20_ai = 1;
    const int auto91DD3D7C_ae = libUIUI_gv_hSUIIngameHeroButtons;
    const int auto91DD3D7C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libUIUI_gv_heroSelectionIngame.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HeroSelectionIngame/HeroSelectionPanelTemplate");
    libUIUI_gv_heroSelectionIngame.lv_mainPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libUIUI_gv_heroSelectionIngame.lv_mapNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "SelectedHeroInfo");
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroName");
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("HeroSelection/ChooseAHero"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroRole");
    libUIUI_gv_heroSelectionIngame.lv_selectedHeroRole = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    lv_itCurrentPanelLayer -= 1;

    lv_itPlayer = 1;
    for ( ; ( (autoDE2A3499_ai >= 0 && lv_itPlayer <= autoDE2A3499_ae) || (autoDE2A3499_ai < 0 && lv_itPlayer >= autoDE2A3499_ae) ) ; lv_itPlayer += autoDE2A3499_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeCutscene, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroCutsceneFrame" + IntToString((lv_itPlayer-1)))));
        libUIUI_gv_heroSelection.lv_heroCutsceneFrame[lv_itPlayer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    lv_itTeam = 1;
    for ( ; ( (auto817A5072_ai >= 0 && lv_itTeam <= auto817A5072_ae) || (auto817A5072_ai < 0 && lv_itTeam >= auto817A5072_ae) ) ; lv_itTeam += auto817A5072_ai ) {
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TeamOrderPanel");
        }
        else if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TeamChaosPanel");
        }
        libUIUI_gv_heroSelectionIngame.lv_teamPanel[lv_itTeam] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        lv_itPlayerSlot = 1;
        for ( ; ( (autoB2C55E20_ai >= 0 && lv_itPlayerSlot <= autoB2C55E20_ae) || (autoB2C55E20_ai < 0 && lv_itPlayerSlot >= autoB2C55E20_ae) ) ; lv_itPlayerSlot += autoB2C55E20_ai ) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerName" + IntToString(lv_itPlayerSlot))));
            libUIUI_gv_heroSelectionIngame.lv_teamPlayerName[lv_itTeam][lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamHeroName" + IntToString(lv_itPlayerSlot))));
            libUIUI_gv_heroSelectionIngame.lv_teamHeroName[lv_itTeam][lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot))));
            libUIUI_gv_heroSelectionIngame.lv_teamHeroFrame[lv_itTeam][lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot) + "/HeroImage")));
            libUIUI_gv_heroSelectionIngame.lv_teamHeroImage[lv_itTeam][lv_itPlayerSlot] = DialogControlLastCreated();
        }
        lv_itCurrentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PickHeroFrameScrollable/ContainerFrame");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (auto91DD3D7C_ai >= 0 && lv_itButton <= auto91DD3D7C_ae) || (auto91DD3D7C_ai < 0 && lv_itButton >= auto91DD3D7C_ae) ) ; lv_itButton += auto91DD3D7C_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itButton))));
        libUIUI_gv_heroSelectionIngame.lv_heroButton[lv_itButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itButton) + "/HeroImage")));
        libUIUI_gv_heroSelectionIngame.lv_heroButtonImage[lv_itButton] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_heroSelectionIngame.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libUIUI_gv_heroSelectionIngame.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);

    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
    libUIUI_gv_heroSelection.lv_lockButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gf_HSUIAttributeAbilityPanelInitialize(libUIUI_gv_heroSelectionIngame.lv_mainPanel);
    libUIUI_gf_HSUIAttributeTalentPanelInitialize(libUIUI_gv_heroSelectionIngame.lv_mainPanel);
    libUIUI_gf_HSUIAttributeInfoPanelInitialize(libUIUI_gv_heroSelectionIngame.lv_mainPanel);
    libUIUI_gf_HSUIChangeHeroChangeHeroPanelInitialize(libUIUI_gv_heroSelectionIngame.lv_mainPanel);
    libUIUI_gf_HSUILoadoutInitialization(libUIUI_gv_heroSelectionIngame.lv_mainPanel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUIIngameUIInit_Init () {
    libUIUI_gt_HSUIIngameUIInit = TriggerCreate("libUIUI_gt_HSUIIngameUIInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Scroll Bar Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutScrollBarUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_editValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_editValue = "";

    // Conditions
    if (testConds) {
        if (!((libUIUI_gf_CanUseDialogItemTime(lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
        lv_editValue = libNtve_gf_DialogItemEditValue(EventDialogControl(), lv_player);
        if ((lv_editValue == "WheelUp") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane > 1)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane -= 1;
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane, lv_player);
        }
        else if ((lv_editValue == "WheelDown") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane < libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinMaxLaneCount)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane += 1;
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane, lv_player);
        }
    }
    else if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
        lv_editValue = libNtve_gf_DialogItemEditValue(EventDialogControl(), lv_player);
        if ((lv_editValue == "WheelUp") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane > 1)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane -= 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
        else if ((lv_editValue == "WheelDown") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane < libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountMaxLaneCount)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane += 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
    }
    else if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_announcersPanelScrollEditBox)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
        lv_editValue = libNtve_gf_DialogItemEditValue(EventDialogControl(), lv_player);
        if ((lv_editValue == "WheelUp") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane > 1)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane -= 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
        else if ((lv_editValue == "WheelDown") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane < libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerMaxLaneCount)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane += 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_announcersPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerAnnouncerCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutScrollBarUsed_Init () {
    libUIUI_gt_HSUILoadoutScrollBarUsed = TriggerCreate("libUIUI_gt_HSUILoadoutScrollBarUsed_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutScrollBarUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Input Trigger
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutInputTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_player;
    int lv_heroIndex;
    int lv_itUsedButton;
    int lv_itButton;
    int lv_elementIndex;
    int lv_loadoutVariation;

    // Automatic Variable Declarations
    const int auto15EB741B_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto15EB741B_ai = 1;
    const int autoD8CCE60B_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int autoD8CCE60B_ai = 1;
    const int autoD4E3B560_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoD4E3B560_ai = 1;
    const int autoFBE9DF39_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoFBE9DF39_ai = 1;
    const int autoC26D2439_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int autoC26D2439_ai = 1;
    const int auto4486E83A_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int auto4486E83A_ai = 1;
    const int auto6078289B_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto6078289B_ai = 1;
    const int auto812D9BC7_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto812D9BC7_ai = 1;
    const int autoC6680387_ae = libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C;
    const int autoC6680387_ai = 1;
    const int auto1CF93BEA_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int auto1CF93BEA_ai = 1;
    const int autoB42F3A95_ae = libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C;
    const int autoB42F3A95_ai = 1;

    // Variable Initialization
    lv_dialogItem = EventDialogControl();
    lv_player = EventPlayer();
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[EventPlayer()].lv_selectedHero;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsButton)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_SkinPanel, lv_player);
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountButton)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_MountPanel, lv_player);
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_announcerPacksButton)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_AnnouncerPanel, lv_player);
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((libUIUI_gf_CanUseDialogItemTime(lv_player) == false)) {
        return true;
    }

    lv_itUsedButton = 1;
    for ( ; ( (auto15EB741B_ai >= 0 && lv_itUsedButton <= auto15EB741B_ae) || (auto15EB741B_ai < 0 && lv_itUsedButton >= auto15EB741B_ae) ) ; lv_itUsedButton += auto15EB741B_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            if ((libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedSkinIndex == libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton])) {
                return true;
            }

            lv_itButton = 1;
            for ( ; ( (autoD8CCE60B_ai >= 0 && lv_itButton <= autoD8CCE60B_ae) || (autoD8CCE60B_ai < 0 && lv_itButton >= autoD8CCE60B_ae) ) ; lv_itButton += autoD8CCE60B_ai ) {
                if ((lv_itUsedButton == lv_itButton)) {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, lv_dialogItem, lv_player);
                }
                else {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itButton], lv_player);
                }
            }
            lv_loadoutVariation = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedLoadoutIndex;
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedSkinIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton];
            libUIUI_gf_HSUISetSkinContainerNameForPlayer(lv_player);
            lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton];
            libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer(lv_heroIndex, lv_loadoutVariation, lv_elementIndex, true, lv_player);
            libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoD4E3B560_ai >= 0 && lv_itUsedButton <= autoD4E3B560_ae) || (autoD4E3B560_ai < 0 && lv_itUsedButton >= autoD4E3B560_ae) ) ; lv_itUsedButton += autoD4E3B560_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            lv_itButton = 1;
            for ( ; ( (autoFBE9DF39_ai >= 0 && lv_itButton <= autoFBE9DF39_ae) || (autoFBE9DF39_ai < 0 && lv_itButton >= autoFBE9DF39_ae) ) ; lv_itButton += autoFBE9DF39_ai ) {
                if ((lv_itButton == lv_itUsedButton)) {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton], true, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton], false, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
            }
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempMountCategoryArray[lv_itUsedButton];
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoC26D2439_ai >= 0 && lv_itUsedButton <= autoC26D2439_ae) || (autoC26D2439_ai < 0 && lv_itUsedButton >= autoC26D2439_ae) ) ; lv_itUsedButton += autoC26D2439_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            if ((libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountIndex == libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton])) {
                return true;
            }

            lv_itButton = 1;
            for ( ; ( (auto4486E83A_ai >= 0 && lv_itButton <= auto4486E83A_ae) || (auto4486E83A_ai < 0 && lv_itButton >= auto4486E83A_ae) ) ; lv_itButton += auto4486E83A_ai ) {
                if ((lv_itUsedButton == lv_itButton)) {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton], lv_player);
                }
                else {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton], lv_player);
                }
            }
            lv_loadoutVariation = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedLoadoutIndex;
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton];
            libUIUI_gf_HSUISetMountContainerNameForPlayer(lv_player);
            lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton];
            libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer(lv_heroIndex, lv_loadoutVariation, lv_elementIndex, true, lv_player);
            libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (auto6078289B_ai >= 0 && lv_itUsedButton <= auto6078289B_ae) || (auto6078289B_ai < 0 && lv_itUsedButton >= auto6078289B_ae) ) ; lv_itUsedButton += auto6078289B_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            lv_itButton = 1;
            for ( ; ( (auto812D9BC7_ai >= 0 && lv_itButton <= auto812D9BC7_ae) || (auto812D9BC7_ai < 0 && lv_itButton >= auto812D9BC7_ae) ) ; lv_itButton += auto812D9BC7_ai ) {
                if ((lv_itButton == lv_itUsedButton)) {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itButton], true, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_announcersPanelCategoryButton[lv_itButton], false, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
            }
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedAnnouncerCollectionCategoryIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempAnnouncerCategoryArray[lv_itUsedButton];
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoC6680387_ai >= 0 && lv_itUsedButton <= autoC6680387_ae) || (autoC6680387_ai < 0 && lv_itUsedButton >= autoC6680387_ae) ) ; lv_itUsedButton += autoC6680387_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            if ((libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedAnnouncerIndex == libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itUsedButton])) {
                return true;
            }

            lv_itButton = 1;
            for ( ; ( (auto1CF93BEA_ai >= 0 && lv_itButton <= auto1CF93BEA_ae) || (auto1CF93BEA_ai < 0 && lv_itButton >= auto1CF93BEA_ae) ) ; lv_itButton += auto1CF93BEA_ai ) {
                if ((lv_itUsedButton == lv_itButton)) {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itButton], lv_player);
                }
                else {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, libUIUI_gv_hSUILoadout.lv_announcersPanelItemButton[lv_itButton], lv_player);
                }
            }
            lv_loadoutVariation = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedLoadoutIndex;
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedAnnouncerIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itUsedButton];
            libUIUI_gf_HSUISetAnnouncerContainerNameForPlayer(lv_player);
            lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledAnnouncerAnnouncerItemIndex[lv_itUsedButton];
            libGame_gf_LoadoutAnnouncersStoreAnnouncerOfHeroForPlayer(lv_heroIndex, lv_loadoutVariation, lv_elementIndex, true, lv_player);
            libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoB42F3A95_ai >= 0 && lv_itUsedButton <= autoB42F3A95_ae) || (autoB42F3A95_ai < 0 && lv_itUsedButton >= autoB42F3A95_ae) ) ; lv_itUsedButton += autoB42F3A95_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_announcersPanelItemPreviewButton[lv_itUsedButton])) {
            libUIUI_gf_HSUIAnnouncersPlayPreviewSoundForPlayer(lv_itUsedButton, lv_player);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutInputTrigger_Init () {
    libUIUI_gt_HSUILoadoutInputTrigger = TriggerCreate("libUIUI_gt_HSUILoadoutInputTrigger_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutInputTrigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - List Box Selected
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutListBoxSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_dialogItem;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_dialogItem = EventDialogControl();
    lv_heroIndex = libUIUI_gv_heroSelectionPlayer[EventPlayer()].lv_selectedHero;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown)) {
        libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer(EventPlayer());
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_announcersPanelOwnershipFilterPulldown)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutListBoxSelected_Init () {
    libUIUI_gt_HSUILoadoutListBoxSelected = TriggerCreate("libUIUI_gt_HSUILoadoutListBoxSelected_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutListBoxSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Edit Box Text Changes
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutEditBoxTextChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loadoutVar;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox)) {
        lv_loadoutVar = libUIUI_gv_hSUILoadoutPlayer[EventPlayer()].lv_tempSelectedLoadoutIndex;
        libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer(libUIUI_gv_heroSelectionPlayer[EventPlayer()].lv_selectedHero, lv_loadoutVar, EventPlayer(), libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer()));
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox)) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBoxValue[EventPlayer()] = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox, EventPlayer());
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox)) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBoxValue[EventPlayer()] = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox, EventPlayer());
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBox)) {
        libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBoxValue[EventPlayer()] = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_announcersPanelSearchEditBox, EventPlayer());
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutEditBoxTextChanges_Init () {
    libUIUI_gt_HSUILoadoutEditBoxTextChanges = TriggerCreate("libUIUI_gt_HSUILoadoutEditBoxTextChanges_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutEditBoxTextChanges, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutEditBoxTextChanges, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Tracker Arrow
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroTrackerArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto19F9C206_ae = libCore_gv_bALMaxPlayers;
    const int auto19F9C206_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/OffscreenUnitContainer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto19F9C206_ai >= 0 && lv_index <= auto19F9C206_ae) || (auto19F9C206_ai < 0 && lv_index >= auto19F9C206_ae) ) ; lv_index += auto19F9C206_ai ) {
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, c_triggerControlTypeOffscreenUnit, "OffscreenUnitFrame" + IntToString(lv_index));
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], c_triggerControlTypeImage, "HeroIcon");
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroTrackerArrow_Init () {
    libUIUI_gt_UIInitializeHeroTrackerArrow = TriggerCreate("libUIUI_gt_UIInitializeHeroTrackerArrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Input - Ingame Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInputIngameButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_locDialogItem;
    int lv_locPlayer;
    int lv_itTier;
    int lv_itColumn;
    int lv_itBuild;
    int lv_itAttribute;
    int lv_itArtifact;
    int lv_artifactIndex;
    int lv_mouseButtonUsed;
    int lv_heroIndex;
    int lv_build;
    int lv_itSort;

    // Automatic Variable Declarations
    const int autoF221BA55_ae = libUIUI_gv_uIHeroLeaderboardMaxSortButtons;
    const int autoF221BA55_ai = 1;
    const int autoBDB3B542_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoBDB3B542_ai = 1;
    const int autoBFD0A739_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoBFD0A739_ai = 1;
    const int autoA7742C8B_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoA7742C8B_ai = 1;

    // Variable Initialization
    lv_locDialogItem = EventDialogControl();
    lv_locPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[lv_locPlayer].lv_allowInput == true))) {
            return false;
        }

        if (!((EventDialogControlMouseButton() == c_mouseButtonLeft))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = libGame_gv_players[lv_locPlayer].lv_heroIndex;
    if ((lv_locDialogItem == libUIUI_gv_gameStats.lv_exitButton) && (libCore_gv_gameOver == true)) {
        DialogControlSetEnabled(libUIUI_gv_gameStats.lv_exitButton, libCore_gv_playerGroupFromPlayer[lv_locPlayer], false);
        libGame_gv_gameOverPlayerReady[lv_locPlayer] = true;
        return true;
    }
    lv_itSort = 1;
    for ( ; ( (autoF221BA55_ai >= 0 && lv_itSort <= autoF221BA55_ae) || (autoF221BA55_ai < 0 && lv_itSort >= autoF221BA55_ae) ) ; lv_itSort += autoF221BA55_ai ) {
        if ((EventDialogControl() == libUIUI_gv_uIHeroLeaderboard.lv_sortButtons[lv_itSort])) {
            libUIUI_gf_UIHeroLeaderboardSortingSetState(lv_locPlayer, lv_itSort);
            return true;
        }

    }
    lv_itBuild = 1;
    for ( ; ( (autoBDB3B542_ai >= 0 && lv_itBuild <= autoBDB3B542_ae) || (autoBDB3B542_ai < 0 && lv_itBuild >= autoBDB3B542_ae) ) ; lv_itBuild += autoBDB3B542_ai ) {
        if ((lv_locDialogItem == libUIUI_gv_uITalentChoicePanel.lv_buildButton[lv_itBuild])) {
            libGame_gf_LoadoutPrepickedTalentBuildStoreBuildIndexOfHeroForPlayer(lv_heroIndex, lv_itBuild, false, lv_locPlayer);
            libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerIngame(lv_locPlayer);
            libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lv_locPlayer);
            return true;
        }

    }
    lv_itTier = 1;
    for ( ; ( (autoBFD0A739_ai >= 0 && lv_itTier <= autoBFD0A739_ae) || (autoBFD0A739_ai < 0 && lv_itTier >= autoBFD0A739_ae) ) ; lv_itTier += autoBFD0A739_ai ) {
        lv_itColumn = 1;
        for ( ; ( (autoA7742C8B_ai >= 0 && lv_itColumn <= autoA7742C8B_ae) || (autoA7742C8B_ai < 0 && lv_itColumn >= autoA7742C8B_ae) ) ; lv_itColumn += autoA7742C8B_ai ) {
            if ((lv_locDialogItem == libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn])) {
                if ((libGame_gf_TalentChoicesPlayerCanPrepickTalentTier(lv_locPlayer, lv_itTier) == true)) {
                    lv_build = libGame_gf_LoadoutGetPlayerBuildForHero(lv_locPlayer, lv_heroIndex);
                    if ((lv_itColumn == libGame_gv_players[lv_locPlayer].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_itTier])) {
                        libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer(lv_heroIndex, lv_build, lv_itTier, 0, true, lv_locPlayer);
                    }
                    else {
                        libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer(lv_heroIndex, lv_build, lv_itTier, lv_itColumn, true, lv_locPlayer);
                    }
                    lv_heroIndex = libGame_gv_players[lv_locPlayer].lv_heroIndex;
                    libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerIngame(lv_locPlayer);
                    libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lv_locPlayer);
                }
                else if ((libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn(lv_locPlayer, lv_itTier, lv_itColumn) == true)) {
                    libGame_gf_TalentChoicesChooseTalentForPlayer(lv_itTier, lv_itColumn, lv_locPlayer);
                }
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInputIngameButtonUsed_Init () {
    libUIUI_gt_UIInputIngameButtonUsed = TriggerCreate("libUIUI_gt_UIInputIngameButtonUsed_Func");
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_UIInputIngameButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - Player Clicks Unit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputPlayerClicksUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventUnit();
    lv_targetPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == false)) {
        UnitGroupSelect(UnitGroupSelected(lv_targetPlayer), lv_targetPlayer, false);
        UnitSelect(lv_targetUnit, lv_targetPlayer, true);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_targetUnit, lv_targetPlayer);
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_targetUnit, lv_targetPlayer);
        libGame_gv_players[lv_targetPlayer].lv_selectedUnit = lv_targetUnit;
        libGame_gv_players[lv_targetPlayer].lv_selectedUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(lv_targetUnit);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputPlayerClicksUnit_Init () {
    libUIUI_gt_InputPlayerClicksUnit = TriggerCreate("libUIUI_gt_InputPlayerClicksUnit_Func");
    TriggerAddEventUnitClick(libUIUI_gt_InputPlayerClicksUnit, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input- UI - Clear Text Option
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUIClearTextOption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUIClearTextOption_Init () {
    libUIUI_gt_InputUIClearTextOption = TriggerCreate("libUIUI_gt_InputUIClearTextOption_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_InputUIClearTextOption, c_playerAny, c_keyF9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Item;
    int lv_i_Player;

    // Automatic Variable Declarations
    const int auto424975BA_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto424975BA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/KillLogPanel");
    libUIUI_gv_killLogPanel = DialogControlLastCreated();
    lv_i_Item = 1;
    for ( ; ( (auto424975BA_ai >= 0 && lv_i_Item <= auto424975BA_ae) || (auto424975BA_ai < 0 && lv_i_Item >= auto424975BA_ae) ) ; lv_i_Item += auto424975BA_ai ) {
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_killLogPanel, c_triggerControlTypePanel, "KillLog/Item");
        libUIUI_gv_killLogItems[lv_i_Item].lv_frame = DialogControlLastCreated();
    }
    libUIUI_gf_KillLogDebugInitPanel();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogInitialize_Init () {
    libUIUI_gt_KillLogInitialize = TriggerCreate("libUIUI_gt_KillLogInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Hero Unit Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnHeroUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = libGame_gf_HeroKilledUnit();
    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogAnnounceKill(lv_killingPlayer, lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnHeroUnitDies_Init () {
    libUIUI_gt_KillLogOnHeroUnitDies = TriggerCreate("libUIUI_gt_KillLogOnHeroUnitDies_Func");
    libGame_gf_HeroKilled(libUIUI_gt_KillLogOnHeroUnitDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Quest Complete (Via Tokens)
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnQuestCompleteViaTokens_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_quest;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestCompleteLaunchUnit();
    lv_quest = libGame_gf_QuestCompleteBehavior();

    // Conditions
    if (testConds) {
        if (!((libCore_gf_StormUnitIsHallucination(lv_hero) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogAnnounceQuestCompletion(UnitGetOwner(lv_hero), lv_quest, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnQuestCompleteViaTokens_Init () {
    libUIUI_gt_KillLogOnQuestCompleteViaTokens = TriggerCreate("libUIUI_gt_KillLogOnQuestCompleteViaTokens_Func");
    libGame_gf_QuestComplete(libUIUI_gt_KillLogOnQuestCompleteViaTokens);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Quest Complete (Via Effects)
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnQuestCompleteViaEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_quest;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_quest = EventPlayerEffectUsedSourceBehavior();

    // Conditions
    if (testConds) {
        if (!((libCore_gf_StormUnitIsHallucination(lv_hero) == false))) {
            return false;
        }

        if (!((lv_quest != ""))) {
            return false;
        }

        if (!((lv_quest != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogAnnounceQuestCompletion(EventPlayer(), lv_quest, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnQuestCompleteViaEffects_Init () {
    libUIUI_gt_KillLogOnQuestCompleteViaEffects = TriggerCreate("libUIUI_gt_KillLogOnQuestCompleteViaEffects_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_KillLogOnQuestCompleteViaEffects, c_playerAny, "TalentQuestCompleteDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Quest Reset
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnQuestReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_quest;
    int lv_itItem;
    int lv_itTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestResetLaunchUnit();
    lv_quest = libGame_gf_QuestResetBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_hero) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogSaveQuestResetDataToCache(UnitGetOwner(lv_hero), lv_quest);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnQuestReset_Init () {
    libUIUI_gt_KillLogOnQuestReset = TriggerCreate("libUIUI_gt_KillLogOnQuestReset_Func");
    libGame_gf_QuestReset(libUIUI_gt_KillLogOnQuestReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Item Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogItemTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int autoD2D61364_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int autoD2D61364_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i_Item = 1;
    for ( ; ( (autoD2D61364_ai >= 0 && lv_i_Item <= autoD2D61364_ae) || (autoD2D61364_ai < 0 && lv_i_Item >= autoD2D61364_ae) ) ; lv_i_Item += autoD2D61364_ai ) {
        if ((EventTimer() == libUIUI_gv_killLogItems[lv_i_Item].lv_timer)) {
            libUIUI_gf_KillLogHideItem(lv_i_Item);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogItemTimerExpires_Init () {
    libUIUI_gt_KillLogItemTimerExpires = TriggerCreate("libUIUI_gt_KillLogItemTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[1].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[2].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[3].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[4].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[5].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[6].lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itCannonball;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto69D4EDDC_ae = libCore_gv_bALMaxTeams;
    const int auto69D4EDDC_ai = 1;
    const int autoAF81B7ED_ae = libCore_gv_bALMaxTeams;
    const int autoAF81B7ED_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MapMechanicPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BlackheartsBayPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HauntedMinesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SkullModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SkullsRemainingLabel");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto69D4EDDC_ai >= 0 && lv_itTeam <= auto69D4EDDC_ae) || (auto69D4EDDC_ai < 0 && lv_itTeam >= auto69D4EDDC_ae) ) ; lv_itTeam += auto69D4EDDC_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SkullCounter");
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MineOpenTimer");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_0F42CBFC"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_D98BE20D"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonShirePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShrineActivateTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoAF81B7ED_ai >= 0 && lv_itTeam <= autoAF81B7ED_ae) || (autoAF81B7ED_ai < 0 && lv_itTeam >= autoAF81B7ED_ae) ) ; lv_itTeam += autoAF81B7ED_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "DragonHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    libUIUI_gf_MapMechanicsGardenOfTerrorInit(lv_panels[lv_currentPanelLayer]);
    libUIUI_gf_MapMechanicsCursedHollowInit(lv_panels[lv_currentPanelLayer]);
    libUIUI_gf_MapMechanicsWinterveilInit(lv_panels[lv_currentPanelLayer]);
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelInitialize_Init () {
    libUIUI_gt_MapMechanicsPanelInitialize = TriggerCreate("libUIUI_gt_MapMechanicsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelUpdate_Init () {
    libUIUI_gt_MapMechanicsPanelUpdate = TriggerCreate("libUIUI_gt_MapMechanicsPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_MapMechanicsPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Blackhearts Bay Chests Spawned Frame Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init () {
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires = TriggerCreate("libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Notification Display Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_NotificationDisplayInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/GameNotificationsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_notificationDisplay.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "KillCounterTemplate/TimerCountdown");
    libNtve_gf_SetDialogItemAnimationDuration(DialogControlLastCreated(), libGame_gv_heroDeathMultikillTimeoutDuration, PlayerGroupAll());
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountLabel");
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountAmount");
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_coreNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier0/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier0/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "QuestNotificationTemplate/QuestIcon/IconImage");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3 = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_NotificationDisplayInitialize_Init () {
    libUIUI_gt_NotificationDisplayInitialize = TriggerCreate("libUIUI_gt_NotificationDisplayInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Notification Anim Cheat
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DEBUGNotificationAnimCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_animName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animName = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_animName = StringWord(EventChatMessage(false), 2);
    DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, PlayerGroupAll(), lv_animName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DEBUGNotificationAnimCheat_Init () {
    libUIUI_gt_DEBUGNotificationAnimCheat = TriggerCreate("libUIUI_gt_DEBUGNotificationAnimCheat_Func");
    TriggerAddEventChatMessage(libUIUI_gt_DEBUGNotificationAnimCheat, c_playerAny, "notification", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Party Frame UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializePartyFrameUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itHeroIndex;
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_heroRosterIndex;
    int lv_itOnFire;

    // Automatic Variable Declarations
    const int auto9F4D91BF_ae = libCore_gv_bALMaxTeams;
    const int auto9F4D91BF_ai = 1;
    const int autoC9C071D0_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoC9C071D0_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    // libGame_gt_StartGame
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIPartyFrame.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GameTimerLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    libUIUI_gv_uIPartyFrame.lv_gameTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CoreHealthLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIPartyFrame.lv_coreHealthLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PartyFrameTopPanel/XPContributionHitTestFrame");
    libUIUI_gv_uIPartyFrame.lv_xPContributionClickableButton = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto9F4D91BF_ai >= 0 && lv_itTeam <= auto9F4D91BF_ae) || (auto9F4D91BF_ai < 0 && lv_itTeam >= auto9F4D91BF_ae) ) ; lv_itTeam += auto9F4D91BF_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "LevelInfo")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TeamLevelLabel");
        libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TeamNextLevelTalentIcon");
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TeamNextLevelNoTalentIcon");
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamTalentAdvantageFrame");
        libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TeamXPUnitStatusFrame");
        libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "CoreUnitStatus")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("PartyFrameTopPanel/Team" + IntToString(lv_itTeam) + "XPInfoFrame")));
        libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/HeroAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_heroXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MercenaryAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_mercenaryXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MinionAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_minionXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/PassiveAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_passiveXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/StructureAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_structureXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/TotalAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_totalXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "HeroOverview")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itHeroIndex = 1;
        for ( ; ( (autoC9C071D0_ai >= 0 && lv_itHeroIndex <= autoC9C071D0_ae) || (autoC9C071D0_ai < 0 && lv_itHeroIndex >= autoC9C071D0_ae) ) ; lv_itHeroIndex += autoC9C071D0_ai ) {
            lv_heroRosterIndex = ((lv_itTeam-1)*libCore_gv_bALMaxPlayersOnATeam+lv_itHeroIndex);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroOverview" + IntToString(lv_itHeroIndex))));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage2");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage3");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButton");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonPetowner");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonPet");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonA");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonB");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonC");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimePetLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingOlafLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotA_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingBaleogLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotB_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingErikLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDeathOverlayFrame");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroDeathExtendedIcon");
            libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroDeathCondensedIcon");
            libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoResource");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameSeparateShields");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellowEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrangeEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePinkEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameRespawn");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroWithPetStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatusPetMaster");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlot_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatusPet");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroLostVikingsStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus1");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotA_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus2");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotB_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus3");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroicTalentPanel");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentImage");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroicTalentCooldownLabel");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentFrame_Ready");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HeroicTalentChargeFillProgress");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "OnFireCutsceneFrame");
            libUIUI_gv_uIPartyFrame.lv_heroOnFireCutscene[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BoostGlowEffect");
            libUIUI_gv_uIPartyFrame.lv_playerBoostEffect[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializePartyFrameUI_Init () {
    libUIUI_gt_UIInitializePartyFrameUI = TriggerCreate("libUIUI_gt_UIInitializePartyFrameUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Respawn
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_respawnPlayer;
    unit lv_respawnUnit;
    int lv_rosterSlot;
    int lv_vikingIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_respawnPlayer = libGame_gf_HeroRespawnPlayer();
    lv_respawnUnit = libGame_gf_HeroRespawnHero();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_respawnPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rosterSlot = libGame_gv_players[lv_respawnPlayer].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] = false;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_respawnUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        lv_vikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_respawnUnit, lv_respawnPlayer);
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("HeroRespawnedHero" + IntToString(lv_vikingIndex)));
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][lv_vikingIndex], PlayerGroupAll(), false);
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroRespawned");
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), false);
        libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(true, lv_respawnPlayer, libGame_gf_AlliedPlayerGroupOfPlayer(lv_respawnPlayer));
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_rosterSlot], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_rosterSlot], PlayerGroupAll(), false);
        if (((libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_rosterSlot] != null) || (libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(libGame_gv_players[lv_respawnPlayer].lv_heroUnit) == true))) {
            libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lv_respawnPlayer);
        }
        else if ((libGame_gf_TalentChoicesPlayerHasHeroicTalent(lv_respawnPlayer) == true)) {
            libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lv_respawnPlayer);
            libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lv_respawnPlayer);
        }
        if ((UnitGetType(lv_respawnUnit) == "HeroLeoric")) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], PlayerGroupAll(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroRespawn_Init () {
    libUIUI_gt_UIPartyFrameHeroRespawn = TriggerCreate("libUIUI_gt_UIPartyFrameHeroRespawn_Func");
    libGame_gf_HeroRespawn(libUIUI_gt_UIPartyFrameHeroRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Hearthstone Complete
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    int lv_rosterSlot;
    unit lv_portedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_HeroPortedBackToTownPlayer();
    lv_rosterSlot = libGame_gv_players[lv_player].lv_rosterSlot;
    lv_portedUnit = libGame_gf_HeroPortedBackToTownUnit();
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_portedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_player), ("HearthstoneCompleteHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_portedUnit, lv_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_player), "HearthstoneCompleteDefault");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Init () {
    libUIUI_gt_UIPartyFrameHeroHearthstoneComplete = TriggerCreate("libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Func");
    libGame_gf_HeroPortedBackToTown(libUIUI_gt_UIPartyFrameHeroHearthstoneComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Enters Special Death State
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(libGame_gf_HeroEntersSpecialDeathStateHero());
    lv_rosterSlot = libGame_gv_players[lv_owner].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] = true;
    libUIUI_gf_UIPartyFrameHeroDies(lv_owner, libGame_gf_HeroEntersSpecialDeathStateHero());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Init () {
    libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState = TriggerCreate("libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Func");
    libGame_gf_HeroEntersSpecialDeathState(libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Death Update Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rosterSlot;
    unit lv_playerHeroUnit;
    int lv_heroIndex;
    timer lv_deathTimer;

    // Automatic Variable Declarations
    playergroup auto420DAF6A_g;

    // Variable Initialization
    lv_deathTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto420DAF6A_g = libCore_gv_allHeroPlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto420DAF6A_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        lv_rosterSlot = libGame_gv_players[lv_playerIndex].lv_rosterSlot;
        lv_playerHeroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_playerHeroUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
            libUIUI_gf_UIPartyFrameSpecialCaseUpdateVikingsDeath(lv_playerIndex);
        }
        else {
            if (((libGame_gv_players[lv_playerIndex].lv_isDead == true) || (libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] == true))) {
                lv_deathTimer = libUIUI_gf_UIPartyFrameDeathTimer(lv_playerIndex, lv_playerHeroUnit);
                if ((TimerGetRemaining(lv_deathTimer) > 0.0)) {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(lv_deathTimer), 0), PlayerGroupAll());
                }

                if ((TimerGetRemaining(lv_deathTimer) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_playerHeroUnit, lv_playerIndex)] == false)) {
                    libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_playerHeroUnit, lv_playerIndex)] = true;
                    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroAlmostRespawned");
                }

            }
            else {
                if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_playerHeroUnit) == libUIUI_ge_UIPartyFrameHeroType_PetHero)) {
                    libUIUI_gf_UIPartyFrameSpecialCaseUpdatePetDeath(lv_playerIndex);
                }

            }
        }
    }
    TimerStart(libUIUI_gv_partyFrameDeathUpdateTimer, libUIUI_gv_partyFrameTimersUpdateDelay_C, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Init () {
    libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires = TriggerCreate("libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Func");
    TriggerEnable(libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires, false);
    TriggerAddEventTimer(libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires, libUIUI_gv_partyFrameDeathUpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Ping - Listen For Player Ping
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPingListenForPlayerPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingType;
    unit lv_targetUnit;
    int lv_pingingPlayer;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    int autoC92D7CE2_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormPingGeneral";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = EventPingOption();
    if ((lv_pingType == (4))) {
        return true;
    }

    lv_pingingPlayer = EventPlayer();
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_pingingPlayer]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_pingingPlayer]) > 0.0)) {
        TextExpressionSetToken("Notification", c_textExpressionTokenMain, libUIUI_gv_pingLockoutTimerNotification);
        TextExpressionSetToken("Notification", "Timer", FixedToText(TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_pingingPlayer]), 1));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Notification"));
        return true;
    }

    lv_pingingPlayerHero = libGame_gv_players[lv_pingingPlayer].lv_heroUnit;
    if ((lv_pingingPlayerHero == null)) {
        return true;
    }

    lv_targetUnit = EventPingUnit();
    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_pingingPlayer) == false)) {
        return true;
    }

    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_pingingPlayer)].lv_teamPlayerGroup, libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lv_pingingPlayer, true));
    if ((UnitIsValid(lv_targetUnit) == false)) {
        lv_targetUnit = libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint(EventPingPoint(), EventPingedMinimap(), lv_pingingPlayer);
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeSummoned) == true) && (UnitHasBehavior2(lv_targetUnit, "HeroicSummon") == false)) {
        lv_targetUnit = null;
    }

    if ((UnitHasBehavior2(lv_targetUnit, "UnitCannotBePinged") == true)) {
        lv_targetUnit = null;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_pingingPlayer);
    autoC92D7CE2_val = lv_pingType;
    if (autoC92D7CE2_val == 2) {
        libUIUI_gf_UIPingPlayerUsesAssistMePing(lv_pingingPlayer, lv_targetUnit, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 0) {
        libUIUI_gf_UIPingPlayerUsesDangerPing(lv_pingingPlayer, EventPingPoint(), lv_targetUnit);
    }
    else if (autoC92D7CE2_val == 1) {
        libUIUI_gf_UIPingPlayerUsesOnMyWayPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 3) {
        libUIUI_gf_UIPingPlayerUsesDefendPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 5) {
        libUIUI_gf_UIPingPlayerUsesRetreatPing(lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == -1) {
        if ((UnitIsValid(lv_targetUnit) == true)) {
            libUIUI_gf_UIPingPlayerPingsUnit(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
        }
        else {
            libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, EventPingPoint(), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lv_pingingPlayer);
            SoundPlayForPlayer(lv_pingSound, lv_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
        }
    }
    else {
    }
    libUIUI_gf_PingAIResponse(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPingListenForPlayerPing_Init () {
    libUIUI_gt_UIPingListenForPlayerPing = TriggerCreate("libUIUI_gt_UIPingListenForPlayerPing_Func");
    TriggerAddEventPing(libUIUI_gt_UIPingListenForPlayerPing, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Base Mod Ping Data
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeBaseModPingData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("XelNagaWatchTower", false, StringExternal("Param/Value/lib_UIUI_315C3636"), StringExternal("Param/Value/lib_UIUI_16D6D712"), StringExternal("Param/Value/lib_UIUI_D35EA115"), SoundLink("UI_Game_Ping_General", c_soundIndexAny), SoundLink("UI_Game_Ping_General", c_soundIndexAny));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_DefendWatchTower", "Ping_AttackWatchTower");
    libUIUI_gf_PingCreateNewPingTarget("RegenGlobeGenerator", false, null, StringExternal("Param/Value/lib_UIUI_DD001862"), StringExternal("Param/Value/lib_UIUI_3EC2226D"), SoundLink("UI_Game_Ping_Help", c_soundIndexAny), SoundLink("UI_Game_Ping_Help", c_soundIndexAny));
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderSiegeGiant", false, StringExternal("Param/Value/lib_UIUI_EFE0D805"), StringExternal("Param/Value/lib_UIUI_6B79E4BA"), StringExternal("Param/Value/lib_UIUI_93BA0005"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_AttackMercCamp", "[Null]");
    libUIUI_gf_PingCreateNewPingTarget("MercLanerSiegeGiant", false, null, StringExternal("Param/Value/lib_UIUI_B00BE4E9"), StringExternal("Param/Value/lib_UIUI_F3FFC017"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderMeleeKnight", false, StringExternal("Param/Value/lib_UIUI_8A789231"), StringExternal("Param/Value/lib_UIUI_CD0A03A2"), StringExternal("Param/Value/lib_UIUI_22399564"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_AttackMercCamp", "[Null]");
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderRangedMage", false, StringExternal("Param/Value/lib_UIUI_8F63B95A"), StringExternal("Param/Value/lib_UIUI_0AA140DA"), StringExternal("Param/Value/lib_UIUI_F5E9FC79"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_AttackMercCamp", "[Null]");
    libUIUI_gf_PingCreateNewPingTarget("MercLanerMeleeKnight", false, null, StringExternal("Param/Value/lib_UIUI_2C788E7E"), StringExternal("Param/Value/lib_UIUI_351178F7"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("MercLanerRangedMage", false, null, StringExternal("Param/Value/lib_UIUI_FCC1EC89"), StringExternal("Param/Value/lib_UIUI_7E74C7BF"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("JungleGraveGolemDefender", false, StringExternal("Param/Value/lib_UIUI_7E840A13"), StringExternal("Param/Value/lib_UIUI_CE770C1E"), StringExternal("Param/Value/lib_UIUI_5AA13BBB"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_AttackMercCamp", "[Null]");
    libUIUI_gf_PingCreateNewPingTarget("JungleGraveGolemLaner", false, StringExternal("Param/Value/lib_UIUI_5439C8B1"), StringExternal("Param/Value/lib_UIUI_6A5A2608"), StringExternal("Param/Value/lib_UIUI_DCD69DF9"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("MercGoblinSapperDefender", false, StringExternal("Param/Value/lib_UIUI_EE7EF4E3"), StringExternal("Param/Value/lib_UIUI_2FD6E163"), StringExternal("Param/Value/lib_UIUI_0FE57DC1"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), "Ping_AttackMercCamp", "[Null]");
    libUIUI_gf_PingCreateNewPingTarget("MercGoblinSapperLaner", false, StringExternal("Param/Value/lib_UIUI_E6255FC7"), StringExternal("Param/Value/lib_UIUI_DC61720F"), StringExternal("Param/Value/lib_UIUI_EECCC1C3"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("RavenLordTribute", false, null, StringExternal("Param/Value/lib_UIUI_9032471B"), StringExternal("Param/Value/lib_UIUI_B9154009"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingCreateNewPingTarget("RavenLordTributeWarning", false, null, StringExternal("Param/Value/lib_UIUI_A22086C0"), StringExternal("Param/Value/lib_UIUI_F7D34CA1"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeBaseModPingData_Init () {
    libUIUI_gt_InitializeBaseModPingData = TriggerCreate("libUIUI_gt_InitializeBaseModPingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Count Reset Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCountResetTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto571276DF_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto571276DF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto571276DF_ai >= 0 && lv_itPlayer <= auto571276DF_ae) || (auto571276DF_ai < 0 && lv_itPlayer >= auto571276DF_ae) ) ; lv_itPlayer += auto571276DF_ai ) {
        if ((EventTimer() == libUIUI_gv_pingCountResetTime[lv_itPlayer])) {
            libUIUI_gv_pingCount[lv_itPlayer] = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCountResetTimerExpires_Init () {
    libUIUI_gt_PingCountResetTimerExpires = TriggerCreate("libUIUI_gt_PingCountResetTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[0]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[1]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[2]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[3]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[4]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[5]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[6]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[7]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[8]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[9]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[10]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[13]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[14]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping On My Way Path Display Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoAF9D5E79_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAF9D5E79_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoAF9D5E79_ai >= 0 && lv_itPlayer <= autoAF9D5E79_ae) || (autoAF9D5E79_ai < 0 && lv_itPlayer >= autoAF9D5E79_ae) ) ; lv_itPlayer += autoAF9D5E79_ai ) {
        if ((EventTimer() == libUIUI_gv_uIOnMyWayPingPathDisplayTimer[lv_itPlayer])) {
            PathDestroy(libGame_gv_players[lv_itPlayer].lv_onMyWayPathDisplay);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Init () {
    libUIUI_gt_PingOnMyWayPathDisplayTimerExpires = TriggerCreate("libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[0]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[11]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[12]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[14]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preload Panel Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PreloadPanelInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUIUI_gv_preloadPanelInitialized == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_preloadPanelInitialized = true;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libUIUI_gv_preloadPanel.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "PreloadPanel/PreloadPanelTemplate");
    libUIUI_gv_preloadPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libUIUI_gv_preloadPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundImage");
    libUIUI_gv_preloadPanel.lv_backgroundImage = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_preloadPanel.lv_mainPanel, c_triggerControlTypeLabel, "PreloadingTitle");
    libUIUI_gv_preloadPanel.lv_title = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlHookup(libUIUI_gv_preloadPanel.lv_mainPanel, c_triggerControlTypeLabel, "HeaderLabel");
    libUIUI_gv_preloadPanel.lv_headerLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    TimerStart(libUIUI_gv_preloadPanelTimer, libUIUI_gv_preloadPanelDisplayDuration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PreloadPanelInitialization_Init () {
    libUIUI_gt_PreloadPanelInitialization = TriggerCreate("libUIUI_gt_PreloadPanelInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Tab Screen Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTabScreenPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel");
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer");
    libUIUI_gv_uITabScreenPanel.lv_container = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl");
    libUIUI_gv_uITabScreenPanel.lv_tabControl = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TeamOrderStats/TotalKill/Label");
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabel[libGame_gv_teamOrderIndex_C] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TeamChaosStats/TotalKill/Label");
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabel[libGame_gv_teamChaosIndex_C] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TeamOrderStats/TeamLevel/Label");
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabel[libGame_gv_teamOrderIndex_C] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TeamChaosStats/TeamLevel/Label");
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabel[libGame_gv_teamChaosIndex_C] = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uITabScreenPanel.lv_tabControl, c_triggerControlTypeButton, "ShowStatsButton");
    libUIUI_gv_uITabScreenPanel.lv_statsButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uITabScreenPanel.lv_tabControl, c_triggerControlTypeButton, "ShowDeathRecapButton");
    libUIUI_gv_uITabScreenPanel.lv_deathRecapButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/CloseButton");
    libUIUI_gv_uITabScreenPanel.lv_closeButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTabScreenPanel_Init () {
    libUIUI_gt_UIInitializeTabScreenPanel = TriggerCreate("libUIUI_gt_UIInitializeTabScreenPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Talent Choice Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTalentChoicePanel_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTier;
    int lv_itColumn;
    int lv_itBuild;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoB6DF43B3_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoB6DF43B3_ai = 1;
    const int auto6A5726F8_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto6A5726F8_ai = 1;
    const int auto4ABAA559_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto4ABAA559_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TalentChoicePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITalentChoicePanel.lv_talentsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itBuild = 1;
    for ( ; ( (autoB6DF43B3_ai >= 0 && lv_itBuild <= autoB6DF43B3_ae) || (autoB6DF43B3_ai < 0 && lv_itBuild >= autoB6DF43B3_ae) ) ; lv_itBuild += autoB6DF43B3_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentBuildSelection/PageButton" + IntToString(lv_itBuild))));
        libUIUI_gv_uITalentChoicePanel.lv_buildButton[lv_itBuild] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentTreePanel");
    libUIUI_gv_uITalentChoicePanel.lv_talentsPanelTabControl = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itTier = 1;
    for ( ; ( (auto6A5726F8_ai >= 0 && lv_itTier <= auto6A5726F8_ae) || (auto6A5726F8_ai < 0 && lv_itTier >= auto6A5726F8_ae) ) ; lv_itTier += auto6A5726F8_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTierButton" + IntToString(lv_itTier))));
        libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentIcon");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconFrame[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TalentIcon/IconImage");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonIconImage[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "QuestFrame/QuestProgressBar");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonQuestProgressBar[lv_itTier] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeTooltip, "StandardTooltipStorm/TalentsChoiceTooltip");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipNameLabel[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipInfoLabel[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_uITalentChoicePanel.lv_tierButtonTooltipDescriptionLabel[lv_itTier] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uITalentChoicePanel.lv_tierButton[lv_itTier], lv_panels[lv_currentPanelLayer], PlayerGroupAll());
        lv_currentPanelLayer -= 1;

        lv_itColumn = 1;
        for ( ; ( (auto4ABAA559_ai >= 0 && lv_itColumn <= auto4ABAA559_ae) || (auto4ABAA559_ai < 0 && lv_itColumn >= auto4ABAA559_ae) ) ; lv_itColumn += auto4ABAA559_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeTierPanelTier" + IntToString(lv_itTier) + "/TalentTreeButton" + IntToString(lv_itColumn))));
            libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonIcon[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonName[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyFrame[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonHotkeyLabel[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeTooltip, "StandardTooltipStorm/TalentsChoiceTooltip");
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], c_anchorRight, 0, 0);
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipNameLabel[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipInfoLabel[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
            libUIUI_gv_uITalentChoicePanel.lv_talentButtonTooltipDescriptionLabel[lv_itTier][lv_itColumn] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uITalentChoicePanel.lv_talentButton[lv_itTier][lv_itColumn], lv_panels[lv_currentPanelLayer], PlayerGroupAll());
            lv_currentPanelLayer -= 1;
        }
    }
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroTalentTreeSelectionIndicatorContainer");
    libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/HeroTalentTreeSelectionToggleButton");
    libUIUI_gv_uITalentChoicePanel.lv_heroTalentTreeSelectionToggleButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTalentChoicePanel_Init () {
    libUIUI_gt_UIInitializeTalentChoicePanel = TriggerCreate("libUIUI_gt_UIInitializeTalentChoicePanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Talent Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITalentPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[21] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayer;
    int lv_itTalent;
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto90A59239_ae = libCore_gv_bALMaxPlayers;
    const int auto90A59239_ai = 1;
    const int autoAAF0CC03_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoAAF0CC03_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/TalentsContainerFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITalentPanel.lv_mainDialog = DialogControlLastCreated();
    lv_itPlayer = 1;
    for ( ; ( (auto90A59239_ai >= 0 && lv_itPlayer <= auto90A59239_ae) || (auto90A59239_ai < 0 && lv_itPlayer >= auto90A59239_ae) ) ; lv_itPlayer += auto90A59239_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerFrame" + IntToString(lv_itPlayer))));
        libUIUI_gv_uITalentPanel.lv_unitStatusFrame[lv_itPlayer] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itTalent = 0;
        for ( ; ( (autoAAF0CC03_ai >= 0 && lv_itTalent <= autoAAF0CC03_ae) || (autoAAF0CC03_ai < 0 && lv_itTalent >= autoAAF0CC03_ae) ) ; lv_itTalent += autoAAF0CC03_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentsContainerFrame/TalentTreeIcon" + IntToString(lv_itTalent))));
            libUIUI_gv_uITalentPanel.lv_talentFrame[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
            libUIUI_gv_uITalentPanel.lv_talentIcon[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "QuestProgressBar");
            libUIUI_gv_uITalentPanel.lv_talentQuestProgressBar[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            DialogControlCreateInPanelFromTemplate(libUIUI_gv_uITalentPanel.lv_mainDialog, c_triggerControlTypeTooltip, "StandardTooltipStorm/HeroSelectionTooltipTemplate");
            libUIUI_gv_uITalentPanel.lv_talentTooltip[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uITalentPanel.lv_talentFrame[lv_itPlayer][lv_itTalent], libUIUI_gv_uITalentPanel.lv_talentTooltip[lv_itPlayer][lv_itTalent], PlayerGroupAll());
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
            libUIUI_gv_uITalentPanel.lv_talentTooltipNameLabel[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
            libUIUI_gv_uITalentPanel.lv_talentTooltipInfoLabel[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
            libUIUI_gv_uITalentPanel.lv_talentTooltipDescriptionLabel[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestProgressionLabel");
            libUIUI_gv_uITalentPanel.lv_talentTooltipQuestProgressionLabel[lv_itPlayer][lv_itTalent] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITalentPanelInitialize_Init () {
    libUIUI_gt_UITalentPanelInitialize = TriggerCreate("libUIUI_gt_UITalentPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TargetInfoFrame");
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TargetInfoPanel");
    libUIUI_gv_uITargetInfoPanel.lv_unitStatusFrame = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TargetPortraitFrame/PortraitImageHandler");
    libUIUI_gv_uITargetInfoPanel.lv_portraitImageHandler = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthAndManaUnitStatusFrame/TargetStatsPanel/AbilityPowerFrame/AbilityPowerLabel/StatusLabel");
    libUIUI_gv_uITargetInfoPanel.lv_spellPowerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthAndManaUnitStatusFrame/TargetStatsPanel/PhysicalArmorFrame/PhysicalArmorLabel/StatusLabel");
    libUIUI_gv_uITargetInfoPanel.lv_physicalArmorLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthAndManaUnitStatusFrame/TargetStatsPanel/AbilityArmorFrame/AbilityArmorLabel/StatusLabel");
    libUIUI_gv_uITargetInfoPanel.lv_spellArmorLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthAndManaUnitStatusFrame/TargetStatsPanel/AttackDamageFrame/AttackDamageLabel/StatusLabel");
    libUIUI_gv_uITargetInfoPanel.lv_weaponDamageLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelInitialize_Init () {
    libUIUI_gt_UITargetInfoPanelInitialize = TriggerCreate("libUIUI_gt_UITargetInfoPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel Unit Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_suppressSpam == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_localPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_suppressSpam = true;
    libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit = EventUnit();
    if (((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "FogVisibility", c_playerAny) == "Visible") || (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "FogVisibility", c_playerAny) == "Dimmed"))) {
        libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unitIsVisibleInFoW = true;
    }
    else {
        libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unitIsVisibleInFoW = false;
    }
    if ((UnitIsValid(libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit) == true) && (libCore_gf_ExecuteValidatorOnUnit("TargetNotDeadAndNoSpecialDeathState", libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit, libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit) == true) && ((libNtve_gf_UnitIsVisibleToPlayer(libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit, lv_localPlayer) == true) || (libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unitIsVisibleInFoW == true))) {
        libUIUI_gv_uITargetInfoPanelPlayer[EventPlayer()].lv_lastTimeClicked = GameGetMissionTime();
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_unitStatusFrame, libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit, libCore_gv_playerGroupFromPlayer[lv_localPlayer]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetInfoPanel.lv_portraitImageHandler, libUIUI_gf_UITargetInfoPanelGetUnitIcon(libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_unit), libCore_gv_playerGroupFromPlayer[lv_localPlayer]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_localPlayer], true);
    }

    Wait(0.0, c_timeGame);
    libUIUI_gv_uITargetInfoPanelPlayer[lv_localPlayer].lv_suppressSpam = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelUnitClicked_Init () {
    libUIUI_gt_UITargetInfoPanelUnitClicked = TriggerCreate("libUIUI_gt_UITargetInfoPanelUnitClicked_Func");
    TriggerEnable(libUIUI_gt_UITargetInfoPanelUnitClicked, false);
    TriggerAddEventUnitClick(libUIUI_gt_UITargetInfoPanelUnitClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel Periodic Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelPeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto351F1FDC_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto351F1FDC_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto351F1FDC_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitIsValid(libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unit) == true) && (libCore_gf_ExecuteValidatorOnUnit("TargetNotDeadAndNoSpecialDeathState", libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unit, libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unit) == true) && ((libNtve_gf_UnitIsVisibleToPlayer(libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unit, lv_itPlayer) == true) || (libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unitIsVisibleInFoW == true))) {
            libUIUI_gf_UITargetInfoPanelUpdateUnit(lv_itPlayer);
        }
        else {
            libUIUI_gv_uITargetInfoPanelPlayer[lv_itPlayer].lv_unit = null;
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelPeriodicUpdate_Init () {
    libUIUI_gt_UITargetInfoPanelPeriodicUpdate = TriggerCreate("libUIUI_gt_UITargetInfoPanelPeriodicUpdate_Func");
    TriggerEnable(libUIUI_gt_UITargetInfoPanelPeriodicUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITargetInfoPanelPeriodicUpdate, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel LMB Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelLMBClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }

        if (!((EventMouseClickedButton() == c_mouseButtonLeft))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((GameGetMissionTime() - libUIUI_gv_uITargetInfoPanelPlayer[EventPlayer()].lv_lastTimeClicked) > 0.0625)) {
        libUIUI_gv_uITargetInfoPanelPlayer[EventPlayer()].lv_unit = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelLMBClicked_Init () {
    libUIUI_gt_UITargetInfoPanelLMBClicked = TriggerCreate("libUIUI_gt_UITargetInfoPanelLMBClicked_Func");
    TriggerEnable(libUIUI_gt_UITargetInfoPanelLMBClicked, false);
    TriggerAddEventMouseClicked(libUIUI_gt_UITargetInfoPanelLMBClicked, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Unit Status - Dimmed
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIUnitStatusDimmed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/DimmingFrame", EventUnit());
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "DimmedOn");
    }
    else {
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/DimmingFrame", EventUnit());
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "DimmedOff");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIUnitStatusDimmed_Init () {
    libUIUI_gt_UIUnitStatusDimmed = TriggerCreate("libUIUI_gt_UIUnitStatusDimmed_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UIUnitStatusDimmed, null, c_unitBehaviorFlagUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UIUnitStatusDimmed, null, c_unitBehaviorFlagUser5, c_unitBehaviorChangeDeactivate);
}

void libUIUI_InitTriggers () {
    libUIUI_gt_IncludeUI_Init();
    libUIUI_gt_InitializeUI_Init();
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init();
    libUIUI_gt_PlayerAnnounceInitialize_Init();
    libUIUI_gt_PlayerAnnounceListenForAnnounce_Init();
    libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires_Init();
    libUIUI_gt_UIInitializeDamageFlashUI_Init();
    libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init();
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init();
    libUIUI_gt_UIDeathRecapPanelInitialize_Init();
    libUIUI_gt_DeathRecapOpenButtonClicked_Init();
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Init();
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect_Init();
    libUIUI_gt_UICombatFloatingElementsDamage_Init();
    libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Init();
    libUIUI_gt_UICombatFloatingElementsHeal_Init();
    libUIUI_gt_UICombatFloatingElementsHealPrevented_Init();
    libUIUI_gt_UICombatFloatingElementsDamagePrevented_Init();
    libUIUI_gt_UICombatFloatingElementsMana_Init();
    libUIUI_gt_UICombatFloatingElementsMissing_Init();
    libUIUI_gt_UICombatFloatingElementsBlocked_Init();
    libUIUI_gt_FullscreenOverlaysInitialize_Init();
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysInitializeRework_Init();
    libUIUI_gt_UIGameInfoInitialize_Init();
    libUIUI_gt_GameOverSplashInitialize_Init();
    libUIUI_gt_GameStatsInitialize_Init();
    libUIUI_gt_UIInitializeGameUIHandles_Init();
    libUIUI_gt_UIGameUITurnOnFactionStates_Init();
    libUIUI_gt_UIGameUISetGameData_Init();
    libUIUI_gt_UIInitializeHealingFountainsHelpText_Init();
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init();
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init();
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init();
    libUIUI_gt_HelpButtonDebugPosition_Init();
    libUIUI_gt_UIInitializeHeroConsole_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init();
    libUIUI_gt_UIHeroLeaderboardInitialize_Init();
    libUIUI_gt_UIHeroLeaderboardSortingUpdate_Init();
    libUIUI_gt_HSUIIngameButtonUsed_Init();
    libUIUI_gt_HSUIIngameFilterEditBox_Init();
    libUIUI_gt_HSUIIngameShowHeroSelection_Init();
    libUIUI_gt_HSUIIngameCountdownTimerExpires_Init();
    libUIUI_gt_HSUIIngameUIInit_Init();
    libUIUI_gt_HSUILoadoutScrollBarUsed_Init();
    libUIUI_gt_HSUILoadoutInputTrigger_Init();
    libUIUI_gt_HSUILoadoutListBoxSelected_Init();
    libUIUI_gt_HSUILoadoutEditBoxTextChanges_Init();
    libUIUI_gt_UIInitializeHeroTrackerArrow_Init();
    libUIUI_gt_UIInputIngameButtonUsed_Init();
    libUIUI_gt_InputPlayerClicksUnit_Init();
    libUIUI_gt_InputUIClearTextOption_Init();
    libUIUI_gt_KillLogInitialize_Init();
    libUIUI_gt_KillLogOnHeroUnitDies_Init();
    libUIUI_gt_KillLogOnQuestCompleteViaTokens_Init();
    libUIUI_gt_KillLogOnQuestCompleteViaEffects_Init();
    libUIUI_gt_KillLogOnQuestReset_Init();
    libUIUI_gt_KillLogItemTimerExpires_Init();
    libUIUI_gt_MapMechanicsPanelInitialize_Init();
    libUIUI_gt_MapMechanicsPanelUpdate_Init();
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init();
    libUIUI_gt_NotificationDisplayInitialize_Init();
    libUIUI_gt_DEBUGNotificationAnimCheat_Init();
    libUIUI_gt_UIInitializePartyFrameUI_Init();
    libUIUI_gt_UIPartyFrameHeroRespawn_Init();
    libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Init();
    libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Init();
    libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Init();
    libUIUI_gt_UIPingListenForPlayerPing_Init();
    libUIUI_gt_InitializeBaseModPingData_Init();
    libUIUI_gt_PingCountResetTimerExpires_Init();
    libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Init();
    libUIUI_gt_PreloadPanelInitialization_Init();
    libUIUI_gt_UIInitializeTabScreenPanel_Init();
    libUIUI_gt_UIInitializeTalentChoicePanel_Init();
    libUIUI_gt_UITalentPanelInitialize_Init();
    libUIUI_gt_UITargetInfoPanelInitialize_Init();
    libUIUI_gt_UITargetInfoPanelUnitClicked_Init();
    libUIUI_gt_UITargetInfoPanelPeriodicUpdate_Init();
    libUIUI_gt_UITargetInfoPanelLMBClicked_Init();
    libUIUI_gt_UIUnitStatusDimmed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_InitLib_completed = false;

void libUIUI_InitLib () {
    if (libUIUI_InitLib_completed) {
        return;
    }

    libUIUI_InitLib_completed = true;

    libUIUI_InitLibraries();
    libUIUI_InitVariables();
    libUIUI_InitTriggers();
}

include "LibCore"
include "LibGame"
include "LibSprt"
include "LibMapM"
include "LibSond"
include "LibGlue"

