include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libGame_ge_CustomValueIndexes_MinionIndex = 0;
const int libGame_ge_CustomValueIndexes_TownIndex = 1;
const int libGame_ge_CustomValueIndexes_TownStructureIndex = 2;
const int libGame_ge_CustomValueIndexes_WatchTowerIndex = 3;
const int libGame_ge_CustomValueIndexes_JungleDefenderCreepCampIndex = 4;
const int libGame_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex = 5;
const int libGame_ge_CustomValueIndexes_JungleLanerCreepCampIndex = 6;
const int libGame_ge_CustomValueIndexes_JungleLanerCreepCampMinimapIndex = 7;
const int libGame_ge_CustomValueIndexes_JungleDefenderAIIndex = 8;
const int libGame_ge_CustomValueIndexes_HeroIsSwappingIndex = 9;
const int libGame_ge_CustomValueIndexes_HeroLevelIndex = 10;
const int libGame_ge_CameraType_Default = 0;
const int libGame_ge_CameraType_Advanced = 1;
const int libGame_ge_AnnouncemetPriorities_Critical = 0;
const int libGame_ge_AnnouncemetPriorities_High = 1;
const int libGame_ge_AnnouncemetPriorities_Normal = 2;
const int libGame_ge_AnnouncemetPriorities_Low = 3;
const int libGame_ge_StormBehaviorCategories_AbnormalDeath = 0;
const int libGame_ge_StormBehaviorCategories_AbnormalRespawn = 1;
const int libGame_ge_StormBehaviorCategories_DamageReduction = 2;
const int libGame_ge_StormBehaviorCategories_DebuffSpellPower = 3;
const int libGame_ge_StormBehaviorCategories_Eaten = 4;
const int libGame_ge_StormBehaviorCategories_Dodge = 5;
const int libGame_ge_StormBehaviorCategories_Flailing = 6;
const int libGame_ge_StormBehaviorCategories_FlailingBackward = 7;
const int libGame_ge_StormBehaviorCategories_FlailingForward = 8;
const int libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackIgnoreFX = 9;
const int libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackImmunity = 10;
const int libGame_ge_StormBehaviorCategories_HealReceivedModifying = 11;
const int libGame_ge_StormBehaviorCategories_HealReduction = 12;
const int libGame_ge_StormBehaviorCategories_HideNameplate = 13;
const int libGame_ge_StormBehaviorCategories_HostileStasisRemoved = 14;
const int libGame_ge_StormBehaviorCategories_ImmunedToAllyDisplacement = 15;
const int libGame_ge_StormBehaviorCategories_ImmunedToEnemyDisplacement = 16;
const int libGame_ge_StormBehaviorCategories_KnockedOut = 17;
const int libGame_ge_StormBehaviorCategories_MindControl = 18;
const int libGame_ge_StormBehaviorCategories_PermanentMaxHealth = 19;
const int libGame_ge_StormBehaviorCategories_PhysicalArmor = 20;
const int libGame_ge_StormBehaviorCategories_Polymorph = 21;
const int libGame_ge_StormBehaviorCategories_Root = 22;
const int libGame_ge_StormBehaviorCategories_Protected = 23;
const int libGame_ge_StormBehaviorCategories_PseudoStructure = 24;
const int libGame_ge_StormBehaviorCategories_Shield = 25;
const int libGame_ge_StormBehaviorCategories_Silence = 26;
const int libGame_ge_StormBehaviorCategories_SpecialDeathState = 27;
const int libGame_ge_StormBehaviorCategories_SpellArmor = 28;
const int libGame_ge_StormBehaviorCategories_StackingComboMarker = 29;
const int libGame_ge_StormBehaviorCategories_Stasis = 30;
const int libGame_ge_StormBehaviorCategories_StasisAir = 31;
const int libGame_ge_StormBehaviorCategories_Stun = 32;
const int libGame_ge_StormBehaviorCategories_SuppressCollision = 33;
const int libGame_ge_StormBehaviorCategories_SuppressUltimateCharge = 34;
const int libGame_ge_StormBehaviorCategories_SuppressVisibility = 35;
const int libGame_ge_StormBehaviorCategories_Taunt = 36;
const int libGame_ge_StormBehaviorCategories_TipableKnockback = 37;
const int libGame_ge_StormBehaviorCategories_Unreducible = 38;
string libGame_ge_StormBehaviorCategories_Ident (int lp_val);
const int libGame_ge_CapturePointDecay_Owner = 0;
const int libGame_ge_CapturePointDecay_Neutral = 1;
const int libGame_ge_CapturePointDecay_DoNotDecay = 2;
const int libGame_ge_CapturePointState_Contested = 0;
const int libGame_ge_CapturePointState_Paused = 1;
const int libGame_ge_CapturePointState_Neutral = 2;
const int libGame_ge_CapturePointState_Captured = 3;
const int libGame_ge_CapturePointState_RevertingtoNeutral = 4;
const int libGame_ge_CapturePointState_Capturing = 5;
const int libGame_ge_EffectHistoryDamagedOrHealed_Unknown = 0;
const int libGame_ge_EffectHistoryDamagedOrHealed_Damaged = 1;
const int libGame_ge_EffectHistoryDamagedOrHealed_Healed = 2;
string libGame_ge_EffectHistoryDamagedOrHealed_Ident (int lp_val);
const int libGame_ge_EffectHistoryDataType_Life = 0;
const int libGame_ge_EffectHistoryDataType_HistoryIndex = 1;
const int libGame_ge_EffectHistoryDataType_DamageTaken = 2;
const int libGame_ge_EffectHistoryDataType_DamageAbsorbed = 3;
const int libGame_ge_EffectHistoryDataType_HealedAmount = 4;
const int libGame_ge_EffectHistoryDataType_CasterUnitIndex = 5;
const int libGame_ge_EffectHistoryDataType_TargetUnitIndex = 6;
const int libGame_ge_EffectHistoryDataType_Time = 7;
const int libGame_ge_EncouragementStatCalloutThresholds_Null = 0;
const int libGame_ge_EncouragementStatCalloutThresholds_Display = 1;
const int libGame_ge_EncouragementStatCalloutThresholds_GreatJob = 2;
const int libGame_ge_EncouragementStatCalloutThresholds_Amazing = 3;
const int libGame_ge_EncouragementStatCalloutThresholds_Count = 4;
const int libGame_ge_EncouragementStatCallouts_Null = 0;
const int libGame_ge_EncouragementStatCallouts_TimeSpentAlive = 1;
const int libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered = 2;
const int libGame_ge_EncouragementStatCallouts_Takedowns = 3;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes = 4;
const int libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes = 5;
const int libGame_ge_EncouragementStatCallouts_MapTributesCollected = 6;
const int libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn = 7;
const int libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures = 8;
const int libGame_ge_EncouragementStatCallouts_MapSkullsCollected = 9;
const int libGame_ge_EncouragementStatCallouts_MercCampsCaptured = 10;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToTowns = 11;
const int libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes = 12;
const int libGame_ge_EncouragementStatCallouts_Count = 13;
string libGame_ge_EncouragementStatCallouts_Ident (int lp_val);
const int libGame_ge_EncouragementDeathTipsNames_Null = 0;
const int libGame_ge_EncouragementDeathTipsNames_Gangups = 1;
const int libGame_ge_EncouragementDeathTipsNames_FollowMinions = 2;
const int libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns = 3;
const int libGame_ge_EncouragementDeathTipsNames_UseYourAbilities = 4;
const int libGame_ge_EncouragementDeathTipsNames_Moonwell = 5;
const int libGame_ge_EncouragementDeathTipsNames_Retreat = 6;
const int libGame_ge_EncouragementDeathTipsNames_TrainTalents = 7;
const int libGame_ge_EncouragementDeathTipsNames_Mount = 8;
const int libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath = 9;
const int libGame_ge_EncouragementDeathTipsNames_Count = 10;
string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val);
const int libGame_ge_HeroDeathRespawnOption_NormalRespawn = 0;
const int libGame_ge_HeroDeathRespawnOption_NoRespawn = 1;
const int libGame_ge_HeroDeathKillStingerQueueType_Ally = 0;
const int libGame_ge_HeroDeathKillStingerQueueType_Enemy = 1;
const int libGame_ge_LaneNamePreset_Top = 0;
const int libGame_ge_LaneNamePreset_Middle = 1;
const int libGame_ge_LaneNamePreset_Bottom = 2;
string libGame_ge_LaneNamePreset_Ident (int lp_val);
const int libGame_ge_AllLanes_AllLanes = 0;
const int libGame_ge_MatchStatisticStuffType_DamageDealtHeroicPhysical = 0;
const int libGame_ge_MatchStatisticStuffType_DamageDealtHeroicSpell = 1;
const int libGame_ge_MatchStatisticStuffType_DamageDealtHeroicPercent = 2;
const int libGame_ge_MatchStatisticStuffType_DamageDealtSiegePhysical = 3;
const int libGame_ge_MatchStatisticStuffType_DamageDealtSiegeSpell = 4;
const int libGame_ge_MatchStatisticStuffType_DamageDealtSiegePercent = 5;
const int libGame_ge_MatchStatisticStuffType_DamageTakenPhysical = 6;
const int libGame_ge_MatchStatisticStuffType_DamageTakenSpell = 7;
const int libGame_ge_MatchStatisticStuffType_DamageTakenPercent = 8;
const int libGame_ge_MatchStatisticStuffType_HealingDealt = 9;
const int libGame_ge_MatchStatisticStuffType_HealingTaken = 10;
const int libGame_ge_MatchStatisticStuffType_Selfheal = 11;
const int libGame_ge_MatchStatisticStuffType_XP = 12;
const int libGame_ge_MatchStatisticStuffType_DamageMitigatedByArmor = 13;
const int libGame_ge_MatchStatisticStuffType_DamagePreventedByShield = 14;
const int libGame_ge_MatchStatisticStuffType_NEWSoloKill = 15;
const int libGame_ge_MatchStatisticStuffType_NEWAssists = 16;
const int libGame_ge_MatchStatisticStuffType_NEWDeaths = 17;
const int libGame_ge_MatchStatisticStuffType_NEWSiegeDamage = 18;
const int libGame_ge_MatchStatisticStuffType_NEWHeroDamage = 19;
const int libGame_ge_MatchStatisticStuffType_NEWHealing = 20;
const int libGame_ge_MatchStatisticStuffType_NEWSelfHealing = 21;
const int libGame_ge_MatchStatisticStuffType_NEWExperience = 22;
const int libGame_ge_MatchStatisticStuffType_NEWPhysicalDamageEnhanced = 23;
const int libGame_ge_MatchStatisticStuffType_NEWPhysicalDamageMitigated = 24;
const int libGame_ge_MatchStatisticStuffType_NEWSpellDamageEnhanced = 25;
const int libGame_ge_MatchStatisticStuffType_NEWSpellDamageMitigated = 26;
string libGame_ge_MatchStatisticStuffType_Ident (int lp_val);
const int libGame_ge_MatchStatisticCastingType_Weapon = 0;
const int libGame_ge_MatchStatisticCastingType_Ability = 1;
const int libGame_ge_MatchStatisticCastingType_Talent = 2;
string libGame_ge_MatchStatisticCastingType_Ident (int lp_val);
const int libGame_ge_PlayerStatusStorm_Unused = 0;
const int libGame_ge_PlayerStatusStorm_ChoosingaHero = 1;
const int libGame_ge_PlayerStatusStorm_Playing = 2;
const int libGame_ge_PlayerStatusStorm_LefttheGame = 3;
const int libGame_ge_Faction_Neutral = 0;
const int libGame_ge_Faction_Order = 1;
const int libGame_ge_Faction_Chaos = 2;
const int libGame_ge_Faction_HostileCreeps = 3;
const int libGame_ge_XPSource_Debug = 0;
const int libGame_ge_XPSource_Trickle = 1;
const int libGame_ge_XPSource_Minion = 2;
const int libGame_ge_XPSource_Mercenary = 3;
const int libGame_ge_XPSource_Hero = 4;
const int libGame_ge_XPSource_Structure = 5;
const int libGame_ge_XPSource_Total = 6;
const int libGame_ge_TalentChoicesUpdateChoicePanelEvent_LevelUp = 0;
const int libGame_ge_TalentChoicesUpdateChoicePanelEvent_TalentChosen = 1;
const int libGame_ge_TalentChoicesUpdateChoicePanelEvent_TalentReset = 2;
const int libGame_ge_TownStates_Idle = 0;
const int libGame_ge_TownStates_Fighting = 1;
const int libGame_ge_TownStates_Leashing = 2;
const int libGame_ge_TownStates_Dead = 3;
const int libGame_ge_TownStructureTypes_None = 0;
const int libGame_ge_TownStructureTypes_TownHall = 1;
const int libGame_ge_TownStructureTypes_Wall = 2;
const int libGame_ge_TownStructureTypes_Gate = 3;
const int libGame_ge_TownStructureTypes_CannonTower = 4;
const int libGame_ge_TownStructureTypes_Moonwell = 5;
const int libGame_ge_TownStructureTypes_Core = 6;
const int libGame_ge_TownHallTypes_None = 0;
const int libGame_ge_TownHallTypes_FrontTown = 1;
const int libGame_ge_TownHallTypes_BackTown = 2;

// Constants
const int libGame_gv_teamOrderIndex_C = 1;
const int libGame_gv_teamChaosIndex_C = 2;
const string libGame_gv_gameDataVersion = "1.1.2.5";
const int libGame_gv_cameraBound_MaxCount_C = 10;
const int libGame_gv_announcement_QueueMaxCount_C = 32;
const fixed libGame_gv_announcement_StandardTimerDuration_C = 2.0;
const fixed libGame_gv_announcement_QuickSoundOnlyTimerDuration_C = 1.625;
const fixed libGame_gv_announcement_KillAnnouncementDuration_C = 1.5;
const fixed libGame_gv_announcement_LongAnnouncementDuration_C = 4.0;
const fixed libGame_gv_announcement_NoDelay_C = 0.0625;
const fixed libGame_gv_announcement_KillAnnouncementTimerTreshold_C = 0.25;
const fixed libGame_gv_announcement_HeroTakedownVODelay_C = 2.0;
const int libGame_gv_announcement_MinimumLevelForTeamKillHeroVO_C = 8;
const int libGame_gv_capturePointMaxCount_C = 15;
const fixed libGame_gv_towerCoreUnderAttackAlertMinTime = 15.0;
const fixed libGame_gv_towerCoreUnderAttackScanPeriod = 1.0;
const fixed libGame_gv_towerCoreUnderAttackScanRange = 20.0;
const fixed libGame_gv_cCReductionTimeMinimum_C = 0.25;
const int libGame_gv_deathRecapMaxEffectsInHistory = 30;
const fixed libGame_gv_deathRecap_MaxTimeElapsed_C = 30.0;
const int libGame_gv_deathRecap_MaxEffectsBars_C = 30;
const int libGame_gv_deathRecap_MaxMaxDamagersSort_C = 6;
const int libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C = 8;
const int libGame_gv_deathRecap_MaxMaxDamagers_C = 3;
const int libGame_gv_deathRecap_MaxMaxDamageAbils_C = 3;
const int libGame_gv_deathRecap_MaxEffectCombinePerSlot_C = 5;
const fixed libGame_gv_deathRecap_MaxEffectCombineTimeElapsed_C = 0.65;
const int libGame_gv_deathRecap_SpecialDamageEffectsCount_C = 1;
const int libGame_gv_encouragement_NumberOfStatCalloutThresholds_C = 3;
const int libGame_gv_encouragement_NumberOfStatCallouts_C = 12;
const fixed libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C = 2.0;
const fixed libGame_gv_encouragement_DeathTipNearbyScanRadius_C = 10.0;
const fixed libGame_gv_encouragement_DeathTipNearbyHeroesTimeThreshold_C = 3.0;
const fixed libGame_gv_encouragement_DeathTipNearbyMinionsTimeThreshold_C = 1.5;
const fixed libGame_gv_encouragement_DeathTipEnemyMinionPercentDamageThreshold_C = 0.2;
const fixed libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C = 5.0;
const fixed libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C = 3.0;
const int libGame_gv_encouragement_NumberOfDeathTips_C = 9;
const fixed libGame_gv_encouragement_PeriodicUpdateFrequency_C = 0.0625;
const fixed libGame_gv_encouragement_LowHealthPercentThreshold_C = 65.0;
const fixed libGame_gv_encouragement_LowManaPercentThreshold_C = 45.0;
const fixed libGame_gv_encouragement_SuperLowHealthPercentThreshold_C = 30.0;
const fixed libGame_gv_encouragement_MoonwellNearbyRangeThreshold_C = 35.0;
const int libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C = 10;
const fixed libGame_gv_encouragement_MountTipThresholdDistance_C = 30.0;
const int libGame_gv_encouragement_DeathTipMaxDisplayCount_C = 5;
const int libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C = 40;
const string libGame_gv_eventID_IncludeModeInitialization_C = "IncludeModeInitialization";
const string libGame_gv_eventID_CameraPannedFromScript_C = "Camera Panned From Script";
const string libGame_gv_eventParam_CameraPannedFromScript_Player_C = "Player";
const string libGame_gv_eventParam_CameraPannedFromScript_Point_C = "Point";
const string libGame_gv_eventID_CapturePointChangesOwner_C = "CapturePointChangesOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C = "AIOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C = "PlayerOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C = "CapturePointBecomesFullyOverCaptured";
const string libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventID_DebugHeroSwapped_C = "DebugHeroSwapped";
const string libGame_gv_eventID_DebugHeroSwapped_Player_C = "Player";
const string libGame_gv_eventID_QuestsCompleted_C = "QuestsCompleted";
const string libGame_gv_eventParam_QuestsCompleted_Player_C = "Player";
const string libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C = "JungleDefenderAIDefendersBeginFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C = "JungleDefenderAIDefendersEndFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefenderKilled_C = "JungleDefenderAIDefenderKilled";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C = "Unit";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C = "Killing Player";
const string libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C = "JungleDefenderAIAllDefendersKilled";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C = "Killing Player";
const string libGame_gv_eventID_GameOpenTimerStarted_C = "GameOpenTimerStart";
const string libGame_gv_eventID_TownDataInitialized_C = "TownDataInitialized";
const string libGame_gv_eventID_GameOverEvent_C = "GameOverEvent";
const string libGame_gv_eventID_CheckUnitForAbilityRedirect_C = "CheckUnitForAbilityRedirect";
const string libGame_gv_eventID_CheckUnitForAbilityRedirect_Unit_C = "Unit";
const string libGame_gv_eventID_CheckUnitForAbilityRedirect_Target_C = "Target";
const string libGame_gv_eventID_CheckUnitForAbilityRedirect_Boolean_C = "Boolean";
const string libGame_gv_eventID_CheckUnitForAbilityRedirect_Point_C = "Point";
const string libGame_gv_eventID_HeroExitedTransport_C = "HeroExitedTransport";
const string libGame_gv_eventParam_HeroExitedTransport_Player_C = "PlayerExited";
const string libGame_gv_eventParam_HeroExitedTransport_Transport_C = "Transport";
const string libGame_gv_eventID_HeroEnteredTransport_C = "HeroEnteredTransport";
const string libGame_gv_eventParam_HeroEnteredTransport_Player_C = "PlayerEntering";
const string libGame_gv_eventParam_HeroEnteredTransport_Transport_C = "Transport";
const string libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C = "Cargo Unit Entered";
const string libGame_gv_eventID_HeroEntersSpecialDeathState_C = "HeroEntersSpecialDeathState";
const string libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C = "Hero";
const string libGame_gv_eventID_HeroHealPrevented_C = "HeroHealPrevented";
const string libGame_gv_eventID_HeroHealPrevented_Amount_C = "Amount";
const string libGame_gv_eventID_HeroHealPrevented_Buff_C = "Effect";
const string libGame_gv_eventID_HeroHealPrevented_Hero_C = "Hero";
const string libGame_gv_eventID_HeroHealPrevented_Player_C = "Player";
const string libGame_gv_eventID_HeroDamagePrevented_C = "HeroDamagePrevented";
const string libGame_gv_eventID_HeroDamagePrevented_TargetUnit_C = "TargetUnit";
const string libGame_gv_eventID_HeroDamagePrevented_Amount_C = "Amount";
const string libGame_gv_eventID_HeroDamagePrevented_Buff_C = "Effect";
const string libGame_gv_eventID_HeroDamagePrevented_Hero_C = "Hero";
const string libGame_gv_eventID_HeroDamagePrevented_Player_C = "Player";
const string libGame_gv_eventID_HeroLevelUp_C = "HeroLevelUp";
const string libGame_gv_eventParam_HeroLevelUp_Player_C = "Player";
const string libGame_gv_eventParam_HeroLevelUp_Level_C = "Level";
const string libGame_gv_eventID_HeroParticipatedInNPCTakedown_C = "HeroParticipatedInNPCTakedown";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_HeroParticipatedInCreepTakedown_C = "HeroParticipatedInCreepTakedown";
const string libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Player_C = "Player";
const string libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Creep_C = "CreepUnit";
const string libGame_gv_eventID_HeroParticipatedInTakedown_C = "HeroParticipatedInTakedown";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C = "LastHitPlayer";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C = "HeroKilledPosition";
const string libGame_gv_eventID_HeroPortedBackToTown_C = "HeroPortedBackToTown";
const string libGame_gv_eventParam_HeroPortedBackToTown_Player_C = "Player";
const string libGame_gv_eventParam_HeroPortedBackToTown_Unit_C = "Unit";
const string libGame_gv_eventID_HeroUnitSwappedForPlayer_C = "HeroUnitSwappedForPlayer";
const string libGame_gv_eventParam_HeroUnitSwappedForPlayer_PlayerNumber_C = "PlayerNumber";
const string libGame_gv_eventParam_HeroUnitSwappedForPlayer_NewUnit_C = "NewUnit";
const string libGame_gv_eventParam_HeroUnitSwappedForPlayer_OldUnit_C = "OldUnit";
const string libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C = "HeroWitnessedAlliedNPCDeath";
const string libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C = "SpecialCaseUnitParticipatedInNPCTakedown";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C = "PlayerParticipant";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_HeroSpecialCaseMounting_C = "HeroSpecialCaseMounting";
const string libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C = "Player";
const string libGame_gv_eventID_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventParam_HeroKilled_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroKilled_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroKilled_KilledUnit_C = "KilledUnit";
const string libGame_gv_eventParam_HeroKilled_Location_C = "Location";
const string libGame_gv_eventID_HeroSpawn_C = "HeroSpawn";
const string libGame_gv_eventParam_HeroSpawn_Player_C = "Player";
const string libGame_gv_eventID_HeroRespawn_C = "HeroRespawn";
const string libGame_gv_eventParam_HeroRespawn_Player_C = "Player";
const string libGame_gv_eventParam_HeroRespawn_Hero_C = "Hero";
const string libGame_gv_eventID_RequestCustomRespawn_C = "RequestCustomRespawn";
const string libGame_gv_eventParam_RequestCustomRespawn_Player_C = "Player";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C = "RespawnMounted";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C = "RespawnLocation";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C = "RespawnHealthPercent";
const string libGame_gv_eventID_SpecialCaseTalentCooldownReset_C = "SpecialCaseTalentCooldownReset";
const string libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C = "Player";
const string libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C = "AbathurUltimateEvolutionHeroCopied";
const string libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_AbathurOwner_C = "AbathurOwner";
const string libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_TargetOwner_C = "TargetOwner";
const string libGame_gv_eventID_AbathurUltimateEvolutionEnded_C = "AbathurUltimateEvolutionEnded";
const string libGame_gv_eventParam_AbathurUltimateEvolution_AbathurPlayer_C = "AbathurPlayer";
const string libGame_gv_eventParam_AbathurUltimateEvolution_ClonedUnit_C = "SymbioteUnit";
const string libGame_gv_eventID_JungleCampSpawned_C = "JungleCampSpawned";
const string libGame_gv_eventParam_JungleCampSpawned_Camp_C = "Camp";
const string libGame_gv_eventID_JungleCampDefenderCreated_C = "JungleCampDefenderCreated";
const string libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C = "Unit";
const string libGame_gv_eventID_JungleCampLanerCreated_C = "JungleCampLanerCreated";
const string libGame_gv_eventParam_JungleCampLanerCreated_C = "Unit";
const string libGame_gv_eventID_MercCampCaptured_C = "MercCampCaptured";
const string libGame_gv_eventParam_MercCampCaptured_Index_C = "Index";
const string libGame_gv_eventParam_MercCampCaptured_Owner_C = "Owner";
const string libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventID_MapMechanicInit_Mechanic_C = "Mechanic";
const string libGame_gv_eventID_MapMechanicInit_C = "MapMechanicInit";
const string libGame_gv_eventID_UnitCapturedMapObjective_C = "UnitCapturedMapObjective";
const string libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C = "Unit That Captured Map Objective";
const string libGame_gv_eventID_MapTributeWarning_C = "MapTributeSpawnWarning";
const string libGame_gv_eventParam_MapTributeWarning_Position_C = "Position";
const string libGame_gv_eventID_MapTributeSpawned_C = "MapTributeSpawned";
const string libGame_gv_eventParam_MapTributeSpawned_Tribute_C = "Tribute";
const string libGame_gv_eventID_MapTributePickedup_C = "MapTributePickedUp";
const string libGame_gv_eventParam_MapTributePickedup_Player_C = "Player";
const string libGame_gv_eventParam_MapTributePickedup_Position_C = "Position";
const string libGame_gv_eventID_MapRavenCurseStarts_C = "MapRavenCurseStarts";
const string libGame_gv_eventParam_MapRavenCurseStarts_Team_C = "Team";
const string libGame_gv_eventID_MapRavenCurseEnds_C = "MapRavenCurseEnds";
const string libGame_gv_eventID_PlayerAchievesMultiKill_C = "PlayerAchievesMultiKill";
const string libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C = "Player";
const string libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C = "KillCount";
const string libGame_gv_eventID_QuestComplete_C = "QuestComplete";
const string libGame_gv_eventParam_QuestComplete_Behavior_C = "Behavior";
const string libGame_gv_eventParam_QuestComplete_LaunchUnit_C = "LaunchUnit";
const string libGame_gv_eventParam_QuestComplete_ImpactUnit_C = "ImpactUnit";
const string libGame_gv_eventID_QuestIncrease_C = "QuestIncrease";
const string libGame_gv_eventParam_QuestIncrease_Behavior_C = "Behavior";
const string libGame_gv_eventParam_QuestIncrease_LaunchUnit_C = "LaunchUnit";
const string libGame_gv_eventParam_QuestIncrease_ImpactUnit_C = "ImpactUnit";
const string libGame_gv_eventID_QuestDecrease_C = "QuestDecrease";
const string libGame_gv_eventParam_QuestDecrease_Behavior_C = "Behavior";
const string libGame_gv_eventParam_QuestDecrease_LaunchUnit_C = "LaunchUnit";
const string libGame_gv_eventParam_QuestDecrease_ImpactUnit_C = "ImpactUnit";
const string libGame_gv_eventID_QuestMilestone_C = "QuestMilestone";
const string libGame_gv_eventParam_QuestMilestone_Behavior_C = "Milestone";
const string libGame_gv_eventParam_QuestMilestone_LaunchUnit_C = "LaunchUnit";
const string libGame_gv_eventParam_QuestMilestone_ImpactUnit_C = "ImpactUnit";
const string libGame_gv_eventID_QuestReset_C = "QuestReset";
const string libGame_gv_eventParam_QuestReset_Behavior_C = "Behavior";
const string libGame_gv_eventParam_QuestReset_LaunchUnit_C = "LaunchUnit";
const string libGame_gv_eventParam_QuestReset_ImpactUnit_C = "ImpactUnit";
const string libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C = "UnitEntersSafeZonePuntRegion";
const string libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C = "Unit";
const string libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C = "PuntPoint";
const string libGame_gv_eventID_UnitEntersSafeZoneRegion_C = "UnitEntersSafeZoneRegion";
const string libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C = "Unit";
const string libGame_gv_eventID_UnitExitsSafeZoneRegion_C = "UnitExitsSafeZoneRegion";
const string libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C = "Unit";
const string libGame_gv_eventID_ScalingIncremented_C = "Scaling Incremented";
const string libGame_gv_eventID_AnnouncerVOInitiated_C = "Announcer VO Initiated";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Event_C = "Event";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Player_C = "Player";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C = "Sound";
const string libGame_gv_eventID_PlayerChooseTalent_C = "PlayerChooseTalent";
const string libGame_gv_eventParam_PlayerChooseTalent_Player_C = "Player";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C = "TalentIndex";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C = "TalentLink";
const string libGame_gv_eventID_PlayerTalentsReset_C = "PlayerTalentsReset";
const string libGame_gv_eventParam_PlayerTalentsReset_Player_C = "Player";
const string libGame_gv_eventID_TeamLevelUp_C = "TeamLevelUp";
const string libGame_gv_eventParam_TeamLevelUp_Team_C = "Team";
const fixed libGame_gv_experienceGlobeExtendedDuration = 45.0;
const fixed libGame_gv_experienceGlobeExtendedDurationMod = 0.25;
const fixed libGame_gv_experienceGlobeLastHitMod = 1.25;
const fixed libGame_gv_experienceGlobeScaling = 2.0;
const fixed libGame_gv_heroSpawnDelay_C = 2.0;
const fixed libGame_gv_individualHeroSpawnMiniDelay_C = 0.5;
const fixed libGame_gv_gameOverCameraPanTime_C = 2.0;
const fixed libGame_gv_gameOverCoreAnimationWaitTime_C = 5.0;
const int libGame_gv_gameOverWaitingTime_C = 30;
const fixed libGame_gv_hallOfStormsKnockbackLaunchDistance = 12.0;
const fixed libGame_gv_heroDeathTeamKilledVODelay = 4.0;
const fixed libGame_gv_heroDeathRespawnCueSoundTiming = 2.0;
const fixed libGame_gv_heroDeathActionCamActivationDelay = 1.0;
const fixed libGame_gv_heroDeathMultikillTimeoutDuration = 10.0;
const fixed libGame_gv_heroDeathToastDisplayTime = 5.0;
const fixed libGame_gv_heroDeathKillStingerQueueTimerDuration = 0.125;
const int libGame_gv_mapLanesCountMax = 3;
const int libGame_gv_mapPointsCountMax = 30;
const int libGame_gv_laneMaxCount_C = 10;
const int libGame_gv_laneCustomLane = -1;
const fixed libGame_gv_teamAbandonedTheGameTimerDuration_C = 20.0;
const fixed libGame_gv_playerLeftAnnouncementTimerDuration_C = 5.0;
const int libGame_gv_loadoutMaximumLoadoutsPerHero = 3;
const int libGame_gv_loadoutMaximumCharsInName = 28;
const int libGame_gv_matchResultHeaderLinesAdd = 40;
const int libGame_gv_mTMLGameOptionsCountMax = 128;
const int libGame_gv_minionPeriodicCatapultsWavePeriod_C = 3;
const int libGame_gv_moonwellMaxMoonwellCount = 12;
const string libGame_gv_mountModelActor = "MountModel";
const int libGame_gv_preloadingMaxPreloadedValue = 8192;
const int libGame_gv_preloadingPortraitCountMax_C = 1;
const int libGame_gv_regenGlobeGeneratorMaxCount = 16;
const fixed libGame_gv_bALScalingTimerDuration = 60.0;
const fixed libGame_gv_gameScore_HeroTakedownMultiplier = 2.0;
const fixed libGame_gv_gameScore_NPCTakedownMultiplier = 0.5;
const fixed libGame_gv_gameScore_HealScoreMultiplier = 0.05;
const int libGame_gv_teamfightTrackingCount = 2;
const fixed libGame_gv_teamfightTrackingRadius = 10.0;
const int libGame_gv_townMaxTownCount = 30;
const int libGame_gv_townMaxStructureCount = 63;
const int libGame_gv_watchTowersMaxCount = 10;

// Structures
struct libGame_gs_AnnouncementQueue {
    timer lv_messageTimer;
    int lv_numberOfItemsInQueue;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_priority;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_announcerVOEvent;
    string[libGame_gv_announcement_QueueMaxCount_C + 1] lv_animName;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam1;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam2;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam3;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam4;
    string[libGame_gv_announcement_QueueMaxCount_C + 1] lv_icon;
    fixed[libGame_gv_announcement_QueueMaxCount_C + 1] lv_duration;
    bool[libGame_gv_announcement_QueueMaxCount_C + 1] lv_isKillAnnouncement;
};

struct libGame_gs_CapturePoint {
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_timeOnCapturePointForPlayers;
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_timeOnCurrentEnabledCapturePointForPlayers;
    bool lv_enabled;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    int lv_pointsNeededToCapture;
    int lv_maximumPoints;
    int lv_captureProgressBar;
    int lv_captureProgressBarDimmingFrame;
    int lv_capturePointState;
    int lv_emptyPointDecay;
    int lv_contestedPointDecay;
    bool lv_rememberLastOwner;
    bool lv_decayToOwner;
    bool lv_alwaysDecay;
};

struct libGame_gs_DeathRecapMaxDamageAbil {
    string lv_button;
    int lv_amount;
};

struct libGame_gs_DeathRecapSpecialDamageAbility {
    string lv_ability;
};

struct libGame_gs_DeathRecapMaxDamager {
    int lv_player;
    int lv_amount;
    int lv_heroIndex;
    libGame_gs_DeathRecapMaxDamageAbil[libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_maxDamageAbils;
    int lv_maxDamageAbilCount;
};

struct libGame_gs_DeathRecapEffectBar {
    int lv_effectPlayer;
    bool lv_nPCSource;
    bool lv_structureSource;
    bool lv_isHeal;
    string lv_effect;
    int lv_postEffectHealth;
    int lv_heroIndex;
    fixed lv_time;
    string lv_button;
    string lv_debugString;
    int lv_amount;
    int lv_amountAttempted;
    int lv_amountAbsorbed;
    int lv_amountOverkill;
    int lv_combinedNumOfEvents;
    fixed lv_combinedTimeDelta;
    string lv_abilityLink;
    string lv_unitType;
};

struct libGame_gs_DeathRecapData {
    libGame_gs_DeathRecapEffectBar[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_effectBars;
    int lv_effectBarCount;
    int lv_effectEventCount;
    libGame_gs_DeathRecapMaxDamager[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagers;
    int lv_highestDamagersCount;
    int lv_deadHeroStartHealth;
    int lv_deadHeroHighestHealth;
    int lv_deadHeroMaxHealth;
};

struct libGame_gs_EncouragementRegisteredDeathTips {
    bool lv_isRegistered;
    fixed lv_registerTime;
};

struct libGame_gs_EncouragementDeathTipData {
    fixed lv_timeSpentAlive;
    bool lv_inCombat;
    timer lv_inCombatDurationTimer;
    timer lv_inCombatTimeoutTimer;
    bool lv_alliedHeroesNearby;
    timer lv_timeWithNoAlliedHeroesNearby;
    bool lv_alliedMinionsNearby;
    timer lv_timeWithNoAlliedMinionsNearby;
    fixed lv_enemyMinionDamageTaken;
    int lv_recentHeroKills;
    timer lv_recentHeroKillTimer;
    bool lv_recentStructureDamageTaken;
    timer lv_recentStructureDamageTimer;
    bool lv_usedAnAbility;
    bool lv_usedAMoonwell;
    fixed lv_timeSpentBelowLowHealthThreshold;
    fixed lv_timeSpentBelowLowManaThreshold;
    fixed lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasMounted;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasInCombat;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingUsedUnderworldGate;
    point[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingPosition;
    int lv_mountTipTrackingCurrentBufferIndex;
};

struct libGame_gs_HeroDeathKillStingerQueue {
    timer[libCore_gv_bALMaxTeams + 1] lv_killStingerTimer;
    int[libCore_gv_bALMaxTeams + 1] lv_numberOfItemsInQueue;
    int[libCore_gv_bALMaxTeams + 1] lv_nextPlayIndex;
    soundlink[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_soundQueue;
};

struct libGame_gs_LaneInfo {
    int lv_laneCount;
    point[libGame_gv_mapLanesCountMax + 1][libGame_gv_mapPointsCountMax + 1] lv_lanePoints;
    int[libGame_gv_mapLanesCountMax + 1] lv_lanePointsCount;
    point[libCore_gv_bALMaxTeams + 1][libGame_gv_mapLanesCountMax + 1][libGame_gv_mapPointsCountMax + 1] lv_lanePointsForTeam;
    point[libCore_gv_bALMaxTeams + 1][libGame_gv_mapLanesCountMax + 1] lv_laneMinionSpawn;
};

struct libGame_gs_LaneData {
    int lv_laneNamePreset;
    text lv_laneName;
    int lv_waypointCount;
    point[61] lv_waypoints;
    int lv_structureCount;
    unit[11] lv_orderStructures;
    unit[11] lv_chaosStructures;
    fixed lv_spawnDelay;
    bool lv_minionSpawningEnabled;
};

struct libGame_gs_LaneClosestPointInfo {
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_closestPoint;
    fixed lv_closestDist;
};

struct libGame_gs_ClosestLaneInfo {
    libGame_gs_LaneClosestPointInfo[libGame_gv_laneMaxCount_C + 1] lv_laneData;
    int lv_closestLane;
    int lv_closestMinionLane;
};

struct libGame_gs_MTMLGameSetup {
    bool lv_checking;
    bool[libGame_gv_mTMLGameOptionsCountMax + 1] lv_gameOptions;
    string lv_gameOptionString;
    playergroup[libCore_gv_bALMaxTeams + 1] lv_teamPlayers;
    string[libCore_gv_bALMaxTeams + 1] lv_teamPlayerHandles;
    string[libCore_gv_bALMaxTeams + 1] lv_teamPlayerBNet;
    int lv_hostPlayer;
    string lv_hostPlayerHandle;
    string lv_matchID;
    bool lv_lastPlayedMatchIDIsValid;
    string lv_version;
    string lv_date;
    int lv_mapDataIndex;
};

struct libGame_gs_PlayerHeroBankData {
    int lv_prepickedBuild;
    int[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_prepickedTalentColumn;
    string[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1] lv_prepickedTalentString;
    int lv_loadoutVariation;
    text[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutName;
    int[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutSkinItem;
    int[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutMountItem;
    int[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutAnnouncerItem;
};

struct libGame_gs_PlayerBankData {
    bank lv_playerSettingsBank;
    bank lv_metaDataBank;
};

struct libGame_gs_Player {
    string lv_bNet;
    string lv_avatarTextureCoords;
    string lv_avatarTextureImage;
    int lv_playerStatus;
    int lv_victoryDefeat;
    text lv_playerName;
    text lv_heroName;
    int lv_allySlot;
    int lv_rosterSlot;
    int lv_gameSlot;
    timer lv_pingCooldownTimer;
    int lv_heroIndex;
    bool lv_noRespawn;
    playergroup lv_mutedPlayerGroupPing;
    playergroup lv_mutedPlayerGroupChat;
    playergroup lv_mutedPlayerGroupAnnouncements;
    unit lv_interactiveUnit;
    int lv_metaDataPlayerIndex;
    bool lv_suppressLevelUpFXAndTeamXPTracking;
    bool lv_suppressReviveVOSound;
    bool lv_allowInput;
    bool lv_gameEndsForPlayer;
    timer lv_playerLeftAnnouncementTimer;
    bool lv_playerLeftAnnouncementPlayed;
    int lv_team;
    unit lv_heroUnit;
    unitgroup lv_heroUnitGroup;
    bool lv_heroRequiresCustomRespawn;
    unit lv_selectedUnit;
    unitgroup lv_selectedUnitGroup;
    unit lv_activeVehicle;
    point lv_spawnPoint;
    bool lv_heroSpawnReady;
    int lv_faction;
    int lv_path;
    int lv_onMyWayPathDisplay;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    int lv_killingSpreeCount;
    unit lv_cameraDeadUnitCameraTarget;
    unit lv_cameraPlayerUnitToFocusOn;
    unitgroup lv_cameraPlayerUnitGroupToFocusOn;
    int lv_cameraAllyPlayerToTrack;
    unit lv_cameraCurrentTarget;
    unitgroup lv_cameraCurrentTargetGroup;
    bool lv_cameraPlayerHasControl;
    bool lv_cameraForcedLock;
    bool lv_cameraCameraLockInterrupt;
    point lv_cameraCenterPoint;
    bool lv_vOPissedSoundIsPlaying;
    int lv_vOPissedSoundIndex;
    int lv_vOPissedClickCount;
    string lv_vOSoundSuffix;
    int lv_selectedAnnouncerVOPack;
    fixed lv_lowHPHPAmount;
    sound lv_lowHPStartSound;
    sound lv_lowHPBreathLoop;
    sound lv_lowHPHeartBeatLoop;
    bool lv_lowHPSoundPlaying;
    bool lv_isDead;
    timer lv_respawnTimer;
    timer lv_respawnSoundCueTimer;
    fixed lv_timeSpentDeath;
    timer lv_deathToastTimer;
    libGame_gs_PlayerBankData lv_bankData;
    libGame_gs_PlayerHeroBankData[libCore_gv_dataHeroesMaxHeroCount + 1] lv_bankDataHero;
    bool lv_suppressHeroAnnouncements;
    bool lv_heroUsesAnnouncementAlias;
    text lv_heroAnnouncementAliasText;
    string lv_heroAnnouncementAliasIcon;
    string lv_soundDeathAlertPrefix;
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_lastTimeHeroWasWithingXPRadius;
    timer lv_recentDamageResetTimer;
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_recentPlayerDamageReceived;
    unitgroup lv_altClickPartyFrameAnnouncementUnitGroup;
};

struct libGame_gs_ScoreValues {
    fixed lv_gameScore;
    fixed lv_kills;
    fixed lv_assists;
    fixed lv_deaths;
    fixed lv_selfHealing;
    fixed lv_siegeDamage;
    fixed lv_heroDamage;
    fixed lv_healing;
    fixed lv_experience;
};

struct libGame_gs_TalentChoices {
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_chosenTalentIndex;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_chosenTalentColumn;
    int lv_talentPoints;
};

struct libGame_gs_Team {
    unit lv_core;
    int lv_teamLevel;
    int lv_kills;
    int lv_townKills;
    int lv_townsRemaining;
    playergroup lv_teamPlayerGroup;
    playergroup lv_teamPlayerGroupNoNPCPlayers;
    int lv_teamActivePlayersCount;
    int lv_nPCPlayer;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    timer lv_abandonedTheGame;
    region lv_baseRegion;
    revealer lv_baseRevealer;
    fixed lv_xPMultiplier;
    fixed lv_respawnTimeMultiplier;
};

struct libGame_gs_TownData {
    int lv_lane;
    int lv_owner;
    region lv_townRegion;
    int lv_structureCount;
    int[libGame_gv_townMaxStructureCount + 1] lv_structureTypes;
    unit[libGame_gv_townMaxStructureCount + 1] lv_structureUnits;
    string[libGame_gv_townMaxStructureCount + 1] lv_structureUnitIDs;
    point[libGame_gv_townMaxStructureCount + 1] lv_structureSpawnPoints;
    int lv_townHallIndex;
    point lv_townHallPosition;
    int lv_structuresAlive;
    unit lv_lootBannerUnit;
};

struct libGame_gs_WatchTowers {
    unit lv_watchTowerUnit;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    bool lv_enabled;
    int lv_capturePointIndex;
};

// Variable Declarations
timer libGame_gv_xPTrickleStartTimer;
bool libGame_gv_gAMEFirstBloodAvailable;
bool libGame_gv_aFK_UseAFKSystem;
bool libGame_gv_pLAYERSoloMode;
string libGame_gv_gameDataMatchID;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraFollowForced;
region[libGame_gv_cameraBound_MaxCount_C + 1] libGame_gv_cameraBound_Regions;
int libGame_gv_cameraBound_Count;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraBound_CurrentCameraBoundForPlayer;
bool libGame_gv_announcement_SystemEnabled;
libGame_gs_AnnouncementQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_announcementQueue;
int libGame_gv_capturePointCurrentCount;
libGame_gs_CapturePoint[libGame_gv_capturePointMaxCount_C + 1] libGame_gv_capturePoints;
string libGame_gv_capturePointLastCreatedCapturePointIndex_C;
bool libGame_gv_towerMapPlaysCoreWarning;
bool[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreIsUnderAttack;
timer[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertCooldownTimer;
timer libGame_gv_towerMainCoreAlertTimer;
bool[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertOnCooldown;
int[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertPing;
libGame_gs_DeathRecapData[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_deathRecapDeathData;
libGame_gs_DeathRecapSpecialDamageAbility[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_deathRecapSpecialDamageAbilities;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_TimeSpentAliveTimer;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_XPGathered;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_TotalTeamXPGathered;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatTracking;
fixed[libGame_gv_encouragement_NumberOfStatCalloutThresholds_C + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatThresholds;
libGame_gs_EncouragementRegisteredDeathTips[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_encouragement_NumberOfDeathTips_C + 1] libGame_gv_encouragement_RegisteredDeathTips;
libGame_gs_EncouragementDeathTipData[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_DeathTipData;
string libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C;
string libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C;
bool libGame_gv_experienceGlobeExtenedDurationEnabled;
bool libGame_gv_oldCheatXP;
timer libGame_gv_jungleWatchTowerStartTimer;
timer libGame_gv_gameTimer;
timer libGame_gv_openTheGatesTimer;
timer libGame_gv_minionSpawnStartTimer;
bool libGame_gv_gameOverDetermineWinningTeamHasRun;
int libGame_gv_gameOverWinningTeam;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_gameOverPlayerReady;
int libGame_gv_heroDeathRespawnSetting;
sound[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeath_DeathAmbientSound;
sound[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeath_DeathMusicSound;
bool libGame_gv_heroDeathRunDeathUIUpdates;
bool libGame_gv_heroDeath_UpdateStats;
bool libGame_gv_heroDeath_RespawnMounted;
bool[libCore_gv_bALMaxEnginePlayerCount + 1][libCore_gv_killingSpree_KillThresholdCount_C + 1] libGame_gv_heroDeathKillStreakRegistered;
libGame_gs_HeroDeathKillStingerQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathKillStingerQueue;
libGame_gs_LaneInfo libGame_gv_laneInfo;
int libGame_gv_laneCount;
libGame_gs_LaneData[libGame_gv_laneMaxCount_C + 1] libGame_gv_laneData;
libGame_gs_ClosestLaneInfo libGame_gv_closestLaneData;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapLightingSpecial;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapLightingCurrent;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapHeroDeathOverlay;
int libGame_gv_matchStatisticCurrentSecond;
libGame_gs_MTMLGameSetup libGame_gv_mTMLGameSetupData;
int libGame_gv_minionWaveSpawnCounter;
bool libGame_gv_minionSystemStarted;
bool libGame_gv_minionSystemPaused;
bool[libCore_gv_bALMaxTeams + 1][libGame_gv_laneMaxCount_C + 1] libGame_gv_minionSystemPausedAdvanced;
bool libGame_gv_minionSpawningEnabled;
bool libGame_gv_minionMapNeverSpawnsCatapults;
int libGame_gv_minionPeriodicCatapultsFirstWave;
bool libGame_gv_minionScalingEnabled;
int libGame_gv_spawnedMinionLane;
int libGame_gv_spawnedMinionFirstWaypointIndex;
int[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_moonwellMaxMoonwellCount + 1] libGame_gv_moonwellTextTags;
unit[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_moonwellMaxMoonwellCount + 1] libGame_gv_moonwellTextTagsUnit;
unitgroup[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_moonwellTextTagsUnitGroup;
fixed libGame_gv_mountMovespeedBuff;
libGame_gs_Player[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_players;
unitgroup libGame_gv_heroes;
unitgroup[libCore_gv_bALMaxTeams + 1] libGame_gv_players_Heroes_AllTrackedHeroesForTeam;
int libGame_gv_avatarGrabberImageEditBox;
int libGame_gv_avatarGrabberTextureCoordsEditBox;
int libGame_gv_bNetGrabberEditBox;
bool[libCore_gv_dataHeroesMaxHeroCount + 1] libGame_gv_preloadingHeroIsStored;
bool libGame_gv_preloadingHeroPreloadingForced;
bool libGame_gv_preloadingInitialized;
bool libGame_gv_preloadingFinished;
string[libGame_gv_preloadingMaxPreloadedValue + 1] libGame_gv_preloadingModelLink;
bool[libGame_gv_preloadingMaxPreloadedValue + 1] libGame_gv_preloadingModelIsPreloaded;
bool libGame_gv_preloadingPreloadDuringOfflineTest;
int[libGame_gv_preloadingPortraitCountMax_C + 1] libGame_gv_preloadingPortrait;
int libGame_gv_preloadingCurrentValue;
int libGame_gv_preloadingMaxedValue;
int libGame_gv_preloadingIterator;
string[libGame_gv_preloadingMaxPreloadedValue + 1] libGame_gv_preloadingBlackListModel;
int libGame_gv_preloadingBlackListModelCount;
int[libGame_gv_regenGlobeGeneratorMaxCount + 1] libGame_gv_regenGlobeGeneratorTextTag;
unit[libGame_gv_regenGlobeGeneratorMaxCount + 1] libGame_gv_regenGlobeGeneratorUnit;
timer libGame_gv_scalingTimer;
int libGame_gv_scalingTicks;
libGame_gs_ScoreValues[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_scoreValues;
libGame_gs_TalentChoices[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_talentChoices;
libGame_gs_Team[libCore_gv_bALMaxTeams + 1] libGame_gv_teams;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightTrackingNearbyAllyCount;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightTrackingNearbyEnemyCount;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightPlayerInTeamfight;
int libGame_gv_townTownCount;
libGame_gs_TownData[libGame_gv_townMaxTownCount + 1] libGame_gv_townTownData;
bool libGame_gv_townDestructionRemovesCoreInvulnerable;
int libGame_gv_watchTowersCurrentCount;
libGame_gs_WatchTowers[libGame_gv_watchTowersMaxCount + 1] libGame_gv_watchTowers;

// Function Declarations
int libGame_gf_CustomValueIndex (int lp_customValueIndex);
int libGame_gf_CustomValueGetAsInteger (int lp_customValueIndex, unit lp_unit);
bool libGame_gf_UnitStatsUnitHasGeneralBehavior (unit lp_unit);
void libGame_gf_UnitStatsStoreUserDataToUnit (unit lp_unit, string lp_iD, fixed lp_value);
void libGame_gf_UnitStatsStoreUserDataToUnitGeneral (unit lp_unit, string lp_stats, fixed lp_value);
fixed libGame_gf_UnitStatsGetUserDataFromUnit (string lp_iD, unit lp_unit);
fixed libGame_gf_UnitStatsGetUserDataFromUnitGeneral (unit lp_targetUnit, string lp_stats);
bool libGame_gf_UnitStatsUserDataOnUnitExists (string lp_iD, unit lp_unit);
void libGame_gf_UnitStatusUpdate (unit lp_unit);
void libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities (unit lp_targetUnit, fixed lp_cooldownChange, bool lp_includeTrait, bool lp_includeHeroic, bool lp_includeMount);
void libGame_gf_StormUniversalModifyCooldownPerUnitCDRAbility (int lp_ownerOfCasterUnit, string lp_abilityLink, fixed lp_cooldownChange, int lp_abilityIndex);
void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart);
void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraUpdateCameraForPlayer (int lp_player);
void libGame_gf_CameraSetCameraDataForPlayer (int lp_player, int lp_cameraType, fixed lp_duration);
void libGame_gf_PlayerHeroDisplacementCameraLock (unit lp_lockUnit, string lp_displacingBehavior);
void libGame_gf_PlayerHeroDisplacementCameraUnlock (int lp_player, string lp_displacingBehavior);
int libGame_gf_CameraBoundCCIndex (region lp_bound);
void libGame_gf_AddCameraBoundsCC (region lp_bounds);
void libGame_gf_SetCameraBoundsCC (int lp_index, region lp_bounds);
void libGame_gf_SetCameraBoundCCIndexForPlayer (int lp_player, int lp_boundsIndex);
void libGame_gf_SetCameraBoundCCForPlayer (int lp_player, region lp_bound);
void libGame_gf_AnnouncersActivateAnnouncerForPlayer (int lp_player);
void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player);
void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon);
void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player);
void libGame_gf_BankInitializePlayerSettingsBankForPlayer (int lp_player);
void libGame_gf_BankInitializeMetaDataBankForPlayer (int lp_player);
void libGame_gf_BankInitializeHeroBankForPlayer (int lp_heroIndex, int lp_player);
bool libGame_gf_StormUnitHasBehaviorFromCategory (int lp_category, unit lp_unit);
bool libGame_gf_StormBehaviorHasCategory (string lp_behavior, int lp_category);
string libGame_gf_StormBehaviorCategoryAsString (int lp_category);
void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newAIOwner, int lp_newPlayerOwner, playergroup lp_capturingPlayers);
void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner);
void libGame_gf_CapturePointCreate2 (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, int lp_contestedPointDecay, int lp_emptyPointDecay, bool lp_decayToOwner, bool lp_rememberLastOwner);
void libGame_gf_CapturePointEnable (int lp_capturePointIndex);
void libGame_gf_CapturePointDisable (int lp_capturePointIndex);
int libGame_gf_LastCreatedCapturePoint ();
bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex);
void libGame_gf_TowerCreateCoreUnderAttackPing (unit lp_coreUnit, int lp_teamNumber);
void libGame_gf_CCRecognitionCCReduction (unit lp_unit, string lp_behavior);
bool libGame_gf_DeathRecapCheckforCombineEvent (int lp_deadPlayer, int lp_currentEffectBarIndex, fixed lp_currentEffectInstanceTime, int lp_effectingPlayer, string lp_effectingUnitType, string lp_effectingSourceButton, bool lp_nPCSource, bool lp_structureSource);
void libGame_gf_DeathRecapAddSpecialDamageAbility (string lp_abilityLink);
void libGame_gf_DeathRecapSortMaxDamageAbils (int lp_deadPlayer, int lp_maxDamagerIndex, int lp_currentMaxDamagerAbilIndex);
void libGame_gf_DeathRecapSortMaxDamagers (int lp_deadPlayer);
void libGame_gf_DeathRecapAddMaxDamageAbilForPlayer (int lp_deadPlayer, int lp_maxDamagerIndex, string lp_effectingButton, int lp_effectAmount);
void libGame_gf_DeathRecapAddEffectInstanceForPlayer (int lp_deadPlayer, int lp_effectingPlayer, string lp_effectingUnitType, int lp_effectAmount, int lp_effectAmountAttempted, int lp_effectAmountAbsorbed, bool lp_isHeal, fixed lp_effectTime, string lp_debugString, string lp_sourceButton);
void libGame_gf_DeathRecapClearDeathRecapForPlayer (int lp_deadPlayer);
void libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer (unit lp_playerHero, int lp_deadPlayer);
void libGame_gf_EffectHistoryAddEffectInHistoryForUnit (unit lp_originUnit, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_damagedOrHealed, string lp_entryLink, string lp_parentEntry, bool lp_isFatal);
int libGame_gf_EffectHistoryLifeCurrentOfUnitGet (unit lp_unit);
void libGame_gf_EffectHistoryLifeCurrentOfUnitIncrement (unit lp_unit);
int libGame_gf_EffectHistoryLifeTotalCount (unit lp_unit);
string libGame_gf_EffectHistoryFormatDataKey (int lp_lifeIndex, int lp_entryIndex, string lp_dataKey);
void libGame_gf_EffectHistoryStoreDataToUnit (int lp_lifeIndex, int lp_entryIndex, int lp_originUnitIndex, int lp_originPlayer, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_type, int lp_buttonIndex, bool lp_isKill, fixed lp_time);
int libGame_gf_EffectHistoryEntryCount (unit lp_unit, int lp_lifeIndex);
int libGame_gf_EffectHistoryEntryCountIncrementAndReturnNewIndex (unit lp_unit, int lp_lifeIndex);
int libGame_gf_EffectHistoryGetDataFromUnitType (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
fixed libGame_gf_EffectHistoryGetDataFromUnitAmount (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
fixed libGame_gf_EffectHistoryGetDataFromUnitAmountAbsorbed (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
fixed libGame_gf_EffectHistoryGetDataFromUnitAmountAttempted (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
bool libGame_gf_EffectHistoryGetDataFromUnitIsKill (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
fixed libGame_gf_EffectHistoryGetDataFromUnitTime (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
string libGame_gf_EffectHistoryGetDataFromUnitOriginUnitType (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
int libGame_gf_EffectHistoryGetDataFromUnitOriginPlayer (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
string libGame_gf_EffectHistoryGetDataFromUnitButtonIndex (int lp_lifeIndex, int lp_entryIndex, unit lp_unit);
text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue);
int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int);
text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip);
void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage);
void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player);
void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player);
void libGame_gf_IncludeModeInitialization (trigger t);
void libGame_gf_SendEventIncludeModeInitialization ();
void libGame_gf_CameraPannedFromScript (trigger t);
void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point);
point libGame_gf_CameraPannedFromScriptPoint ();
int libGame_gf_CameraPannedFromScriptPlayer ();
void libGame_gf_CapturePointChangesOwner (trigger t);
void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_aIOwner, int lp_playerOwner, playergroup lp_capturingPlayers);
int libGame_gf_CapturePointChangesOwnerCapturePointIndex ();
int libGame_gf_CapturePointChangesOwnerAIOwner ();
int libGame_gf_CapturePointChangesOwnerNewOwnerPlayer ();
playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers ();
void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t);
void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex);
int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex ();
void libGame_gf_SendEventDebugHeroSwapped (int lp_player);
void libGame_gf_DebugHeroSwapped (trigger t);
int libGame_gf_DebugHeroSwappedPlayer ();
void libGame_gf_QuestsCompleted (trigger t);
int libGame_gf_QuestsCompletedPlayer ();
void libGame_gf_SendEventQuestsCompleted (int lp_player);
void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex ();
void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersEndFightingIndex ();
void libGame_gf_JungleDefenderAIDefenderKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer);
int libGame_gf_JungleDefenderAIDefenderKilledIndex ();
unit libGame_gf_JungleDefenderAIDefenderKilledUnit ();
int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer ();
void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer);
int libGame_gf_JungleDefenderAIAllDefendersKilledIndex ();
int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer ();
void libGame_gf_GameOpenTimerStarted (trigger t);
void libGame_gf_SendEventGameOpenTimerStarted ();
void libGame_gf_TownDataInitialized (trigger t);
void libGame_gf_SendEventTownDataInitialized ();
void libGame_gf_GameOverEvent (trigger t);
void libGame_gf_SendEventGameOverEvent ();
void libGame_gf_CheckUnitForAbilityRedirect (trigger t);
void libGame_gf_SendEventCheckUnitForAbilityRedirect (unit lp_unit, unit lp_targetUnit, bool lp_boolean, point lp_point);
unit libGame_gf_CheckUnitForAbilityRedirectUnit ();
unit libGame_gf_CheckUnitForAbilityRedirectTargetUnit ();
bool libGame_gf_CheckUnitForAbilityRedirectBoolean ();
point libGame_gf_CheckUnitForAbilityRedirectPoint ();
void libGame_gf_HeroExitedTransport (trigger t);
void libGame_gf_SendEventHeroExitedTransport (int lp_player, unit lp_transport);
int libGame_gf_HeroExitingTransportPlayerExiting ();
unit libGame_gf_HeroExitingTransportTransport ();
void libGame_gf_HeroEnteredTransport (trigger t);
void libGame_gf_SendEventHeroEnteredTransport (int lp_player, unit lp_transportUnit, unit lp_cargoUnit);
int libGame_gf_HeroEnteredTransportPlayerEntering ();
unit libGame_gf_HeroEnteredTransportTransport ();
unit libGame_gf_HeroEnteredTransportCargoUnit ();
void libGame_gf_HeroEntersSpecialDeathState (trigger t);
void libGame_gf_SendEventHeroEntersSpecialDeathState (unit lp_hero);
unit libGame_gf_HeroEntersSpecialDeathStateHero ();
void libGame_gf_HeroHealPrevented (trigger t);
void libGame_gf_SendEventHeroHealPrevented (fixed lp_amount, int lp_player);
fixed libGame_gf_HeroHealPreventedAmount ();
int libGame_gf_HeroHealPreventedPlayer ();
void libGame_gf_HeroDamagePrevented (trigger t);
void libGame_gf_SendEventHeroDamagePrevented (unit lp_targetUnit, fixed lp_amount, int lp_player);
unit libGame_gf_HeroDamagePreventedTargetUnit ();
fixed libGame_gf_HeroDamagePreventedAmount ();
int libGame_gf_HeroDamagePreventedPlayer ();
void libGame_gf_HeroLevelUp (trigger t);
void libGame_gf_SendEventHeroLevelUp (int lp_player, int lp_level);
int libGame_gf_HeroLevelUpPlayer ();
int libGame_gf_HeroLevelUpLevel ();
void libGame_gf_HeroParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer ();
unit libGame_gf_HeroParticipatedInNPCTakedownMinion ();
void libGame_gf_HeroParticipatedInCreepTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInCreepTakedown (int lp_player, unit lp_creep);
int libGame_gf_HeroParticipatedInCreepTakedownPlayer ();
unit libGame_gf_HeroParticipatedInCreepTakedownCreep ();
void libGame_gf_HeroParticipatedInTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_lastHitPlayer, int lp_player, int lp_playerKilled, unit lp_heroKilled, point lp_heroKilledPosition);
int libGame_gf_HeroParticipatedInTakedownKillingPlayer ();
int libGame_gf_HeroParticipatedInTakedownLastHitPlayer ();
int libGame_gf_HeroParticipatedInTakedownKilledPlayer ();
unit libGame_gf_HeroParticipatedInTakedownKilledHero ();
point libGame_gf_HeroParticipatedInTakedownKilledHeroPosition ();
void libGame_gf_HeroPortedBackToTown (trigger t);
void libGame_gf_SendEventHeroPortedBackToTown (int lp_player, unit lp_unit);
int libGame_gf_HeroPortedBackToTownPlayer ();
unit libGame_gf_HeroPortedBackToTownUnit ();
void libGame_gf_HeroUnitSwappedForPlayer (trigger t);
void libGame_gf_SendEventHeroUnitSwappedForPlayer (unit lp_oldUnit, unit lp_newUnit, int lp_playerNumber);
int libGame_gf_HeroUnitSwappedForPlayerPlayerNumber ();
unit libGame_gf_HeroUnitSwappedForPlayerOldUnit ();
unit libGame_gf_HeroUnitSwappedForPlayerNewUnit ();
void libGame_gf_HeroWitnessedAlliedNPCDeath (trigger t);
void libGame_gf_SendEventHeroWitnessedAlliedNPCDeath (int lp_player, unit lp_unit);
int libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer ();
unit libGame_gf_HeroWitnessedAlliedNPCDeathMinion ();
void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant ();
unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion ();
void libGame_gf_HeroSpecialCaseMounting (trigger t);
void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player);
int libGame_gf_HeroSpecialCaseMountingPlayer ();
void libGame_gf_HeroKilled (trigger t);
void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit);
int libGame_gf_HeroKilledKillingPlayer ();
int libGame_gf_HeroKilledPlayer ();
unit libGame_gf_HeroKilledUnit ();
point libGame_gf_HeroKilledLocaiton ();
void libGame_gf_HeroSpawn (trigger t);
void libGame_gf_SendEventHeroSpawn (int lp_player);
int libGame_gf_HeroSpawnPlayer ();
void libGame_gf_HeroRespawn (trigger t);
void libGame_gf_SendEventHeroRespawn (int lp_player, unit lp_hero);
int libGame_gf_HeroRespawnPlayer ();
unit libGame_gf_HeroRespawnHero ();
void libGame_gf_RequestCustomRespawn (trigger t);
void libGame_gf_SendEventRequestCustomRespawn (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent);
int libGame_gf_RequestCustomRespawnPlayer ();
bool libGame_gf_RequestCustomRespawnRespawnMounted ();
point libGame_gf_RequestCustomRespawnRespawnLocation ();
fixed libGame_gf_RequestCustomRespawnRespawnHealthPercent ();
void libGame_gf_SpecialCaseTalentCooldownReset (trigger t);
void libGame_gf_SendEventSpecialCaseTalentCooldownReset (int lp_player);
int libGame_gf_SpecialCaseTalentCooldownResetPlayer ();
void libGame_gf_AbathurUltimateEvolutionHeroCopied (trigger t);
void libGame_gf_SendEventAbathurUltimateEvolutionHeroCopied (int lp_abathurOwner, int lp_targetOwner);
int libGame_gf_AbathurUltimateEvolutionHeroCopiedAbathurOwner ();
int libGame_gf_AbathurUltimateEvolutionHeroCopiedTargetOwner ();
void libGame_gf_AbathurUltimateEvolutionEnded (trigger t);
void libGame_gf_SendEventAbathurUltimateEvolutionEnded (int lp_abathurPlayer, unit lp_clonedUnit);
int libGame_gf_AbathurUltimateEvolutionAbathurPlayer ();
unit libGame_gf_AbathurUltimateEvolutionClonedUnit ();
void libGame_gf_JungleCampSpawned (trigger t);
void libGame_gf_SendEventJungleCampSpawned (int lp_camp);
int libGame_gf_JungleCampSpawnedIndex ();
void libGame_gf_JungleCampDefenderCreated (trigger t);
void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit);
unit libGame_gf_JungleCampDefenderUnit ();
void libGame_gf_JungleCampLanerCreated (trigger t);
void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit);
unit libGame_gf_JungleCampLanerUnit ();
void libGame_gf_MercCampCaptured (trigger t);
void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers);
int libGame_gf_MercCampCapturedIndex ();
int libGame_gf_MercCampCapturedOwner ();
playergroup libGame_gf_MercCampCapturedCapturingPlayers ();
string libGame_gf_MapMechanicInitializationMechanicType ();
void libGame_gf_SendEventMapMechanicInitialization (string lp_mechanic);
void libGame_gf_MapMechanicInitialization (trigger t);
void libGame_gf_MapObjectiveCapturedByUnit (trigger t);
void libGame_gf_SendEventMapObjectiveCapturedByUnit (unit lp_capturingUnit);
unit libGame_gf_MapObjectiveCapturingUnit ();
void libGame_gf_MapCursedHollowTributeWarning (trigger t);
void libGame_gf_SendEventMapCursedHollowTributeWarning (point lp_position);
point libGame_gf_MapCursedHollowTributeWarningPosition ();
void libGame_gf_MapCursedHollowTributeSpawned (trigger t);
void libGame_gf_SendEventMapCursedHollowTributeSpawned (unit lp_tribute);
unit libGame_gf_MapCursedHollowTributeSpawnedUnit ();
void libGame_gf_MapCursedHollowTributePickedUp (trigger t);
void libGame_gf_SendEventMapCursedHollowTributePickedUp (int lp_player, point lp_positioin);
int libGame_gf_MapCursedHollowTributePickedUpPlayer ();
point libGame_gf_MapCursedHollowTributePickedUpPosition ();
void libGame_gf_MapCursedHollowCurseStarts (trigger t);
void libGame_gf_SendEventMapCursedHollowCurseStarts (int lp_team);
int libGame_gf_MapCursedHollowCurseActivatedTeam ();
void libGame_gf_MapCursedHollowCurseEnds (trigger t);
void libGame_gf_SendEventMapCursedHollowCurseEnds ();
void libGame_gf_PlayerAchievesMultiKill (trigger t);
void libGame_gf_SendEventPlayerAchievesMultiKill (int lp_player, int lp_killCount);
int libGame_gf_PlayerAchievesMultiKillPlayer ();
int libGame_gf_PlayerAchievesMultiKillKillCount ();
void libGame_gf_QuestComplete (trigger t);
void libGame_gf_SendEventQuestComplete (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit);
string libGame_gf_QuestCompleteBehavior ();
unit libGame_gf_QuestCompleteLaunchUnit ();
unit libGame_gf_QuestCompleteImpactUnit ();
void libGame_gf_QuestIncrease (trigger t);
void libGame_gf_SendEventQuestIncrease (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit);
string libGame_gf_QuestIncreaseBehavior ();
unit libGame_gf_QuestIncreaseLaunchUnit ();
unit libGame_gf_QuestIncreaseImpactUnit ();
void libGame_gf_QuestDecrease (trigger t);
void libGame_gf_SendEventQuestDecrease (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit);
string libGame_gf_QuestDecreaseBehavior ();
unit libGame_gf_QuestDecreaseLaunchUnit ();
unit libGame_gf_QuestDecreaseImpactUnit ();
void libGame_gf_QuestMilestone (trigger t);
void libGame_gf_SendEventQuestMilestone (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit);
string libGame_gf_QuestMilestoneBehavior ();
unit libGame_gf_QuestMilestoneLaunchUnit ();
unit libGame_gf_QuestMilestoneImpactUnit ();
void libGame_gf_QuestReset (trigger t);
void libGame_gf_SendEventQuestReset (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit);
string libGame_gf_QuestResetBehavior ();
unit libGame_gf_QuestResetLaunchUnit ();
unit libGame_gf_QuestResetImpactUnit ();
void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t);
void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint);
unit libGame_gf_UnitEntersSafeZonePuntRegionUnit ();
point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint ();
void libGame_gf_UnitEntersSafeZoneRegion (trigger t);
void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit);
unit libGame_gf_UnitEntersSafeZoneRegionUnit ();
void libGame_gf_UnitExitsSafeZoneRegion (trigger t);
void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit);
unit libGame_gf_UnitExitsSafeZoneRegionUnit ();
void libGame_gf_ScalingIncremented (trigger t);
void libGame_gf_SendEventScalingIncremented ();
void libGame_gf_AnnouncerVOInitiated (trigger t);
void libGame_gf_SendEventAnnouncerVOInitiated (sound lp_sound, int lp_player, int lp_announcerEvent);
int libGame_gf_AnnouncerVOInitiatedAnnouncerEvent ();
int libGame_gf_AnnouncerVOInitiatedAnnouncerPlayer ();
sound libGame_gf_AnnouncerVOInitiatedAnnouncerSound ();
void libGame_gf_PlayerChooseTalent (trigger t);
int libGame_gf_PlayerChooseTalentPlayer ();
int libGame_gf_PlayerChooseTalentTalentIndex ();
string libGame_gf_PlayerChooseTalentTalentLink ();
string libGame_gf_PlayerChooseTalentTalentUserDataInstance ();
void libGame_gf_SendEventPlayerChooseTalent (int lp_player, int lp_talentIndex);
void libGame_gf_PlayerTalentsReset (trigger t);
int libGame_gf_PlayerTalentsResetPlayer ();
void libGame_gf_SendEventPlayerTalentsReset (int lp_player);
void libGame_gf_SendEventTeamGetLevelUp (int lp_team);
int libGame_gf_TeamLevelUpTeam ();
void libGame_gf_TeamLevelUp (trigger t);
void libGame_gf_ExperienceGlobeEnableDisableExtendedDurationXPGlobes (bool lp_enableDisable);
fixed libGame_gf_GameFlowCurrentGameTime ();
void libGame_gf_PlayGameOverStinger (int lp_winningTeam);
void libGame_gf_PlayVictoryDefeatVO (int lp_winningTeam);
void libGame_gf_GameOver (int lp_winningTeam);
playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction);
void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup);
void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, int lp_killingPlayer, playergroup lp_awardGroup, playergroup lp_killingGroup, bool lp_takedownScored);
void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction);
void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam);
void libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist (unit lp_deadUnit, int lp_deadPlayerTeamNumber, playergroup lp_deadPlayersTeam);
void libGame_gf_HeroDeathStartRespawnTimer (int lp_player, fixed lp_initialRespawnTime);
void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player);
void libGame_gf_HeroDeathUpdateUIElementsForDeath (bool lp_showOverlay, bool lp_registerwithAnnouncementUI, bool lp_showDeathRecapToast, int lp_player, int lp_killingPlayer);
void libGame_gf_HeroDeathUpdateUIElementsForRespawn (int lp_player);
void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player, point lp_portLocation);
void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount);
void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration);
void libGame_gf_HeroDeathRespawnHeroForPlayer (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent);
void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill);
void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup);
void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer);
void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer);
void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player);
void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player);
void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player);
void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player);
void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane);
void libGame_gf_CalculateClosestLaneData (point lp_testPoint);
bool libGame_gf_LaneIndexIsValid (int lp_laneIndex);
void libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel (unit lp_heroUnit);
void libGame_gf_LevelUpResetHeroStats (unit lp_heroUnit);
void libGame_gf_LevelUpLevelUpHero (unit lp_hero);
void libGame_gf_LevelUpApplyGenericHeroStatsForSingleLevel ();
void libGame_gf_SetStormMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_UpdateStormMapLighting (playergroup lp_players, fixed lp_blendtime);
void libGame_gf_SpecialLightingEventStart (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_SpecialLightingEventEnd (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_player, string lp_name);
void libGame_gf_LoadoutNameLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutNameLoadDefaultNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutNameStoreLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer (int lp_heroIndex, int lp_loadoutVariation, int lp_player);
void libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, bool lp_displayErrorMessage);
void libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_variation);
void libGame_gf_LoadoutSkinsPreloadSkinsOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_skinIndex, bool lp_updateBank, int lp_player);
void libGame_gf_LoadoutSkinsUpdateSkinBankOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutMountsPreloadMountsOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_mountIndex, bool lp_updateBank, int lp_player);
void libGame_gf_LoadoutMountsUpdateMountBankOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutAnnouncersPreloadAnnouncersOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutAnnouncersStoreAnnouncerOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_announcerIndex, bool lp_updateBank, int lp_player);
void libGame_gf_LoadoutAnnouncersUpdateAnnouncerBankOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutPrepickedTalentBuildPreloadBuildIndexOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutPrepickedTalentBuildStoreBuildIndexOfHeroForPlayer (int lp_heroIndex, int lp_build, bool lp_updateBank, int lp_player);
void libGame_gf_LoadoutPrepickedTalentBuildUpdateBuildIndexBankOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutPrepickedTalentsPreloadBuildsForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer (int lp_heroIndex, int lp_build, int lp_talentTier, int lp_talentColumn, bool lp_updateBank, int lp_player);
void libGame_gf_LoadoutPrepickedTalentsUpdateBuildsBankOfHeroForPlayer (int lp_heroIndex, int lp_player);
int libGame_gf_LoadoutGetPlayerVariation (int lp_player);
int libGame_gf_LoadoutGetPlayerSkin (int lp_player);
int libGame_gf_LoadoutGetPlayerMount (int lp_player);
int libGame_gf_LoadoutGetPlayerAnnouncer (int lp_player);
int libGame_gf_LoadoutGetPlayerBuild (int lp_player);
int libGame_gf_LoadoutGetPlayerVariationForHero (int lp_player, int lp_heroIndex);
int libGame_gf_LoadoutGetPlayerSkinForHero (int lp_player, int lp_heroIndex);
int libGame_gf_LoadoutGetPlayerMountForHero (int lp_player, int lp_heroIndex);
int libGame_gf_LoadoutGetPlayerAnnouncerForHero (int lp_player, int lp_heroIndex);
int libGame_gf_LoadoutGetPlayerBuildForHero (int lp_player, int lp_heroIndex);
void libGame_gf_MatchResultUpdatePlayer (int lp_player, int lp_stuffType);
fixed libGame_gf_MatchResultGainNewValueForCurrentSecond (int lp_player, int lp_stuffType);
fixed libGame_gf_MatchResultGetRecordedValueForSecond (int lp_player, int lp_second, int lp_stuffType);
void libGame_gf_MTMLPrepareDataToTransfer ();
void libGame_gf_MTMLStoreBankDataAllPlayers ();
void libGame_gf_MTMLStoreBankData (int lp_player);
void libGame_gf_MTMLLoadBankData (int lp_player);
void libGame_gf_MTMLLoadBankDataForceManualMapLaunch ();
void libGame_gf_MTMLChecking ();
string libGame_gf_MTMLGenerateMatchID ();
bool libGame_gf_MTMLGetGameOption (int lp_option);
int libGame_gf_MTMLGetHostPlayer ();
void libGame_gf_MTMLSetGameOption (int lp_option, bool lp_enabled);
void libGame_gf_MTMLSetHostPlayer (int lp_player);
void libGame_gf_MTMLSetMapDataIndex (int lp_mapDataIndex);
int libGame_gf_MTMLLastPlayedMatchDataGetHost ();
void libGame_gf_MTMLLastPlayedMatchDataAddPlayersToTeams ();
void libGame_gf_MTMLForceMapDataIndex (int lp_map, int lp_gameMode, int lp_gameMutator);
bool libGame_gf_MinionSystemStarted ();
void libGame_gf_MinionTurnOnOffCatapults (bool lp_onOff);
void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop);
void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop);
void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause);
void libGame_gf_MinionPauseUnpauseMinionSystemForTeam (bool lp_pauseUnpause, int lp_team, int lp_lane);
void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint);
void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner);
void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff);
void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause);
point libGame_gf_ClampSpawnedMinionPointsAgainstEnemyTowers (int lp_player, point lp_minPoint, point lp_maxPoint);
void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner);
void libGame_gf_CalculateSpawnedMinionGoalPointsFromLane (int lp_ownerPlayer, point lp_positionofSpawner, int lp_lane);
void libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData (int lp_ownerPlayer);
void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero);
void libGame_gf_SendMountActorMessagesToActor (int lp_mountIndex, actor lp_actor);
bool libGame_gf_MountEnabled (unit lp_hero);
void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup);
int libGame_gf_TownsAliveinLane (int lp_team, int lp_lane);
bool libGame_gf_TownAliveInLane (int lp_team, int lp_lane);
void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward);
void libGame_gf_MinionDies (unit lp_minionUnit, int lp_killingPlayer, fixed lp_killXP);
void libGame_gf_CreepDies (unit lp_creepUnit, int lp_killingPlayer, fixed lp_killXP);
playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player);
playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player);
playergroup libGame_gf_AlliesEnemiesOfPlayerStorm (int lp_alliance, int lp_player);
bool libGame_gf_TeamNumberIsValid (int lp_team);
bool libGame_gf_PlayerIsHeroPlayer (int lp_player);
bool libGame_gf_PlayerIsHumanActivePlayer (int lp_player);
bool libGame_gf_UnitIsHero (unit lp_testUnit);
int libGame_gf_TeamNumberOfPlayer (int lp_player);
int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player);
int libGame_gf_EnemyTeamNumberOfTeam (int lp_team);
int libGame_gf_ComputerPlayerInTeam (int lp_team);
int libGame_gf_PlayerFromRosterSlot (int lp_rosterSlot);
int libGame_gf_PlayerFromGameSlot (int lp_gameSlot);
unit libGame_gf_PlayerHeroUnit (int lp_player);
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption);
int libGame_gf_GetPlayerIDfromTeamSlot (int lp_slot, int lp_team);
string libGame_gf_PlayerHero (int lp_player);
text libGame_gf_StormGetPlayerName (int lp_player);
string libGame_gf_StormGetPlayerHandle (int lp_player);
string libGame_gf_StormGetPlayerBNet (int lp_player);
void libGame_gf_GrantXPToPlayer (fixed lp_incomingXP, int lp_player, int lp_source);
void libGame_gf_SpawnHero (int lp_player, int lp_index, point lp_point);
void libGame_gf_SpawnHeroesForTeam (int lp_team);
void libGame_gf_SpawnHeroesForBothTeams ();
void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player);
void libGame_gf_AllowInputForPlayers ();
void libGame_gf_TurnSharedVisionWithNPCOnOffForBothTeams (int lp_team, bool lp_onOff);
void libGame_gf_ReloadTrackedHeroesForTeam (int lp_team);
bool libGame_gf_TargetIsVehicle (unit lp_targetUnit);
bool libGame_gf_HeroAbilityCooldownCanBeReset (string lp_abilityLink);
void libGame_gf_HeroRefreshCooldowns (int lp_player, bool lp_resetHeroPlayerUnits);
void libGame_gf_HeroAddInventoryAbilities (unit lp_unit);
void libGame_gf_HeroAddMapMechanicAbilities (unit lp_unit);
bool libGame_gf_PlayerIsDeveloper (int lp_player);
bool libGame_gf_PreloadingModelIsAlreadyStored (string lp_modelEntry);
void libGame_gf_PreloadingPreloadModelWaitToFinishLoading ();
void libGame_gf_PreloadingStoreModel (string lp_modelEntry);
void libGame_gf_PreloadingStoreModelsFromSkinEntry (string lp_skinEntry);
void libGame_gf_PreloadingPreloadModel (int lp_modelIndex);
void libGame_gf_PreloadingAddModelToBlackList (string lp_modelEntry);
bool libGame_gf_PreloadingModelIsInTheBlackList (string lp_modelEntry);
void libGame_gf_PreloadingForceHeroPreloadingTimer ();
void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel);
void libGame_gf_CoreUpdateScaling ();
void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks);
void libGame_gf_JungleUpdateScalingForCamps ();
void libGame_gf_ScoreValueTrackingUpdatePlayers ();
void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value);
void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value);
void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount, int lp_source);
void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position);
void libGame_gf_DeactivateSkinForPlayer (int lp_skinIndex, int lp_player);
void libGame_gf_ActivateSkinForPlayer (int lp_skinIndex, int lp_player);
int libGame_gf_TalentChoicesHeroicTalentTierOfHero (int lp_heroIndex);
int libGame_gf_TalentChoicesHeroicTalentIndexOfPlayer (int lp_player);
bool libGame_gf_TalentChoicesTierIsChosenForPlayer (int lp_player, int lp_tier);
bool libGame_gf_TalentChoicesPlayerHasTalent (int lp_player, int lp_talentIndex);
bool libGame_gf_TalentChoicesPlayerHasTalentOnTier (int lp_player, int lp_talentIndex, int lp_tier);
bool libGame_gf_TalentChoicesPlayerCanPrepickTalentTier (int lp_player, int lp_tier);
bool libGame_gf_TalentChoicesPlayerCanChooseTalentTier (int lp_player, int lp_tier);
bool libGame_gf_TalentChoicesPreviousTierofTierIsChoosenForPlayer (int lp_player, int lp_currentTier);
bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn (int lp_player, int lp_tier, int lp_column);
bool libGame_gf_TalentChoicesPlayerHasHeroicTalent (int lp_player);
bool libGame_gf_TalentChoicesTierIsHeroic (int lp_heroIndex, int lp_tier);
int libGame_gf_TalentChoicesCurrentTalentTierOfPlayer (int lp_player);
int libGame_gf_TalentChoicesCurrentSelectableTalentTierOfPlayer (int lp_player);
int libGame_gf_TalentChoicesNextTierOfPlayer (int lp_player);
void libGame_gf_TalentChoicesUpdateChoicePanelForPlayer (int lp_player, int lp_updateEvent);
void libGame_gf_TalentChoicesChooseTalentForPlayer (int lp_tier, int lp_column, int lp_player);
void libGame_gf_StormAddHeroTalentForPlayer (int lp_talentIndex, int lp_player, bool lp_includeTalentEntry);
void libGame_gf_StormResetHeroTalentsForPlayer (int lp_player);
void libGame_gf_StormRemoveHeroTalentForPlayer (int lp_player, int lp_talentIndex);
void libGame_gf_TalentChoicesUpdateTalentPointsForPlayer (int lp_player);
fixed libGame_gf_AdjustXPForTeam (fixed lp_amount, int lp_team);
fixed libGame_gf_TokenCounterGetCurrentTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player);
fixed libGame_gf_TokenCounterGetMaximumTokenCount (string lp_tokenCounterBehavior);
fixed libGame_gf_TokenCounterGetTargetTokenCount (string lp_tokenCounterBehavior);
bool libGame_gf_TokenCounterCheckTokenEventForPlayer (string lp_tokenEvent, string lp_tokenCounter, int lp_player);
void libGame_gf_TokenCounterUpdateTokenEventForPlayer (bool lp_setReset, string lp_tokenCounterBehavior, string lp_event, int lp_player);
void libGame_gf_TokenCounterModifyTokenForPlayer (int lp_option, fixed lp_tokenChangeValue, string lp_tokenCounterBehavior, int lp_index, int lp_player, unit lp_launchUnit, unit lp_impactUnit, bool lp_ignoreQuestEvents);
void libGame_gf_TokenCounterSendQuestEvent (string lp_tokenCounterBehavior, unit lp_launchUnit, unit lp_impactUnit, string lp_questEvent);
void libGame_gf_TokenCounterResetTokenOnHeroUnit (string lp_tokenCounterBehavior, unit lp_heroUnit);
void libGame_gf_QuestTokenCompleteQuestOnPlayerHeroUnit (string lp_tokenCounterBehavior, int lp_player, bool lp_ignoreQuestEvents);
void libGame_gf_QuestTokenCompleteQuestsOnPlayerHeroUnit (int lp_player);
void libGame_gf_TurnOnOffTownDestructionRemovesCoreInvulnerable (bool lp_onOff);
void libGame_gf_TownAddStructureToTownArray (int lp_townIndex, unit lp_structureUnit, int lp_structurePresetValue, int lp_enemyTeam);
int libGame_gf_TownGetTownForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructurePresetFromUnit (unit lp_unit);
int libGame_gf_TownGetTownHallPresetOfUnit (unit lp_unit);
int libGame_gf_TownGetTownFromPoint (point lp_point);
bool libGame_gf_TownTownIsAlive (int lp_town, int lp_player);
unit libGame_gf_TownTownHall (int lp_town);
bool libGame_gf_TownTownHallIsAlive (int lp_townIndex);
void libGame_gf_oldTownAnnounceTownDestroyed (unit lp_fortKeep);
void libGame_gf_TownUpdateMoonwellIcon (int lp_townIndex);
void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType);
void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner);
int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit);

// Trigger Declarations
trigger libGame_gt_IncludeGame;
trigger libGame_gt_InitializePlayers;
trigger libGame_gt_InitializeGameSystems;
trigger libGame_gt_UnitStatsCritUserData;
trigger libGame_gt_UnitStatsDamagePrevented;
trigger libGame_gt_UnitStatsHealingPreventedIncreased;
trigger libGame_gt_UnitStatusUpdate;
trigger libGame_gt_UnitStatusUpdateBehavior;
trigger libGame_gt_AnnouncementMessageTimerExpires;
trigger libGame_gt_InitializeBanks;
trigger libGame_gt_BankOpenBanks;
trigger libGame_gt_BehaviorCategoriesMovementController;
trigger libGame_gt_CapturePointLogic;
trigger libGame_gt_DimCapturePoint;
trigger libGame_gt_UnDimCapturePoint;
trigger libGame_gt_TowerCoreIsUnderAttackNEW;
trigger libGame_gt_TowerCoreHasTakenDamage;
trigger libGame_gt_CCRecognitionSlow;
trigger libGame_gt_CCRecognitionRoot;
trigger libGame_gt_CCRecognitionStun;
trigger libGame_gt_CCRecognitionSilenced;
trigger libGame_gt_EffectHistoryDamageTaken;
trigger libGame_gt_EffectHistoryDamageTakenFatal;
trigger libGame_gt_EffectHistoryHealed;
trigger libGame_gt_EffectHistoryHealedLeechGeneric;
trigger libGame_gt_EncouragementDataTrackingInCombatStart;
trigger libGame_gt_EncouragementDataTrackingInCombatTimeout;
trigger libGame_gt_ExperienceGlobeScaling;
trigger libGame_gt_ExperienceGlobeSpawn;
trigger libGame_gt_ExperienceGlobeGrantXP;
trigger libGame_gt_ExperienceGlobeModifyDuration;
trigger libGame_gt_OldXPEnableDisable;
trigger libGame_gt_OldXPEnabledMinionVeterancy;
trigger libGame_gt_RunAnimations;
trigger libGame_gt_OpenTheGatesOpenTheGatesTimerExpires;
trigger libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires;
trigger libGame_gt_SpawnMinions;
trigger libGame_gt_StartGame;
trigger libGame_gt_AnnounceCountdown;
trigger libGame_gt_ConfineHeroesToBaseUntilCountdownEnds;
trigger libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds;
trigger libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds;
trigger libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds;
trigger libGame_gt_DetermineWinningTeam;
trigger libGame_gt_GameOverCountdownStart;
trigger libGame_gt_HallOfStormsKnockbackLaunchMissile;
trigger libGame_gt_HallOfStormsKnockbackUnitEntersRegion;
trigger libGame_gt_HallOfStormsUnitEntersRegion;
trigger libGame_gt_HallOfStormsUnitExitsRegion;
trigger libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE;
trigger libGame_gt_HeroDeathHeroDies;
trigger libGame_gt_HeroDeathHeroRespawnTimerExpires;
trigger libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires;
trigger libGame_gt_HeroDeathTeamMultikillTimerExpires;
trigger libGame_gt_HeroDeathPlayerMultikillTimerExpires;
trigger libGame_gt_HeroDeathUpdateMultikillTimerUI;
trigger libGame_gt_HeroDeathKillStingerTimerExpires;
trigger libGame_gt_HeroDeathHeroDeathToastTimerExpires;
trigger libGame_gt_InitializeCodeLaneSystem;
trigger libGame_gt_LevelUpHeroGainsLevel;
trigger libGame_gt_PlayerLeavesGame;
trigger libGame_gt_TeamAbandonedTheGameTimerExpires;
trigger libGame_gt_PlayerLeftAnnouncementTimerExpires;
trigger libGame_gt_LoadoutGameOverRefreshBanks;
trigger libGame_gt_MatchStatisticTimerUpdate;
trigger libGame_gt_MinionSpawnCycle;
trigger libGame_gt_HeroMoonwellCooldownOnOff;
trigger libGame_gt_HeroMoonwellDurationTextTagUpdates;
trigger libGame_gt_HeroMount;
trigger libGame_gt_HeroDismount;
trigger libGame_gt_CoreDiesGameOver;
trigger libGame_gt_NPCUnitDies;
trigger libGame_gt_TownStructureDies;
trigger libGame_gt_TownStructureDiesSpecialCase;
trigger libGame_gt_TownStructureDiesSpecialCaseCustom;
trigger libGame_gt_TowerTowerDeadStateGateCheck;
trigger libGame_gt_TowerTowerDeadStateGateCheckDeadTower;
trigger libGame_gt_HeroKillCreditProximityTracking;
trigger libGame_gt_XPTrickle;
trigger libGame_gt_IncrementHeroCount;
trigger libGame_gt_DecrementHeroCount;
trigger libGame_gt_PlayerShrubProximityRevealProc;
trigger libGame_gt_AvatarGrabberInitialization;
trigger libGame_gt_BNetGrabberInitialization;
trigger libGame_gt_PreloadingInitialize;
trigger libGame_gt_PreloadingDestroyPortraits;
trigger libGame_gt_PreloadingBlackListInitialize;
trigger libGame_gt_PreloadingFXStoreModels;
trigger libGame_gt_PreloadingFXStoreModelsGeneric;
trigger libGame_gt_PreloadingFXStoreModelsMapCursedHollow;
trigger libGame_gt_PreloadingFXStoreModelsMutatorWinterveil;
trigger libGame_gt_PreloadingStoreHeroModels;
trigger libGame_gt_PreloadingPreloadingControl;
trigger libGame_gt_PreloadingForceHeroPreloadingTimer;
trigger libGame_gt_PreloadingForceHeroPreloadingOriginal;
trigger libGame_gt_PlayerRegenGlobeDummyImpact;
trigger libGame_gt_PlayerRegenGlobeNeutralDummySet;
trigger libGame_gt_NeutralRegenGlobeCreatedChangeOwner;
trigger libGame_gt_RegenGlobeGeneratorInitialize;
trigger libGame_gt_RegenGlobeGeneratorTextTagUpdates;
trigger libGame_gt_RegenGlobeGeneratorGlobeShareVision;
trigger libGame_gt_ScalingTimerExpiration;
trigger libGame_gt_JungleScalingTimerExpires;
trigger libGame_gt_CoreScalingTimerExpires;
trigger libGame_gt_TeamfightTracking;
trigger libGame_gt_TokenCounterModify;
trigger libGame_gt_QuestTokenQuestIncrease;
trigger libGame_gt_QuestTokenQuestComplete;
trigger libGame_gt_QuestTokenQuestReset;
trigger libGame_gt_InitializeTownSystem;
trigger libGame_gt_InitializeWatchTowers;
trigger libGame_gt_WatchTowersTurnOnWatchTowers;
trigger libGame_gt_WatchTowersOwnershipChanges;

// Library Initialization
void libGame_InitVariables ();

