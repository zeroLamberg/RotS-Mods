include "LibCore_h"
include "LibGame_h"

//--------------------------------------------------------------------------------------------------
// Library: Maps
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libMapM_ge_MapTileset_Kingscrest = 0;
const int libMapM_ge_MapTileset_RavenCourt = 1;
const int libMapM_ge_JungleCampDefenderTypes_Custom = 0;
const int libMapM_ge_JungleCampDefenderTypes_SiegeGiants = 1;
const int libMapM_ge_JungleCampDefenderTypes_Knights = 2;
const int libMapM_ge_JungleCampDefenderTypes_GraveGolem = 3;
const int libMapM_ge_JungleCampDefenderTypes_Doubloons = 4;
const int libMapM_ge_JungleCampDefenderTypes_Sappers = 5;
const int libMapM_ge_JungleCampDefenderTypes_SiegeCamp1 = 6;
const int libMapM_ge_JungleCampDefenderTypes_SiegeCamp2 = 7;
const int libMapM_ge_JungleCampDefenderTypes_SiegeCamp3 = 8;
const int libMapM_ge_JungleCampDefenderTypes_BruiserCamp1 = 9;
const int libMapM_ge_JungleCampDefenderTypes_BruiserCamp2 = 10;
const int libMapM_ge_JungleCampDefenderTypes_BruiserCamp3 = 11;
const int libMapM_ge_JungleCampDefenderTypes_BossCamp1 = 12;
const int libMapM_ge_JungleCampDefenderTypes_BossCamp2 = 13;
const int libMapM_ge_JungleCampDefenderTypes_BossCamp3 = 14;
string libMapM_ge_JungleCampDefenderTypes_Ident (int lp_val);
const int libMapM_ge_JungleCampMercTypes_Custom = 0;
const int libMapM_ge_JungleCampMercTypes_SiegeGiants = 1;
const int libMapM_ge_JungleCampMercTypes_Ogres = 2;
const int libMapM_ge_JungleCampMercTypes_GraveGolem = 3;
const int libMapM_ge_JungleCampMercTypes_AshenvaleAncients = 4;
const int libMapM_ge_JungleCampMercTypes_Sappers = 5;
const int libMapM_ge_JungleCampMercTypes_SiegeCamp1 = 6;
const int libMapM_ge_JungleCampMercTypes_SiegeCamp2 = 7;
const int libMapM_ge_JungleCampMercTypes_SiegeCamp3 = 8;
const int libMapM_ge_JungleCampMercTypes_BruiserCamp1 = 9;
const int libMapM_ge_JungleCampMercTypes_BruiserCamp2 = 10;
const int libMapM_ge_JungleCampMercTypes_BruiserCamp3 = 11;
const int libMapM_ge_JungleCampMercTypes_BossCamp1 = 12;
const int libMapM_ge_JungleCampMercTypes_BossCamp2 = 13;
const int libMapM_ge_JungleCampMercTypes_BossCamp3 = 14;
const int libMapM_ge_JungleCampTypes_MercCamp = 0;
const int libMapM_ge_JungleCampTypes_DoubloonCamp = 1;
const int libMapM_ge_JungleCampTypes_DoubloonCampSmall = 2;
const int libMapM_ge_JungleCampTypes_RewardCamp = 3;
const int libMapM_ge_JungleCampTypes_AshenvaleForestGuardians = 4;
const int libMapM_ge_JungleCampTypes_TryMeCamp = 5;
const int libMapM_ge_JungleCampTextTagTypes_Helper = 0;
const int libMapM_ge_JungleCampTextTagTypes_Respawn = 1;
const int libMapM_ge_JungleCampTextTagTypes_Special = 2;
const int libMapM_ge_JungleCampStates_Idle = 0;
const int libMapM_ge_JungleCampStates_Busy = 1;
const int libMapM_ge_JungleCampStates_Dead = 2;
const int libMapM_ge_JungleCampStates_Paused = 3;
const int libMapM_ge_JungleCampStates_Hibernating = 4;
const int libMapM_ge_JungleCampStates_HibernetingReadyToSpawn = 5;
string libMapM_ge_JungleCampStates_Ident (int lp_val);
const int libMapM_ge_MMRavenCurseState_Starting = 0;
const int libMapM_ge_MMRavenCurseState_TributeSpawning = 1;
const int libMapM_ge_MMRavenCurseState_TributeSpawned = 2;
const int libMapM_ge_MMRavenCurseState_NoActivity = 3;
const int libMapM_ge_MMRavenCurseState_Cursed = 4;
const int libMapM_ge_MMRavenCurseState_Lifted = 5;

// Constants
const fixed libMapM_gv_bALJungleBirthDelay = 3.0;
const fixed libMapM_gv_bALJungleCampCaptureTime = 1.5;
const fixed libMapM_gv_bALJungleCampCaptureRadius = 3.0;
const fixed libMapM_gv_genericMercCampInitialSpawnDelay_C = 5.0;
const fixed libMapM_gv_genericMercBossCampInitialSpawnDelay_C = 60.0;
const fixed libMapM_gv_mercSapperDefaultRespawnTime_C = 150.0;
const int libMapM_gv_dataJungleMaxNumberOfDefenderTypes = 15;
const int libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp = 10;
const int libMapM_gv_dataJungleMaxNumberOfMercTypes = 15;
const int libMapM_gv_dataJungleMaxNumberOfMercsSpawned = 10;
const int libMapM_gv_dataJungleMaxNumberOfPaths = 6;
const int libMapM_gv_jungleMaxCamps = 15;
const int libMapM_gv_jungleMinimapCamps = 64;
const fixed libMapM_gv_jungleMinimapPingDuration = 0.75;
const int libMapM_gv_mapMechanicsMaxCount_C = 4;
const int libMapM_gv_mMRepulseRegionPunchTargetMax_C = 4;
const string libMapM_gv_mMRavenMechanicName_C = "CursedHollow";
const int libMapM_gv_mMRavenTributeSpawnPointsCountMax_C = 50;
const fixed libMapM_gv_mMRavenRevealRadius = 4.5;
const fixed libMapM_gv_mMRavenSpawnWarningTimerTime = 30.0;
const fixed libMapM_gv_mMRavenTributeSpawnTimeFirst = 17.0;
const fixed libMapM_gv_mMRavenTributeSpawnTime = 70.0;
const int libMapM_gv_mMRavenTributeSpawnTimeVariance = 20;
const fixed libMapM_gv_mMRavenTributePostCurseWaitTime_C = 70.0;
const int libMapM_gv_mMRavenTributeThreshold = 3;
const fixed libMapM_gv_mMRavenCurseDuration_C = 70.0;
const string libMapM_gv_mMBuriedBackwoodsMechanicName_C = "BuriedBackwoods";
const fixed libMapM_gv_mMWinterveilPlayerSnowballSpawnDelay_C = 10.0;
const int libMapM_gv_mMWinterveilSnowmanTeacherTextTagIndex_C = 432;
const int libMapM_gv_mMWinterveilSnowballDamageScalingDelay_C = 240;
const fixed libMapM_gv_mMWinterveilSnowTributeInitialSpawnDelay_C = 10.0;
const fixed libMapM_gv_mMWinterveilSnowTributeSpawnCooldown_C = 10.0;
const int libMapM_gv_mMWinterveilSnowTributeSpawnLocationCount_C = 6;
const int libMapM_gv_mMWinterveilMaxTributesInPlay_C = 3;
const int libMapM_gv_mMWinterveilRecentSnowTributeLocationMemory_C = 5;

// Structures
struct libMapM_gs_JungleCampDefenderData {
    bool lv_campIsSoloable;
    bool lv_campIsElite;
    bool lv_defendersCoweronDeath;
    bool[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_defenderCoweringUnit;
    fixed lv_initialSpawnDelay;
    fixed lv_respawnTime;
    int lv_numberOfCreeps;
    text lv_campTypeMinimapLabel;
    text lv_campTypeNameLabel;
    text lv_customTextTagTitle;
    text lv_customTextTagInfoText;
    string[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_creepUnitTypes;
    fixed lv_xPAwardForCapture;
    int lv_numberOfRanks;
};

struct libMapM_gs_JungleCampPathData {
    region lv_townRegion;
    point lv_waypoint;
};

struct libMapM_gs_JungleCampMercData {
    int lv_numberOfMinionsSpawned;
    string[libMapM_gv_dataJungleMaxNumberOfMercsSpawned + 1] lv_spawnedMinionUnitTypes;
    int lv_numberOfRanks;
};

struct libMapM_gs_JungleCampUI {
    int lv_jungleCreepCampsParentPanel;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsDialog;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsPositionControl;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel_Label_Timer;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel_Label_Title;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel_Label_PlayerName;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel_Label_Description;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel_Label_Debug;
    int[libMapM_gv_jungleMaxCamps + 1] lv_jungleCreepCampsInfoPanel2;
};

struct libMapM_gs_JungleCreepCamps {
    int lv_mapDataCampType;
    int lv_mapDataCampDefenderType;
    point lv_mapDataCampCaptainSpawnPoint;
    point[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_mapDataDefenderSpawnPoints;
    region lv_mapDataDefenderLeashRegion;
    string lv_mapDataCapturePointSplatModel;
    point lv_mapDataBannerPoint;
    bool lv_mapDataCampIsElite;
    bool lv_mapDataMinimapIconUseTeamColor;
    fixed lv_mapDataMinimapIconScale;
    int lv_mapDataMercSpawnType;
    int lv_mapDataRewardSpawnType;
    int lv_mapDataBattleshipSpawnType;
    bool lv_defenderCampIsSoloable;
    bool lv_defenderCampInstantlyGrantsReward;
    int lv_defenderNumberofCreeps;
    string[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_defenderUnitTypes;
    fixed lv_defenderInitialSpawnDelay;
    fixed lv_defenderRespawnTime;
    int lv_defenderNumberOfRanks;
    fixed lv_defenderCaptureXPValue;
    bool lv_defenderDefendersCoweronDeath;
    int lv_defenderDefendersBribedCount;
    text lv_defenderCampTypeNameLabel;
    text lv_defenderCampTypeMinimapLabel;
    bool lv_defenderDefendersHaveStaggeredBirth;
    fixed lv_defenderDefendersStaggeredBirthPeriod;
    bool[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_defenderCoweringUnit;
    unitgroup lv_defenderCoweringLivingUnitGroup;
    unitgroup lv_defenderCoweringDeadUnitGroup;
    bool lv_defenderDamagesCoreOnCapture;
    fixed lv_xPAwardForCapture;
    int lv_mercNumberOfMinionsSpawned;
    string[libMapM_gv_dataJungleMaxNumberOfMercsSpawned + 1] lv_mercSpawnedMinionUnitType;
    int lv_mercNumberOfRanks;
    bool[libCore_gv_bALMaxTeams + 1] lv_mercMercCampHasSingleWaypoint;
    libMapM_gs_JungleCampPathData[libMapM_gv_dataJungleMaxNumberOfPaths + 1] lv_mercOrderMercCampPathing;
    libMapM_gs_JungleCampPathData[libMapM_gv_dataJungleMaxNumberOfPaths + 1] lv_mercChaosMercCampPathing;
    int[libCore_gv_bALMaxTeams + 1] lv_mercLaneToSpawnIn;
    int[libCore_gv_bALMaxTeams + 1] lv_mercLaneLastSpawnedIn;
    int[libCore_gv_bALMaxTeams + 1] lv_mercSpawnFirstWaypointIndex;
    int lv_piratesNumberOfRanks;
    int lv_rewardNumberOfRanks;
    string lv_campActorMessageUponSpawn;
    unit lv_campIconUnit;
    unit lv_campOwnershipFlagUnit;
    point lv_campOwnershipFlagPosition;
    int lv_campHelperTextTag;
    int lv_campRespawnTextTag;
    int lv_campSpecialTextTag;
    int lv_campTextTagType;
    int lv_capturingPlayer;
    bool lv_stateIsEnabled;
    timer lv_stateCreepBirthTimer;
    timer lv_stateCreepRespawnTimer;
    timer lv_stateCreepActiveTimer;
    int lv_stateCurrentDefenderScalingTicks;
    int lv_stateCurrentMercScalingTicks;
    bool lv_stateHasSpawned;
    int lv_aIState;
    int lv_aIDefenderAIIndex;
    region lv_captureCaptureRegion;
    unit lv_captureCircleOfPowerUnit;
    bool lv_captureCaptureEnabled;
    int lv_captureCaptureCounter;
    int lv_captureCapturePointIndex;
    int lv_statTrackingOrderCaptures;
    int lv_statTrackingChaosCaptures;
    fixed lv_statTrackingDamageDoneByLastCapture;
};

struct libMapM_gs_JungleMinimap {
    bool lv_isUsed;
    unit lv_leader;
    unitgroup lv_iconGroup;
    int lv_pathOrder;
    int lv_pathChaos;
    int lv_pathObserver;
    int lv_creepCampIndex;
};

struct libMapM_gs_MapMechanicUsedTracker {
    bool lv_healingFountainUsed;
    bool lv_ravenTribute;
};

struct libMapM_gs_RavenCurseTeamStats {
    int lv_triburteCollected;
    bool lv_cursed;
};

// Variable Declarations
fixed libMapM_gv_bALJungleLeashRespawnTime;
fixed libMapM_gv_bALJungleCampScalingTimerDuration;
libMapM_gs_JungleCampDefenderData[libMapM_gv_dataJungleMaxNumberOfDefenderTypes + 1] libMapM_gv_dataJungleCampDefenderData;
libMapM_gs_JungleCampMercData[libMapM_gv_dataJungleMaxNumberOfMercTypes + 1] libMapM_gv_dataJungleCampMercData;
libMapM_gs_JungleCampUI libMapM_gv_uIJungleCampPanel;
libMapM_gs_JungleCreepCamps[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleCreepCamps;
int libMapM_gv_jungleNumberOfCreepCamps;
libMapM_gs_JungleMinimap[libMapM_gv_jungleMinimapCamps + 1] libMapM_gv_jungleMinimap;
bool libMapM_gv_jungleCreepCampsInitialized;
timer libMapM_gv_jungleScalingTimer;
int libMapM_gv_jungleScalingTicks;
bool libMapM_gv_jungleCampsShouldBeHibernating;
actor libMapM_gv_mapMechanicControllerActor;
string[libMapM_gv_mapMechanicsMaxCount_C + 1] libMapM_gv_mapMechanics;
int libMapM_gv_mapMechanicsCount;
trigger[libMapM_gv_mapMechanicsMaxCount_C + 1] libMapM_gv_mapMechanicsInitCallbacks;
bool libMapM_gv_mMMapEventHasOccured;
bool libMapM_gv_mMMapMechanicDisabled;
trigger libMapM_gv_mMDisableMapEventTrigger;
trigger libMapM_gv_mMEnableMapEventTrigger;
libMapM_gs_MapMechanicUsedTracker[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mapMechanicUsedTracker;
region[libCore_gv_bALMaxTeams + 1] libMapM_gv_mMRepulseRegions;
point[libCore_gv_bALMaxTeams + 1][libMapM_gv_mMRepulseRegionPunchTargetMax_C + 1] libMapM_gv_mMRepulseRegionPunchTarget;
unitgroup libMapM_gv_mMRepulseRegionPunchedGroup;
region[libCore_gv_bALMaxTeams + 1] libMapM_gv_mMSafeRegions;
point[libMapM_gv_mMRavenTributeSpawnPointsCountMax_C + 1] libMapM_gv_mMRavenTributeSpawnPoints;
int libMapM_gv_mMRavenTributeSpawnPointsCount;
point libMapM_gv_mMRavenTributeNextSpawnPoint;
bool libMapM_gv_mMRavenTributeUseTributePreviews;
unitgroup libMapM_gv_mMRavenTributes;
unit libMapM_gv_mMRavenTributeWarning;
fixed libMapM_gv_mMRavenFirstEventTiming;
fixed libMapM_gv_mMRavenStartTime;
libMapM_gs_RavenCurseTeamStats[libCore_gv_bALMaxTeams + 1] libMapM_gv_mMRavenTeamStats;
int libMapM_gv_mMRavenTributesCollected;
timer libMapM_gv_mMRavenStartTimer;
timer libMapM_gv_mMRavenObjectivePreviewTimer;
fixed libMapM_gv_mMRavenObjectivePreviewLongDelay;
fixed libMapM_gv_mMRavenObjectivePreviewShortDelay;
timer libMapM_gv_mMRavenWarningTimer;
timer libMapM_gv_mMRavenTributeSpawnTimer;
unitgroup libMapM_gv_mMRavenTributeWarnings;
unit libMapM_gv_mMRavenTributePreview;
int libMapM_gv_mMRavenLastTributeSpawnIndex1;
int libMapM_gv_mMRavenLastTributeSpawnIndex2;
int libMapM_gv_mMRavenTributeSpawnGroupIndex;
timer libMapM_gv_mMRavenCurseTimer;
bool libMapM_gv_mMRavenCurseLifted;
sound libMapM_gv_mMRavenCurseSound;
bool libMapM_gv_mMRavenEventFirstTime;
timer libMapM_gv_mMWinterveilTownSnowballSpawnTimer;
timer libMapM_gv_mMWinterveilPlayerSnowballSpawnTimer;
region[5] libMapM_gv_mMWinterveilSnowJungleSpawnRegions;
region[3] libMapM_gv_mMWinterveilBigSnowJungleSpawnRegions;
unitgroup libMapM_gv_mMWinterveilSnowmanTeachers;
point[libCore_gv_bALMaxTeams + 1][5] libMapM_gv_mMWinterveilSnowmanTeachingPoints;
unitgroup libMapM_gv_mMWinterveilSnowmenInProgress;
unitgroup[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMWinterveilSnowmenPetGroups;
timer libMapM_gv_mMWinterveilSnowballDamageScalingTimer;
int libMapM_gv_mMWinterveilSnowballDamageScalingCount;
point[libMapM_gv_mMWinterveilSnowTributeSpawnLocationCount_C + 1] libMapM_gv_mMWinterveilSnowTributeSpawnLocations;
timer libMapM_gv_mMWinterveilSnowTributeSpawnTimer;
int libMapM_gv_mMWinterveilSnowTributesInPlay;
int[libMapM_gv_mMWinterveilRecentSnowTributeLocationMemory_C + 1] libMapM_gv_mMWinterveilRecentSnowTributeLocations;
int libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex;
point[libGame_gv_townMaxTownCount + 1] libMapM_gv_mMWinterveilWorldEnderSnowballImpactPoint;

// Function Declarations
void libMapM_gf_ShareVisionofUnitForBothTeams (unit lp_unit);
void libMapM_gf_MapActivateTileset (int lp_tileset);
int libMapM_gf_JungleCampDefenderTypeIndex (int lp_defenderType);
void libMapM_gf_DataInitializeScalingDataForDefender (int lp_defenderTypeIndex, string lp_scalingBehavior);
int libMapM_gf_JungleCampMercTypesIndex (int lp_mercType);
void libMapM_gf_DataInitializeScalingDataForMerc (int lp_mercTypeIndex, string lp_scalingBehavior);
void libMapM_gf_JungleInitializeDefenderData (int lp_camp);
void libMapM_gf_JungleInitializeMercCampData (int lp_camp);
point libMapM_gf_JungleDetermineMercWaypoint (int lp_owningTeam, int lp_camp);
void libMapM_gf_JungleInitializeRewardCampData (int lp_camp);
void libMapM_gf_JungleInitializeDoubloonCampData (int lp_camp);
void libMapM_gf_JungleInitializeDoubloonSmallCampData (int lp_camp);
void libMapM_gf_JungleInitializeCreepCamp (int lp_camp);
int libMapM_gf_JungleMinimapGetFreeIndex ();
int libMapM_gf_JungleMinimapGetIndexFromLanerCreepUnit (unit lp_lanerCreepUnit);
void libMapM_gf_JungleMinimapClearIndex (int lp_minimapIndex);
void libMapM_gf_JungleMinimapEditMercPath (unit lp_mercLeader, bool lp_newPath);
void libMapM_gf_JungleMinimapSetIconForMercMinions (int lp_campIndex, int lp_minimapIndex, unitgroup lp_mercUnitGroup);
int libMapM_gf_JungleGetJungleCampForUnit (unit lp_unit);
int libMapM_gf_JungleGetJungleUnitIndexForUnit (unit lp_unit);
string libMapM_gf_JungleGetCurrentIconForJungleCamp (int lp_camp, bool lp_alive);
int libMapM_gf_JungleGetCampIndexFromDefenderIndex (int lp_defenderIndex);
void libMapM_gf_JungleUpdateTextTagForCamp (int lp_camp);
void libMapM_gf_JungleSwitchToTextTagForCamp (int lp_camp);
void libMapM_gf_JungleUpdateMinimapTooltipForCamp (int lp_camp);
void libMapM_gf_JungleRespawnCreepsForCamp (int lp_camp);
void libMapM_gf_JungleCreepCampRespawnTimerExpiresCreateEvent (int lp_camp);
void libMapM_gf_JungleTransitionCampIntoState (int lp_camp, int lp_state);
void libMapM_gf_JungleHibernateCampDefender (unit lp_defender);
void libMapM_gf_JungleStopHibernatingCampDefender (unit lp_defender, point lp_location);
void libMapM_gf_JungleTurnOnCampCaptureBeacon (int lp_camp);
void libMapM_gf_JungleTurnOffCampCaptureBeacon (int lp_camp, int lp_owner);
void libMapM_gf_JungleTransitionCampCaptureBeacontoHidden (int lp_camp);
void libMapM_gf_JungleGrantCaptureRewards (int lp_camp, int lp_owner);
void libMapM_gf_JungleMercCampCapturedAnnouncement (int lp_camp, int lp_owner);
void libMapM_gf_JungleSpawnMercMinions (int lp_camp, int lp_owner);
int libMapM_gf_JungleGetMercCampForUnit (unit lp_unit);
void libMapM_gf_JungleDropLootBannerinMercCamp (int lp_campIndex, playergroup lp_creditPlayerGroup);
void libMapM_gf_JungleUpdateMercDamageTracker (int lp_camp, fixed lp_damageDealt);
void libMapM_gf_MapMechanicAdd (string lp_mechanic, trigger lp_initializeCallback);
int libMapM_gf_MapMechanicIndex (string lp_mechanic);
bool libMapM_gf_MapMechanicExistsOnMap (string lp_mechanic);
string libMapM_gf_PrimaryMapMechanic ();
void libMapM_gf_EnableDisableMapEvent (bool lp_enableDisable);
void libMapM_gf_RegisterMapEventEnableDisableTriggers (trigger lp_disableMapEventTrigger, trigger lp_enableMapEventTrigger);
void libMapM_gf_CreateSnapshotOfUnitForBothTeams (unit lp_unit);
void libMapM_gf_MapSetRepulseRegion (int lp_team, region lp_pulseRegion, point lp_punchTargetLocation1, point lp_punchTargetLocation2, point lp_punchTargetLocation3, point lp_punchTargetLocation4);
void libMapM_gf_MMRepulseRegionAddToPunchedGroup (unit lp_punchedUnit);
void libMapM_gf_MapSetSafeRegion (int lp_team, region lp_safeRegion);
void libMapM_gf_MMRavenCurseAddTributeSpawnLocation (point lp_spawnLocation);
bool libMapM_gf_MMRavenCurseStarted ();
fixed libMapM_gf_MMRavenStartTime ();
fixed libMapM_gf_MMRavenTributeSpawnTime ();
int libMapM_gf_MMRavenTributeThresholdAmount ();
string libMapM_gf_MMRavenTributeUnitType ();
point libMapM_gf_MMRavenRandomSpawnPoint ();
int libMapM_gf_MMRavenSpawnPointSide (int lp_index);
void libMapM_gf_MMRavenCreatePreviewTribute (point lp_previewLocation);
void libMapM_gf_MMRavenStartSpawnTimer5090 ();
void libMapM_gf_MMRavenTributeCollectionThresholdReached (int lp_winningTeam);
void libMapM_gf_MMRavenCurseStart (int lp_cursedPlayer);
void libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning ();
void libMapM_gf_MMRavenApplyCurseEffectOnMinion (unit lp_unit);
void libMapM_gf_MMRavenRemoveCurseEffectOnMinion (unit lp_minion);
void libMapM_gf_MMRavenPlayCurseSound (int lp_cursedTeam);
void libMapM_gf_MMRavenObjectiveUIUpdateText ();
void libMapM_gf_MMRavenTransmissionFirstEventStartQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionRepeatEventStartQ ();
void libMapM_gf_MMRavenTransmissionCurseActiveQ (int lp_cursedTeam);
void libMapM_gf_MMRavenTransmissionCurseEndsQ ();
void libMapM_gf_MMWinterveilSpawnSnowballatPoint (point lp_spawnPoint);
void libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion (region lp_spawnRegion);
void libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute (point lp_centerPoint);
void libMapM_gf_MMWinterveilSpawnManySnowballsAroundCores ();
void libMapM_gf_MMWinterveilSpawnSnowmanTeachers ();
void libMapM_gf_MMWinterveilRunSimpleSnowmanAI (int lp_owningPlayer, unit lp_snowman);
void libMapM_gf_MMWinterveilAddRemoveEnrageBufftoAllSnowmen (bool lp_toggle);
void libMapM_gf_MMWinterveilCreateSnowTribute ();
bool libMapM_gf_MMWinterveilSnowTributeLocationwasUsedRecently (int lp_location);
point libMapM_gf_MMWinterveilWorldEnderTargetPoint (int lp_attackingTeam, point lp_launchPoint);
void libMapM_gf_MMWinterveilInitializeWorldEnderSnowballImpactPoints ();

// Trigger Declarations
trigger libMapM_gt_IncludeMapMechanics;
trigger libMapM_gt_DataJungleCampDefenderData;
trigger libMapM_gt_DataJungleCampDefenderKnights;
trigger libMapM_gt_DataJungleCampDefenderSiegeGiants;
trigger libMapM_gt_DataJungleCampDefenderGraveGolem;
trigger libMapM_gt_DataJungleCampDefenderSapper;
trigger libMapM_gt_DataJungleCampMercData;
trigger libMapM_gt_DataJungleCampMercOgres;
trigger libMapM_gt_DataJungleCampMercSiegeGiants;
trigger libMapM_gt_DataJungleCampMercGraveGolem;
trigger libMapM_gt_DataJungleCampMercSappers;
trigger libMapM_gt_InitializeJungleCamps;
trigger libMapM_gt_JungleMinimapMercLeaderDies;
trigger libMapM_gt_StartJungleCampTimers;
trigger libMapM_gt_JungleCreepCampRespawnTimerExpires;
trigger libMapM_gt_JungleRespawnTimerTextTagCountdown;
trigger libMapM_gt_JungleDefendersBeginFighting;
trigger libMapM_gt_JungleDefendersEndFighting;
trigger libMapM_gt_JungleAllDefendersKilled;
trigger libMapM_gt_JungleHibernateCampsStart;
trigger libMapM_gt_JungleHibernateCampsEnd;
trigger libMapM_gt_JungleHibernateDefendersThatLeash;
trigger libMapM_gt_JungleHibernateDefendersThatJustSpawned;
trigger libMapM_gt_JungleCampOwnershipChange;
trigger libMapM_gt_JungleSiegeGiantTaunt;
trigger libMapM_gt_InitializeMapMechanics;
trigger libMapM_gt_MMHelpbuttonClicked;
trigger libMapM_gt_MMRepulseRegionPunchBehavior;
trigger libMapM_gt_MMSafeRegionBehavior;
trigger libMapM_gt_MMRavenDisableEvent;
trigger libMapM_gt_MMRavenEnableEvent;
trigger libMapM_gt_MMRavenCurseInit;
trigger libMapM_gt_MMRavenObjectivePreviewTimerExpires;
trigger libMapM_gt_MMRavenCurseGateOpen;
trigger libMapM_gt_MMRavenStartSpawning;
trigger libMapM_gt_MMRavenSpawnTribute;
trigger libMapM_gt_MMRavenTributeCollectStarted;
trigger libMapM_gt_MMRavenTributeCollectCanceled;
trigger libMapM_gt_MMRavenTributeCollectInterrupted;
trigger libMapM_gt_MMRavenTributeObtained;
trigger libMapM_gt_MMRavenCurseStartLightTransition;
trigger libMapM_gt_MMRavenCurseFinished;
trigger libMapM_gt_MMRavenObjectiveUIHandler;
trigger libMapM_gt_MMRavenDebugStartElunees;
trigger libMapM_gt_MMRavenDebugStartNexten;
trigger libMapM_gt_MMRavenDebugStartCurseec;
trigger libMapM_gt_MMRavenDebugStartWarning;
trigger libMapM_gt_MMBuriedBackwoodsInitialize;
trigger libMapM_gt_MMWinterveilModInitialization;
trigger libMapM_gt_MMWinterveilHeroCurationCallback;
trigger libMapM_gt_MMWinterveilGameOpenTimerStarted;
trigger libMapM_gt_MMWinterveilGatesOpened;
trigger libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles;
trigger libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers;
trigger libMapM_gt_MMWinterveilPlayerPicksupSnowball;
trigger libMapM_gt_MMWinterveilSpawnVictorySnowmen;
trigger libMapM_gt_MMWinterveilSnowmanTeacherDies;
trigger libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen;
trigger libMapM_gt_MMWinterveilSnowmanSpawned;
trigger libMapM_gt_MMWinterveilSnowmanDies;
trigger libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist;
trigger libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen;
trigger libMapM_gt_MMWinterveilSnowballDamageScaling;
trigger libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires;
trigger libMapM_gt_MMWinterveilSnowTributePickedUp;
trigger libMapM_gt_MMWinterveilWorldEnderSnowballCreated;
trigger libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer;
trigger libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer;

// Library Initialization
void libMapM_InitVariables ();

