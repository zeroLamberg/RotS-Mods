include "TriggerLibs/NativeLib"
include "LibCore_h"
include "LibGame_h"

include "LibSond_h"

//--------------------------------------------------------------------------------------------------
// Library: Sound
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSond_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
}

// Variable Initialization
bool libSond_InitVariables_completed = false;

void libSond_InitVariables () {
    int init_i;

    if (libSond_InitVariables_completed) {
        return;
    }

    libSond_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_PissedResetTime[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_HeroTakedownVOTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_HeroTakedownVOAlliesGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_AlliedTakedownVOTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_TeamKilledVOTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_CelebrateVOTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_CelebrateVOAlliesGroup[init_i] = PlayerGroupEmpty();
    }
    libSond_gv_heroVO_HeroIntroLineTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_HealThankYouCooldownTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSond_gv_heroVO_RetreatResetTimer[init_i] = TimerCreate();
    }
}

// Functions
void libSond_gf_MuteMostSoundChannelsForGameOverState (bool lp_muteOption) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDialogue, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryGather, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryME, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySEmitters, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser2, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser6, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser8, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser10, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser17, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser18, lp_muteOption);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser18, lp_muteOption);
}

void libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer (int lp_event, int lp_player) {
    // Variable Declarations
    soundlink lv_soundID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soundID = SoundLink("EditorDefaultSound", -1);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    if ((libCore_gv_gameOver == true) && (libCore_gv_dataAnnouncerVOData[lp_event].lv_playAtGameEnd == false)) {
        return ;
    }

    lv_soundID = SoundLink(libCore_gv_dataAnnouncerVOData[(lp_event)].lv_soundLink, c_soundIndexAny);
    if ((lv_soundID == null)) {
        return ;
    }

    SoundPlayForPlayer(lv_soundID, lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gf_SendEventAnnouncerVOInitiated(SoundLastPlayed(), lp_player, (lp_event));
}

string libSond_gf_HeroVOHeroLineForEvent (string lp_vOEvent, int lp_speakingPlayer) {
    // Variable Declarations
    string lv_soundLink;
    string lv_soundLinkAppend;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soundLinkAppend = "";

    // Implementation
    if ((lp_vOEvent == "[Null]")) {
        return null;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(lp_speakingPlayer) == false)) {
        return null;
    }

    lv_heroIndex = libGame_gv_players[lp_speakingPlayer].lv_heroIndex;
    lv_soundLink = UserDataGetGameLink("VOArray", libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_vOArrayUserData, lp_vOEvent, 1);
    lv_soundLinkAppend = ((lv_soundLink) + libGame_gv_players[lp_speakingPlayer].lv_vOSoundSuffix);
    lv_soundLink = (lv_soundLinkAppend);
    if ((CatalogEntryIsValid(c_gameCatalogSound, lv_soundLink) == true)) {
        return lv_soundLink;
    }
    else {
        return null;
    }
}

void libSond_gf_HeroVOPlayHeroLine (string lp_vOEvent, int lp_speakingPlayer, playergroup lp_targetPlayerGroup) {
    // Variable Declarations
    string lv_soundID;
    string lv_soundString;
    string lv_soundStringSkin;
    string lv_skinSoundID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soundString = "";
    lv_soundStringSkin = "";

    // Implementation
    if ((lp_vOEvent == "[Null]")) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_speakingPlayer].lv_heroUnit, "UsingVehicle") == true)) {
        return ;
    }

    lv_soundID = libSond_gf_HeroVOHeroLineForEvent(lp_vOEvent, lp_speakingPlayer);
    if ((lv_soundID != null)) {
        SoundPlayForPlayer(SoundLink(lv_soundID, c_soundIndexAny), lp_speakingPlayer, lp_targetPlayerGroup, 100.0, 0.0);
    }

}

void libSond_gf_HeroVOPlayHeroLineInWorld (string lp_vOEvent, int lp_speakingPlayer, playergroup lp_targetPlayerGroup) {
    // Variable Declarations
    string lv_soundID;
    unit lv_heroUnit;
    string lv_playerSkinString;
    string lv_soundString;
    string lv_soundStringSkin;
    string lv_skinSoundID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerSkinString = "";
    lv_soundString = "";
    lv_soundStringSkin = "";

    // Implementation
    if ((lp_vOEvent == "[Null]")) {
        return ;
    }

    lv_soundID = libSond_gf_HeroVOHeroLineForEvent(lp_vOEvent, lp_speakingPlayer);
    lv_heroUnit = libGame_gv_players[lp_speakingPlayer].lv_heroUnit;
    if ((lv_soundID != null) && (lv_heroUnit != null)) {
        SoundPlayOnUnitForPlayer(SoundLink(lv_soundID, c_soundIndexAny), lp_speakingPlayer, lp_targetPlayerGroup, lv_heroUnit, 0.0, 100.0, 0.0);
    }

    if ((CatalogEntryIsValid(c_gameCatalogSound, lv_skinSoundID) == true)) {
        SoundPlayForPlayer(SoundLink(lv_skinSoundID, c_soundIndexAny), lp_speakingPlayer, lp_targetPlayerGroup, 100.0, 0.0);
    }

}

trigger auto_libSond_gf_HeroVOPlayHeroLineWithDelay_Trigger = null;
string auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_vOEvent;
int auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_speakingPlayer;
playergroup auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_targetPlayerGroup;
fixed auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_delay;

void libSond_gf_HeroVOPlayHeroLineWithDelay (string lp_vOEvent, int lp_speakingPlayer, playergroup lp_targetPlayerGroup, fixed lp_delay) {
    auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_vOEvent = lp_vOEvent;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_speakingPlayer = lp_speakingPlayer;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_targetPlayerGroup = lp_targetPlayerGroup;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_delay = lp_delay;

    if (auto_libSond_gf_HeroVOPlayHeroLineWithDelay_Trigger == null) {
        auto_libSond_gf_HeroVOPlayHeroLineWithDelay_Trigger = TriggerCreate("auto_libSond_gf_HeroVOPlayHeroLineWithDelay_TriggerFunc");
    }

    TriggerExecute(auto_libSond_gf_HeroVOPlayHeroLineWithDelay_Trigger, false, false);
}

bool auto_libSond_gf_HeroVOPlayHeroLineWithDelay_TriggerFunc (bool testConds, bool runActions) {
    string lp_vOEvent = auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_vOEvent;
    int lp_speakingPlayer = auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_speakingPlayer;
    playergroup lp_targetPlayerGroup = auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_targetPlayerGroup;
    fixed lp_delay = auto_libSond_gf_HeroVOPlayHeroLineWithDelay_lp_delay;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_vOEvent == "[Null]")) {
        return true;
    }

    Wait(lp_delay, c_timeGame);
    libSond_gf_HeroVOPlayHeroLine(lp_vOEvent, lp_speakingPlayer, lp_targetPlayerGroup);
    return true;
}

trigger auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_Trigger = null;
string auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_vOEvent;
int auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_speakingPlayer;
playergroup auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_targetPlayerGroup;
fixed auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_delay;
int auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_chance;

void libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance (string lp_vOEvent, int lp_speakingPlayer, playergroup lp_targetPlayerGroup, fixed lp_delay, int lp_chance) {
    auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_vOEvent = lp_vOEvent;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_speakingPlayer = lp_speakingPlayer;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_targetPlayerGroup = lp_targetPlayerGroup;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_delay = lp_delay;
    auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_chance = lp_chance;

    if (auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_Trigger == null) {
        auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_Trigger = TriggerCreate("auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_TriggerFunc");
    }

    TriggerExecute(auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_Trigger, false, false);
}

bool auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_TriggerFunc (bool testConds, bool runActions) {
    string lp_vOEvent = auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_vOEvent;
    int lp_speakingPlayer = auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_speakingPlayer;
    playergroup lp_targetPlayerGroup = auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_targetPlayerGroup;
    fixed lp_delay = auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_delay;
    int lp_chance = auto_libSond_gf_HeroVOPlayHeroLineWithDelayAndRandomChance_lp_chance;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_vOEvent == "[Null]")) {
        return true;
    }

    if ((RandomInt(1, 100) <= lp_chance)) {
        Wait(lp_delay, c_timeGame);
        libSond_gf_HeroVOPlayHeroLine(lp_vOEvent, lp_speakingPlayer, lp_targetPlayerGroup);
    }

    return true;
}

trigger auto_libSond_gf_HeroVOHeroPissedLineLogic_Trigger = null;
int auto_libSond_gf_HeroVOHeroPissedLineLogic_lp_player;

void libSond_gf_HeroVOHeroPissedLineLogic (int lp_player) {
    auto_libSond_gf_HeroVOHeroPissedLineLogic_lp_player = lp_player;

    if (auto_libSond_gf_HeroVOHeroPissedLineLogic_Trigger == null) {
        auto_libSond_gf_HeroVOHeroPissedLineLogic_Trigger = TriggerCreate("auto_libSond_gf_HeroVOHeroPissedLineLogic_TriggerFunc");
    }

    TriggerExecute(auto_libSond_gf_HeroVOHeroPissedLineLogic_Trigger, false, false);
}

bool auto_libSond_gf_HeroVOHeroPissedLineLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSond_gf_HeroVOHeroPissedLineLogic_lp_player;

    // Variable Declarations
    string lv_soundID;
    int lv_numberofSounds;
    int lv_oldClickCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_players[lp_player].lv_vOPissedClickCount += 1;
    if ((libGame_gv_players[lp_player].lv_vOPissedSoundIsPlaying == false)) {
        lv_soundID = libSond_gf_HeroVOHeroLineForEvent("Pissed", lp_player);
        if ((lv_soundID != null) && (libGame_gv_players[lp_player].lv_vOPissedClickCount >= libSond_gv_heroVO_PissedClickThreshold)) {
            libGame_gv_players[lp_player].lv_vOPissedSoundIsPlaying = true;
            libGame_gv_players[lp_player].lv_vOPissedClickCount = 0;
            TransmissionSendForPlayer(PlayerGroupSingle(lp_player), TransmissionSourceFromUnit(libGame_gv_players[lp_player].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Talk", SoundLink(lv_soundID, libGame_gv_players[lp_player].lv_vOPissedSoundIndex), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lp_player);
            TransmissionWait(TransmissionLastSent(), 0.0);
            libGame_gv_players[lp_player].lv_vOPissedSoundIsPlaying = false;
            libGame_gv_players[lp_player].lv_vOPissedSoundIndex += 1;
            lv_numberofSounds = CatalogFieldValueCount(c_gameCatalogSound, lv_soundID, "AssetArray", c_playerAny);
            if ((libGame_gv_players[lp_player].lv_vOPissedSoundIndex >= lv_numberofSounds)) {
                libGame_gv_players[lp_player].lv_vOPissedSoundIndex = 0;
            }

        }

    }

    TimerStart(libSond_gv_heroVO_PissedResetTime[lp_player], libSond_gv_heroVO_PissedWindow, false, c_timeGame);
    return true;
}

string libSond_gf_HeroVOHeroTakedownSoundLink (unit lp_killingHero, unit lp_dyingHero) {
    // Variable Declarations
    string lv_takedownSound;
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_takedownSound = libCore_gv_dataHeroVO[libCore_gf_HeroIndexForUnitType(UnitGetType(lp_killingHero))].lv_specificHeroTakedownLines[libCore_gf_HeroIndexForUnitType(UnitGetType(lp_dyingHero))];
    if ((lv_takedownSound != null)) {
        lv_roll = RandomInt(1, 100);
        if ((lv_roll <= libSond_gv_heroVO_SpecialKillLinePercentChance_C)) {
            return lv_takedownSound;
        }

    }

    lv_takedownSound = libSond_gf_HeroVOHeroLineForEvent("Kill", UnitGetOwner(lp_killingHero));
    if ((lv_takedownSound != null)) {
        return lv_takedownSound;
    }
    else {
        return null;
    }
}

void libSond_gf_HeroVORegisterHeroTakedownForPlayer (int lp_player, playergroup lp_awardGroup, int lp_enemyPlayerKilled, int lp_deadPlayerKillingSpreeCount, int lp_levelGap) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_deadPlayerKillingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libSond_gv_heroVO_HeroTakedownVOEnemyWasOnKillingSpree[lp_player] = true;
    }

    if ((lp_levelGap >= libSond_gv_heroVO_ComebackLevelGapThreshold_C)) {
        libSond_gv_heroVO_HeroTakedownVOWasComebackKill[lp_player] = true;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_awardGroup, libSond_gv_heroVO_HeroTakedownVOAlliesGroup[lp_player]);
    libSond_gv_heroVO_HeroTakedownVOLastEnemyPlayerKilled[lp_player] = lp_enemyPlayerKilled;
}

void libSond_gf_HeroVOStartHeroTakedownVOTimerForPlayer (int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libSond_gv_heroVO_HeroTakedownVOTimers[lp_player], lp_duration, false, c_timeGame);
}

void libSond_gf_HeroVOStartAlliedTakedownVOTimerForPlayer (int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == false)) {
        return ;
    }

    TimerStart(libSond_gv_heroVO_AlliedTakedownVOTimers[lp_player], lp_duration, false, c_timeGame);
}

void libSond_gf_HeroVOStartTeamKilledVOTimerForPlayer (int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libSond_gv_heroVO_TeamKilledVOTimers[lp_player], lp_duration, false, c_timeGame);
}

void libSond_gf_HeroVOStartCelebrateVOTimerForPlayer (int lp_player, playergroup lp_allyPlayerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gf_PlayerIsHeroPlayer(lp_player) == false) || (PlayerGroupCount(lp_allyPlayerGroup) < 1))) {
        return ;
    }

    libSond_gv_heroVO_CelebrateVOAlliesGroup[lp_player] = lp_allyPlayerGroup;
    TimerStart(libSond_gv_heroVO_CelebrateVOTimers[lp_player], libSond_gv_heroVO_CelebrateTimerDuration_C, false, c_timeGame);
}

trigger auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_Trigger = null;
int auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_player;
int auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_allyPlayer;

void libSond_gf_HeroVOPlayHeroIntroLinesForPlayer (int lp_player, int lp_allyPlayer) {
    auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_player = lp_player;
    auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_allyPlayer = lp_allyPlayer;

    if (auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_Trigger == null) {
        auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_Trigger = TriggerCreate("auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_Trigger, false, false);
}

bool auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_player;
    int lp_allyPlayer = auto_libSond_gf_HeroVOPlayHeroIntroLinesForPlayer_lp_allyPlayer;

    // Variable Declarations
    int lv_heroIndex;
    int lv_allyHeroIndex;
    string lv_callSoundLink;
    string lv_responseSoundLink;
    string lv_callPlayerSkinString;
    string lv_callSoundString;
    string lv_callSoundStringSkin;
    string lv_callSoundLinkSkin;
    string lv_responsePlayerSkinString;
    string lv_responseSoundString;
    string lv_responseSoundStringSkin;
    string lv_responseSoundLinkSkin;
    sound lv_soundToWaitFor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_callPlayerSkinString = "";
    lv_callSoundString = "";
    lv_callSoundStringSkin = "";
    lv_responsePlayerSkinString = "";
    lv_responseSoundString = "";
    lv_responseSoundStringSkin = "";

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_allyPlayer) == false)) {
        return true;
    }

    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_allyHeroIndex = libGame_gv_players[lp_allyPlayer].lv_heroIndex;
    lv_responseSoundLink = libCore_gv_dataHeroVO[lv_heroIndex].lv_specificHeroIntroResponseLines[lv_allyHeroIndex];
    if ((lv_responseSoundLink == null)) {
        if ((RandomInt(1, 2) == 1)) {
            lv_callSoundLink = libSond_gf_HeroVOHeroLineForEvent("IntroQuestion", lp_allyPlayer);
            lv_responseSoundLink = libSond_gf_HeroVOHeroLineForEvent("IntroRespond", lp_player);
        }
        else {
            lv_callSoundLink = libSond_gf_HeroVOHeroLineForEvent("IntroBoast", lp_allyPlayer);
            lv_responseSoundLink = libSond_gf_HeroVOHeroLineForEvent("IntroAgree", lp_player);
        }
    }
    else {
        lv_callSoundLink = libCore_gv_dataHeroVO[lv_allyHeroIndex].lv_specificHeroIntroQuestionLines[lv_heroIndex];
    }
    if ((lv_callSoundLink != null) && (lv_responseSoundLink != null)) {
        SoundPlayForPlayer(SoundLink(lv_callSoundLink, c_soundIndexAny), lp_allyPlayer, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        lv_callPlayerSkinString = (PlayerSkin(lp_player));
        lv_callSoundString = (lv_callSoundLink);
        lv_callSoundStringSkin = (lv_callSoundString + "_" + lv_callPlayerSkinString);
        lv_callSoundLinkSkin = (lv_callSoundStringSkin);
        if ((CatalogEntryIsValid(c_gameCatalogSound, lv_callSoundLinkSkin) == true) && (SoundLengthSync(SoundLink(lv_callSoundLinkSkin, c_soundIndexAny)) >= SoundLengthSync(SoundLink(lv_callSoundLink, c_soundIndexAny)))) {
            SoundPlayForPlayer(SoundLink(lv_callSoundLinkSkin, c_soundIndexAny), lp_allyPlayer, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            lv_soundToWaitFor = SoundLastPlayed();
        }
        else {
            lv_soundToWaitFor = SoundLastPlayed();
            if ((CatalogEntryIsValid(c_gameCatalogSound, lv_callSoundLinkSkin) == true)) {
                SoundPlayForPlayer(SoundLink(lv_callSoundLinkSkin, c_soundIndexAny), lp_allyPlayer, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            }

        }
        SoundWait(lv_soundToWaitFor, 0.0, c_soundOffsetEnd);
        SoundPlayForPlayer(SoundLink(lv_responseSoundLink, c_soundIndexAny), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        lv_responsePlayerSkinString = (PlayerSkin(lp_allyPlayer));
        lv_responseSoundString = (lv_responseSoundLink);
        lv_responseSoundStringSkin = (lv_responseSoundString + "_" + lv_responsePlayerSkinString);
        lv_responseSoundLinkSkin = (lv_responseSoundStringSkin);
        if ((CatalogEntryIsValid(c_gameCatalogSound, lv_responseSoundLinkSkin) == true)) {
            SoundPlayForPlayer(SoundLink(lv_responseSoundLinkSkin, c_soundIndexAny), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        }

    }

    return true;
}

void libSond_gf_HeroVOCheckForIntroLines (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;
    point lv_positionOfHeroUnit;
    unitgroup lv_alliesNearby;
    int lv_numberOfAlliesNearby;
    unit lv_allyUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alliesNearby = UnitGroupEmpty();

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((lv_heroUnit == null)) {
        return ;
    }

    if ((RandomInt(1, 100) > libSond_gv_heroVO_HeroIntroLineChance_C)) {
        return ;
    }

    lv_positionOfHeroUnit = UnitGetPosition(lv_heroUnit);
    lv_alliesNearby = UnitGroupSearch(null, lp_player, lv_positionOfHeroUnit, libSond_gv_heroVO_HeroIntroLineAllyCheckRadius_C, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterResistant - 32))), 0);
    lv_numberOfAlliesNearby = UnitGroupCount(lv_alliesNearby, c_unitCountAlive);
    if ((lv_numberOfAlliesNearby == 0)) {
        return ;
    }

    lv_allyUnit = UnitGroupUnit(lv_alliesNearby, RandomInt(1, lv_numberOfAlliesNearby));
    if ((((UnitHasBehavior2(lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true) && (UnitHasBehavior2(lv_allyUnit, "HeroSharesCutsceneOverlaysSource") == true)) || ((UnitHasBehavior2(lv_allyUnit, "HeroSharesCutsceneOverlaysDestination") == true) && (UnitHasBehavior2(lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)))) {
        UnitGroupRemove(lv_alliesNearby, lv_allyUnit);
        if ((UnitGroupCount(lv_alliesNearby, c_unitCountAll) > 0)) {
            lv_allyUnit = UnitGroupUnit(lv_alliesNearby, RandomInt(1, lv_numberOfAlliesNearby));
        }

    }

    libSond_gf_HeroVOPlayHeroIntroLinesForPlayer(lp_player, UnitGetOwner(lv_allyUnit));
}

void libSond_gf_HeroVOHeroGetHitResponse (fixed lp_damagingAmount, unit lp_damagedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_damagingAmount >= (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLifeMax, c_unitPropCurrent) * libSond_gv_heroVO_GetHitLifePercentThresholdHigh_C))) {
        libSond_gf_HeroVOPlayHeroLine("VOX_GetHitLarge", UnitGetOwner(lp_damagedUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lp_damagedUnit)]);
    }
    else {
        if ((lp_damagingAmount >= (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLifeMax, c_unitPropCurrent) * libSond_gv_heroVO_GetHitLifePercentThreshold_C))) {
            libSond_gf_HeroVOPlayHeroLine("VOX_GetHit", UnitGetOwner(lp_damagedUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lp_damagedUnit)]);
        }
        else {
            if ((lp_damagingAmount >= (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLifeMax, c_unitPropCurrent) * libSond_gv_heroVO_GetHitLifePercentThresholdLow_C))) {
                libSond_gf_HeroVOPlayHeroLine("VOX_GetHitSmall", UnitGetOwner(lp_damagedUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lp_damagedUnit)]);
            }

        }
    }
}

void libSond_gf_HeroVOPlayHealThankYouLine (int lp_speakingPlayer, playergroup lp_targetPlayerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_speakingPlayer) == false)) {
        return ;
    }

    if ((TimerGetRemaining(libSond_gv_heroVO_HealThankYouCooldownTimer[lp_speakingPlayer]) > 0.0)) {
        return ;
    }

    if ((RandomInt(1, 100) > libSond_gv_heroVO_HealThankYouLinePercentChance_C)) {
        return ;
    }

    TimerStart(libSond_gv_heroVO_HealThankYouCooldownTimer[lp_speakingPlayer], libSond_gv_heroVO_HealThankYouLineCooldown_C, false, c_timeGame);
    libSond_gf_HeroVOPlayHeroLineWithDelay("Healed", lp_speakingPlayer, lp_targetPlayerGroup, libSond_gv_heroVO_HealThankYouLineDelay_C);
}

void libSond_gf_HeroVOHeroBeginsHearthing (int lp_speakingPlayer) {
    // Variable Declarations
    unitgroup lv_nearbyUnits;
    unit lv_unit;
    playergroup lv_vOGroup;

    // Automatic Variable Declarations
    unitgroup auto3F9D4AE3_g;
    int auto3F9D4AE3_u;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_vOGroup = PlayerGroupEmpty();

    // Implementation
    if ((TimerGetRemaining(libSond_gv_heroVO_RetreatResetTimer[lp_speakingPlayer]) > 0.0)) {
        return ;
    }

    lv_nearbyUnits = UnitGroupAlliance(lp_speakingPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libGame_gv_players[lp_speakingPlayer].lv_heroUnit), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F9D4AE3_g = lv_nearbyUnits;
    auto3F9D4AE3_u = UnitGroupCount(auto3F9D4AE3_g, c_unitCountAll);
    for (;; auto3F9D4AE3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3F9D4AE3_g, auto3F9D4AE3_u);
        if (lv_unit == null) { break; }
        PlayerGroupAdd(lv_vOGroup, UnitGetOwner(lv_unit));
    }
    libSond_gf_HeroVOPlayHeroLine("AI_Retreat", lp_speakingPlayer, lv_vOGroup);
    TimerStart(libSond_gv_heroVO_RetreatResetTimer[lp_speakingPlayer], 5.0, false, c_timeGame);
}

void libSond_gf_HeroVOPlayResurrected (int lp_speakingPlayer, playergroup lp_targetPlayerGroup) {
    // Variable Declarations
    string lv_soundID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_speakingPlayer) == false)) {
        return ;
    }

    lv_soundID = libSond_gf_HeroVOHeroLineForEvent("Resurrected", lp_speakingPlayer);
    if ((lv_soundID != "") && (lv_soundID != null)) {
        libSond_gf_HeroVOPlayHeroLine("Resurrected", lp_speakingPlayer, lp_targetPlayerGroup);
    }

}

void libSond_gf_HeroVOPlayTryMeModeIntro (int lp_speakingPlayer, playergroup lp_targetPlayerGroup) {
    // Variable Declarations
    string lv_soundID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_speakingPlayer) == false)) {
        return ;
    }

    lv_soundID = libSond_gf_HeroVOHeroLineForEvent("Glue_Trial", lp_speakingPlayer);
    if ((lv_soundID != null)) {
        libSond_gf_HeroVOPlayHeroLine("Glue_Trial", lp_speakingPlayer, lp_targetPlayerGroup);
    }

}

bool libSond_gf_SoundtrackIsIntroPlaying () {
    // Automatic Variable Declarations
    // Implementation
    return libSond_gv_soundtrack_IntroSoundtrackPlaying;
}

void libSond_gf_SoundtrackUpdateMapSoundtrackIndex () {
    // Variable Declarations
    int lv_newIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamLevel < 10) && (libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel < 10)) {
        lv_newIndex = 1;
    }
    else if ((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamLevel < 20) && (libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel < 20)) {
        lv_newIndex = 2;
    }
    else if (true) {
        lv_newIndex = 3;
    }
    lv_newIndex = MaxI(lv_newIndex, libSond_gv_soundtrack_MapSoundtrackIndex);
    if ((lv_newIndex != libSond_gv_soundtrack_MapSoundtrackIndex)) {
        libSond_gv_soundtrack_MapSoundtrackIndex = lv_newIndex;
        if ((libSond_gv_soundtrack_MapSoundtrackPlaying == true)) {
            libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
        }

    }

}

trigger auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_Trigger = null;

void libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers () {
    if (auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_Trigger == null) {
        auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_Trigger = TriggerCreate("auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_TriggerFunc");
    }

    TriggerExecute(auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_Trigger, false, false);
}

bool auto_libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_soundtrack = libCore_gv_mAPMapSoundtrack[0];
    if ((lv_soundtrack == null)) {
        return true;
    }

    libSond_gv_soundtrack_MapSoundtrackPlaying = true;
    libSond_gv_soundtrack_IntroSoundtrackPlaying = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
    return true;
}

void libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup (string lp_soundtrack, playergroup lp_playerGroup) {
    // Variable Declarations
    playergroup lv_livingPlayers;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto9E9CA876_g;

    // Variable Initialization
    lv_livingPlayers = PlayerGroupEmpty();

    // Implementation
    if ((lp_soundtrack == null)) {
        return ;
    }

    libSond_gv_soundtrack_MapSoundtrackPlaying = false;
    libSond_gv_soundtrack_NewDefaultSoundtrack = lp_soundtrack;
    if ((libCore_gv_gameOver == true)) {
        SoundtrackStop(lp_playerGroup, c_soundtrackCategoryMusic, true);
        SoundtrackPlay(lp_playerGroup, c_soundtrackCategoryMusic, lp_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        return ;
    }

    auto9E9CA876_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9E9CA876_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (libSond_gv_soundtrack_UniqueSoundtrackEnabled[lv_itPlayer] == false)) {
            PlayerGroupAdd(lv_livingPlayers, lv_itPlayer);
        }

    }
    if ((PlayerGroupCount(lv_livingPlayers) > 0)) {
        if ((libSond_gf_SoundtrackIsIntroPlaying() == true)) {
            SoundtrackStopCurrent(lv_livingPlayers, c_soundtrackCategoryMusic, true);
            libSond_gv_soundtrack_IntroSoundtrackPlaying = false;
        }

        SoundtrackPlay(lv_livingPlayers, c_soundtrackCategoryMusic, lp_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

}

void libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers () {
    // Variable Declarations
    playergroup lv_livingPlayers;
    string lv_soundtrack;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto96922F97_g;

    // Variable Initialization
    lv_livingPlayers = PlayerGroupEmpty();

    // Implementation
    libSond_gv_soundtrack_IntroSoundtrackPlaying = false;
    if ((libSond_gv_soundtrack_MapSoundtrackIndex == 0)) {
        libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        return ;
    }

    lv_soundtrack = libCore_gv_mAPMapSoundtrack[libSond_gv_soundtrack_MapSoundtrackIndex];
    if ((lv_soundtrack == null)) {
        return ;
    }

    libSond_gv_soundtrack_MapSoundtrackPlaying = true;
    libSond_gv_soundtrack_NewDefaultSoundtrack = "";
    auto96922F97_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto96922F97_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (libSond_gv_soundtrack_UniqueSoundtrackEnabled[lv_itPlayer] == false)) {
            PlayerGroupAdd(lv_livingPlayers, lv_itPlayer);
        }

    }
    if ((PlayerGroupCount(lv_livingPlayers) > 0)) {
        SoundtrackPlay(lv_livingPlayers, c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

}

void libSond_gf_SoundtrackStopDeadSoundtrackforPlayer (int lp_player) {
    // Variable Declarations
    playergroup lv_livingPlayers;
    string lv_soundtrack;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_livingPlayers = PlayerGroupEmpty();

    // Implementation
    SoundtrackStopCurrent(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, true);
    if ((libSond_gv_soundtrack_MapSoundtrackPlaying == true)) {
        libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
        lv_soundtrack = libCore_gv_mAPMapSoundtrack[libSond_gv_soundtrack_MapSoundtrackIndex];
        return ;
    }

    if ((libSond_gv_soundtrack_NewDefaultSoundtrack != null) && (libSond_gv_soundtrack_UniqueSoundtrackEnabled[lp_player] == false)) {
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, libSond_gv_soundtrack_NewDefaultSoundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        return ;
    }
    else {
        lv_soundtrack = libCore_gv_mAPMapSoundtrack[libSond_gv_soundtrack_MapSoundtrackIndex];
        if ((lv_soundtrack != null) && (libSond_gv_soundtrack_UniqueSoundtrackEnabled[lp_player] == false)) {
            SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        }

    }
}

void libSond_gf_SoundtrackSetUniqueSoundtrackState (bool lp_uniqueSoundtrackState) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto5A85C31F_g;

    // Variable Initialization

    // Implementation
    auto5A85C31F_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5A85C31F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libSond_gv_soundtrack_UniqueSoundtrackEnabled[lv_itPlayer] = lp_uniqueSoundtrackState;
    }
}

void libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer (bool lp_enableDisable, int lp_player, string lp_soundEffect) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    fixed lv_soundOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser1, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser3, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser4, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser5, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser6, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser7, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpellOneshotImpact, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpellOneshotLaunch, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser8, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser9, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser10, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTest, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMessage, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, lp_soundEffect);
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, lp_soundEffect);
    }
    else {
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser1, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser3, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser4, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser5, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser6, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser7, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpellOneshotImpact, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpellOneshotLaunch, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser8, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser9, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser10, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTest, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMessage, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, lp_soundEffect);
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, lp_soundEffect);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Sound
//--------------------------------------------------------------------------------------------------
bool libSond_gt_IncludeSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_IncludeSound_Init () {
    libSond_gt_IncludeSound = TriggerCreate("libSond_gt_IncludeSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Check For Hero VO After Announcer Events
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_sound;
    int lv_it_SpeakingPlayer;
    int lv_player;
    int lv_announcerEvent;

    // Automatic Variable Declarations
    const int auto28CFB7A0_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto28CFB7A0_ai = 1;

    // Variable Initialization
    lv_sound = libGame_gf_AnnouncerVOInitiatedAnnouncerSound();
    lv_player = libGame_gf_AnnouncerVOInitiatedAnnouncerPlayer();
    lv_announcerEvent = libGame_gf_AnnouncerVOInitiatedAnnouncerEvent();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_announcerEvent == libCore_ge_AnnouncerVOEvents_LetTheBattleBegin)) {
        SoundWait(lv_sound, 0.0, c_soundOffsetEnd);
        Wait(0.0625, c_timeGame);
        lv_it_SpeakingPlayer = 1;
        for ( ; ( (auto28CFB7A0_ai >= 0 && lv_it_SpeakingPlayer <= auto28CFB7A0_ae) || (auto28CFB7A0_ai < 0 && lv_it_SpeakingPlayer >= auto28CFB7A0_ae) ) ; lv_it_SpeakingPlayer += auto28CFB7A0_ai ) {
            if (((libGame_gv_players[lv_it_SpeakingPlayer].lv_heroIndex != 0) && (libGame_gf_TeamNumberOfPlayer(lv_it_SpeakingPlayer) == libGame_gf_TeamNumberOfPlayer(lv_player)))) {
                libSond_gf_HeroVOPlayHeroLine("Cheer", lv_it_SpeakingPlayer, PlayerGroupSingle(lv_player));
            }

        }
    }
    else if ((lv_announcerEvent == libCore_ge_AnnouncerVOEvents_BattleStartingIn) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Arena)) {
        SoundWait(lv_sound, 0.0, c_soundOffsetEnd);
        libSond_gf_HeroVOCheckForIntroLines(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents_Init () {
    libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents = TriggerCreate("libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents_Func");
    libGame_gf_AnnouncerVOInitiated(libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Pissed Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOPissedTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto0BD56BB3_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto0BD56BB3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto0BD56BB3_ai >= 0 && lv_itPlayer <= auto0BD56BB3_ae) || (auto0BD56BB3_ai < 0 && lv_itPlayer >= auto0BD56BB3_ae) ) ; lv_itPlayer += auto0BD56BB3_ai ) {
        if ((EventTimer() == libSond_gv_heroVO_PissedResetTime[lv_itPlayer])) {
            libGame_gv_players[lv_itPlayer].lv_vOPissedClickCount = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOPissedTimerExpires_Init () {
    libSond_gt_HeroVOPissedTimerExpires = TriggerCreate("libSond_gt_HeroVOPissedTimerExpires_Func");
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[1]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[2]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[3]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[4]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[5]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[6]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[7]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[8]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[9]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[10]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[11]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[12]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[13]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[14]);
    TriggerAddEventTimer(libSond_gt_HeroVOPissedTimerExpires, libSond_gv_heroVO_PissedResetTime[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Hero Takedown VO Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOHeroTakedownVOTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;
    int lv_numberOfPlayersInAlliesGroup;
    int lv_speakingPlayer;
    unit lv_killingHero;
    unit lv_dyingHero;
    string lv_soundLink;
    string lv_playerSkinString;
    string lv_soundString;
    string lv_soundStringSkin;
    string lv_skinSoundID;

    // Automatic Variable Declarations
    const int autoC824EC31_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoC824EC31_ai = 1;

    // Variable Initialization
    lv_playerSkinString = "";
    lv_soundString = "";
    lv_soundStringSkin = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoC824EC31_ai >= 0 && lv_itPlayer <= autoC824EC31_ae) || (autoC824EC31_ai < 0 && lv_itPlayer >= autoC824EC31_ae) ) ; lv_itPlayer += autoC824EC31_ai ) {
        if ((EventTimer() == libSond_gv_heroVO_HeroTakedownVOTimers[lv_itPlayer])) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }

    }
    if ((UnitHasBehavior2(libGame_gv_players[lv_triggeringPlayer].lv_heroUnit, "UsingVehicle") == true)) {
        return true;
    }

    lv_numberOfPlayersInAlliesGroup = PlayerGroupCount(libSond_gv_heroVO_HeroTakedownVOAlliesGroup[lv_triggeringPlayer]);
    if ((lv_numberOfPlayersInAlliesGroup < 1)) {
        return true;
    }

    lv_speakingPlayer = PlayerGroupPlayer(libSond_gv_heroVO_HeroTakedownVOAlliesGroup[lv_triggeringPlayer], RandomInt(1, lv_numberOfPlayersInAlliesGroup));
    lv_killingHero = libGame_gv_players[lv_triggeringPlayer].lv_heroUnit;
    lv_dyingHero = libGame_gv_players[libSond_gv_heroVO_HeroTakedownVOLastEnemyPlayerKilled[lv_triggeringPlayer]].lv_heroUnit;
    if ((libSond_gv_heroVO_HeroTakedownVOWasComebackKill[lv_triggeringPlayer] == true)) {
        lv_soundLink = libSond_gf_HeroVOHeroLineForEvent("Comeback", lv_speakingPlayer);
    }
    else {
        if ((libGame_gv_players[lv_speakingPlayer].lv_isDead == true)) {
            lv_soundLink = libSond_gf_HeroVOHeroLineForEvent("WorthIt", lv_speakingPlayer);
        }
        else {
            if ((libSond_gv_heroVO_HeroTakedownVOEnemyWasOnKillingSpree[lv_triggeringPlayer] == true)) {
                lv_soundLink = libSond_gf_HeroVOHeroLineForEvent("EndEnemyKillSpree", lv_speakingPlayer);
            }
            else {
                if (((lv_speakingPlayer == lv_triggeringPlayer) || ((UnitHasBehavior2(lv_killingHero, "HeroSharesCutsceneOverlaysDestination") == true) && (UnitHasBehavior2(libGame_gv_players[lv_speakingPlayer].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) || ((UnitHasBehavior2(libGame_gv_players[lv_speakingPlayer].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true) && (UnitHasBehavior2(lv_killingHero, "HeroSharesCutsceneOverlaysSource") == true))) && (lv_killingHero != null) && (lv_dyingHero != null)) {
                    lv_soundLink = libSond_gf_HeroVOHeroTakedownSoundLink(lv_killingHero, lv_dyingHero);
                }
                else {
                    lv_soundLink = libSond_gf_HeroVOHeroLineForEvent("AI_GoodJob", lv_speakingPlayer);
                }
            }
        }
    }
    if ((lv_soundLink != null)) {
        SoundPlayForPlayer(SoundLink(lv_soundLink, c_soundIndexAny), lv_speakingPlayer, libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], 100.0, 0.0);
        lv_playerSkinString = (PlayerSkin(lv_speakingPlayer));
        lv_soundString = (lv_soundLink);
        lv_soundStringSkin = (lv_soundString + "_" + lv_playerSkinString);
        lv_skinSoundID = (lv_soundStringSkin);
    }

    if ((lv_skinSoundID != null) && (CatalogEntryIsValid(c_gameCatalogSound, lv_skinSoundID) == true)) {
        SoundPlayForPlayer(SoundLink(lv_skinSoundID, c_soundIndexAny), lv_speakingPlayer, libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], 100.0, 0.0);
    }

    PlayerGroupClear(libSond_gv_heroVO_HeroTakedownVOAlliesGroup[lv_triggeringPlayer]);
    libSond_gv_heroVO_HeroTakedownVOEnemyWasOnKillingSpree[lv_triggeringPlayer] = false;
    libSond_gv_heroVO_HeroTakedownVOWasComebackKill[lv_triggeringPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOHeroTakedownVOTimerExpires_Init () {
    libSond_gt_HeroVOHeroTakedownVOTimerExpires = TriggerCreate("libSond_gt_HeroVOHeroTakedownVOTimerExpires_Func");
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[0]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[1]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[2]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[3]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[4]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[5]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[6]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[7]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[8]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[9]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[10]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[11]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[12]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[13]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[14]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTakedownVOTimerExpires, libSond_gv_heroVO_HeroTakedownVOTimers[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Allied Takedown VO Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOAlliedTakedownVOTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;
    int lv_teamOfDeadPlayer;
    int lv_speakingPlayer;
    unit lv_deadHero;
    string lv_soundLink;
    int lv_numberOfPlayersOnDeadPlayersTeam;

    // Automatic Variable Declarations
    const int autoA36F91C1_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoA36F91C1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoA36F91C1_ai >= 0 && lv_itPlayer <= autoA36F91C1_ae) || (autoA36F91C1_ai < 0 && lv_itPlayer >= autoA36F91C1_ae) ) ; lv_itPlayer += autoA36F91C1_ai ) {
        if ((EventTimer() == libSond_gv_heroVO_AlliedTakedownVOTimers[lv_itPlayer])) {
            lv_speakingPlayer = lv_itPlayer;
            break;
        }

    }
    lv_teamOfDeadPlayer = libGame_gf_TeamNumberOfPlayer(lv_speakingPlayer);
    libSond_gf_HeroVOPlayHeroLine("AI_UhOh", lv_speakingPlayer, libGame_gf_PlayersOnTeamHeroes(lv_teamOfDeadPlayer, false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOAlliedTakedownVOTimerExpires_Init () {
    libSond_gt_HeroVOAlliedTakedownVOTimerExpires = TriggerCreate("libSond_gt_HeroVOAlliedTakedownVOTimerExpires_Func");
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[1]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[2]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[3]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[4]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[5]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[6]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[7]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[8]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[9]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[10]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[11]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[12]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[13]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[14]);
    TriggerAddEventTimer(libSond_gt_HeroVOAlliedTakedownVOTimerExpires, libSond_gv_heroVO_AlliedTakedownVOTimers[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Hero Team Killed VO Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOHeroTeamKilledVOTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringTimerPlayer;
    playergroup lv_teamPlayerGroup;
    int lv_numberOfPlayersInTeamPlayerGroup;
    int lv_speakingPlayer;

    // Automatic Variable Declarations
    const int auto27B529E8_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto27B529E8_ai = 1;
    playergroup auto50DE4748_g;

    // Variable Initialization
    lv_teamPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto27B529E8_ai >= 0 && lv_itPlayer <= auto27B529E8_ae) || (auto27B529E8_ai < 0 && lv_itPlayer >= auto27B529E8_ae) ) ; lv_itPlayer += auto27B529E8_ai ) {
        if ((EventTimer() == libSond_gv_heroVO_TeamKilledVOTimers[lv_itPlayer])) {
            lv_triggeringTimerPlayer = lv_itPlayer;
            break;
        }

    }
    if ((libGame_gv_players[lv_triggeringTimerPlayer].lv_isDead == false)) {
        return true;
    }

    auto50DE4748_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_triggeringTimerPlayer)].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto50DE4748_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_triggeringTimerPlayer].lv_isDead == true)) {
            PlayerGroupAdd(lv_teamPlayerGroup, lv_itPlayer);
        }

    }
    lv_numberOfPlayersInTeamPlayerGroup = PlayerGroupCount(lv_teamPlayerGroup);
    if ((lv_numberOfPlayersInTeamPlayerGroup == 0)) {
        return true;
    }

    lv_speakingPlayer = PlayerGroupPlayer(lv_teamPlayerGroup, RandomInt(1, lv_numberOfPlayersInTeamPlayerGroup));
    libSond_gf_HeroVOPlayHeroLine("TeamKilled", lv_speakingPlayer, libCore_gv_playerGroupFromPlayer[lv_triggeringTimerPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOHeroTeamKilledVOTimerExpires_Init () {
    libSond_gt_HeroVOHeroTeamKilledVOTimerExpires = TriggerCreate("libSond_gt_HeroVOHeroTeamKilledVOTimerExpires_Func");
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[1]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[2]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[3]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[4]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[5]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[6]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[7]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[8]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[9]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[10]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[11]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[12]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[13]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[14]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroTeamKilledVOTimerExpires, libSond_gv_heroVO_TeamKilledVOTimers[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Hero Celebrate VO Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOHeroCelebrateVOTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringTimerPlayer;
    playergroup lv_teamPlayerGroup;
    int lv_numberOfPlayersInTeamPlayerGroup;
    int lv_speakingPlayer;

    // Automatic Variable Declarations
    const int autoD821B85D_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoD821B85D_ai = 1;

    // Variable Initialization
    lv_teamPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoD821B85D_ai >= 0 && lv_itPlayer <= autoD821B85D_ae) || (autoD821B85D_ai < 0 && lv_itPlayer >= autoD821B85D_ae) ) ; lv_itPlayer += autoD821B85D_ai ) {
        if ((EventTimer() == libSond_gv_heroVO_CelebrateVOTimers[lv_itPlayer])) {
            lv_triggeringTimerPlayer = lv_itPlayer;
            break;
        }

    }
    lv_numberOfPlayersInTeamPlayerGroup = PlayerGroupCount(libSond_gv_heroVO_CelebrateVOAlliesGroup[lv_triggeringTimerPlayer]);
    if ((lv_numberOfPlayersInTeamPlayerGroup == 0)) {
        return true;
    }

    lv_speakingPlayer = PlayerGroupPlayer(libSond_gv_heroVO_CelebrateVOAlliesGroup[lv_triggeringTimerPlayer], RandomInt(1, lv_numberOfPlayersInTeamPlayerGroup));
    libSond_gf_HeroVOPlayHeroLine("Celebrate", lv_speakingPlayer, libCore_gv_playerGroupFromPlayer[lv_triggeringTimerPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOHeroCelebrateVOTimerExpires_Init () {
    libSond_gt_HeroVOHeroCelebrateVOTimerExpires = TriggerCreate("libSond_gt_HeroVOHeroCelebrateVOTimerExpires_Func");
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[1]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[2]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[3]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[4]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[5]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[6]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[7]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[8]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[9]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[10]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[11]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[12]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[13]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[14]);
    TriggerAddEventTimer(libSond_gt_HeroVOHeroCelebrateVOTimerExpires, libSond_gv_heroVO_CelebrateVOTimers[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Celebrate VO For Map Objective 
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOCelebrateVOForMapObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_capturingUnit;
    int lv_ownerOfCapturingUnit;
    unitgroup lv_nearbyAlliedUnits;
    unit lv_itUnit;
    playergroup lv_celebrateVOGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup auto85641299_g;
    int auto85641299_u;
    playergroup auto2FC517C0_g;

    // Variable Initialization
    lv_nearbyAlliedUnits = UnitGroupEmpty();
    lv_celebrateVOGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_capturingUnit = libGame_gf_MapObjectiveCapturingUnit();
    lv_ownerOfCapturingUnit = UnitGetOwner(lv_capturingUnit);
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lv_ownerOfCapturingUnit) == false)) {
        return true;
    }

    if ((lv_capturingUnit != libGame_gv_players[lv_ownerOfCapturingUnit].lv_heroUnit)) {
        lv_capturingUnit = libGame_gv_players[lv_ownerOfCapturingUnit].lv_heroUnit;
    }

    lv_nearbyAlliedUnits = UnitGroupAlliance(lv_ownerOfCapturingUnit, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_capturingUnit), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85641299_g = lv_nearbyAlliedUnits;
    auto85641299_u = UnitGroupCount(auto85641299_g, c_unitCountAll);
    for (;; auto85641299_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto85641299_g, auto85641299_u);
        if (lv_itUnit == null) { break; }
        PlayerGroupAdd(lv_celebrateVOGroup, UnitGetOwner(lv_itUnit));
    }
    auto2FC517C0_g = lv_celebrateVOGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto2FC517C0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_celebrateVOGroup);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOCelebrateVOForMapObjective_Init () {
    libSond_gt_HeroVOCelebrateVOForMapObjective = TriggerCreate("libSond_gt_HeroVOCelebrateVOForMapObjective_Func");
    libGame_gf_MapObjectiveCapturedByUnit(libSond_gt_HeroVOCelebrateVOForMapObjective);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Hero Gets Hit
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOHeroGetsHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != EventPlayer()))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateInvulnerable) == false))) {
            return false;
        }

        if (!((libCore_gf_StormUnitIsHallucination(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit) || (EventUnit() == libGame_gv_players[EventPlayer()].lv_activeVehicle)))) {
            return false;
        }

        if (!(((EventUnitDamageAttemptedVitals() > 1.0) || (EventUnitDamageBehaviorShield() > 1.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSond_gf_HeroVOHeroGetHitResponse((EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield()), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOHeroGetsHit_Init () {
    libSond_gt_HeroVOHeroGetsHit = TriggerCreate("libSond_gt_HeroVOHeroGetsHit_Func");
    TriggerAddEventUnitDamaged(libSond_gt_HeroVOHeroGetsHit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Hero Go Heal
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOHeroGoHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;
    unitgroup lv_nearbyAllyHeroes;
    unit lv_allyHero;

    // Automatic Variable Declarations
    playergroup auto5DAD622D_g;
    unitgroup auto90A4880A_g;
    int auto90A4880A_u;

    // Variable Initialization
    lv_nearbyAllyHeroes = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DAD622D_g = libCore_gv_allHeroPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5DAD622D_g, lv_player);
        if (lv_player < 0) { break; }
        lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
        if ((UnitIsAlive(lv_heroUnit) == true) && (UnitHasBehavior2(lv_heroUnit, "Dead") == false) && (libSond_gv_heroVO_HeroGoHealCalls[lv_player] <= 2) && (libGame_gv_encouragement_DeathTipData[lv_player].lv_inCombat == false) && (UnitHasBehavior2(lv_heroUnit, "HeroGenericFountainDrink@HealingFountainCooldown") == false) && (UnitHasBehavior2(lv_heroUnit, "HallOfStormsProtectionBuff") == false) && (TimerGetElapsed(libGame_gv_gameTimer) > (libSond_gv_heroVO_HeroGoHealLastTimePlayed[lv_player] + libSond_gv_heroVO_HeroGoHealCooldownTime_C)) && (UnitGetPropertyFixed(lv_heroUnit, c_unitPropLifeExpectedPercent, c_unitPropCurrent) <= libSond_gv_heroVO_HeroGoHealHPPercentThreshold_C)) {
            lv_nearbyAllyHeroes = UnitGroupAlliance(lv_player, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lv_heroUnit), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto90A4880A_g = lv_nearbyAllyHeroes;
            auto90A4880A_u = UnitGroupCount(auto90A4880A_g, c_unitCountAll);
            for (;; auto90A4880A_u -= 1) {
                lv_allyHero = UnitGroupUnitFromEnd(auto90A4880A_g, auto90A4880A_u);
                if (lv_allyHero == null) { break; }
                libSond_gv_heroVO_HeroGoHealCalls[lv_player] += 1;
                libSond_gv_heroVO_HeroGoHealLastTimePlayed[lv_player] = TimerGetElapsed(libGame_gv_gameTimer);
                libSond_gf_HeroVOPlayHeroLine("AI_Heal", UnitGetOwner(lv_allyHero), PlayerGroupSingle(lv_player));
                return true;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOHeroGoHeal_Init () {
    libSond_gt_HeroVOHeroGoHeal = TriggerCreate("libSond_gt_HeroVOHeroGoHeal_Func");
    TriggerEnable(libSond_gt_HeroVOHeroGoHeal, false);
    TriggerAddEventTimePeriodic(libSond_gt_HeroVOHeroGoHeal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroVO Talent Chosen VO
//--------------------------------------------------------------------------------------------------
bool libSond_gt_HeroVOTalentChosenVO_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_soundID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 100) <= libSond_gv_heroVO_TalentChoicePercentChance_C)) {
        lv_player = libGame_gf_PlayerChooseTalentPlayer();
        libSond_gf_HeroVOPlayHeroLine("TalentChosen", lv_player, libCore_gv_playerGroupFromPlayer[lv_player]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSond_gt_HeroVOTalentChosenVO_Init () {
    libSond_gt_HeroVOTalentChosenVO = TriggerCreate("libSond_gt_HeroVOTalentChosenVO_Func");
    libGame_gf_PlayerChooseTalent(libSond_gt_HeroVOTalentChosenVO);
}

void libSond_InitTriggers () {
    libSond_gt_IncludeSound_Init();
    libSond_gt_HeroVOCheckForHeroVOAfterAnnouncerEvents_Init();
    libSond_gt_HeroVOPissedTimerExpires_Init();
    libSond_gt_HeroVOHeroTakedownVOTimerExpires_Init();
    libSond_gt_HeroVOAlliedTakedownVOTimerExpires_Init();
    libSond_gt_HeroVOHeroTeamKilledVOTimerExpires_Init();
    libSond_gt_HeroVOHeroCelebrateVOTimerExpires_Init();
    libSond_gt_HeroVOCelebrateVOForMapObjective_Init();
    libSond_gt_HeroVOHeroGetsHit_Init();
    libSond_gt_HeroVOHeroGoHeal_Init();
    libSond_gt_HeroVOTalentChosenVO_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSond_InitLib_completed = false;

void libSond_InitLib () {
    if (libSond_InitLib_completed) {
        return;
    }

    libSond_InitLib_completed = true;

    libSond_InitLibraries();
    libSond_InitVariables();
    libSond_InitTriggers();
}

include "LibCore"
include "LibGame"

