include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibGame_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibUIUI_h"

include "LibSAND_h"

//--------------------------------------------------------------------------------------------------
// Library: Sandbox
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSAND_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libSAND_InitVariables_completed = false;

void libSAND_InitVariables () {
    int init_i;

    if (libSAND_InitVariables_completed) {
        return;
    }

    libSAND_InitVariables_completed = true;

    libSAND_gv_leaderPlayer = -1;
    libSAND_gv_sandboxPanel.lv_sandboxContainer = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_mainPanel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_mainPanelCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_mainPanelLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_mainPanelLockscreenTitle = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_sharedControlCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedSetButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_gameSpeedLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelTitle = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelLeftTeamLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_resetStructureButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnCampsButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnDummyButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameHealingButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_clearAllDummyButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_teamLevelButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_levelFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_levelFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_levelFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamLevelLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamLevelLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleFoWButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMinionsButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_infiniteManaButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_setRespawnTimeMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_respawnTimeFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_setCooldownMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_cooldownFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_setXPMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_setDamageDealtButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageDealtFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageDealtFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageDealtFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamDDSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamDDLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamDDSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamDDLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_setDamageTakenButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageTakenFrameMain = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageTakenFrameLockscreen = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_damageTakenFrameCloseButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamDTSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamDTLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamDTSlider = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamDTLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_resetTalentsButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_resetCooldownsButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_resetHPMPButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_completeQuestsButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_moveHeroButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_instantRespawnButton = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_customButton1 = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyDPSMeterPanel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyDamageTeamLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyDPSTeamLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyDamageMineLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyDPSMineLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyHealingMeterPanel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyHealLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanel.lv_dummyHealPerSecondLabel = c_invalidDialogControlId;
    libSAND_gv_sandboxPanelLockscreenText = StringExternal("Param/Value/lib_SAND_4CD2B511");
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSAND_gv_mainPanelButtonEnabled[init_i] = true;
    }
    libSAND_gv_mapMechanicOn = true;
    libSAND_gv_mapMechanicCheckboxEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libSAND_gv_toggleMinions[init_i] = true;
    }
    libSAND_gv_toggleMinionsCheckboxEnabled = true;
    libSAND_gv_toggleFoWCheckboxEnabled = true;
    libSAND_gv_infiniteManaCheckboxEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSAND_gv_targetDummies[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libSAND_gv_healingDummies[init_i] = UnitGroupEmpty();
    }
}

// Functions
void libSAND_gf_SandboxSetLeaderPlayer (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoE421C519_ae = libCore_gv_bALMaxTeams;
    const int autoE421C519_ai = 1;
    playergroup auto6316E005_g;

    // Variable Initialization

    // Implementation
    libSAND_gv_leaderPlayer = lp_player;
    lv_itTeam = 1;
    for ( ; ( (autoE421C519_ai >= 0 && lv_itTeam <= autoE421C519_ae) || (autoE421C519_ai < 0 && lv_itTeam >= autoE421C519_ae) ) ; lv_itTeam += autoE421C519_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_F3EA6B87", "A", libSAND_gf_FormatSandboxPlayerName(libSAND_gv_leaderPlayer, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_F3EA6B87", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_49EF0A2E")));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_F3EA6B87"));
    }
    TextExpressionSetToken("Param/Expression/lib_SAND_2427D080", "A", PlayerName(libSAND_gv_leaderPlayer));
    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_mainPanelLockscreenTitle, TextExpressionAssemble("Param/Expression/lib_SAND_2427D080"), PlayerGroupAll());
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_sharedControlCheckbox, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, PlayerGroupAll(), true);
    auto6316E005_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6316E005_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libSAND_gf_HideAllSubpanelsforPlayer(lv_itPlayer);
    }
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_sharedControlCheckbox, libCore_gv_playerGroupFromPlayer[libSAND_gv_leaderPlayer], true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, libCore_gv_playerGroupFromPlayer[libSAND_gv_leaderPlayer], false);
    if ((libSAND_gv_sharedControl == true)) {
        DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, PlayerGroupAll(), false);
    }

}

text libSAND_gf_TeamName (int lp_team) {
    // Automatic Variable Declarations
    int auto3362442E_val;

    // Implementation
    auto3362442E_val = lp_team;
    if (auto3362442E_val == libGame_gv_teamOrderIndex_C) {
        return StringExternal("Param/Value/lib_SAND_36ABB139");
    }
    else if (auto3362442E_val == libGame_gv_teamChaosIndex_C) {
        return StringExternal("Param/Value/lib_SAND_1FF84344");
    }
    else {
    }
    return null;
}

text libSAND_gf_FormatSandboxItemName (text lp_name) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SAND_5C5B67F4", "A", lp_name);
    return TextExpressionAssemble("Param/Expression/lib_SAND_5C5B67F4");
}

text libSAND_gf_FormatSandboxItemValue (text lp_value) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_SAND_80DA92B5", "A", lp_value);
    return TextExpressionAssemble("Param/Expression/lib_SAND_80DA92B5");
}

text libSAND_gf_FormatSandboxPlayerName (int lp_player, int lp_forTeam) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = PlayerGroupEmpty();

    // Implementation
    lv_group = libGame_gf_PlayersOnTeamHeroes(lp_forTeam, false);
    if ((PlayerGroupHasPlayer(lv_group, lp_player) == true)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_AFF88C9B", "A", PlayerName(lp_player));
        return TextExpressionAssemble("Param/Expression/lib_SAND_AFF88C9B");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_SAND_CFB3D9E3", "A", PlayerName(lp_player));
        return TextExpressionAssemble("Param/Expression/lib_SAND_CFB3D9E3");
    }
}

bool libSAND_gf_PlayerHeroIsDead (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
        if ((UnitIsAlive(libGame_gv_players[lp_player].lv_heroUnit) == true) && ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "Dead") == false) || (UnitBehaviorDurationTotal(libGame_gv_players[lp_player].lv_heroUnit, "Dead") <= 0.0) || (UnitBehaviorDurationTotal(libGame_gv_players[lp_player].lv_heroUnit, "Dead") > 1000.0))) {
            return false;
        }

    }
    return true;
}

bool libSAND_gf_PlayerIsDead (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
        if ((UnitIsAlive(libGame_gv_players[lp_player].lv_heroUnit) == true) && ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "Dead") == false) || (UnitBehaviorDurationTotal(libGame_gv_players[lp_player].lv_heroUnit, "Dead") <= 0.0) || (UnitBehaviorDurationTotal(libGame_gv_players[lp_player].lv_heroUnit, "Dead") > 1000.0))) {
            return false;
        }

    }
    return true;
}

void libSAND_gf_SandboxPanelShowHideDummyPanel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_dummyDPSMeterPanel, lp_forPlayers, lp_showHide);
}

void libSAND_gf_SandboxPanelShowHideHealingDummyPanel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_dummyHealingMeterPanel, lp_forPlayers, lp_showHide);
}

void libSAND_gf_SandboxPanelSetMapMechanicUIText (text lp_titleText, text lp_leftTeamLabelText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelTitle, lp_titleText, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelLeftTeamLabel, lp_leftTeamLabelText, PlayerGroupAll());
}

void libSAND_gf_SandboxTurnButtonListenerTriggersOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libSAND_gt_SharedControlCheckboxClicked, lp_onOff);
    TriggerEnable(libSAND_gt_GameSpeedChanged, lp_onOff);
    TriggerEnable(libSAND_gt_SetGameSpeedCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SetGameSpeedSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SetGameSpeedMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SpawnCampsButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_MapMechanicButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_MapMechanicCheckboxPressed, lp_onOff);
    TriggerEnable(libSAND_gt_MapMechanicCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ResetStructuresButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SpawnDummyButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SpawnDummyCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_SpawnDummyDummyButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ClearAllDummiesButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_TeamLevelMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_TeamLevelSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_TeamLevelSetLevelButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_TeamLevelCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleFoWButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleFoWCheckboxPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleFoWCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleMinionsButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleMinionsCheckboxPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ToggleMinionsCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_InfiniteManaButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_InfiniteManaCheckboxPressed, lp_onOff);
    TriggerEnable(libSAND_gt_InfiniteManaCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_CooldownMultiplierCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_CooldownMultiplierMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_CooldownMultiplierSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_CooldownMultiplierSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_CooldownMultiplierControllerSpecificAbilities, lp_onOff);
    TriggerEnable(libSAND_gt_XPMultiplierSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_XPMultiplierMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_XPMultiplierSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_XPMultiplierCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageDealtSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_DamageDealtMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageDealtSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageDealtCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageTakenSliderValueChanged, lp_onOff);
    TriggerEnable(libSAND_gt_DamageTakenMainButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageTakenSetButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_DamageTakenCloseButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ResetCDButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ResetHPMapButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_ResetTalentsButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_CompleteQuestsButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_MovePlayerHereButtonPressed, lp_onOff);
    TriggerEnable(libSAND_gt_InstantRespawnButtonPressed, lp_onOff);
}

trigger auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_Trigger = null;
int auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_player;
bool auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_enableorDisable;

void libSAND_gf_EnableDisableMainPanelButtonsforPlayer (int lp_player, bool lp_enableorDisable) {
    auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_player = lp_player;
    auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_enableorDisable = lp_enableorDisable;

    if (auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_Trigger == null) {
        auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_Trigger = TriggerCreate("auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_Trigger, false, false);
}

bool auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_player;
    bool lp_enableorDisable = auto_libSAND_gf_EnableDisableMainPanelButtonsforPlayer_lp_enableorDisable;

    // Variable Declarations
    playergroup lv_playerGroupofPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupofPlayer = PlayerGroupSingle(lp_player);

    // Implementation
    libSAND_gv_mainPanelButtonEnabled[lp_player] = lp_enableorDisable;
    if ((lp_player == libSAND_gv_leaderPlayer)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_sharedControlCheckbox, lv_playerGroupofPlayer, lp_enableorDisable);
    }

    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) == 0.0)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, lv_playerGroupofPlayer, lp_enableorDisable);
        if ((libSAND_gv_moveHereOnCooldown[lp_player] == false)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_moveHeroButton, lv_playerGroupofPlayer, lp_enableorDisable);
        }

        if ((libSAND_gv_resetStructureOnCooldown == false)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetStructureButton, lv_playerGroupofPlayer, lp_enableorDisable);
        }

        if ((libSAND_gv_instantRespawnOnCooldown[lp_player] == false)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, lv_playerGroupofPlayer, lp_enableorDisable);
        }

    }

    if ((libSAND_gv_resetCDOnCooldown[lp_player] == false)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, lv_playerGroupofPlayer, lp_enableorDisable);
    }

    if ((libSAND_gv_completeQuestOnCooldown[lp_player] == false)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, lv_playerGroupofPlayer, lp_enableorDisable);
    }

    if ((libSAND_gv_resetHPMPOnCooldown[lp_player] == false)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, lv_playerGroupofPlayer, lp_enableorDisable);
    }

    if ((libSAND_gv_mapMechanicButtonDisabled == false)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMechanicButton, lv_playerGroupofPlayer, lp_enableorDisable);
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleFoWButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnCampsButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_clearAllDummyButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_gameSpeedButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_teamLevelButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_setXPMultiplierButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_setRespawnTimeMultiplierButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_setCooldownMultiplierButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_setDamageDealtButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_setDamageTakenButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetTalentsButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_infiniteManaButton, lv_playerGroupofPlayer, lp_enableorDisable);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_mainPanelCloseButton, lv_playerGroupofPlayer, lp_enableorDisable);
    return true;
}

trigger auto_libSAND_gf_HideAllSubpanelsforPlayer_Trigger = null;
int auto_libSAND_gf_HideAllSubpanelsforPlayer_lp_player;

void libSAND_gf_HideAllSubpanelsforPlayer (int lp_player) {
    auto_libSAND_gf_HideAllSubpanelsforPlayer_lp_player = lp_player;

    if (auto_libSAND_gf_HideAllSubpanelsforPlayer_Trigger == null) {
        auto_libSAND_gf_HideAllSubpanelsforPlayer_Trigger = TriggerCreate("auto_libSAND_gf_HideAllSubpanelsforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libSAND_gf_HideAllSubpanelsforPlayer_Trigger, false, false);
}

bool auto_libSAND_gf_HideAllSubpanelsforPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSAND_gf_HideAllSubpanelsforPlayer_lp_player;

    // Variable Declarations
    playergroup lv_playerGroupofPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupofPlayer = PlayerGroupSingle(lp_player);

    // Implementation
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_infiniteManaFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_levelFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_spawnDummyFrameMain, lv_playerGroupofPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameMain, lv_playerGroupofPlayer, false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lp_player, true);
    return true;
}

void libSAND_gf_SBXAddTownData (unitgroup lp_buildingUnitGroup, int lp_townNumber, text lp_townName) {
    // Variable Declarations
    unit lv_itBuilding;
    int lv_itBuildingNum;

    // Automatic Variable Declarations
    unitgroup auto920FEA1E_g;
    int auto920FEA1E_u;
    unitgroup autoDB6218DF_g;
    int autoDB6218DF_u;

    // Variable Initialization

    // Implementation
    libSAND_gv_sBXTowns[lp_townNumber].lv_townName = lp_townName;
    auto920FEA1E_g = lp_buildingUnitGroup;
    auto920FEA1E_u = UnitGroupCount(auto920FEA1E_g, c_unitCountAll);
    for (;; auto920FEA1E_u -= 1) {
        lv_itBuilding = UnitGroupUnitFromEnd(auto920FEA1E_g, auto920FEA1E_u);
        if (lv_itBuilding == null) { break; }
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_itBuilding) == libGame_ge_TownStructureTypes_TownHall)) {
            lv_itBuildingNum += 1;
            libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingFacing = UnitGetFacing(lv_itBuilding);
            libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingPosition = UnitGetPosition(lv_itBuilding);
            libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingType = UnitGetType(lv_itBuilding);
            libSAND_gv_sBXTowns[lp_townNumber].lv_owningPlayer = UnitGetOwner(lv_itBuilding);
            libSAND_gv_sBXTowns[lp_townNumber].lv_townHallUnit = lv_itBuilding;
            UnitGroupRemove(lp_buildingUnitGroup, lv_itBuilding);
            break;
        }

    }
    autoDB6218DF_g = lp_buildingUnitGroup;
    autoDB6218DF_u = UnitGroupCount(autoDB6218DF_g, c_unitCountAll);
    for (;; autoDB6218DF_u -= 1) {
        lv_itBuilding = UnitGroupUnitFromEnd(autoDB6218DF_g, autoDB6218DF_u);
        if (lv_itBuilding == null) { break; }
        lv_itBuildingNum += 1;
        libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingFacing = UnitGetFacing(lv_itBuilding);
        libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingPosition = UnitGetPosition(lv_itBuilding);
        libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itBuildingNum].lv_buildingType = UnitGetType(lv_itBuilding);
    }
}

trigger auto_libSAND_gf_SBXRespawnTown_Trigger = null;
int auto_libSAND_gf_SBXRespawnTown_lp_townNumber;

void libSAND_gf_SBXRespawnTown (int lp_townNumber) {
    auto_libSAND_gf_SBXRespawnTown_lp_townNumber = lp_townNumber;

    if (auto_libSAND_gf_SBXRespawnTown_Trigger == null) {
        auto_libSAND_gf_SBXRespawnTown_Trigger = TriggerCreate("auto_libSAND_gf_SBXRespawnTown_TriggerFunc");
    }

    TriggerExecute(auto_libSAND_gf_SBXRespawnTown_Trigger, false, false);
}

bool auto_libSAND_gf_SBXRespawnTown_TriggerFunc (bool testConds, bool runActions) {
    int lp_townNumber = auto_libSAND_gf_SBXRespawnTown_lp_townNumber;

    // Variable Declarations
    unitgroup lv_townBuildings;
    unitgroup lv_heroesGroup;
    int lv_owningPlayer;
    int lv_enemyTeam;
    unit lv_itUnit;
    int lv_itStructure;
    bool lv_structureDead;
    fixed lv_curseTimeRemaining;

    // Automatic Variable Declarations
    unitgroup autoF927FC5F_g;
    int autoF927FC5F_u;
    unitgroup autoCE991AC8_g;
    int autoCE991AC8_u;
    const int auto0AA97BFC_ae = libSAND_gv_sBXTownStructureMaxCount_C;
    const int auto0AA97BFC_ai = 1;
    unitgroup autoC8763B38_g;
    int autoC8763B38_u;

    // Variable Initialization
    lv_townBuildings = UnitGroupEmpty();
    lv_heroesGroup = UnitGroupEmpty();
    lv_owningPlayer = libGame_gv_townTownData[lp_townNumber].lv_owner;
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(libSAND_gv_sBXTowns[lp_townNumber].lv_owningPlayer);
    lv_structureDead = true;

    // Implementation
    lv_townBuildings = UnitGroup(null, lv_owningPlayer, libGame_gv_townTownData[lp_townNumber].lv_townRegion, libCore_gv_filtersStructure, 0);
    lv_heroesGroup = UnitGroup(null, c_playerAny, libGame_gv_townTownData[lp_townNumber].lv_townRegion, libCore_gv_filtersHeroic, 0);
    libGame_gv_townTownData[lp_townNumber].lv_structureCount = 0;
    libGame_gv_townTownData[lp_townNumber].lv_structuresAlive = 0;
    autoF927FC5F_g = lv_heroesGroup;
    autoF927FC5F_u = UnitGroupCount(autoF927FC5F_g, c_unitCountAll);
    for (;; autoF927FC5F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoF927FC5F_g, autoF927FC5F_u);
        if (lv_itUnit == null) { break; }
        if ((UnitGetType(lv_itUnit) == "HeroRagnarosMoltenCore")) {
            UnitBehaviorRemove(lv_itUnit, "HeroRagnarosMoltenCore@Duration", 1);
        }

    }
    if ((UnitIsValid(libGame_gv_townTownData[lp_townNumber].lv_lootBannerUnit) == true)) {
        UnitRemove(libGame_gv_townTownData[lp_townNumber].lv_lootBannerUnit);
        libGame_gv_townTownData[lp_townNumber].lv_lootBannerUnit = null;
    }

    libSAND_gf_SBXRemoveDeathModelsInRegion(libGame_gv_townTownData[lp_townNumber].lv_townRegion);
    autoCE991AC8_g = lv_townBuildings;
    autoCE991AC8_u = UnitGroupCount(autoCE991AC8_g, c_unitCountAll);
    for (;; autoCE991AC8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoCE991AC8_g, autoCE991AC8_u);
        if (lv_itUnit == null) { break; }
        if (((UnitGetType(lv_itUnit) == "TownCannonTowerDead") || (UnitIsAlive(lv_itUnit) == false))) {
            UnitRemove(lv_itUnit);
            UnitGroupRemove(lv_townBuildings, lv_itUnit);
        }
        else {
            UnitSetPropertyFixed(lv_itUnit, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
        }
    }
    Wait(0.125, c_timeGame);
    lv_itStructure = 1;
    for ( ; ( (auto0AA97BFC_ai >= 0 && lv_itStructure <= auto0AA97BFC_ae) || (auto0AA97BFC_ai < 0 && lv_itStructure >= auto0AA97BFC_ae) ) ; lv_itStructure += auto0AA97BFC_ai ) {
        if ((libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itStructure].lv_buildingPosition == null)) {
            break;
        }

        lv_structureDead = true;
        autoC8763B38_g = lv_townBuildings;
        autoC8763B38_u = UnitGroupCount(autoC8763B38_g, c_unitCountAll);
        for (;; autoC8763B38_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoC8763B38_g, autoC8763B38_u);
            if (lv_itUnit == null) { break; }
            if ((UnitGetPosition(lv_itUnit) == libSAND_gv_sBXTowns[lp_townNumber].lv_structureArray[lv_itStructure].lv_buildingPosition)) {
                UnitGroupRemove(lv_townBuildings, lv_itUnit);
                lv_structureDead = false;
                if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) == libGame_ge_TownStructureTypes_Moonwell)) {
                }

                break;
            }

        }
        if ((lv_structureDead == true)) {
            libSAND_gf_SBXBuildTownStructure(lp_townNumber, lv_itStructure, lv_curseTimeRemaining);
        }

    }
    return true;
}

void libSAND_gf_SBXBuildTownStructure (int lp_townNum, int lp_structureNum, fixed lp_curseTimer) {
    // Variable Declarations
    unit lv_newUnit;
    int lv_itTower;
    int lv_enemyTeam;
    int lv_itPlayer;
    playergroup lv_allyPlayers;

    // Automatic Variable Declarations
    int auto3C3B4C18_val;
    playergroup autoBA958CCE_g;
    const int auto1014E78F_ae = libGame_gv_moonwellMaxMoonwellCount;
    int auto1014E78F_var;

    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(libSAND_gv_sBXTowns[lp_townNum].lv_owningPlayer);
    lv_allyPlayers = PlayerGroupEmpty();

    // Implementation
    UnitCreate(1, libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingType, c_unitCreateIgnorePlacement, libSAND_gv_sBXTowns[lp_townNum].lv_owningPlayer, libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingPosition, libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingFacing);
    lv_newUnit = UnitLastCreated();
    auto3C3B4C18_val = libGame_gf_TownGetTownStructurePresetFromUnit(lv_newUnit);
    if (auto3C3B4C18_val == libGame_ge_TownStructureTypes_Moonwell) {
        UnitCreateEffectPoint(lv_newUnit, "MoonwellSpawnPushbackTargetSearch", libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingPosition);
    }
    else if (auto3C3B4C18_val == libGame_ge_TownStructureTypes_CannonTower) {
        UnitCreateEffectPoint(lv_newUnit, "TowerSpawnPushbackTargetSearch", libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingPosition);
    }
    else if (auto3C3B4C18_val == libGame_ge_TownStructureTypes_TownHall) {
        if ((UnitGetType(lv_newUnit) == "TownTownHallL2")) {
            UnitCreateEffectPoint(lv_newUnit, "FortSpawnPushbackTargetSearch", libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingPosition);
        }

        if ((UnitGetType(lv_newUnit) == "TownTownHallL3")) {
            UnitCreateEffectPoint(lv_newUnit, "KeepSpawnPushbackTargetSearch", libSAND_gv_sBXTowns[lp_townNum].lv_structureArray[lp_structureNum].lv_buildingPosition);
        }

    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(lv_newUnit, "Signal PlayBuild");
    libNtve_gf_SendActorMessageToUnit(lv_newUnit, "AnimClear Build 0.000000");
    if ((lp_curseTimer > 0.0) && ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_newUnit) == libGame_ge_TownStructureTypes_TownHall) || (libGame_gf_TownGetTownStructurePresetFromUnit(lv_newUnit) == libGame_ge_TownStructureTypes_CannonTower) || (libGame_gf_TownGetTownStructurePresetFromUnit(lv_newUnit) == libGame_ge_TownStructureTypes_Gate))) {
        UnitBehaviorAdd(lv_newUnit, "RavenLordsCurseStructures", lv_newUnit, 1);
        UnitBehaviorSetDuration(lv_newUnit, "RavenLordsCurseStructures", lp_curseTimer);
        if ((lp_curseTimer > 5.0)) {
            UnitBehaviorAdd(lv_newUnit, "RavenLordsCurseStructuresWarning", lv_newUnit, 1);
            UnitBehaviorSetDuration(lv_newUnit, "RavenLordsCurseStructuresWarning", (lp_curseTimer - 5.0));
        }

    }

    if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_newUnit) == libGame_ge_TownStructureTypes_Moonwell)) {
        lv_allyPlayers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_newUnit)), false);
        autoBA958CCE_g = lv_allyPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoBA958CCE_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericFountainDrink@HealingFountainCooldown") == true)) {
                UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_itPlayer], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
                libNtve_gf_SendActorMessageToUnit(lv_newUnit, "Signal MoonwellDrink");
                UnitGroupAdd(libGame_gv_moonwellTextTagsUnitGroup[lv_itPlayer], lv_newUnit);
                TextTagCreate((StringExternal("Param/Value/lib_SAND_B3C25D85") + FixedToText(UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericFountainDrink@HealingFountainCooldown"), 0)), 20, UnitGetPosition(lv_newUnit), 4.2, false, false, PlayerGroupSingle(lv_itPlayer));
                auto1014E78F_var = 1;
                for ( ; auto1014E78F_var <= auto1014E78F_ae; auto1014E78F_var += 1 ) {
                    if ((UnitIsAlive(libGame_gv_moonwellTextTagsUnit[lv_itPlayer][auto1014E78F_var]) == false)) {
                        libGame_gv_moonwellTextTags[lv_itPlayer][auto1014E78F_var] = TextTagLastCreated();
                        libGame_gv_moonwellTextTagsUnit[lv_itPlayer][auto1014E78F_var] = lv_newUnit;
                        break;
                    }

                }
            }
            else {
                UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_itPlayer], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
                libNtve_gf_SendActorMessageToUnit(lv_newUnit, "Signal MoonwellReset");
            }
        }
    }

}

void libSAND_gf_SBXRemoveDeathModelsInRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy Immediate", "Model", "ScopeContains _DeathModel");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy Immediate", "Unit", "ScopeContains _DeathModel");
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libSAND_gf_InstantRespawnPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    if (true) {
        if ((libGame_gv_players[lp_player].lv_respawnTimer != null) && (TimerIsPaused(libGame_gv_players[lp_player].lv_respawnTimer) == false)) {
            TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, 0.0625, false, c_timeGame);
        }

    }
}

void libSAND_gf_ResetHPMapForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoDAD56B39_g;
    int autoDAD56B39_u;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(libGame_gv_players[lp_player].lv_heroUnit) == true)) {
        UnitSetPropertyFixed(libGame_gv_players[lp_player].lv_heroUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libGame_gv_players[lp_player].lv_heroUnit, c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(libGame_gv_players[lp_player].lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }

    autoDAD56B39_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    autoDAD56B39_u = UnitGroupCount(autoDAD56B39_g, c_unitCountAll);
    for (;; autoDAD56B39_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoDAD56B39_g, autoDAD56B39_u);
        if (lv_itUnit == null) { break; }
        UnitSetPropertyFixed(lv_itUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
    }
}

int libSAND_gf_GameSpeedIndex (int lp_speed) {
    // Automatic Variable Declarations
    int auto79538885_val;

    // Implementation
    auto79538885_val = lp_speed;
    if (auto79538885_val == c_gameSpeedSlower) {
        return 1;
    }
    else if (auto79538885_val == c_gameSpeedSlow) {
        return 2;
    }
    else if (auto79538885_val == c_gameSpeedNormal) {
        return 3;
    }
    else if (auto79538885_val == c_gameSpeedFast) {
        return 4;
    }
    else if (auto79538885_val == c_gameSpeedFaster) {
        return 5;
    }
    else {
    }
    return 3;
}

int libSAND_gf_GameSpeedFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int autoFF804770_val;

    // Implementation
    autoFF804770_val = lp_index;
    if (autoFF804770_val == libSAND_gf_GameSpeedIndex(c_gameSpeedSlower)) {
        return c_gameSpeedSlower;
    }
    else if (autoFF804770_val == libSAND_gf_GameSpeedIndex(c_gameSpeedSlow)) {
        return c_gameSpeedSlow;
    }
    else if (autoFF804770_val == libSAND_gf_GameSpeedIndex(c_gameSpeedNormal)) {
        return c_gameSpeedNormal;
    }
    else if (autoFF804770_val == libSAND_gf_GameSpeedIndex(c_gameSpeedFast)) {
        return c_gameSpeedFast;
    }
    else if (autoFF804770_val == libSAND_gf_GameSpeedIndex(c_gameSpeedFaster)) {
        return c_gameSpeedFaster;
    }
    else {
    }
    return c_gameSpeedNormal;
}

text libSAND_gf_GameSpeedText (int lp_speed) {
    // Automatic Variable Declarations
    int auto63047045_val;

    // Implementation
    auto63047045_val = lp_speed;
    if (auto63047045_val == c_gameSpeedSlower) {
        return StringExternal("Param/Value/lib_SAND_AAC72A2B");
    }
    else if (auto63047045_val == c_gameSpeedSlow) {
        return StringExternal("Param/Value/lib_SAND_74FA7B0E");
    }
    else if (auto63047045_val == c_gameSpeedNormal) {
        return StringExternal("Param/Value/lib_SAND_D3E810F2");
    }
    else if (auto63047045_val == c_gameSpeedFast) {
        return StringExternal("Param/Value/lib_SAND_876AFBB8");
    }
    else if (auto63047045_val == c_gameSpeedFaster) {
        return StringExternal("Param/Value/lib_SAND_907A4C2D");
    }
    else {
    }
    return StringExternal("Param/Value/lib_SAND_1BC8ABCB");
}

void libSAND_gf_SetTeamLevel (int lp_player, int lp_level, int lp_teamIndex) {
    // Variable Declarations
    int lv_currentLevel;
    int lv_newLevel;
    fixed lv_xP;
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;
    int lv_heroIndex;

    // Automatic Variable Declarations
    playergroup autoDA8D946A_g;
    const int auto585DDF9B_ae = libCore_gv_bALMaxTeams;
    const int auto585DDF9B_ai = 1;
    playergroup autoAFE86414_g;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_currentLevel = UnitXPGetCurrentLevel(libGame_gv_players[PlayerGroupPlayer(lv_activePlayerGroup, 1)].lv_heroUnit, null);
    lv_newLevel = MaxI(1, MinI(libCore_gv_bALMaxLevel, lp_level));
    if ((lv_newLevel == lv_currentLevel)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_4A2AC686", "A", IntToText(lp_level));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_player], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_4A2AC686"));
        return ;
    }

    lv_xP = libCore_gf_GetTotalXPForLevel(lv_newLevel);
    Wait(0.0625, c_timeGame);
    autoDA8D946A_g = lv_activePlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoDA8D946A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        libSprt_gf_DEBUGSpawnorSwapHeroForPlayer(lv_heroIndex, libGame_gf_LoadoutGetPlayerSkinForHero(lv_itPlayer, lv_heroIndex), libGame_gf_LoadoutGetPlayerMountForHero(lv_itPlayer, lv_heroIndex), lv_xP, lv_itPlayer, 0);
    }
    lv_itTeam = 1;
    for ( ; ( (auto585DDF9B_ai >= 0 && lv_itTeam <= auto585DDF9B_ae) || (auto585DDF9B_ai < 0 && lv_itTeam >= auto585DDF9B_ae) ) ; lv_itTeam += auto585DDF9B_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_17A1A293", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_17A1A293", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_DA7797F5")));
        TextExpressionSetToken("Param/Expression/lib_SAND_17A1A293", "B", libSAND_gf_FormatSandboxItemValue(IntToText(lv_newLevel)));
        TextExpressionSetToken("Param/Expression/lib_SAND_17A1A293", "D", libSAND_gf_TeamName(lp_teamIndex));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_17A1A293"));
    }
    Wait(0.0625, c_timeGame);
    autoAFE86414_g = lv_activePlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoAFE86414_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        UnitIssueOrder(libGame_gv_players[lv_itPlayer].lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetFacing(libGame_gv_players[lv_itPlayer].lv_heroUnit, PointGetFacing(libGame_gv_players[lv_itPlayer].lv_spawnPoint), 0.0);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_itPlayer, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), 0.0, -1, 0.0, false);
    }
}

void libSAND_gf_UpdateScaling (int lp_level) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int auto8A835CB0_ae;
    const int auto8A835CB0_ai = 1;
    int auto3256E1CB_ae;
    const int auto3256E1CB_ai = 1;

    // Variable Initialization

    // Implementation
    libGame_gv_scalingTicks = lp_level;
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }

    auto8A835CB0_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto8A835CB0_ai >= 0 && lv_itCamp <= auto8A835CB0_ae) || (auto8A835CB0_ai < 0 && lv_itCamp >= auto8A835CB0_ae) ) ; lv_itCamp += auto8A835CB0_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex)) == false)) {
            libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
        }

    }
    libGame_gf_JungleUpdateScalingForCamps();
    auto3256E1CB_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto3256E1CB_ai >= 0 && lv_itCamp <= auto3256E1CB_ae) || (auto3256E1CB_ai < 0 && lv_itCamp >= auto3256E1CB_ae) ) ; lv_itCamp += auto3256E1CB_ai ) {
        libMapM_gf_JungleUpdateTextTagForCamp(lv_itCamp);
    }
}

void libSAND_gf_SetTeamXPMultiplier (int lp_player, int lp_newXPMultiplier, int lp_teamIndex) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto3BFBBBEC_ae = libCore_gv_bALMaxTeams;
    const int auto3BFBBBEC_ai = 1;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_itTeam = 1;
    for ( ; ( (auto3BFBBBEC_ai >= 0 && lv_itTeam <= auto3BFBBBEC_ae) || (auto3BFBBBEC_ai < 0 && lv_itTeam >= auto3BFBBBEC_ae) ) ; lv_itTeam += auto3BFBBBEC_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_C71D92D7", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_C71D92D7", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_B2DBFA71")));
        TextExpressionSetToken("Param/Expression/lib_SAND_C71D92D7", "D", libSAND_gf_TeamName(lp_teamIndex));
        TextExpressionSetToken("Param/Expression/lib_SAND_C71D92D7", "B", libSAND_gf_FormatSandboxItemValue((IntToText(lp_newXPMultiplier) + StringExternal("Param/Value/lib_SAND_92DEB5AF"))));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_C71D92D7"));
    }
    libGame_gv_teams[lp_teamIndex].lv_xPMultiplier = (lp_newXPMultiplier * 0.01);
}

void libSAND_gf_SetTeamRespawnTimeMultiplier (int lp_player, int lp_newRespawnTimeMultiplier, int lp_teamIndex) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto9344F41B_ae = libCore_gv_bALMaxTeams;
    const int auto9344F41B_ai = 1;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_itTeam = 1;
    for ( ; ( (auto9344F41B_ai >= 0 && lv_itTeam <= auto9344F41B_ae) || (auto9344F41B_ai < 0 && lv_itTeam >= auto9344F41B_ae) ) ; lv_itTeam += auto9344F41B_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_D368990A", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_D368990A", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_AA6C548C")));
        TextExpressionSetToken("Param/Expression/lib_SAND_D368990A", "D", libSAND_gf_TeamName(lp_teamIndex));
        TextExpressionSetToken("Param/Expression/lib_SAND_D368990A", "B", libSAND_gf_FormatSandboxItemValue((IntToText(lp_newRespawnTimeMultiplier) + StringExternal("Param/Value/lib_SAND_2445160D"))));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_D368990A"));
    }
    libGame_gv_teams[lp_teamIndex].lv_respawnTimeMultiplier = (lp_newRespawnTimeMultiplier * 0.01);
}

void libSAND_gf_SetTeamCooldownMultiplier (int lp_player, int lp_newCooldownMultiplier, int lp_teamIndex) {
    // Variable Declarations
    fixed lv_cooldownMultiplier;
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto0FA36418_ae = libCore_gv_bALMaxTeams;
    const int auto0FA36418_ai = 1;
    playergroup auto61225E87_g;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_itTeam = 1;
    for ( ; ( (auto0FA36418_ai >= 0 && lv_itTeam <= auto0FA36418_ae) || (auto0FA36418_ai < 0 && lv_itTeam >= auto0FA36418_ae) ) ; lv_itTeam += auto0FA36418_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_B86D84BE", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_B86D84BE", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_9E6A6BB7")));
        TextExpressionSetToken("Param/Expression/lib_SAND_B86D84BE", "D", libSAND_gf_TeamName(lp_teamIndex));
        TextExpressionSetToken("Param/Expression/lib_SAND_B86D84BE", "B", libSAND_gf_FormatSandboxItemValue((IntToText(lp_newCooldownMultiplier) + StringExternal("Param/Value/lib_SAND_C8A8D4FA"))));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_B86D84BE"));
    }
    lv_cooldownMultiplier = (0.01 * lp_newCooldownMultiplier);
    lv_cooldownMultiplier = MaxF(0.01, lv_cooldownMultiplier);
    auto61225E87_g = lv_activePlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto61225E87_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", lv_itPlayer, lv_cooldownMultiplier);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Charge]", lv_itPlayer, lv_cooldownMultiplier);
    }
}

void libSAND_gf_SetTeamDamageDealt (int lp_player, int lp_newDamageMultiplier, int lp_teamIndex) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoE6B0F83C_ae = libCore_gv_bALMaxTeams;
    const int autoE6B0F83C_ai = 1;
    playergroup auto25EB33CF_g;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_itTeam = 1;
    for ( ; ( (autoE6B0F83C_ai >= 0 && lv_itTeam <= autoE6B0F83C_ae) || (autoE6B0F83C_ai < 0 && lv_itTeam >= autoE6B0F83C_ae) ) ; lv_itTeam += autoE6B0F83C_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_CBBA6FCA", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_CBBA6FCA", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_973CDB85")));
        TextExpressionSetToken("Param/Expression/lib_SAND_CBBA6FCA", "D", libSAND_gf_TeamName(lp_teamIndex));
        TextExpressionSetToken("Param/Expression/lib_SAND_CBBA6FCA", "B", libSAND_gf_FormatSandboxItemValue((IntToText(lp_newDamageMultiplier) + StringExternal("Param/Value/lib_SAND_4AE5CE72"))));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_CBBA6FCA"));
    }
    auto25EB33CF_g = lv_activePlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto25EB33CF_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerModifyPropertyInt(lv_itPlayer, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, lp_newDamageMultiplier);
    }
}

void libSAND_gf_SetTeamDamageTaken (int lp_player, int lp_newDamageMultiplier, int lp_teamIndex) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_activePlayerGroup;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto1189E339_ae = libCore_gv_bALMaxTeams;
    const int auto1189E339_ai = 1;
    playergroup autoE452FEAD_g;

    // Variable Initialization
    lv_activePlayerGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_teamIndex, false), lv_activePlayerGroup);
    lv_itTeam = 1;
    for ( ; ( (auto1189E339_ai >= 0 && lv_itTeam <= auto1189E339_ae) || (auto1189E339_ai < 0 && lv_itTeam >= auto1189E339_ae) ) ; lv_itTeam += auto1189E339_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_624473C5", "A", libSAND_gf_FormatSandboxPlayerName(lp_player, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_624473C5", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C6D359D1")));
        TextExpressionSetToken("Param/Expression/lib_SAND_624473C5", "D", libSAND_gf_TeamName(lp_teamIndex));
        TextExpressionSetToken("Param/Expression/lib_SAND_624473C5", "B", libSAND_gf_FormatSandboxItemValue((IntToText(lp_newDamageMultiplier) + StringExternal("Param/Value/lib_SAND_97A532C5"))));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_624473C5"));
    }
    autoE452FEAD_g = lv_activePlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE452FEAD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerModifyPropertyInt(lv_itPlayer, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, lp_newDamageMultiplier);
    }
}

void libSAND_gf_SpawnDummy (bool lp_target, int lp_player) {
    // Variable Declarations
    bool lv_isTargetDummy;
    string lv_dummyUnitType;
    int lv_forPlayer;
    unit lv_heroUnitGroup;
    point lv_pos;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGroupCount(libSAND_gv_targetDummies[lp_player], c_unitCountAlive) + UnitGroupCount(libSAND_gv_healingDummies[lp_player], c_unitCountAlive)) >= libSAND_gv_spawningDummyMaxCount_C)) {
        SoundPlayForPlayer(SoundLink("UI_GenericError_Heroes", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_SAND_8DB97230", "A", IntToText(libSAND_gv_spawningDummyMaxCount_C));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_player], c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_8DB97230"));
        return ;
    }

    if ((lp_target == true)) {
        lv_isTargetDummy = true;
        lv_dummyUnitType = "TargetHeroDummy";
        lv_forPlayer = libCore_gv_cOMPUTER_Hostile;
    }
    else {
        lv_isTargetDummy = false;
        lv_dummyUnitType = "HealingHeroDummy";
        lv_forPlayer = libGame_gf_ComputerPlayerInTeam(libGame_gf_TeamNumberOfPlayer(lp_player));
    }
    lv_pos = CameraGetTarget(lp_player);
    if ((PathingType(lv_pos) == c_pathingGround) && (RegionContainsPoint(libMapM_gv_mMSafeRegions[libGame_gv_teamOrderIndex_C], lv_pos) == false) && (RegionContainsPoint(libMapM_gv_mMSafeRegions[libGame_gv_teamChaosIndex_C], lv_pos) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_dummyUnitType, 0, lv_forPlayer, lv_pos);
        if ((lv_isTargetDummy == true)) {
            UnitGroupAdd(libSAND_gv_targetDummies[lp_player], UnitLastCreated());
            TriggerEnable(libSAND_gt_TargetDummyDamageMonitor, true);
            TriggerEnable(libSAND_gt_TargetDummyTakesDamage, true);
        }
        else {
            UnitGroupAdd(libSAND_gv_healingDummies[lp_player], UnitLastCreated());
            TriggerEnable(libSAND_gt_HealingDummyDamageMonitor, true);
            TriggerEnable(libSAND_gt_HealingDummyGettingHeal, true);
        }
    }
    else {
        SoundPlayForPlayer(SoundLink("UI_GenericError_Heroes", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lp_player], c_messageAreaSubtitle, StringExternal("Param/Value/lib_SAND_17973927"));
    }
}

int libSAND_gf_NumberofTargetDummies (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoCC42DA0D_g;

    // Variable Initialization

    // Implementation
    autoCC42DA0D_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCC42DA0D_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_count += UnitGroupCount(libSAND_gv_targetDummies[lv_itPlayer], c_unitCountAlive);
    }
    return lv_count;
}

int libSAND_gf_NumberofHealingDummies (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto1F81F751_g;

    // Variable Initialization

    // Implementation
    auto1F81F751_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1F81F751_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_count += UnitGroupCount(libSAND_gv_healingDummies[lv_itPlayer], c_unitCountAlive);
    }
    return lv_count;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Sandbox
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_IncludeSandbox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_IncludeSandbox_Init () {
    libSAND_gt_IncludeSandbox = TriggerCreate("libSAND_gt_IncludeSandbox_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox Init
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSIsSandbox == true)) {
        libCore_gv_sYSIsSameHeroEnabled = true;
    }

    libSAND_gf_SandboxTurnButtonListenerTriggersOnOff(true);
    TriggerExecute(libSAND_gt_SandboxPanelInitialize, true, true);
    Wait(2.0, c_timeGame);
    libSAND_gf_SandboxTurnButtonListenerTriggersOnOff(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxInit_Init () {
    libSAND_gt_SandboxInit = TriggerCreate("libSAND_gt_SandboxInit_Func");
    libGame_gf_IncludeModeInitialization(libSAND_gt_SandboxInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox - Turn On
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxTurnOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSIsSandbox == true)) {
        libSAND_gf_SandboxTurnButtonListenerTriggersOnOff(true);
        libSAND_gf_SandboxSetLeaderPlayer(libGame_gf_MTMLGetHostPlayer());
        DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanel, PlayerGroupAll(), true);
        TriggerExecute(libSAND_gt_DisableButtonsUntilGameStart, true, true);
    }
    else {
        TriggerEnable(libSAND_gt_SandboxChatMessage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxTurnOn_Init () {
    libSAND_gt_SandboxTurnOn = TriggerCreate("libSAND_gt_SandboxTurnOn_Func");
    libGame_gf_GameOpenTimerStarted(libSAND_gt_SandboxTurnOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox - Turn Off
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxTurnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSAND_gf_SandboxTurnButtonListenerTriggersOnOff(false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_sandboxContainer, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxTurnOff_Init () {
    libSAND_gt_SandboxTurnOff = TriggerCreate("libSAND_gt_SandboxTurnOff_Func");
    libGame_gf_GameOverEvent(libSAND_gt_SandboxTurnOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox - Leader Disconnected
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxLeaderDisconnected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_disconnectedPlayer;
    int lv_itPlayer;
    playergroup lv_activePlayers;

    // Automatic Variable Declarations
    playergroup auto5DE61264_g;

    // Variable Initialization
    lv_activePlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSIsSandbox == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSAND_gv_leaderPlayer < 0)) {
        return true;
    }

    lv_disconnectedPlayer = EventPlayer();
    if ((lv_disconnectedPlayer != libSAND_gv_leaderPlayer)) {
        return true;
    }

    auto5DE61264_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5DE61264_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive) && ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lv_itPlayer) == true) || (PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lv_itPlayer) == true))) {
            PlayerGroupAdd(lv_activePlayers, lv_itPlayer);
        }

    }
    if ((PlayerGroupCount(lv_activePlayers) <= 0)) {
        return true;
    }

    libSAND_gf_SandboxSetLeaderPlayer(PlayerGroupPlayer(lv_activePlayers, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxLeaderDisconnected_Init () {
    libSAND_gt_SandboxLeaderDisconnected = TriggerCreate("libSAND_gt_SandboxLeaderDisconnected_Func");
    TriggerAddEventPlayerLeft(libSAND_gt_SandboxLeaderDisconnected, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox - Chat Message
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxChatMessage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != libSAND_gv_leaderPlayer))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!(((GameIsOnline() == false) || (libGame_gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSAND_gf_SandboxTurnButtonListenerTriggersOnOff(true);
    libSAND_gf_SandboxSetLeaderPlayer(EventPlayer());
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanel, PlayerGroupAll(), true);
    TriggerExecute(libSAND_gt_DisableButtonsUntilGameStart, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxChatMessage_Init () {
    libSAND_gt_SandboxChatMessage = TriggerCreate("libSAND_gt_SandboxChatMessage_Func");
    TriggerEnable(libSAND_gt_SandboxChatMessage, false);
    TriggerAddEventChatMessage(libSAND_gt_SandboxChatMessage, c_playerAny, "-sandbox", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SandboxPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itLabel;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SandboxUIContainer/");
    libSAND_gv_sandboxPanel.lv_sandboxContainer = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SandboxUIContainer/SandboxShowButton");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SandboxUIContainer/SandboxButtonPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_mainPanelCloseButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_FA470836"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_mainPanelLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libSAND_gv_sandboxPanel.lv_mainPanelLockscreenTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "SharedControlCheckbox");
    libSAND_gv_sandboxPanel.lv_sharedControlCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SharedControlLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_728785D3"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GroupGlobalLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_BF895ACA"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "GameSpeedButton");
    libSAND_gv_sandboxPanel.lv_gameSpeedButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_419D647E"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ChangeGameSpeedPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_8A7FCA1F"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_gameSpeedSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 5.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 3.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_gameSpeedLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_gameSpeedSetButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_31CF91A6"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_gameSpeedFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ToggleFoWButton");
    libSAND_gv_sandboxPanel.lv_toggleFoWButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_2073EC15"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ToggleFoWPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_00BC135A"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "LeftTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_9455E597"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "RightTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_43F33F02"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_toggleFoWFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ToggleMapMechanicButton");
    libSAND_gv_sandboxPanel.lv_toggleMechanicButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_82F5FAF2"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ToggleMapMechanicPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "LeftTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_CD5640D3"), PlayerGroupAll());
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_28E44AEB"), PlayerGroupAll());
    libSAND_gv_sandboxPanel.lv_toggleMechanicPanelLeftTeamLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_toggleMechanicFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RefreshFortsButton");
    libSAND_gv_sandboxPanel.lv_resetStructureButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_75B440BD"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SpawnCampButton");
    libSAND_gv_sandboxPanel.lv_spawnCampsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_218F751E"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SpawnDummyButton");
    libSAND_gv_sandboxPanel.lv_spawnDummyButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_77182441"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SpawnDummyPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_A1A053CF"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamButton");
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_78E9F479"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamButton");
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameHealingButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_D1C0A64D"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_spawnDummyFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ClearDummyButton");
    libSAND_gv_sandboxPanel.lv_clearAllDummyButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_82E695B7"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GroupTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_58F43016"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LevelUpButton");
    libSAND_gv_sandboxPanel.lv_teamLevelButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_2250B975"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LevelUpPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_levelFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_3D753FF1"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_levelFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libCore_gv_bALMaxLevel, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamLevelLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_A87826A4"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libCore_gv_bALMaxLevel, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamLevelLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_AA4F88F1"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_levelFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ToggleMinionsButton");
    libSAND_gv_sandboxPanel.lv_toggleMinionsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_954E4E04"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ToggleMinionsPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_536F53B0"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "LeftTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_BD968A17"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "RightTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_8DFBBBBD"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_toggleMinionsFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "InfiniteManaButton");
    libSAND_gv_sandboxPanel.lv_infiniteManaButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_7119A630"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "InfiniteManaPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_BC9B4420"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "LeftTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_194FE318"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "RightTeamCheckbox");
    libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_DDE0B11E"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_infiniteManaFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SetXPMultiplierButton");
    libSAND_gv_sandboxPanel.lv_setXPMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_188776CA"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "XPMultiplierPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_E6A502D8"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxXPMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_88786951"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxXPMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_71A0FE19"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_xPMultiplierFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SetRespawnTimeButton");
    libSAND_gv_sandboxPanel.lv_setRespawnTimeMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_C5319D91"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RespawnTimePanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_E601C18D"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxRespawnTimeMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_AEE3382B"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxRespawnTimeMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_3F9234D0"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_respawnTimeFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SetCooldownMultiplierButton");
    libSAND_gv_sandboxPanel.lv_setCooldownMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_19647F04"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CooldownMultiplierPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_F00BF533"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxCooldownMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_12686C13"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxCooldownMultiplierMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_52EE3145"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_cooldownFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SetDamageDealtButton");
    libSAND_gv_sandboxPanel.lv_setDamageDealtButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_BA0F10D0"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DamageDealtPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_damageDealtFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_F5C0C47D"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_damageDealtFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamDDSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxDamageDealtMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamDDLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_92AFF0CD"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamDDSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxDamageDealtMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamDDLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_03FF82F8"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_damageDealtFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SetDamageTakenButton");
    libSAND_gv_sandboxPanel.lv_setDamageTakenButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_B3E5B031"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DamageTakenPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_damageTakenFrameMain = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_AC7F3951"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Lockscreen");
    libSAND_gv_sandboxPanel.lv_damageTakenFrameLockscreen = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libSAND_gv_sandboxPanelLockscreenText, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LeftTeamSlider");
    libSAND_gv_sandboxPanel.lv_leftTeamDTSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxDamageTakenMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftTeamLabel");
    libSAND_gv_sandboxPanel.lv_leftTeamDTLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LeftTeamSetButton");
    libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_4A764A19"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "RightTeamSlider");
    libSAND_gv_sandboxPanel.lv_rightTeamDTSlider = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libSAND_gv_sandboxDamageTakenMaximumPercent_C, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightTeamLabel");
    libSAND_gv_sandboxPanel.lv_rightTeamDTLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RightTeamSetButton");
    libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_70C15508"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libSAND_gv_sandboxPanel.lv_damageTakenFrameCloseButton = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GroupIndividualLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_BABDCD74"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ChangeTalentsButton");
    libSAND_gv_sandboxPanel.lv_resetTalentsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_583F265C"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ShortCooldownsButton");
    libSAND_gv_sandboxPanel.lv_resetCooldownsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_A65F0849"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ResetHPMPButton");
    libSAND_gv_sandboxPanel.lv_resetHPMPButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_81DBBB0A"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CompleteQuestButton");
    libSAND_gv_sandboxPanel.lv_completeQuestsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_B63361F4"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "MoveHereButton");
    libSAND_gv_sandboxPanel.lv_moveHeroButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_506351B9"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RespawnButton");
    libSAND_gv_sandboxPanel.lv_instantRespawnButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_F4A0C158"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CustomButton1");
    libSAND_gv_sandboxPanel.lv_customButton1 = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_resetStructureButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_spawnCampsButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_moveHeroButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_instantRespawnButton, PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SandboxUIContainer/DummyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_dummyDPSMeterPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TitleLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_CF100EEB"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_6E983A33"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageLabel");
    libSAND_gv_sandboxPanel.lv_dummyDamageTeamLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DPSTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_B8C78D25"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DPSLabel");
    libSAND_gv_sandboxPanel.lv_dummyDPSTeamLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MyDamageTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_953151F1"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MyDamageLabel");
    libSAND_gv_sandboxPanel.lv_dummyDamageMineLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MyDPSTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_CE60A1E1"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MyDPSLabel");
    libSAND_gv_sandboxPanel.lv_dummyDPSMineLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SandboxUIContainer/HealingDummyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libSAND_gv_sandboxPanel.lv_dummyHealingMeterPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TitleLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_8CD767EB"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_1810BD49"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageLabel");
    libSAND_gv_sandboxPanel.lv_dummyHealLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DPSTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_SAND_30B306A8"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DPSLabel");
    libSAND_gv_sandboxPanel.lv_dummyHealPerSecondLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SandboxPanelInitialize_Init () {
    libSAND_gt_SandboxPanelInitialize = TriggerCreate("libSAND_gt_SandboxPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Buttons Until Game Start
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DisableButtonsUntilGameStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoF0B848E7_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetStructureButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_moveHeroButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnCampsButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, StringExternal("Param/Value/lib_SAND_7638E393"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetStructureButton, StringExternal("Param/Value/lib_SAND_C45D5567"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_moveHeroButton, StringExternal("Param/Value/lib_SAND_B499732B"), PlayerGroupAll());
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 0.0, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_resetStructureButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_spawnCampsButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_moveHeroButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_instantRespawnButton, PlayerGroupAll(), true);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, StringToText(""), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetStructureButton, StringToText(""), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_moveHeroButton, StringToText(""), PlayerGroupAll());
    autoF0B848E7_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoF0B848E7_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((DialogControlIsEnabled(libSAND_gv_sandboxPanel.lv_mainPanelCloseButton, lv_itPlayer) == true)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMinionsButton, PlayerGroupSingle(lv_itPlayer), true);
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetStructureButton, PlayerGroupSingle(lv_itPlayer), true);
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_moveHeroButton, PlayerGroupSingle(lv_itPlayer), true);
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, PlayerGroupSingle(lv_itPlayer), true);
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnCampsButton, PlayerGroupAll(), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DisableButtonsUntilGameStart_Init () {
    libSAND_gt_DisableButtonsUntilGameStart = TriggerCreate("libSAND_gt_DisableButtonsUntilGameStart_Func");
    libGame_gf_GameOpenTimerStarted(libSAND_gt_DisableButtonsUntilGameStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shared Control Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SharedControlCheckboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto591A1CA3_g;
    const int autoCD6062CE_ae = libCore_gv_bALMaxTeams;
    const int autoCD6062CE_ai = 1;
    const int autoFBA11382_ae = libCore_gv_bALMaxTeams;
    const int autoFBA11382_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_sharedControlCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() != libSAND_gv_leaderPlayer)) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libSAND_gv_sharedControl = true;
        DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, PlayerGroupAll(), false);
        lv_itTeam = 1;
        for ( ; ( (autoFBA11382_ai >= 0 && lv_itTeam <= autoFBA11382_ae) || (autoFBA11382_ai < 0 && lv_itTeam >= autoFBA11382_ae) ) ; lv_itTeam += autoFBA11382_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_7854DB27", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_7854DB27", "C", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_0BB1BB08")));
            TextExpressionSetToken("Param/Expression/lib_SAND_7854DB27", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C9F1309B")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_7854DB27"));
        }
    }
    else {
        libSAND_gv_sharedControl = false;
        auto591A1CA3_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto591A1CA3_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((lv_itPlayer != libSAND_gv_leaderPlayer)) {
                libSAND_gf_HideAllSubpanelsforPlayer(lv_itPlayer);
                DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, PlayerGroupSingle(lv_itPlayer), true);
            }

        }
        lv_itTeam = 1;
        for ( ; ( (autoCD6062CE_ai >= 0 && lv_itTeam <= autoCD6062CE_ae) || (autoCD6062CE_ai < 0 && lv_itTeam >= autoCD6062CE_ae) ) ; lv_itTeam += autoCD6062CE_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_E484CC2B", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_E484CC2B", "C", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_67D6992E")));
            TextExpressionSetToken("Param/Expression/lib_SAND_E484CC2B", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_288904E4")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_E484CC2B"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SharedControlCheckboxClicked_Init () {
    libSAND_gt_SharedControlCheckboxClicked = TriggerCreate("libSAND_gt_SharedControlCheckboxClicked_Func");
    TriggerEnable(libSAND_gt_SharedControlCheckboxClicked, false);
    TriggerAddEventDialogControl(libSAND_gt_SharedControlCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SBX Add Town Data
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SBXAddTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;
    unitgroup lv_buildingUnitGroup;

    // Automatic Variable Declarations
    int auto809EF887_ae;
    const int auto809EF887_ai = 1;

    // Variable Initialization
    lv_buildingUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto809EF887_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto809EF887_ai >= 0 && lv_itTown <= auto809EF887_ae) || (auto809EF887_ai < 0 && lv_itTown >= auto809EF887_ae) ) ; lv_itTown += auto809EF887_ai ) {
        lv_buildingUnitGroup = UnitGroup(null, c_playerAny, libGame_gv_townTownData[lv_itTown].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        TextExpressionSetToken("Param/Expression/lib_SAND_6B957A27", "A", IntToText(lv_itTown));
        libSAND_gf_SBXAddTownData(lv_buildingUnitGroup, lv_itTown, TextExpressionAssemble("Param/Expression/lib_SAND_6B957A27"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SBXAddTownData_Init () {
    libSAND_gt_SBXAddTownData = TriggerCreate("libSAND_gt_SBXAddTownData_Func");
    libGame_gf_TownDataInitialized(libSAND_gt_SBXAddTownData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Structures Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ResetStructuresButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itTown;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto82A61357_ae = libCore_gv_bALMaxTeams;
    const int auto82A61357_ai = 1;
    int auto47433BFB_ae;
    const int auto47433BFB_ai = 1;
    const int auto9C01AA06_ae = libCore_gv_bALMaxTeams;
    const int auto9C01AA06_ai = 1;
    playergroup auto328A5DC6_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_resetStructureButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetStructureButton, PlayerGroupAll(), false);
    libSAND_gv_resetStructureOnCooldown = true;
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetStructureButton, StringExternal("Param/Value/lib_SAND_8BD3B6FB"), PlayerGroupAll());
    lv_itTeam = 1;
    for ( ; ( (auto82A61357_ai >= 0 && lv_itTeam <= auto82A61357_ae) || (auto82A61357_ai < 0 && lv_itTeam >= auto82A61357_ae) ) ; lv_itTeam += auto82A61357_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_0AD7A566", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_0AD7A566", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C3D18F3D")));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_0AD7A566"));
    }
    libAIAI_gf_TowerTurnTowerSystemOnOff(false);
    auto47433BFB_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto47433BFB_ai >= 0 && lv_itTown <= auto47433BFB_ae) || (auto47433BFB_ai < 0 && lv_itTown >= auto47433BFB_ae) ) ; lv_itTown += auto47433BFB_ai ) {
        libSAND_gf_SBXRespawnTown(lv_itTown);
    }
    if ((libGame_gv_townDestructionRemovesCoreInvulnerable == true)) {
        lv_itTeam = 1;
        for ( ; ( (auto9C01AA06_ai >= 0 && lv_itTeam <= auto9C01AA06_ae) || (auto9C01AA06_ai < 0 && lv_itTeam >= auto9C01AA06_ae) ) ; lv_itTeam += auto9C01AA06_ai ) {
            if ((UnitHasBehavior2(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability") == false)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[lv_itTeam].lv_core), "Signal Reset");
                UnitBehaviorAdd(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability", libGame_gv_teams[lv_itTeam].lv_core, 1);
            }

            UnitBehaviorAdd(libGame_gv_teams[lv_itTeam].lv_core, "PalaceDamageResponseController", libGame_gv_teams[lv_itTeam].lv_core, 1);
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropShieldsPercent, 100.0);
        }
        libGame_gv_minionPeriodicCatapultsFirstWave = 0;
        libUIUI_gf_UIPartyFrameShowHideCoreHealth(false);
    }

    Wait(0.125, c_timeGame);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    Wait(5.0, c_timeGame);
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetStructureButton, StringToText(""), PlayerGroupAll());
    libSAND_gv_resetStructureOnCooldown = false;
    auto328A5DC6_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto328A5DC6_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libSAND_gv_mainPanelButtonEnabled[lv_itPlayer] == true)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetStructureButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ResetStructuresButtonPressed_Init () {
    libSAND_gt_ResetStructuresButtonPressed = TriggerCreate("libSAND_gt_ResetStructuresButtonPressed_Func");
    TriggerEnable(libSAND_gt_ResetStructuresButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ResetStructuresButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Player Here Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_MovePlayerHereButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_heroGroup;
    int lv_itTeam;
    unitgroup lv_cameraGroup;

    // Automatic Variable Declarations
    unitgroup autoD765C854_g;
    int autoD765C854_u;
    unit autoD765C854_var;
    const int autoE89A3C7E_ae = libCore_gv_bALMaxTeams;
    const int autoE89A3C7E_ai = 1;

    // Variable Initialization
    lv_heroGroup = UnitGroupEmpty();
    lv_cameraGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_moveHeroButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gf_PlayerIsDead(EventPlayer()) == true)) {
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaSubtitle, StringExternal("Param/Value/lib_SAND_A257A8FF"));
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_moveHeroButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    libSAND_gv_moveHereOnCooldown[EventPlayer()] = true;
    PlayerOptionOverride(EventPlayer(), "camerafollow", "0");
    Wait(0.25, c_timeGame);
    if ((PathingType(CameraGetTarget(EventPlayer())) == c_pathingGround)) {
        lv_heroGroup = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
        autoD765C854_g = lv_heroGroup;
        autoD765C854_u = UnitGroupCount(autoD765C854_g, c_unitCountAll);
        for (;; autoD765C854_u -= 1) {
            autoD765C854_var = UnitGroupUnitFromEnd(autoD765C854_g, autoD765C854_u);
            if (autoD765C854_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(autoD765C854_var) != true)) {
                UnitSetPosition(autoD765C854_var, CameraGetTarget(EventPlayer()), false);
            }

        }
        lv_itTeam = 1;
        for ( ; ( (autoE89A3C7E_ai >= 0 && lv_itTeam <= autoE89A3C7E_ae) || (autoE89A3C7E_ai < 0 && lv_itTeam >= autoE89A3C7E_ae) ) ; lv_itTeam += autoE89A3C7E_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_9668C4C8", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_9668C4C8", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C10C5193")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_9668C4C8"));
        }
    }
    else {
        SoundPlayForPlayer(SoundLink("UI_GenericError_Heroes", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaSubtitle, StringExternal("Param/Value/lib_SAND_313887B8"));
    }
    PlayerOptionOverride(EventPlayer(), "camerafollow", null);
    Wait(0.25, c_timeGame);
    libSAND_gv_moveHereOnCooldown[EventPlayer()] = false;
    if ((libSAND_gv_mainPanelButtonEnabled[EventPlayer()] == true)) {
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_moveHeroButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_MovePlayerHereButtonPressed_Init () {
    libSAND_gt_MovePlayerHereButtonPressed = TriggerCreate("libSAND_gt_MovePlayerHereButtonPressed_Func");
    TriggerEnable(libSAND_gt_MovePlayerHereButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_MovePlayerHereButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Talents Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ResetTalentsButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_itTeam;
    int lv_itPlayer;
    bool lv_onlyChangedSelf;

    // Automatic Variable Declarations
    playergroup auto18314947_g;
    playergroup auto7DC6A3AA_g;
    const int auto25519C5A_ae = libCore_gv_bALMaxTeams;
    const int auto25519C5A_ai = 1;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_resetTalentsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        libGame_gf_StormResetHeroTalentsForPlayer(lv_triggeringPlayer);
        lv_onlyChangedSelf = true;
    }
    else {
        auto18314947_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto18314947_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_StormResetHeroTalentsForPlayer(lv_itPlayer);
        }
        auto7DC6A3AA_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto7DC6A3AA_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_StormResetHeroTalentsForPlayer(lv_itPlayer);
        }
        lv_onlyChangedSelf = false;
    }
    Wait(0.0625, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Game_Flyin_TalentsReset", -1), c_maxPlayers, lv_triggeringPlayerGroup, 100.0, 0.0);
    if ((lv_onlyChangedSelf == true)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_F23084CC", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_A090CD2D")));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_F23084CC"));
    }
    else {
        lv_itTeam = 1;
        for ( ; ( (auto25519C5A_ai >= 0 && lv_itTeam <= auto25519C5A_ae) || (auto25519C5A_ai < 0 && lv_itTeam >= auto25519C5A_ae) ) ; lv_itTeam += auto25519C5A_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_0672A8EA", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_0672A8EA", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_A7473938")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_0672A8EA"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ResetTalentsButtonPressed_Init () {
    libSAND_gt_ResetTalentsButtonPressed = TriggerCreate("libSAND_gt_ResetTalentsButtonPressed_Func");
    TriggerEnable(libSAND_gt_ResetTalentsButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ResetTalentsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Instant Respawn Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_InstantRespawnButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_itTeam;
    int lv_itPlayer;
    bool lv_onlyChangedSelf;
    bool[libCore_gv_bALMaxEnginePlayerCount + 1] lv_respawned;

    // Automatic Variable Declarations
    playergroup auto418B163D_g;
    playergroup auto95B76DD4_g;
    const int auto62C0DFFD_ae = libCore_gv_bALMaxTeams;
    const int auto62C0DFFD_ai = 1;
    playergroup auto81E7D4A6_g;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_instantRespawnButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        if ((libSAND_gf_PlayerHeroIsDead(EventPlayer()) == true)) {
            libSAND_gf_InstantRespawnPlayer(EventPlayer());
            lv_onlyChangedSelf = true;
            lv_respawned[EventPlayer()] = true;
            libSAND_gv_instantRespawnOnCooldown[EventPlayer()] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
        }
        else {
            SoundPlayForPlayer(SoundLink("UI_GenericError_Heroes", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
            UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaSubtitle, StringExternal("Param/Value/lib_SAND_82CAD45F"));
            return true;
        }
    }
    else {
        auto418B163D_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto418B163D_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libSAND_gf_PlayerHeroIsDead(lv_itPlayer) == true)) {
                libSAND_gf_InstantRespawnPlayer(lv_itPlayer);
                lv_respawned[lv_itPlayer] = true;
            }

            libSAND_gv_instantRespawnOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        auto95B76DD4_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto95B76DD4_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libSAND_gf_PlayerHeroIsDead(lv_itPlayer) == true)) {
                libSAND_gf_InstantRespawnPlayer(lv_itPlayer);
                lv_respawned[lv_itPlayer] = true;
            }

            libSAND_gv_instantRespawnOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        lv_onlyChangedSelf = false;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_onlyChangedSelf == true)) {
        if ((lv_respawned[EventPlayer()] == true)) {
            lv_itTeam = libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer);
            TextExpressionSetToken("Param/Expression/lib_SAND_50F52823", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_DF66BC59")));
            UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_50F52823"));
            libSAND_gv_instantRespawnOnCooldown[EventPlayer()] = false;
            if ((libSAND_gv_mainPanelButtonEnabled[EventPlayer()] == true)) {
                DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
            }

        }

    }
    else {
        lv_itTeam = 1;
        for ( ; ( (auto62C0DFFD_ai >= 0 && lv_itTeam <= auto62C0DFFD_ae) || (auto62C0DFFD_ai < 0 && lv_itTeam >= auto62C0DFFD_ae) ) ; lv_itTeam += auto62C0DFFD_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_1CC33604", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_1CC33604", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_3A90F931")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_1CC33604"));
        }
        auto81E7D4A6_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto81E7D4A6_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSAND_gv_instantRespawnOnCooldown[lv_itPlayer] = false;
            if ((libSAND_gv_mainPanelButtonEnabled[lv_itPlayer] == true)) {
                DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_instantRespawnButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_InstantRespawnButtonPressed_Init () {
    libSAND_gt_InstantRespawnButtonPressed = TriggerCreate("libSAND_gt_InstantRespawnButtonPressed_Func");
    TriggerEnable(libSAND_gt_InstantRespawnButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_InstantRespawnButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Complete Quests Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CompleteQuestsButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_itTeam;
    int lv_itPlayer;
    bool lv_onlyChangedSelf;

    // Automatic Variable Declarations
    playergroup autoB326977E_g;
    playergroup auto14E9DBAF_g;
    const int auto5DE5F425_ae = libCore_gv_bALMaxTeams;
    const int auto5DE5F425_ai = 1;
    playergroup autoF18EB1CC_g;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_completeQuestsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        libGame_gf_QuestTokenCompleteQuestsOnPlayerHeroUnit(EventPlayer());
        libSAND_gv_completeQuestOnCooldown[EventPlayer()] = true;
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
        lv_onlyChangedSelf = true;
    }
    else {
        autoB326977E_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB326977E_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_QuestTokenCompleteQuestsOnPlayerHeroUnit(lv_itPlayer);
            libSAND_gv_completeQuestOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        auto14E9DBAF_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto14E9DBAF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_QuestTokenCompleteQuestsOnPlayerHeroUnit(lv_itPlayer);
            libSAND_gv_completeQuestOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        lv_onlyChangedSelf = false;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_onlyChangedSelf == true)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_697C0038", "A", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_15735077")));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_697C0038"));
        libSAND_gv_completeQuestOnCooldown[EventPlayer()] = false;
        if ((libSAND_gv_mainPanelButtonEnabled[EventPlayer()] == true)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
        }

    }
    else {
        lv_itTeam = 1;
        for ( ; ( (auto5DE5F425_ai >= 0 && lv_itTeam <= auto5DE5F425_ae) || (auto5DE5F425_ai < 0 && lv_itTeam >= auto5DE5F425_ae) ) ; lv_itTeam += auto5DE5F425_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_A6D16D4E", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_A6D16D4E", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_7E712CCB")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_A6D16D4E"));
        }
        autoF18EB1CC_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoF18EB1CC_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSAND_gv_completeQuestOnCooldown[lv_itPlayer] = false;
            if ((libSAND_gv_mainPanelButtonEnabled[lv_itPlayer] == true)) {
                DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_completeQuestsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CompleteQuestsButtonPressed_Init () {
    libSAND_gt_CompleteQuestsButtonPressed = TriggerCreate("libSAND_gt_CompleteQuestsButtonPressed_Func");
    TriggerEnable(libSAND_gt_CompleteQuestsButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_CompleteQuestsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset HP/Map Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ResetHPMapButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_itTeam;
    int lv_itPlayer;
    bool lv_onlyChangedSelf;

    // Automatic Variable Declarations
    playergroup autoDBF3D68D_g;
    playergroup auto263177A7_g;
    const int autoCF09EDCA_ae = libCore_gv_bALMaxTeams;
    const int autoCF09EDCA_ai = 1;
    playergroup auto3028E45A_g;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_resetHPMPButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        libSAND_gf_ResetHPMapForPlayer(EventPlayer());
        libSAND_gv_resetHPMPOnCooldown[EventPlayer()] = true;
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
        lv_onlyChangedSelf = true;
    }
    else {
        autoDBF3D68D_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoDBF3D68D_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSAND_gf_ResetHPMapForPlayer(lv_itPlayer);
            libSAND_gv_resetHPMPOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        auto263177A7_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto263177A7_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSAND_gf_ResetHPMapForPlayer(lv_itPlayer);
            libSAND_gv_resetHPMPOnCooldown[lv_itPlayer] = true;
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        }
        lv_onlyChangedSelf = false;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_onlyChangedSelf == true)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_1368025D", "A", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_E4172D37")));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_1368025D"));
        libSAND_gv_resetHPMPOnCooldown[EventPlayer()] = false;
        if ((libSAND_gv_mainPanelButtonEnabled[EventPlayer()] == true)) {
            DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
        }

    }
    else {
        lv_itTeam = 1;
        for ( ; ( (autoCF09EDCA_ai >= 0 && lv_itTeam <= autoCF09EDCA_ae) || (autoCF09EDCA_ai < 0 && lv_itTeam >= autoCF09EDCA_ae) ) ; lv_itTeam += autoCF09EDCA_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_78555B19", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_78555B19", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_8CCEB789")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_78555B19"));
        }
        auto3028E45A_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto3028E45A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSAND_gv_resetHPMPOnCooldown[lv_itPlayer] = false;
            if ((libSAND_gv_mainPanelButtonEnabled[lv_itPlayer] == true)) {
                DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetHPMPButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ResetHPMapButtonPressed_Init () {
    libSAND_gt_ResetHPMapButtonPressed = TriggerCreate("libSAND_gt_ResetHPMapButtonPressed_Func");
    TriggerEnable(libSAND_gt_ResetHPMapButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ResetHPMapButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Camps Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SpawnCampsButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_triggeringPlayerGroup;
    int lv_itCamp;

    // Automatic Variable Declarations
    int auto2EF6FE90_ae;
    const int auto2EF6FE90_ai = 1;

    // Variable Initialization
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnCampsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    auto2EF6FE90_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto2EF6FE90_ai >= 0 && lv_itCamp <= auto2EF6FE90_ae) || (auto2EF6FE90_ai < 0 && lv_itCamp >= auto2EF6FE90_ae) ) ; lv_itCamp += auto2EF6FE90_ai ) {
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer) > 0.0625)) {
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, 0.0625, false, c_timeGame);
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer, 0.0625, false, c_timeGame);
        }

    }
    SoundPlayForPlayer(SoundLink("UI_Game_Flyin_TalentsReset", -1), c_maxPlayers, lv_triggeringPlayerGroup, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_SAND_B7FFB607", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_6EBB5E3D")));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_B7FFB607"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SpawnCampsButtonPressed_Init () {
    libSAND_gt_SpawnCampsButtonPressed = TriggerCreate("libSAND_gt_SpawnCampsButtonPressed_Func");
    TriggerEnable(libSAND_gt_SpawnCampsButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SpawnCampsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear All Dummies Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ClearAllDummiesButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_triggeringPlayerGroup;
    int lv_itTeam;
    int lv_itPlayer;
    bool lv_onlyChangedSelf;
    unitgroup lv_dummies;

    // Automatic Variable Declarations
    playergroup autoB9F8E4BC_g;
    unitgroup auto68A0DFC6_g;
    int auto68A0DFC6_u;
    unit auto68A0DFC6_var;
    unitgroup autoB4D8A585_g;
    int autoB4D8A585_u;
    unit autoB4D8A585_var;
    const int auto2A224AE9_ae = libCore_gv_bALMaxTeams;
    const int auto2A224AE9_ai = 1;

    // Variable Initialization
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());
    lv_dummies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_clearAllDummyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        UnitGroupAddUnitGroup(lv_dummies, libSAND_gv_targetDummies[EventPlayer()]);
        UnitGroupAddUnitGroup(lv_dummies, libSAND_gv_healingDummies[EventPlayer()]);
        autoB4D8A585_g = lv_dummies;
        autoB4D8A585_u = UnitGroupCount(autoB4D8A585_g, c_unitCountAll);
        for (;; autoB4D8A585_u -= 1) {
            autoB4D8A585_var = UnitGroupUnitFromEnd(autoB4D8A585_g, autoB4D8A585_u);
            if (autoB4D8A585_var == null) { break; }
            UnitRemove(autoB4D8A585_var);
        }
        lv_onlyChangedSelf = true;
    }
    else {
        autoB9F8E4BC_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB9F8E4BC_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            UnitGroupAddUnitGroup(lv_dummies, libSAND_gv_targetDummies[lv_itPlayer]);
            UnitGroupAddUnitGroup(lv_dummies, libSAND_gv_healingDummies[lv_itPlayer]);
        }
        auto68A0DFC6_g = lv_dummies;
        auto68A0DFC6_u = UnitGroupCount(auto68A0DFC6_g, c_unitCountAll);
        for (;; auto68A0DFC6_u -= 1) {
            auto68A0DFC6_var = UnitGroupUnitFromEnd(auto68A0DFC6_g, auto68A0DFC6_u);
            if (auto68A0DFC6_var == null) { break; }
            UnitRemove(auto68A0DFC6_var);
        }
        lv_onlyChangedSelf = false;
    }
    if (((libSAND_gf_NumberofTargetDummies(libGame_gv_teamOrderIndex_C) + libSAND_gf_NumberofTargetDummies(libGame_gv_teamChaosIndex_C)) == 0)) {
        TriggerEnable(libSAND_gt_TargetDummyDamageMonitor, false);
        TriggerEnable(libSAND_gt_TargetDummyTakesDamage, false);
    }

    if (((libSAND_gf_NumberofHealingDummies(libGame_gv_teamOrderIndex_C) + libSAND_gf_NumberofHealingDummies(libGame_gv_teamChaosIndex_C)) == 0)) {
        TriggerEnable(libSAND_gt_HealingDummyDamageMonitor, false);
        TriggerEnable(libSAND_gt_HealingDummyGettingHeal, false);
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Flyin_TalentsReset", -1), c_maxPlayers, lv_triggeringPlayerGroup, 100.0, 0.0);
    if ((lv_onlyChangedSelf == true)) {
        TextExpressionSetToken("Param/Expression/lib_SAND_067BE0F2", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_2E3F1447")));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_067BE0F2"));
    }
    else {
        lv_itTeam = 1;
        for ( ; ( (auto2A224AE9_ai >= 0 && lv_itTeam <= auto2A224AE9_ae) || (auto2A224AE9_ai < 0 && lv_itTeam >= auto2A224AE9_ae) ) ; lv_itTeam += auto2A224AE9_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_4E73675F", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_4E73675F", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C172C866")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_4E73675F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ClearAllDummiesButtonPressed_Init () {
    libSAND_gt_ClearAllDummiesButtonPressed = TriggerCreate("libSAND_gt_ClearAllDummiesButtonPressed_Func");
    TriggerEnable(libSAND_gt_ClearAllDummiesButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ClearAllDummiesButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset CD Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ResetCDButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoB1346236_g;
    const int autoA9260A12_ae = libCore_gv_bALMaxTeams;
    const int autoA9260A12_ai = 1;
    playergroup auto78E29D8A_g;
    playergroup auto4E12B2CC_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_resetCooldownsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libSAND_gv_sharedControl == true)) {
        lv_itPlayer = EventPlayer();
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, StringExternal("Param/Value/lib_SAND_DC945841"), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libGame_gf_HeroRefreshCooldowns(lv_itPlayer, false);
        libSAND_gv_resetCDOnCooldown[lv_itPlayer] = true;
        TextExpressionSetToken("Param/Expression/lib_SAND_4EACDCF4", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_F42A7B54")));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_4EACDCF4"));
        Wait(5.0, c_timeGame);
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
        libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, StringToText(""), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libSAND_gv_resetCDOnCooldown[lv_itPlayer] = false;
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_playerGroup);
        libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_playerGroup);
        DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, lv_playerGroup, false);
        libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, StringExternal("Param/Value/lib_SAND_9CAE994C"), lv_playerGroup);
        autoB1346236_g = lv_playerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB1346236_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_HeroRefreshCooldowns(lv_itPlayer, false);
            libSAND_gv_resetCDOnCooldown[lv_itPlayer] = true;
        }
        lv_itTeam = 1;
        for ( ; ( (autoA9260A12_ai >= 0 && lv_itTeam <= autoA9260A12_ae) || (autoA9260A12_ai < 0 && lv_itTeam >= autoA9260A12_ae) ) ; lv_itTeam += autoA9260A12_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_A3F2CCCD", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_A3F2CCCD", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_C117F4B2")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_A3F2CCCD"));
        }
        Wait(5.0, c_timeGame);
        auto78E29D8A_g = lv_playerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto78E29D8A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libSAND_gv_mainPanelButtonEnabled[lv_itPlayer] == true)) {
                DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
            }

        }
        libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_resetCooldownsButton, StringToText(""), lv_playerGroup);
        auto4E12B2CC_g = lv_playerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4E12B2CC_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_HeroRefreshCooldowns(lv_itPlayer, false);
            libSAND_gv_resetCDOnCooldown[lv_itPlayer] = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ResetCDButtonPressed_Init () {
    libSAND_gt_ResetCDButtonPressed = TriggerCreate("libSAND_gt_ResetCDButtonPressed_Func");
    TriggerEnable(libSAND_gt_ResetCDButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ResetCDButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_MapMechanicButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleMechanicButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_MapMechanicButtonPressed_Init () {
    libSAND_gt_MapMechanicButtonPressed = TriggerCreate("libSAND_gt_MapMechanicButtonPressed_Func");
    TriggerEnable(libSAND_gt_MapMechanicButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_MapMechanicButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Checkbox Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_MapMechanicCheckboxPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto06520630_ae = libCore_gv_bALMaxTeams;
    const int auto06520630_ai = 1;
    const int auto8898B40D_ae = libCore_gv_bALMaxTeams;
    const int auto8898B40D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true) && (libSAND_gv_mapMechanicCheckboxEnabled == true)) {
    }
    else {
        return true;
    }
    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameLockscreen, EventPlayer()) == true)) {
        return true;
    }

    libSAND_gv_mapMechanicCheckboxEnabled = false;
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameLockscreen, PlayerGroupAll(), true);
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libMapM_gf_EnableDisableMapEvent(true);
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        lv_itTeam = 1;
        for ( ; ( (auto8898B40D_ai >= 0 && lv_itTeam <= auto8898B40D_ae) || (auto8898B40D_ai < 0 && lv_itTeam >= auto8898B40D_ae) ) ; lv_itTeam += auto8898B40D_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_6925A79C", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_6925A79C", "C", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_8D0DC082")));
            TextExpressionSetToken("Param/Expression/lib_SAND_6925A79C", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_BE0E05AA")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_6925A79C"));
        }
        libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox, true, PlayerGroupAll());
    }
    else {
        libMapM_gf_EnableDisableMapEvent(false);
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        lv_itTeam = 1;
        for ( ; ( (auto06520630_ai >= 0 && lv_itTeam <= auto06520630_ae) || (auto06520630_ai < 0 && lv_itTeam >= auto06520630_ae) ) ; lv_itTeam += auto06520630_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_7AC686DC", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_7AC686DC", "C", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_5711C45E")));
            TextExpressionSetToken("Param/Expression/lib_SAND_7AC686DC", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_5B04302D")));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_7AC686DC"));
        }
        libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox, false, PlayerGroupAll());
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMechanicPanelCheckbox, PlayerGroupAll(), true);
    libSAND_gv_mapMechanicCheckboxEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_MapMechanicCheckboxPressed_Init () {
    libSAND_gt_MapMechanicCheckboxPressed = TriggerCreate("libSAND_gt_MapMechanicCheckboxPressed_Func");
    TriggerEnable(libSAND_gt_MapMechanicCheckboxPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_MapMechanicCheckboxPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_MapMechanicCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleMechanicFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_MapMechanicCloseButtonPressed_Init () {
    libSAND_gt_MapMechanicCloseButtonPressed = TriggerCreate("libSAND_gt_MapMechanicCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_MapMechanicCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_MapMechanicCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Warning Started
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_MapMechanicWarningStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEB8A14A7_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSAND_gv_mapMechanicButtonDisabled = true;
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_toggleMechanicButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemTooltip(libSAND_gv_sandboxPanel.lv_toggleMechanicButton, StringExternal("Param/Value/lib_SAND_3DBCF627"), PlayerGroupAll());
    autoEB8A14A7_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEB8A14A7_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain, lv_itPlayer) == true)) {
            DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMechanicFrameMain, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_itPlayer, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_MapMechanicWarningStarted_Init () {
    libSAND_gt_MapMechanicWarningStarted = TriggerCreate("libSAND_gt_MapMechanicWarningStarted_Func");
    TriggerAddEventTimer(libSAND_gt_MapMechanicWarningStarted, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Minions Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleMinionsButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleMinionsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameMain, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleMinionsButtonPressed_Init () {
    libSAND_gt_ToggleMinionsButtonPressed = TriggerCreate("libSAND_gt_ToggleMinionsButtonPressed_Func");
    TriggerEnable(libSAND_gt_ToggleMinionsButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleMinionsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Minions Checkbox Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleMinionsCheckboxPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto4B07820A_ae = libCore_gv_bALMaxTeams;
    const int auto4B07820A_ai = 1;
    unitgroup autoBE39AF37_g;
    int autoBE39AF37_u;
    unit autoBE39AF37_var;
    const int autoB8FBFE37_ae = libCore_gv_bALMaxTeams;
    const int autoB8FBFE37_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true) && (libSAND_gv_toggleMinionsCheckboxEnabled == true)) {
    }
    else {
        return true;
    }
    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameLockscreen, EventPlayer()) == true)) {
        return true;
    }

    libSAND_gv_toggleMinionsCheckboxEnabled = false;
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameLockscreen, PlayerGroupAll(), true);
    if ((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libSAND_gv_toggleMinions[lv_team] = true;
        libGame_gf_MinionPauseUnpauseMinionSystemForTeam(false, lv_team, libGame_ge_AllLanes_AllLanes);
        lv_itTeam = 1;
        for ( ; ( (auto4B07820A_ai >= 0 && lv_itTeam <= auto4B07820A_ae) || (auto4B07820A_ai < 0 && lv_itTeam >= auto4B07820A_ae) ) ; lv_itTeam += auto4B07820A_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_54B5DB8A", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_54B5DB8A", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_CBF0EE73")));
            TextExpressionSetToken("Param/Expression/lib_SAND_54B5DB8A", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_1AD918E3")));
            TextExpressionSetToken("Param/Expression/lib_SAND_54B5DB8A", "C", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_54B5DB8A"));
        }
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_toggleMinions[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_toggleMinions[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            }
        }
    }
    else {
        libSAND_gv_toggleMinions[lv_team] = false;
        libGame_gf_MinionPauseUnpauseMinionSystemForTeam(true, lv_team, libGame_ge_AllLanes_AllLanes);
        autoBE39AF37_g = UnitGroup(null, libGame_gf_ComputerPlayerInTeam(lv_team), RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        autoBE39AF37_u = UnitGroupCount(autoBE39AF37_g, c_unitCountAll);
        for (;; autoBE39AF37_u -= 1) {
            autoBE39AF37_var = UnitGroupUnitFromEnd(autoBE39AF37_g, autoBE39AF37_u);
            if (autoBE39AF37_var == null) { break; }
            UnitRemove(autoBE39AF37_var);
        }
        lv_itTeam = 1;
        for ( ; ( (autoB8FBFE37_ai >= 0 && lv_itTeam <= autoB8FBFE37_ae) || (autoB8FBFE37_ai < 0 && lv_itTeam >= autoB8FBFE37_ae) ) ; lv_itTeam += autoB8FBFE37_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_63456DD6", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_63456DD6", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_92156328")));
            TextExpressionSetToken("Param/Expression/lib_SAND_63456DD6", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_771E882B")));
            TextExpressionSetToken("Param/Expression/lib_SAND_63456DD6", "C", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_63456DD6"));
        }
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_toggleMinions[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_toggleMinions[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, false, PlayerGroupAll());
            }
        }
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamToggleMinionsCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamToggleMinionsCheckbox, PlayerGroupAll(), true);
    libSAND_gv_toggleMinionsCheckboxEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleMinionsCheckboxPressed_Init () {
    libSAND_gt_ToggleMinionsCheckboxPressed = TriggerCreate("libSAND_gt_ToggleMinionsCheckboxPressed_Func");
    TriggerEnable(libSAND_gt_ToggleMinionsCheckboxPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleMinionsCheckboxPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Minions Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleMinionsCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleMinionsFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleMinionsFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleMinionsCloseButtonPressed_Init () {
    libSAND_gt_ToggleMinionsCloseButtonPressed = TriggerCreate("libSAND_gt_ToggleMinionsCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_ToggleMinionsCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleMinionsCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle FoW Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleFoWButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleFoWButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleFoWFrameMain, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleFoWButtonPressed_Init () {
    libSAND_gt_ToggleFoWButtonPressed = TriggerCreate("libSAND_gt_ToggleFoWButtonPressed_Func");
    TriggerEnable(libSAND_gt_ToggleFoWButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleFoWButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle FoW Checkbox Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleFoWCheckboxPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoB438999F_ae = libCore_gv_bALMaxTeams;
    const int autoB438999F_ai = 1;
    const int auto1D0C0A9D_ae = libCore_gv_bALMaxTeams;
    const int auto1D0C0A9D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSAND_gv_toggleFoWCheckboxEnabled == true) && (libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
    }
    else {
        return true;
    }
    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_toggleFoWFrameLockscreen, EventPlayer()) == true)) {
        return true;
    }

    libSAND_gv_toggleFoWCheckboxEnabled = false;
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleFoWFrameLockscreen, PlayerGroupAll(), true);
    if ((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libSAND_gv_foWDisabled[lv_team] = true;
        VisRevealerCreate(libGame_gf_ComputerPlayerInTeam(lv_team), RegionPlayableMap());
        libSAND_gv_foWRevealer[lv_team] = VisRevealerLastCreated();
        lv_itTeam = 1;
        for ( ; ( (autoB438999F_ai >= 0 && lv_itTeam <= autoB438999F_ae) || (autoB438999F_ai < 0 && lv_itTeam >= autoB438999F_ae) ) ; lv_itTeam += autoB438999F_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_5117151A", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_5117151A", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_C885B616")));
            TextExpressionSetToken("Param/Expression/lib_SAND_5117151A", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_D4D8A0FC")));
            TextExpressionSetToken("Param/Expression/lib_SAND_5117151A", "C", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_5117151A"));
        }
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_foWDisabled[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_foWDisabled[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, false, PlayerGroupAll());
            }
        }
    }
    else {
        libSAND_gv_foWDisabled[lv_team] = false;
        VisRevealerDestroy(libSAND_gv_foWRevealer[lv_team]);
        libSAND_gv_foWRevealer[lv_team] = null;
        lv_itTeam = 1;
        for ( ; ( (auto1D0C0A9D_ai >= 0 && lv_itTeam <= auto1D0C0A9D_ae) || (auto1D0C0A9D_ai < 0 && lv_itTeam >= auto1D0C0A9D_ae) ) ; lv_itTeam += auto1D0C0A9D_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_85A3C063", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_85A3C063", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_E290C4E1")));
            TextExpressionSetToken("Param/Expression/lib_SAND_85A3C063", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_925C018C")));
            TextExpressionSetToken("Param/Expression/lib_SAND_85A3C063", "C", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_85A3C063"));
        }
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_foWDisabled[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_foWDisabled[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, false, PlayerGroupAll());
            }
        }
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleFoWFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamToggleFoWCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamToggleFoWCheckbox, PlayerGroupAll(), true);
    libSAND_gv_toggleFoWCheckboxEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleFoWCheckboxPressed_Init () {
    libSAND_gt_ToggleFoWCheckboxPressed = TriggerCreate("libSAND_gt_ToggleFoWCheckboxPressed_Func");
    TriggerEnable(libSAND_gt_ToggleFoWCheckboxPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleFoWCheckboxPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle FoW Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_ToggleFoWCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_toggleFoWFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_toggleFoWFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_ToggleFoWCloseButtonPressed_Init () {
    libSAND_gt_ToggleFoWCloseButtonPressed = TriggerCreate("libSAND_gt_ToggleFoWCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_ToggleFoWCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_ToggleFoWCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite Mana Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_InfiniteManaButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_infiniteManaButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_infiniteManaFrameMain, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_InfiniteManaButtonPressed_Init () {
    libSAND_gt_InfiniteManaButtonPressed = TriggerCreate("libSAND_gt_InfiniteManaButtonPressed_Func");
    TriggerEnable(libSAND_gt_InfiniteManaButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_InfiniteManaButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite Mana Checkbox Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_InfiniteManaCheckboxPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto333AFCAA_ae = libCore_gv_bALMaxTeams;
    const int auto333AFCAA_ai = 1;
    const int autoBE39CAAA_ae = libCore_gv_bALMaxTeams;
    const int autoBE39CAAA_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSAND_gv_infiniteManaCheckboxEnabled == true) && (libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
    }
    else {
        return true;
    }
    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_levelFrameLockscreen, EventPlayer()) == true)) {
        return true;
    }

    libSAND_gv_infiniteManaCheckboxEnabled = false;
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_infiniteManaFrameLockscreen, PlayerGroupAll(), true);
    if ((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libSAND_gv_infiniteManaOn[lv_team] = true;
        TriggerEnable(libSAND_gt_InfiniteManaBehavior, true);
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        lv_itTeam = 1;
        for ( ; ( (autoBE39CAAA_ai >= 0 && lv_itTeam <= autoBE39CAAA_ae) || (autoBE39CAAA_ai < 0 && lv_itTeam >= autoBE39CAAA_ae) ) ; lv_itTeam += autoBE39CAAA_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_0FE918EF", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_0FE918EF", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_B12BA768")));
            TextExpressionSetToken("Param/Expression/lib_SAND_0FE918EF", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_667AECB4")));
            TextExpressionSetToken("Param/Expression/lib_SAND_0FE918EF", "B", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_0FE918EF"));
        }
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_infiniteManaOn[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            if ((libSAND_gv_infiniteManaOn[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            }
        }
    }
    else {
        libSAND_gv_infiniteManaOn[lv_team] = false;
        SoundPlayForPlayer(SoundLink("UI_Game_Flyin_ClearCooldowns", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[EventPlayer()], 100.0, 0.0);
        lv_itTeam = 1;
        for ( ; ( (auto333AFCAA_ai >= 0 && lv_itTeam <= auto333AFCAA_ae) || (auto333AFCAA_ai < 0 && lv_itTeam >= auto333AFCAA_ae) ) ; lv_itTeam += auto333AFCAA_ai ) {
            TextExpressionSetToken("Param/Expression/lib_SAND_E67C79CF", "A", libSAND_gf_FormatSandboxPlayerName(EventPlayer(), lv_itTeam));
            TextExpressionSetToken("Param/Expression/lib_SAND_E67C79CF", "D", libSAND_gf_FormatSandboxItemValue(StringExternal("Param/Value/lib_SAND_D06E3321")));
            TextExpressionSetToken("Param/Expression/lib_SAND_E67C79CF", "C", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_96206877")));
            TextExpressionSetToken("Param/Expression/lib_SAND_E67C79CF", "B", libSAND_gf_TeamName(lv_team));
            UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_SAND_E67C79CF"));
        }
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_infiniteManaOn[libGame_gv_teamChaosIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            if ((libSAND_gv_infiniteManaOn[libGame_gv_teamOrderIndex_C] == true)) {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, false, PlayerGroupAll());
            }
        }
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_infiniteManaFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamInfiniteManaCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamInfiniteManaCheckbox, PlayerGroupAll(), true);
    libSAND_gv_infiniteManaCheckboxEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_InfiniteManaCheckboxPressed_Init () {
    libSAND_gt_InfiniteManaCheckboxPressed = TriggerCreate("libSAND_gt_InfiniteManaCheckboxPressed_Func");
    TriggerEnable(libSAND_gt_InfiniteManaCheckboxPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_InfiniteManaCheckboxPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite Mana Behavior
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_InfiniteManaBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto365873BB_ae = libCore_gv_bALMaxTeams;
    const int auto365873BB_ai = 1;
    playergroup auto2B47B36B_g;
    unitgroup auto72ABF025_g;
    int auto72ABF025_u;
    unit auto72ABF025_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto365873BB_ai >= 0 && lv_itTeam <= auto365873BB_ae) || (auto365873BB_ai < 0 && lv_itTeam >= auto365873BB_ae) ) ; lv_itTeam += auto365873BB_ai ) {
        auto2B47B36B_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto2B47B36B_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libSAND_gv_infiniteManaOn[lv_itTeam] == true)) {
                auto72ABF025_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
                auto72ABF025_u = UnitGroupCount(auto72ABF025_g, c_unitCountAll);
                for (;; auto72ABF025_u -= 1) {
                    auto72ABF025_var = UnitGroupUnitFromEnd(auto72ABF025_g, auto72ABF025_u);
                    if (auto72ABF025_var == null) { break; }
                    if ((UnitHasBehavior2(auto72ABF025_var, "NotManaUserDummy") == true)) {
                        continue;
                    }

                    UnitSetPropertyFixed(auto72ABF025_var, c_unitPropEnergyPercent, 100.0);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_InfiniteManaBehavior_Init () {
    libSAND_gt_InfiniteManaBehavior = TriggerCreate("libSAND_gt_InfiniteManaBehavior_Func");
    TriggerEnable(libSAND_gt_InfiniteManaBehavior, false);
    TriggerAddEventTimePeriodic(libSAND_gt_InfiniteManaBehavior, 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite Mana Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_InfiniteManaCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_infiniteManaFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_infiniteManaFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_InfiniteManaCloseButtonPressed_Init () {
    libSAND_gt_InfiniteManaCloseButtonPressed = TriggerCreate("libSAND_gt_InfiniteManaCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_InfiniteManaCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_InfiniteManaCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Game Speed Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SetGameSpeedMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_speed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_gameSpeedButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    lv_speed = GameGetSpeedValue();
    libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_gameSpeedSlider, libSAND_gf_GameSpeedIndex(lv_speed), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameMain, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SetGameSpeedMainButtonPressed_Init () {
    libSAND_gt_SetGameSpeedMainButtonPressed = TriggerCreate("libSAND_gt_SetGameSpeedMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_SetGameSpeedMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SetGameSpeedMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Game Speed Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SetGameSpeedSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_speed;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoBBB44651_ae = libCore_gv_bALMaxTeams;
    const int autoBBB44651_ai = 1;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_gameSpeedSetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_gameSpeedSetButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameLockscreen, PlayerGroupAll(), true);
    lv_speed = libSAND_gf_GameSpeedFromIndex(FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_gameSpeedSlider, lv_triggeringPlayer)));
    GameSetSpeedValue(lv_speed);
    libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_gameSpeedSlider, libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_gameSpeedSlider, lv_triggeringPlayer), PlayerGroupAll());
    lv_itTeam = 1;
    for ( ; ( (autoBBB44651_ai >= 0 && lv_itTeam <= autoBBB44651_ae) || (autoBBB44651_ai < 0 && lv_itTeam >= autoBBB44651_ae) ) ; lv_itTeam += autoBBB44651_ai ) {
        TextExpressionSetToken("Param/Expression/lib_SAND_90B45B42", "A", libSAND_gf_FormatSandboxPlayerName(lv_triggeringPlayer, lv_itTeam));
        TextExpressionSetToken("Param/Expression/lib_SAND_90B45B42", "B", libSAND_gf_FormatSandboxItemName(StringExternal("Param/Value/lib_SAND_6D7CF397")));
        TextExpressionSetToken("Param/Expression/lib_SAND_90B45B42", "C", libSAND_gf_FormatSandboxItemValue(libSAND_gf_GameSpeedText(lv_speed)));
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SAND_90B45B42"));
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_gameSpeedSetButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SetGameSpeedSetButtonPressed_Init () {
    libSAND_gt_SetGameSpeedSetButtonPressed = TriggerCreate("libSAND_gt_SetGameSpeedSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_SetGameSpeedSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SetGameSpeedSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Game Speed Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SetGameSpeedCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_gameSpeedFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_gameSpeedFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SetGameSpeedCloseButtonPressed_Init () {
    libSAND_gt_SetGameSpeedCloseButtonPressed = TriggerCreate("libSAND_gt_SetGameSpeedCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_SetGameSpeedCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SetGameSpeedCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Speed Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_GameSpeedChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_gameSpeedSlider))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_gameSpeedLabel, libSAND_gf_GameSpeedText(libSAND_gf_GameSpeedFromIndex(FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_gameSpeedSlider, EventPlayer())))), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_GameSpeedChanged_Init () {
    libSAND_gt_GameSpeedChanged = TriggerCreate("libSAND_gt_GameSpeedChanged_Func");
    TriggerEnable(libSAND_gt_GameSpeedChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_GameSpeedChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Level Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TeamLevelSliderValueChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;

    // Automatic Variable Declarations
    int autoC26FD06B_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoC26FD06B_val = EventDialogControl();
    if (autoC26FD06B_val == libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_7DD6874A", "A", IntToText(FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_triggeringPlayer))));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamLevelLabel, TextExpressionAssemble("Param/Expression/lib_SAND_7DD6874A"), lv_triggeringPlayerGroup);
    }
    else if (autoC26FD06B_val == libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_9CBFB59A", "A", IntToText(FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_triggeringPlayer))));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamLevelLabel, TextExpressionAssemble("Param/Expression/lib_SAND_9CBFB59A"), lv_triggeringPlayerGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TeamLevelSliderValueChanged_Init () {
    libSAND_gt_TeamLevelSliderValueChanged = TriggerCreate("libSAND_gt_TeamLevelSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_TeamLevelSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_TeamLevelSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Level Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TeamLevelMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_itPlayer;
    int lv_leftTeamLevel;
    int lv_rightTeamLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_teamLevelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer) == libGame_gv_teamOrderIndex_C)) {
        lv_leftTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[lv_triggeringPlayer].lv_heroUnit, null);
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_leftTeamLevel, lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_rightTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[PlayerGroupPlayer(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer), 1)].lv_heroUnit, null);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_rightTeamLevel, lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, 1.0, lv_triggeringPlayerGroup);
        }
    }
    else {
        lv_rightTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[lv_triggeringPlayer].lv_heroUnit, null);
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_rightTeamLevel, lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_leftTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[PlayerGroupPlayer(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer), 1)].lv_heroUnit, null);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_leftTeamLevel, lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, 1.0, lv_triggeringPlayerGroup);
        }
    }
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_levelFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TeamLevelMainButtonPressed_Init () {
    libSAND_gt_TeamLevelMainButtonPressed = TriggerCreate("libSAND_gt_TeamLevelMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_TeamLevelMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_TeamLevelMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Level Set Level Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TeamLevelSetLevelButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_newTeamLevel;
    int lv_newMercLevel;
    int lv_itPlayer;
    int lv_leftTeamLevel;
    int lv_rightTeamLevel;

    // Automatic Variable Declarations
    int auto66C995D6_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_levelFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_levelFrameLockscreen, PlayerGroupAll(), true);
    auto66C995D6_val = EventDialogControl();
    if (auto66C995D6_val == libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamLevel = FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_triggeringPlayer));
            libSAND_gf_SetTeamLevel(lv_triggeringPlayer, lv_newTeamLevel, libGame_gv_teamOrderIndex_C);
            lv_leftTeamLevel = lv_newTeamLevel;
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_leftTeamLevel, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, 1.0, PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_A0CB8382"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_rightTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 1)].lv_heroUnit, null);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_rightTeamLevel, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, 1.0, PlayerGroupAll());
        }
    }
    else if (auto66C995D6_val == libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamLevel = FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_triggeringPlayer));
            libSAND_gf_SetTeamLevel(lv_triggeringPlayer, lv_newTeamLevel, libGame_gv_teamChaosIndex_C);
            lv_rightTeamLevel = lv_newTeamLevel;
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, lv_rightTeamLevel, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamLevelSlider, 1.0, PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_8ECCCA7B"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_leftTeamLevel = UnitXPGetCurrentLevel(libGame_gv_players[PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 1)].lv_heroUnit, null);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, lv_leftTeamLevel, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamLevelSlider, 1.0, PlayerGroupAll());
        }
    }
    else {
    }
    if ((lv_leftTeamLevel >= 1) && (lv_rightTeamLevel >= 1)) {
        lv_newMercLevel = ((lv_leftTeamLevel + lv_rightTeamLevel) / 2);
    }
    else {
        lv_newMercLevel = MaxI(lv_leftTeamLevel, lv_rightTeamLevel);
    }
    libSAND_gf_UpdateScaling(lv_newMercLevel);
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_levelFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetLevelButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetLevelButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TeamLevelSetLevelButtonPressed_Init () {
    libSAND_gt_TeamLevelSetLevelButtonPressed = TriggerCreate("libSAND_gt_TeamLevelSetLevelButtonPressed_Func");
    TriggerEnable(libSAND_gt_TeamLevelSetLevelButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_TeamLevelSetLevelButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Level Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TeamLevelCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_levelFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_levelFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TeamLevelCloseButtonPressed_Init () {
    libSAND_gt_TeamLevelCloseButtonPressed = TriggerCreate("libSAND_gt_TeamLevelCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_TeamLevelCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_TeamLevelCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Multiplier Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_XPMultiplierSliderValueChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;

    // Automatic Variable Declarations
    int auto1B6ADBC7_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B6ADBC7_val = EventDialogControl();
    if (auto1B6ADBC7_val == libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_5F5B45DC", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_5F5B45DC"), lv_triggeringPlayerGroup);
    }
    else if (auto1B6ADBC7_val == libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_5412FB7D", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_5412FB7D"), lv_triggeringPlayerGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_XPMultiplierSliderValueChanged_Init () {
    libSAND_gt_XPMultiplierSliderValueChanged = TriggerCreate("libSAND_gt_XPMultiplierSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_XPMultiplierSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_XPMultiplierSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Multiplier Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_XPMultiplierMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_leftTeamXPMultiplier;
    int lv_rightTeamXPMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());
    lv_leftTeamXPMultiplier = -1;
    lv_rightTeamXPMultiplier = -1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_setXPMultiplierButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer) == libGame_gv_teamOrderIndex_C)) {
        lv_leftTeamXPMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_xPMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (lv_leftTeamXPMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_rightTeamXPMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_xPMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (lv_rightTeamXPMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    else {
        lv_rightTeamXPMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_xPMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (lv_rightTeamXPMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_leftTeamXPMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_xPMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (lv_leftTeamXPMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_XPMultiplierMainButtonPressed_Init () {
    libSAND_gt_XPMultiplierMainButtonPressed = TriggerCreate("libSAND_gt_XPMultiplierMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_XPMultiplierMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_XPMultiplierMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Multiplier Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_XPMultiplierSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_newTeamXPMultiplier;
    int lv_otherTeamXPMultiplier;

    // Automatic Variable Declarations
    int auto4D8C7F2E_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameLockscreen, PlayerGroupAll(), true);
    auto4D8C7F2E_val = EventDialogControl();
    if (auto4D8C7F2E_val == libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamXPMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamXPMultiplier(lv_triggeringPlayer, lv_newTeamXPMultiplier, libGame_gv_teamOrderIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (lv_newTeamXPMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_E4D8F3CF"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_otherTeamXPMultiplier = FixedToInt((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_xPMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (lv_otherTeamXPMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else if (auto4D8C7F2E_val == libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamXPMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamXPMultiplier(lv_triggeringPlayer, lv_newTeamXPMultiplier, libGame_gv_teamChaosIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (lv_newTeamXPMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamXPMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_84CD83F6"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_otherTeamXPMultiplier = FixedToInt((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_xPMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (lv_otherTeamXPMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamXPMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else {
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetXPMultiplierButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetXPMultiplierButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_XPMultiplierSetButtonPressed_Init () {
    libSAND_gt_XPMultiplierSetButtonPressed = TriggerCreate("libSAND_gt_XPMultiplierSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_XPMultiplierSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_XPMultiplierSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Multiplier Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_XPMultiplierCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_xPMultiplierFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_xPMultiplierFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_XPMultiplierCloseButtonPressed_Init () {
    libSAND_gt_XPMultiplierCloseButtonPressed = TriggerCreate("libSAND_gt_XPMultiplierCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_XPMultiplierCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_XPMultiplierCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Time Multiplier Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_RespawnTimeMultiplierSliderValueChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7120DE09_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7120DE09_val = EventDialogControl();
    if (auto7120DE09_val == libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_2046F69A", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, EventPlayer())) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_2046F69A"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if (auto7120DE09_val == libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_714DB1A0", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, EventPlayer())) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_714DB1A0"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_RespawnTimeMultiplierSliderValueChanged_Init () {
    libSAND_gt_RespawnTimeMultiplierSliderValueChanged = TriggerCreate("libSAND_gt_RespawnTimeMultiplierSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_RespawnTimeMultiplierSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Time Multiplier Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_RespawnTimeMultiplierMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_leftTeamRespawnTimeMultiplier;
    int lv_rightTeamRespawnTimeMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = libCore_gv_playerGroupFromPlayer[EventPlayer()];
    lv_leftTeamRespawnTimeMultiplier = -1;
    lv_rightTeamRespawnTimeMultiplier = -1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_setRespawnTimeMultiplierButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer) == libGame_gv_teamOrderIndex_C)) {
        lv_leftTeamRespawnTimeMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_respawnTimeMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (lv_leftTeamRespawnTimeMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_rightTeamRespawnTimeMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_respawnTimeMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (lv_rightTeamRespawnTimeMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    else {
        lv_rightTeamRespawnTimeMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_respawnTimeMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (lv_rightTeamRespawnTimeMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_leftTeamRespawnTimeMultiplier = FixedToInt((100.0 * libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_respawnTimeMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (lv_leftTeamRespawnTimeMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_RespawnTimeMultiplierMainButtonPressed_Init () {
    libSAND_gt_RespawnTimeMultiplierMainButtonPressed = TriggerCreate("libSAND_gt_RespawnTimeMultiplierMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_RespawnTimeMultiplierMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Time Multiplier Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_RespawnTimeMultiplierSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_newTeamRespawnTimeMultiplier;
    int lv_otherTeamRespawnTimeMultiplier;

    // Automatic Variable Declarations
    int auto179DF2B2_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = libCore_gv_playerGroupFromPlayer[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameLockscreen, PlayerGroupAll(), true);
    auto179DF2B2_val = EventDialogControl();
    if (auto179DF2B2_val == libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamRespawnTimeMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamRespawnTimeMultiplier(lv_triggeringPlayer, lv_newTeamRespawnTimeMultiplier, libGame_gv_teamOrderIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (lv_newTeamRespawnTimeMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_239E0E91"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_otherTeamRespawnTimeMultiplier = FixedToInt((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_respawnTimeMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (lv_otherTeamRespawnTimeMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else if (auto179DF2B2_val == libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamRespawnTimeMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamRespawnTimeMultiplier(lv_triggeringPlayer, lv_newTeamRespawnTimeMultiplier, libGame_gv_teamChaosIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (lv_newTeamRespawnTimeMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamRespawnTimeMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_B4929708"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_otherTeamRespawnTimeMultiplier = FixedToInt((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_respawnTimeMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (lv_otherTeamRespawnTimeMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamRespawnTimeMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else {
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetRespawnTimeMultiplierButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetRespawnTimeMultiplierButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_RespawnTimeMultiplierSetButtonPressed_Init () {
    libSAND_gt_RespawnTimeMultiplierSetButtonPressed = TriggerCreate("libSAND_gt_RespawnTimeMultiplierSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_RespawnTimeMultiplierSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Time Multiplier Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_RespawnTimeMultiplierCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_respawnTimeFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_respawnTimeMultiplierFrameMain, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_RespawnTimeMultiplierCloseButtonPressed_Init () {
    libSAND_gt_RespawnTimeMultiplierCloseButtonPressed = TriggerCreate("libSAND_gt_RespawnTimeMultiplierCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_RespawnTimeMultiplierCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_RespawnTimeMultiplierCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooldown Multiplier Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CooldownMultiplierSliderValueChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto98ABAFE2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto98ABAFE2_val = EventDialogControl();
    if (auto98ABAFE2_val == libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_FDE64784", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, EventPlayer())) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_FDE64784"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if (auto98ABAFE2_val == libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_F2CF77F2", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, EventPlayer())) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierLabel, TextExpressionAssemble("Param/Expression/lib_SAND_F2CF77F2"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CooldownMultiplierSliderValueChanged_Init () {
    libSAND_gt_CooldownMultiplierSliderValueChanged = TriggerCreate("libSAND_gt_CooldownMultiplierSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_CooldownMultiplierSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_CooldownMultiplierSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooldown Multiplier Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CooldownMultiplierMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_leftTeamCooldownMultiplier;
    int lv_rightTeamCooldownMultiplier;
    fixed lv_cooldownMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = libCore_gv_playerGroupFromPlayer[EventPlayer()];
    lv_leftTeamCooldownMultiplier = -1;
    lv_rightTeamCooldownMultiplier = -1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_setCooldownMultiplierButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer) == libGame_gv_teamOrderIndex_C)) {
        lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
        lv_leftTeamCooldownMultiplier = FixedToInt((100.0 * lv_cooldownMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (lv_leftTeamCooldownMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
            lv_rightTeamCooldownMultiplier = FixedToInt((100.0 * lv_cooldownMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (lv_rightTeamCooldownMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    else {
        lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
        lv_rightTeamCooldownMultiplier = FixedToInt((100.0 * lv_cooldownMultiplier));
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (lv_rightTeamCooldownMultiplier / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
            lv_leftTeamCooldownMultiplier = FixedToInt((100.0 * lv_cooldownMultiplier));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (lv_leftTeamCooldownMultiplier / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CooldownMultiplierMainButtonPressed_Init () {
    libSAND_gt_CooldownMultiplierMainButtonPressed = TriggerCreate("libSAND_gt_CooldownMultiplierMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_CooldownMultiplierMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_CooldownMultiplierMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooldown Multiplier Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CooldownMultiplierSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    fixed lv_cooldownMultiplier;
    int lv_newTeamCooldownMultiplier;
    int lv_otherTeamCooldownMultiplier;

    // Automatic Variable Declarations
    int auto6FEBC7F1_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = libCore_gv_playerGroupFromPlayer[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameLockscreen, PlayerGroupAll(), true);
    auto6FEBC7F1_val = EventDialogControl();
    if (auto6FEBC7F1_val == libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamCooldownMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamCooldownMultiplier(lv_triggeringPlayer, lv_newTeamCooldownMultiplier, libGame_gv_teamOrderIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (lv_newTeamCooldownMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_E3E55690"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
            lv_otherTeamCooldownMultiplier = FixedToInt((lv_cooldownMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (lv_otherTeamCooldownMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else if (auto6FEBC7F1_val == libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamCooldownMultiplier = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamCooldownMultiplier(lv_triggeringPlayer, lv_newTeamCooldownMultiplier, libGame_gv_teamChaosIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (lv_newTeamCooldownMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamCooldownMultiplierSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_0D0E1AA0"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_cooldownMultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1));
            lv_otherTeamCooldownMultiplier = FixedToInt((lv_cooldownMultiplier * 100.0));
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (lv_otherTeamCooldownMultiplier / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamCooldownMultiplierSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else {
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetCooldownMultiplierButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetCooldownMultiplierButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CooldownMultiplierSetButtonPressed_Init () {
    libSAND_gt_CooldownMultiplierSetButtonPressed = TriggerCreate("libSAND_gt_CooldownMultiplierSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_CooldownMultiplierSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_CooldownMultiplierSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooldown Multiplier Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CooldownMultiplierCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_cooldownFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_cooldownMultiplierFrameMain, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CooldownMultiplierCloseButtonPressed_Init () {
    libSAND_gt_CooldownMultiplierCloseButtonPressed = TriggerCreate("libSAND_gt_CooldownMultiplierCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_CooldownMultiplierCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_CooldownMultiplierCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooldown Multiplier Controller Specific Abilities
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_CooldownMultiplierControllerSpecificAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    unit lv_itUnitCooldown;
    int lv_owner;
    int lv_itAbility;
    int lv_abilityIndex;
    int lv_heroIndex;
    fixed[libCore_gv_bALMaxTeams + 1] lv_cooldownChange;
    int lv_itTeam;
    int lv_ownerTeam;
    string lv_cooldownLink;
    string lv_chargeLink;
    string lv_abilLink;
    unitgroup lv_allHeroes;

    // Automatic Variable Declarations
    const int auto9A5032E6_ae = libCore_gv_bALMaxTeams;
    const int auto9A5032E6_ai = 1;
    unitgroup auto80485ECD_g;
    int auto80485ECD_u;
    int auto6E26117D_ae;
    const int auto6E26117D_ai = 1;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_allHeroes = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameStarted == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto9A5032E6_ai >= 0 && lv_itTeam <= auto9A5032E6_ae) || (auto9A5032E6_ai < 0 && lv_itTeam >= auto9A5032E6_ae) ) ; lv_itTeam += auto9A5032E6_ai ) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false)) > 0)) {
            lv_cooldownChange[lv_itTeam] = (1.0 - libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericGeneral", "Modification.RateMultiplierArray[Cooldown]", PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, 1)));
            lv_cooldownChange[lv_itTeam] = (libSAND_gv_cooldownMultiplierControllerMultuplier * lv_cooldownChange[lv_itTeam]);
        }
        else {
            lv_cooldownChange[lv_itTeam] = 0.0;
        }
    }
    if ((lv_cooldownChange[libGame_gv_teamOrderIndex_C] == 0.0) && (lv_cooldownChange[libGame_gv_teamChaosIndex_C] == 0.0)) {
        return true;
    }

    lv_allHeroes = UnitGetTrackedUnitGroup(null, "AllHeroicUnitsTrackingBehavior");
    auto80485ECD_g = lv_allHeroes;
    auto80485ECD_u = UnitGroupCount(auto80485ECD_g, c_unitCountAll);
    for (;; auto80485ECD_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto80485ECD_g, auto80485ECD_u);
        if (lv_itUnit == null) { break; }
        lv_owner = UnitGetOwner(lv_itUnit);
        if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == false)) {
            continue;
        }

        lv_ownerTeam = libGame_gf_TeamNumberOfPlayer(lv_owner);
        if ((lv_cooldownChange[lv_ownerTeam] == 0.0)) {
            continue;
        }

        if ((lv_itUnit != libGame_gv_players[lv_owner].lv_heroUnit) && (lv_itUnit != libGame_gv_players[lv_owner].lv_activeVehicle)) {
            continue;
        }

        lv_heroIndex = libCore_gf_HeroIndexOfUnit(lv_itUnit);
        if ((lv_heroIndex <= 0)) {
            continue;
        }

        auto6E26117D_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
        lv_itAbility = 1;
        for ( ; ( (auto6E26117D_ai >= 0 && lv_itAbility <= auto6E26117D_ae) || (auto6E26117D_ai < 0 && lv_itAbility >= auto6E26117D_ae) ) ; lv_itAbility += auto6E26117D_ai ) {
            lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbility];
            lv_abilLink = libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink;
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_abilityCooldownLocation == libCore_ge_AbilityCooldownLocation_Player)) {
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_owner);
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_owner);
                if ((PlayerGetCooldown(lv_owner, lv_cooldownLink) > 0.0)) {
                    PlayerAddCooldown(lv_owner, lv_cooldownLink, lv_cooldownChange[lv_ownerTeam]);
                }

                if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_UsesCharges == true)) {
                    if ((PlayerGetChargeRegen(lv_owner, lv_chargeLink) > 0.0)) {
                        PlayerAddChargeRegenRemaining(lv_owner, lv_chargeLink, lv_cooldownChange[lv_ownerTeam]);
                    }

                }

            }

            if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_CooldownPerUnit == true)) {
                libGame_gf_StormUniversalModifyCooldownPerUnitCDRAbility(lv_owner, lv_abilLink, lv_cooldownChange[lv_ownerTeam], lv_abilityIndex);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_CooldownMultiplierControllerSpecificAbilities_Init () {
    libSAND_gt_CooldownMultiplierControllerSpecificAbilities = TriggerCreate("libSAND_gt_CooldownMultiplierControllerSpecificAbilities_Func");
    TriggerEnable(libSAND_gt_CooldownMultiplierControllerSpecificAbilities, false);
    TriggerAddEventTimePeriodic(libSAND_gt_CooldownMultiplierControllerSpecificAbilities, libSAND_gv_cooldownMultiplierControllerMultuplier, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Dealt Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageDealtSliderValueChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;

    // Automatic Variable Declarations
    int auto9FDB61F3_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamDDSlider) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamDDSlider)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9FDB61F3_val = EventDialogControl();
    if (auto9FDB61F3_val == libSAND_gv_sandboxPanel.lv_leftTeamDDSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_C6815668", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamDDLabel, TextExpressionAssemble("Param/Expression/lib_SAND_C6815668"), lv_triggeringPlayerGroup);
    }
    else if (auto9FDB61F3_val == libSAND_gv_sandboxPanel.lv_rightTeamDDSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_AB6DFA84", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamDDLabel, TextExpressionAssemble("Param/Expression/lib_SAND_AB6DFA84"), lv_triggeringPlayerGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageDealtSliderValueChanged_Init () {
    libSAND_gt_DamageDealtSliderValueChanged = TriggerCreate("libSAND_gt_DamageDealtSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_DamageDealtSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageDealtSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Dealt Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageDealtMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_leftTeamDamage;
    int lv_rightTeamDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());
    lv_leftTeamDamage = -1;
    lv_rightTeamDamage = -1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_setDamageDealtButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer) == libGame_gv_teamOrderIndex_C)) {
        lv_leftTeamDamage = PlayerGetPropertyInt(lv_triggeringPlayer, c_playerPropDamageDealtPercent);
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (lv_leftTeamDamage / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_rightTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer), 1), c_playerPropDamageDealtPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (lv_rightTeamDamage / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    else {
        lv_rightTeamDamage = PlayerGetPropertyInt(lv_triggeringPlayer, c_playerPropDamageDealtPercent);
        libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (lv_rightTeamDamage / 25), lv_triggeringPlayerGroup);
        if ((PlayerGroupCount(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer)) >= 1)) {
            lv_leftTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_EnemyPlayerGroupOfPlayer(lv_triggeringPlayer), 1), c_playerPropDamageDealtPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (lv_leftTeamDamage / 25), lv_triggeringPlayerGroup);
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (100 / 25), lv_triggeringPlayerGroup);
        }
    }
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageDealtMainButtonPressed_Init () {
    libSAND_gt_DamageDealtMainButtonPressed = TriggerCreate("libSAND_gt_DamageDealtMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageDealtMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageDealtMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Dealt Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageDealtSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_newTeamDamage;
    int lv_otherTeamDamage;

    // Automatic Variable Declarations
    int auto186A4209_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameLockscreen, PlayerGroupAll(), true);
    auto186A4209_val = EventDialogControl();
    if (auto186A4209_val == libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamDamage = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamDamageDealt(lv_triggeringPlayer, lv_newTeamDamage, libGame_gv_teamOrderIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (lv_newTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_3CA834E7"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_otherTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 1), c_playerPropDamageDealtPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (lv_otherTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else if (auto186A4209_val == libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamDamage = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamDamageDealt(lv_triggeringPlayer, lv_newTeamDamage, libGame_gv_teamChaosIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (lv_newTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDDSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_86A6933E"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_otherTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 1), c_playerPropDamageDealtPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (lv_otherTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDDSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else {
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetDDButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetDDButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageDealtSetButtonPressed_Init () {
    libSAND_gt_DamageDealtSetButtonPressed = TriggerCreate("libSAND_gt_DamageDealtSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageDealtSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageDealtSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Dealt Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageDealtCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_damageDealtFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageDealtFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageDealtCloseButtonPressed_Init () {
    libSAND_gt_DamageDealtCloseButtonPressed = TriggerCreate("libSAND_gt_DamageDealtCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageDealtCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageDealtCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Taken Slider Value Changed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageTakenSliderValueChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;

    // Automatic Variable Declarations
    int auto7AE07762_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto7AE07762_val = EventDialogControl();
    if (auto7AE07762_val == libSAND_gv_sandboxPanel.lv_leftTeamDTSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_E95FF519", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_leftTeamDTLabel, TextExpressionAssemble("Param/Expression/lib_SAND_E95FF519"), lv_triggeringPlayerGroup);
    }
    else if (auto7AE07762_val == libSAND_gv_sandboxPanel.lv_rightTeamDTSlider) {
        TextExpressionSetToken("Param/Expression/lib_SAND_2E0D157E", "A", IntToText((FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, lv_triggeringPlayer)) * 25)));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_rightTeamDTLabel, TextExpressionAssemble("Param/Expression/lib_SAND_2E0D157E"), lv_triggeringPlayerGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageTakenSliderValueChanged_Init () {
    libSAND_gt_DamageTakenSliderValueChanged = TriggerCreate("libSAND_gt_DamageTakenSliderValueChanged_Func");
    TriggerEnable(libSAND_gt_DamageTakenSliderValueChanged, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageTakenSliderValueChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Taken Main Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageTakenMainButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_leftTeamDamage;
    int lv_rightTeamDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());
    lv_leftTeamDamage = -1;
    lv_rightTeamDamage = -1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_setDamageTakenButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false))) {
        return true;
    }

    if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
        lv_leftTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 1), c_playerPropDamageTakenPercent);
    }
    else {
        lv_leftTeamDamage = 100;
    }
    libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, (lv_leftTeamDamage / 25), lv_triggeringPlayerGroup);
    if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
        lv_rightTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 1), c_playerPropDamageTakenPercent);
    }
    else {
        lv_rightTeamDamage = 100;
    }
    libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, (lv_rightTeamDamage / 25), lv_triggeringPlayerGroup);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(lv_triggeringPlayer, false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameMain, lv_triggeringPlayerGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageTakenMainButtonPressed_Init () {
    libSAND_gt_DamageTakenMainButtonPressed = TriggerCreate("libSAND_gt_DamageTakenMainButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageTakenMainButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageTakenMainButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Taken Set Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageTakenSetButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    playergroup lv_triggeringPlayerGroup;
    int lv_newTeamDamage;
    int lv_otherTeamDamage;

    // Automatic Variable Declarations
    int autoF797CA0A_val;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_triggeringPlayerGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameLockscreen, lv_triggeringPlayer) == true)) {
        return true;
    }

    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameLockscreen, PlayerGroupAll(), true);
    autoF797CA0A_val = EventDialogControl();
    if (autoF797CA0A_val == libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_newTeamDamage = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamDamageTaken(lv_triggeringPlayer, lv_newTeamDamage, libGame_gv_teamOrderIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, (lv_newTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_CBE1A9EB"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_otherTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 1), c_playerPropDamageTakenPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, (lv_otherTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else if (autoF797CA0A_val == libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false)) >= 1)) {
            lv_newTeamDamage = (FixedToInt(libNtve_gf_DialogItemValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, lv_triggeringPlayer)) * 25);
            libSAND_gf_SetTeamDamageTaken(lv_triggeringPlayer, lv_newTeamDamage, libGame_gv_teamChaosIndex_C);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, (lv_newTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_rightTeamDTSlider, (100 / 25), PlayerGroupAll());
            UIDisplayMessage(lv_triggeringPlayerGroup, c_messageAreaChat, StringExternal("Param/Value/lib_SAND_1CFCCC8D"));
        }
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_otherTeamDamage = PlayerGetPropertyInt(PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 1), c_playerPropDamageTakenPercent);
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, (lv_otherTeamDamage / 25), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemCurrentValue(libSAND_gv_sandboxPanel.lv_leftTeamDTSlider, (100 / 25), PlayerGroupAll());
        }
    }
    else {
    }
    Wait(libSAND_gv_panelLockoutWait_C, c_timeGame);
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameLockscreen, PlayerGroupAll(), false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_leftTeamSetDTButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_rightTeamSetDTButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageTakenSetButtonPressed_Init () {
    libSAND_gt_DamageTakenSetButtonPressed = TriggerCreate("libSAND_gt_DamageTakenSetButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageTakenSetButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageTakenSetButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Taken Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DamageTakenCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_damageTakenFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_damageTakenFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DamageTakenCloseButtonPressed_Init () {
    libSAND_gt_DamageTakenCloseButtonPressed = TriggerCreate("libSAND_gt_DamageTakenCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_DamageTakenCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_DamageTakenCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Dummy Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SpawnDummyButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnDummyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_mainPanelLockscreen, EventPlayer()) == true) || (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false) || (libSAND_gv_spawningDummyGoing[EventPlayer()] == true))) {
        return true;
    }

    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), false);
    PlayerOptionOverride(EventPlayer(), "camerafollow", "0");
    libSAND_gv_spawningDummyGoing[EventPlayer()] = true;
    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_spawnDummyFrameMain, PlayerGroupSingle(EventPlayer()), true);
    while (!((libSAND_gv_spawningDummyGoing[EventPlayer()] == false))) {
        Wait(0.0625, c_timeGame);
    }
    PlayerOptionOverride(EventPlayer(), "camerafollow", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SpawnDummyButtonPressed_Init () {
    libSAND_gt_SpawnDummyButtonPressed = TriggerCreate("libSAND_gt_SpawnDummyButtonPressed_Func");
    TriggerEnable(libSAND_gt_SpawnDummyButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SpawnDummyButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Dummy Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SpawnDummyCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnDummyFrameCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libSAND_gv_sandboxPanel.lv_spawnDummyFrameMain, PlayerGroupSingle(EventPlayer()), false);
    libSAND_gf_EnableDisableMainPanelButtonsforPlayer(EventPlayer(), true);
    libSAND_gv_spawningDummyGoing[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SpawnDummyCloseButtonPressed_Init () {
    libSAND_gt_SpawnDummyCloseButtonPressed = TriggerCreate("libSAND_gt_SpawnDummyCloseButtonPressed_Func");
    TriggerEnable(libSAND_gt_SpawnDummyCloseButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SpawnDummyCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Dummy Dummy Button Pressed
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_SpawnDummyDummyButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isTargetDummy;
    string lv_dummyUnitType;
    int lv_forPlayer;
    unit lv_heroUnitGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton) || (EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnDummyFrameHealingButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
    }
    else {
        return true;
    }
    if ((DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == false)) {
        return true;
    }

    if ((EventDialogControl() == libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton)) {
        libSAND_gv_spawningDummyIsTarget[EventPlayer()] = true;
    }
    else {
        libSAND_gv_spawningDummyIsTarget[EventPlayer()] = false;
    }
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameCloseButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameHealingButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    libSAND_gf_SpawnDummy(libSAND_gv_spawningDummyIsTarget[EventPlayer()], EventPlayer());
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameCloseButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameHealingButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    DialogControlSetEnabled(libSAND_gv_sandboxPanel.lv_spawnDummyFrameTargetButton, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_SpawnDummyDummyButtonPressed_Init () {
    libSAND_gt_SpawnDummyDummyButtonPressed = TriggerCreate("libSAND_gt_SpawnDummyDummyButtonPressed_Func");
    TriggerEnable(libSAND_gt_SpawnDummyDummyButtonPressed, false);
    TriggerAddEventDialogControl(libSAND_gt_SpawnDummyDummyButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Target Dummy Damage Monitor
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TargetDummyDamageMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentTime;
    fixed lv_timeFromLastDamage;
    int lv_itTeam;
    int lv_itPlayer;
    unit lv_itDummy;
    int lv_roundDamage;

    // Automatic Variable Declarations
    const int auto92C3AB0A_ae = libCore_gv_bALMaxTeams;
    const int auto92C3AB0A_ai = 1;
    playergroup auto5B9390EB_g;
    playergroup autoF009ADB9_g;
    unitgroup auto92F0742E_g;
    int auto92F0742E_u;
    playergroup autoE97189C1_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTime = GameGetMissionTime();
    lv_itTeam = 1;
    for ( ; ( (auto92C3AB0A_ai >= 0 && lv_itTeam <= auto92C3AB0A_ae) || (auto92C3AB0A_ai < 0 && lv_itTeam >= auto92C3AB0A_ae) ) ; lv_itTeam += auto92C3AB0A_ai ) {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false)) == 0)) {
            continue;
        }

        lv_timeFromLastDamage = (lv_currentTime - libSAND_gv_targetDummyDamageTeamTime[lv_itTeam]);
        if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_dummyDPSMeterPanel, PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), 1)) == true)) {
            if ((lv_timeFromLastDamage >= libSAND_gv_targetDummyDamageCooldown_C)) {
                libSAND_gv_targetDummyDamageTeamTimeStart[lv_itTeam] = 0.0;
                libSAND_gv_targetDummyDamageTeamTime[lv_itTeam] = 0.0;
                libSAND_gv_targetDummyDamageTeam[lv_itTeam] = 0.0;
                libSAND_gv_targetDummyDamageTeamOld[lv_itTeam] = 0.0;
                libSAND_gf_SandboxPanelShowHideDummyPanel(false, libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDamageTeamLabel, IntToText(0), libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDPSTeamLabel, IntToText(0), libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
                auto5B9390EB_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
                lv_itPlayer = -1;
                while (true) {
                    lv_itPlayer = PlayerGroupNextPlayer(auto5B9390EB_g, lv_itPlayer);
                    if (lv_itPlayer < 0) { break; }
                    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDamageMineLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                    libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDPSMineLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                    libSAND_gv_targetDummyDamagePlayerTimeStart[lv_itPlayer] = 0.0;
                    libSAND_gv_targetDummyDamagePlayerTime[lv_itPlayer] = 0.0;
                    libSAND_gv_targetDummyDamagePlayer[lv_itPlayer] = 0.0;
                    libSAND_gv_targetDummyDamagePlayerOld[lv_itPlayer] = 0.0;
                }
                autoF009ADB9_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
                lv_itPlayer = -1;
                while (true) {
                    lv_itPlayer = PlayerGroupNextPlayer(autoF009ADB9_g, lv_itPlayer);
                    if (lv_itPlayer < 0) { break; }
                    auto92F0742E_g = libSAND_gv_targetDummies[lv_itPlayer];
                    auto92F0742E_u = UnitGroupCount(auto92F0742E_g, c_unitCountAll);
                    for (;; auto92F0742E_u -= 1) {
                        lv_itDummy = UnitGroupUnitFromEnd(auto92F0742E_g, auto92F0742E_u);
                        if (lv_itDummy == null) { break; }
                        UnitSetPropertyFixed(lv_itDummy, c_unitPropLifePercent, 100.0);
                    }
                }
                continue;
            }

        }
        else {
            if ((libSAND_gv_targetDummyDamageTeamTimeStart[lv_itTeam] > 0.0)) {
                libSAND_gf_SandboxPanelShowHideDummyPanel(true, libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
            }

        }
        if ((libSAND_gv_targetDummyDamageTeam[lv_itTeam] <= libSAND_gv_targetDummyDamageTeamOld[lv_itTeam])) {
            continue;
        }

        libSAND_gv_targetDummyDamageTeamOld[lv_itTeam] = libSAND_gv_targetDummyDamageTeam[lv_itTeam];
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDamageTeamLabel, IntToText(RoundI(libSAND_gv_targetDummyDamageTeam[lv_itTeam])), libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDPSTeamLabel, IntToText(RoundI((libSAND_gv_targetDummyDamageTeam[lv_itTeam] / MaxF((lv_currentTime - libSAND_gv_targetDummyDamageTeamTimeStart[lv_itTeam]), 1.0)))), libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
        autoE97189C1_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoE97189C1_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_timeFromLastDamage = (lv_currentTime - libSAND_gv_targetDummyDamagePlayerTime[lv_itPlayer]);
            if ((lv_timeFromLastDamage >= libSAND_gv_targetDummyDamageCooldown_C)) {
                libSAND_gv_targetDummyDamagePlayerTimeStart[lv_itPlayer] = 0.0;
                libSAND_gv_targetDummyDamagePlayerTime[lv_itPlayer] = 0.0;
                libSAND_gv_targetDummyDamagePlayer[lv_itPlayer] = 0.0;
                libSAND_gv_targetDummyDamagePlayerOld[lv_itPlayer] = 0.0;
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDamageMineLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDPSMineLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                continue;
            }

            if ((libSAND_gv_targetDummyDamagePlayer[lv_itPlayer] <= libSAND_gv_targetDummyDamagePlayerOld[lv_itPlayer])) {
                continue;
            }

            libSAND_gv_targetDummyDamagePlayerOld[lv_itPlayer] = libSAND_gv_targetDummyDamagePlayer[lv_itPlayer];
            libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDamageMineLabel, IntToText(RoundI(libSAND_gv_targetDummyDamagePlayer[lv_itPlayer])), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyDPSMineLabel, IntToText(RoundI((libSAND_gv_targetDummyDamagePlayer[lv_itPlayer] / MaxF((lv_currentTime - libSAND_gv_targetDummyDamagePlayerTimeStart[lv_itPlayer]), 1.0)))), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TargetDummyDamageMonitor_Init () {
    libSAND_gt_TargetDummyDamageMonitor = TriggerCreate("libSAND_gt_TargetDummyDamageMonitor_Func");
    TriggerEnable(libSAND_gt_TargetDummyDamageMonitor, false);
    TriggerAddEventTimePeriodic(libSAND_gt_TargetDummyDamageMonitor, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Target Dummy Takes Damage
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_TargetDummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentTime;
    int lv_dmgPlayer;
    int lv_dmgTeam;
    fixed lv_dmgTaken;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TargetHeroDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dmgPlayer = EventUnitDamageSourcePlayer();
    if ((libGame_gf_PlayerIsHeroPlayer(lv_dmgPlayer) == false)) {
        return true;
    }

    lv_dmgTeam = libGame_gf_TeamNumberOfPlayer(lv_dmgPlayer);
    lv_dmgTaken = EventUnitDamageAmount();
    if ((lv_dmgTaken <= 0.0)) {
        return true;
    }

    lv_currentTime = GameGetMissionTime();
    libSAND_gv_targetDummyDamageTeam[lv_dmgTeam] += lv_dmgTaken;
    libSAND_gv_targetDummyDamagePlayer[lv_dmgPlayer] += lv_dmgTaken;
    libSAND_gv_targetDummyDamageTeamTime[lv_dmgTeam] = lv_currentTime;
    libSAND_gv_targetDummyDamagePlayerTime[lv_dmgPlayer] = lv_currentTime;
    if ((libSAND_gv_targetDummyDamageTeamTimeStart[lv_dmgTeam] <= 0.0)) {
        libSAND_gv_targetDummyDamageTeamTimeStart[lv_dmgTeam] = lv_currentTime;
    }

    if ((libSAND_gv_targetDummyDamagePlayerTimeStart[lv_dmgPlayer] <= 0.0)) {
        libSAND_gv_targetDummyDamagePlayerTimeStart[lv_dmgPlayer] = lv_currentTime;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_TargetDummyTakesDamage_Init () {
    libSAND_gt_TargetDummyTakesDamage = TriggerCreate("libSAND_gt_TargetDummyTakesDamage_Func");
    TriggerEnable(libSAND_gt_TargetDummyTakesDamage, false);
    TriggerAddEventUnitDamaged(libSAND_gt_TargetDummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing Dummy Damage Monitor
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_HealingDummyDamageMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_forPlayers;
    fixed lv_currentTime;
    fixed lv_timeFromLastHeal;
    int lv_itTeam;
    int lv_itPlayer;
    unit lv_itDummy;
    int lv_roundDamage;

    // Automatic Variable Declarations
    playergroup auto8561B76F_g;
    unitgroup autoCA639B01_g;
    int autoCA639B01_u;

    // Variable Initialization
    lv_forPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTime = GameGetMissionTime();
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_forPlayers);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_forPlayers);
    auto8561B76F_g = lv_forPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8561B76F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_timeFromLastHeal = (lv_currentTime - libSAND_gv_healingDummyHealTime[lv_itPlayer]);
        if ((DialogControlIsVisible(libSAND_gv_sandboxPanel.lv_dummyHealingMeterPanel, lv_itPlayer) == true)) {
            if ((lv_timeFromLastHeal >= libSAND_gv_healingDummyHealCooldown_C)) {
                libSAND_gv_healingDummyHealTimeStart[lv_itPlayer] = 0.0;
                libSAND_gv_healingDummyHealTime[lv_itPlayer] = 0.0;
                libSAND_gv_healingDummyHeal[lv_itPlayer] = 0.0;
                libSAND_gv_healingDummyHealOld[lv_itPlayer] = 0.0;
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyHealLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyHealPerSecondLabel, IntToText(0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                libSAND_gf_SandboxPanelShowHideHealingDummyPanel(false, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                autoCA639B01_g = libSAND_gv_healingDummies[lv_itPlayer];
                autoCA639B01_u = UnitGroupCount(autoCA639B01_g, c_unitCountAll);
                for (;; autoCA639B01_u -= 1) {
                    lv_itDummy = UnitGroupUnitFromEnd(autoCA639B01_g, autoCA639B01_u);
                    if (lv_itDummy == null) { break; }
                    UnitSetPropertyFixed(lv_itDummy, c_unitPropLife, 1.0);
                    ActorSend(libNtve_gf_MainActorofUnit(lv_itDummy), "Signal ResetHealth");
                }
                continue;
            }

        }
        else {
            if ((libSAND_gv_healingDummyHealTimeStart[lv_itPlayer] > 0.0)) {
                libSAND_gf_SandboxPanelShowHideHealingDummyPanel(true, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            }

        }
        if ((libSAND_gv_healingDummyHeal[lv_itPlayer] <= libSAND_gv_healingDummyHealOld[lv_itPlayer])) {
            continue;
        }

        libSAND_gv_healingDummyHealOld[lv_itPlayer] = libSAND_gv_healingDummyHeal[lv_itPlayer];
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyHealLabel, IntToText(RoundI(libSAND_gv_healingDummyHeal[lv_itPlayer])), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemText(libSAND_gv_sandboxPanel.lv_dummyHealPerSecondLabel, IntToText(RoundI((libSAND_gv_healingDummyHeal[lv_itPlayer] / MaxF((lv_currentTime - libSAND_gv_healingDummyHealTimeStart[lv_itPlayer]), 1.0)))), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_HealingDummyDamageMonitor_Init () {
    libSAND_gt_HealingDummyDamageMonitor = TriggerCreate("libSAND_gt_HealingDummyDamageMonitor_Func");
    TriggerEnable(libSAND_gt_HealingDummyDamageMonitor, false);
    TriggerAddEventTimePeriodic(libSAND_gt_HealingDummyDamageMonitor, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing Dummy Getting Heal
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_HealingDummyGettingHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentTime;
    int lv_healPlayer;
    fixed lv_healDone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentTime = GameGetMissionTime();
    lv_healPlayer = EventUnitHealLaunchPlayer();
    lv_healDone = EventUnitHealAmount();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HealingHeroDummy"))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_healPlayer) == true))) {
            return false;
        }

        if (!((lv_healDone > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSAND_gv_healingDummyHeal[lv_healPlayer] += lv_healDone;
    libSAND_gv_healingDummyHealTime[lv_healPlayer] = lv_currentTime;
    if ((libSAND_gv_healingDummyHealTimeStart[lv_healPlayer] <= 0.0)) {
        libSAND_gv_healingDummyHealTimeStart[lv_healPlayer] = lv_currentTime;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_HealingDummyGettingHeal_Init () {
    libSAND_gt_HealingDummyGettingHeal = TriggerCreate("libSAND_gt_HealingDummyGettingHeal_Func");
    TriggerEnable(libSAND_gt_HealingDummyGettingHeal, false);
    TriggerAddEventUnitHealed(libSAND_gt_HealingDummyGettingHeal, null, c_unitVitalLife, null);
    TriggerAddEventUnitHealed(libSAND_gt_HealingDummyGettingHeal, null, c_unitVitalShields, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Reset all towns
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DEBUGResetalltowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;

    // Automatic Variable Declarations
    int auto22A06D01_ae;
    const int auto22A06D01_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SAND_175B8C4F"), true);
    auto22A06D01_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto22A06D01_ai >= 0 && lv_itTown <= auto22A06D01_ae) || (auto22A06D01_ai < 0 && lv_itTown >= auto22A06D01_ae) ) ; lv_itTown += auto22A06D01_ai ) {
        libSAND_gf_SBXRespawnTown(lv_itTown);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DEBUGResetalltowns_Init () {
    libSAND_gt_DEBUGResetalltowns = TriggerCreate("libSAND_gt_DEBUGResetalltowns_Func");
    TriggerEnable(libSAND_gt_DEBUGResetalltowns, false);
    TriggerAddEventChatMessage(libSAND_gt_DEBUGResetalltowns, c_playerAny, "reset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - FollowStatus
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DEBUGFollowStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoF51F97BC_g;
    int autoF51F97BC_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_unitGroup, CameraFollowUnitGroupGet(EventPlayer()));
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SAND_79444D65"), true);
    autoF51F97BC_g = lv_unitGroup;
    autoF51F97BC_u = UnitGroupCount(autoF51F97BC_g, c_unitCountAll);
    for (;; autoF51F97BC_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoF51F97BC_g, autoF51F97BC_u);
        if (lv_itUnit == null) { break; }
        TextExpressionSetToken("Param/Expression/lib_SAND_1ABBD346", "A", UnitGetName(lv_itUnit));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_SAND_1ABBD346"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DEBUGFollowStatus_Init () {
    libSAND_gt_DEBUGFollowStatus = TriggerCreate("libSAND_gt_DEBUGFollowStatus_Func");
    TriggerEnable(libSAND_gt_DEBUGFollowStatus, false);
    TriggerAddEventChatMessage(libSAND_gt_DEBUGFollowStatus, c_playerAny, "Status", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Unfollow
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DEBUGUnfollow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SAND_E4CA327E"), true);
    CameraFollowUnitGroup(EventPlayer(), CameraFollowUnitGroupGet(EventPlayer()), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DEBUGUnfollow_Init () {
    libSAND_gt_DEBUGUnfollow = TriggerCreate("libSAND_gt_DEBUGUnfollow_Func");
    TriggerEnable(libSAND_gt_DEBUGUnfollow, false);
    TriggerAddEventChatMessage(libSAND_gt_DEBUGUnfollow, c_playerAny, "Unfollow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Follow
//--------------------------------------------------------------------------------------------------
bool libSAND_gt_DEBUGFollow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_SAND_D11D5B5D"), true);
    CameraFollowUnitGroup(EventPlayer(), libGame_gv_players[EventPlayer()].lv_cameraCurrentTargetGroup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSAND_gt_DEBUGFollow_Init () {
    libSAND_gt_DEBUGFollow = TriggerCreate("libSAND_gt_DEBUGFollow_Func");
    TriggerEnable(libSAND_gt_DEBUGFollow, false);
    TriggerAddEventChatMessage(libSAND_gt_DEBUGFollow, c_playerAny, "Follow", true);
}

void libSAND_InitTriggers () {
    libSAND_gt_IncludeSandbox_Init();
    libSAND_gt_SandboxInit_Init();
    libSAND_gt_SandboxTurnOn_Init();
    libSAND_gt_SandboxTurnOff_Init();
    libSAND_gt_SandboxLeaderDisconnected_Init();
    libSAND_gt_SandboxChatMessage_Init();
    libSAND_gt_SandboxPanelInitialize_Init();
    libSAND_gt_DisableButtonsUntilGameStart_Init();
    libSAND_gt_SharedControlCheckboxClicked_Init();
    libSAND_gt_SBXAddTownData_Init();
    libSAND_gt_ResetStructuresButtonPressed_Init();
    libSAND_gt_MovePlayerHereButtonPressed_Init();
    libSAND_gt_ResetTalentsButtonPressed_Init();
    libSAND_gt_InstantRespawnButtonPressed_Init();
    libSAND_gt_CompleteQuestsButtonPressed_Init();
    libSAND_gt_ResetHPMapButtonPressed_Init();
    libSAND_gt_SpawnCampsButtonPressed_Init();
    libSAND_gt_ClearAllDummiesButtonPressed_Init();
    libSAND_gt_ResetCDButtonPressed_Init();
    libSAND_gt_MapMechanicButtonPressed_Init();
    libSAND_gt_MapMechanicCheckboxPressed_Init();
    libSAND_gt_MapMechanicCloseButtonPressed_Init();
    libSAND_gt_MapMechanicWarningStarted_Init();
    libSAND_gt_ToggleMinionsButtonPressed_Init();
    libSAND_gt_ToggleMinionsCheckboxPressed_Init();
    libSAND_gt_ToggleMinionsCloseButtonPressed_Init();
    libSAND_gt_ToggleFoWButtonPressed_Init();
    libSAND_gt_ToggleFoWCheckboxPressed_Init();
    libSAND_gt_ToggleFoWCloseButtonPressed_Init();
    libSAND_gt_InfiniteManaButtonPressed_Init();
    libSAND_gt_InfiniteManaCheckboxPressed_Init();
    libSAND_gt_InfiniteManaBehavior_Init();
    libSAND_gt_InfiniteManaCloseButtonPressed_Init();
    libSAND_gt_SetGameSpeedMainButtonPressed_Init();
    libSAND_gt_SetGameSpeedSetButtonPressed_Init();
    libSAND_gt_SetGameSpeedCloseButtonPressed_Init();
    libSAND_gt_GameSpeedChanged_Init();
    libSAND_gt_TeamLevelSliderValueChanged_Init();
    libSAND_gt_TeamLevelMainButtonPressed_Init();
    libSAND_gt_TeamLevelSetLevelButtonPressed_Init();
    libSAND_gt_TeamLevelCloseButtonPressed_Init();
    libSAND_gt_XPMultiplierSliderValueChanged_Init();
    libSAND_gt_XPMultiplierMainButtonPressed_Init();
    libSAND_gt_XPMultiplierSetButtonPressed_Init();
    libSAND_gt_XPMultiplierCloseButtonPressed_Init();
    libSAND_gt_RespawnTimeMultiplierSliderValueChanged_Init();
    libSAND_gt_RespawnTimeMultiplierMainButtonPressed_Init();
    libSAND_gt_RespawnTimeMultiplierSetButtonPressed_Init();
    libSAND_gt_RespawnTimeMultiplierCloseButtonPressed_Init();
    libSAND_gt_CooldownMultiplierSliderValueChanged_Init();
    libSAND_gt_CooldownMultiplierMainButtonPressed_Init();
    libSAND_gt_CooldownMultiplierSetButtonPressed_Init();
    libSAND_gt_CooldownMultiplierCloseButtonPressed_Init();
    libSAND_gt_CooldownMultiplierControllerSpecificAbilities_Init();
    libSAND_gt_DamageDealtSliderValueChanged_Init();
    libSAND_gt_DamageDealtMainButtonPressed_Init();
    libSAND_gt_DamageDealtSetButtonPressed_Init();
    libSAND_gt_DamageDealtCloseButtonPressed_Init();
    libSAND_gt_DamageTakenSliderValueChanged_Init();
    libSAND_gt_DamageTakenMainButtonPressed_Init();
    libSAND_gt_DamageTakenSetButtonPressed_Init();
    libSAND_gt_DamageTakenCloseButtonPressed_Init();
    libSAND_gt_SpawnDummyButtonPressed_Init();
    libSAND_gt_SpawnDummyCloseButtonPressed_Init();
    libSAND_gt_SpawnDummyDummyButtonPressed_Init();
    libSAND_gt_TargetDummyDamageMonitor_Init();
    libSAND_gt_TargetDummyTakesDamage_Init();
    libSAND_gt_HealingDummyDamageMonitor_Init();
    libSAND_gt_HealingDummyGettingHeal_Init();
    libSAND_gt_DEBUGResetalltowns_Init();
    libSAND_gt_DEBUGFollowStatus_Init();
    libSAND_gt_DEBUGUnfollow_Init();
    libSAND_gt_DEBUGFollow_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSAND_InitLib_completed = false;

void libSAND_InitLib () {
    if (libSAND_InitLib_completed) {
        return;
    }

    libSAND_InitLib_completed = true;

    libSAND_InitLibraries();
    libSAND_InitVariables();
    libSAND_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibGame"
include "LibSprt"
include "LibMapM"
include "LibUIUI"

