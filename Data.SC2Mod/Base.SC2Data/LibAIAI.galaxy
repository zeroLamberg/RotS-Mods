include "TriggerLibs/NativeLib"
include "LibCore_h"
include "LibGame_h"
include "LibMapM_h"
include "LibUIUI_h"

include "LibAIAI_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAIAI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libAIAI_InitVariables_completed = false;

void libAIAI_InitVariables () {
    int init_i;
    int init_i1;

    if (libAIAI_InitVariables_completed) {
        return;
    }

    libAIAI_InitVariables_completed = true;

    libAIAI_gv_aIRangedMinionWeaponRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, ("RangedMinion"), "Range", c_playerAny);
    libAIAI_gv_aIMinionEnemyMinionAttackRange = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, ("RangedMinion"), "Range", c_playerAny) + 1.0);
    libAIAI_gv_aIMinionAttackHeroDistance = (libAIAI_gv_aIRangedMinionWeaponRange + 0.5);
    libAIAI_gv_aIHeroLaneBucketWidth = ((libAIAI_gv_aIHeroMaximumLaneOffset * 2.0) / libAIAI_gv_aIHeroNumberofLaneBuckets);
    libAIAI_gv_aIHeroMapMechanicStackMaximum = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MapMechanicStack", "MaxStackCount", c_playerAny);
    libAIAI_gv_aITowerRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, ("KingsCore"), "Range", c_playerAny)) - 0.25);
    libAIAI_gv_uF_MinionAI_EnemyMinions = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_AnyEnemyMinions2 = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libAIAI_gv_uF_MinionAI_EnemyStructure = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_EnemyHero = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    for (init_i = 0; init_i <= libAIAI_gv_minionAIMaxActiveMinions; init_i += 1) {
        libAIAI_gv_minionAIActiveMinions[init_i].lv_state = libAIAI_ge_MinionAIStates_Advancing;
        libAIAI_gv_minionAIActiveMinions[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libAIAI_gv_uF_MinionAI_AnyEnemyMinions = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_AnyEnemySummoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_AnyEnemyForStructure = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_GetNearestEnemyHero = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group_Minion = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group_Summoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group_CFH = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Required_Summoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Heroic = UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Minion = UnitFilter((1 << c_targetFilterBiological), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Ignored = UnitFilter((1 << c_targetFilterArmored), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Invulnerable = UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Stasis = UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Visible = UnitFilter((1 << c_targetFilterVisible), 0, 0, 0);
    for (init_i = 0; init_i <= libAIAI_gv_defenderAIMaxNumberOfDefenderAI; init_i += 1) {
        libAIAI_gv_defenderAI[init_i].lv_defendersGroup = UnitGroupEmpty();
        libAIAI_gv_defenderAI[init_i].lv_state = libAIAI_ge_DefenderAIState_Idle;
        libAIAI_gv_defenderAI[init_i].lv_validTargets = UnitGroupEmpty();
        libAIAI_gv_defenderAI[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libAIAI_gv_defenderAILastCreatedDefenderAIIndex = "DefenderAILastCreatedDefenderAI";
    libAIAI_gv_heroAITeamMapLogicFaction = libGame_ge_Faction_Order;
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIOrderMercCampList[init_i] = -1;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIChaosMercCampList[init_i] = -1;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIMiddleMercCampList[init_i] = -1;
    }
    libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_None;
    libAIAI_gv_heroAITreasureChests = UnitGroupEmpty();
    libAIAI_gv_heroAIDragonShireObelisks = UnitGroupEmpty();
    libAIAI_gv_heroAIUnderworldStatus.lv_entrances = UnitGroupEmpty();
    libAIAI_gv_heroAIUnderworldStatus.lv_exits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libAIAI_gv_heroAI_MaxItemCount_C; init_i += 1) {
        libAIAI_gv_heroAIItemData[init_i].lv_item = "";
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libGame_gv_laneMaxCount_C; init_i1 += 1) {
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_allyHeroes = PlayerGroupEmpty();
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_contentionPointLanePosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontTowerPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontMinionPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontEnemyMinionPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontHumanAllyPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_coreDefensePosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_lastTimeHumanAllyEnteredLane = -1.0;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
            libAIAI_gv_heroAITeamData[init_i].lv_heroTrackingData[init_i1].lv_lastSeenTime = -100.0;
            libAIAI_gv_heroAITeamData[init_i].lv_heroTrackingData[init_i1].lv_lastSeenLocation = Point(0.0, 0.0);
        }
        libAIAI_gv_heroAITeamData[init_i].lv_weakestLane = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_players = PlayerGroupEmpty();
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_humanPlayers = PlayerGroupEmpty();
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_aIPlayers = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libAIAI_gv_aIHeroes[init_i].lv_heroState = libAIAI_ge_HeroAIStates_HSUnused;
        libAIAI_gv_aIHeroes[init_i].lv_difficulty = libAIAI_ge_HeroAIDifficulty_Null;
        libAIAI_gv_aIHeroes[init_i].lv_startOffensiveHealth = 60.0;
        libAIAI_gv_aIHeroes[init_i].lv_endOffensiveHealth = 40.0;
        libAIAI_gv_aIHeroes[init_i].lv_returnToSpawnHealth = 20.0;
        libAIAI_gv_aIHeroes[init_i].lv_independence = 1.0;
        libAIAI_gv_aIHeroes[init_i].lv_hasMount = true;
        libAIAI_gv_aIHeroes[init_i].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[init_i].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[init_i].lv_mountBehavior = "HeroGenericMount@Mounted";
        libAIAI_gv_aIHeroes[init_i].lv_castTacticalEndIfIdleOrVeryInjured = true;
        libAIAI_gv_aIHeroes[init_i].lv_statePriority = libAIAI_ge_HeroAIPriority_CustomMapRegular;
        libAIAI_gv_aIHeroes[init_i].lv_hSMapStatePriority = libAIAI_ge_HeroAIPriority_CustomMapRegular;
        libAIAI_gv_aIHeroes[init_i].lv_aIBehaviorsEnabled = true;
        libAIAI_gv_aIHeroes[init_i].lv_enemyEvalMultiplier = 1.0;
        libAIAI_gv_aIHeroes[init_i].lv_enemies = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyHeroes = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyMinionsSummons = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyTowers = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allies = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyHeroes = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyMinionsSummons = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyTowers = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_visibleEnemyHeroes = UnitGroupEmpty();
    }
    libAIAI_gv_aIMoveAbil = AbilityCommand("move", 0);
    libAIAI_gv_aITurnAbil = AbilityCommand("move", 4);
    libAIAI_gv_aIAttackAbil = AbilityCommand("attack", 0);
    libAIAI_gv_aIAttackAllyAbil = AbilityCommand("AttackAlly", 0);
    libAIAI_gv_aIStopAbil = AbilityCommand("stop", 0);
}

// Presets
string libAIAI_ge_MinionAIStates_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_MinionAIStates_Advancing) { return "Advancing"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingMinions) { return "AttackingMinions"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingStructure) { return "AttackingStructure"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingHero) { return "AttackingHero"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_FallbackState) { return "FallbackState"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_FollowHero) { return "FollowHero"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_Leashing) { return "Leashing"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_HoldPosition) { return "HoldPosition"; }
    return null;
}

string libAIAI_ge_DefenderAIState_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_DefenderAIState_Idle) { return "Idle"; }
    else if (lp_val == libAIAI_ge_DefenderAIState_Fighting) { return "Fighting"; }
    else if (lp_val == libAIAI_ge_DefenderAIState_Leashing) { return "Leashing"; }
    return null;
}

string libAIAI_ge_HeroAIDifficulty_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIDifficulty_Null) { return "Null"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy) { return "HeroAITutorial1Enemy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally) { return "HeroAITutorial1Ally"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy) { return "HeroAITutorial2Enemy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally) { return "HeroAITutorial2Ally"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode) { return "HeroAITryMeMode"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly) { return "HeroAITryMeModeAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy) { return "HeroAIVeryEasy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly) { return "HeroAIVeryEasyWithHumanAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasy) { return "HeroAIEasy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly) { return "HeroAIEasyWithHumanAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) { return "HeroAIMedium"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) { return "HeroAIVeryHard"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIElite) { return "HeroAIElite"; }
    return null;
}

string libAIAI_ge_HeroAIObjective_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIObjective_PushLane) { return "PushLane"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_WaitInSpawn) { return "WaitInSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureDragon) { return "CaptureDragon"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_DefendCore) { return "DefendCore"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_TakeCamp) { return "TakeCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureWatchTower) { return "CaptureWatchTower"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureTearOfElune) { return "CaptureTearOfElune"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureObelisk) { return "CaptureObelisk"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_TurnInDoubloons) { return "TurnInDoubloons"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_FollowHero) { return "FollowHero"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CollectSkulls) { return "CollectSkulls"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_AttackTreasureChest) { return "AttackTreasureChest"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_UseAbathurLogic) { return "UseAbathurLogic"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CustomMapObj) { return "CustomMapObj"; }
    return null;
}

string libAIAI_ge_HeroAIPriority_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIPriority_GenericUninterruptable) { return "GenericUninterruptable"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CollectSkullsInUnderworld) { return "CollectSkullsInUnderworld"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapVital) { return "CustomMapVital"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_WaitInSpawnAnyState) { return "WaitInSpawnAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_AbathurLogicAnyState) { return "AbathurLogicAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_FollowHeroFollowState) { return "FollowHeroFollowState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_FollowHeroOtherState) { return "FollowHeroOtherState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneAttackCore) { return "PushLaneAttackCore"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_DefendCoreAnyState) { return "DefendCoreAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapHigh) { return "CustomMapHigh"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampTakingCamp) { return "TakeCampTakingCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneDefendingBase) { return "PushLaneDefendingBase"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureTearOfEluneHeadingToTribute) { return "CaptureTearOfEluneHeadingToTribute"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman) { return "TakeCampMoveToCampWithHuman"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CollectSkullsHeadingToUnderworld) { return "CollectSkullsHeadingToUnderworld"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon) { return "CaptureObeliskOrDragon"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapRegular) { return "CustomMapRegular"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLanePushWithTeam) { return "PushLanePushWithTeam"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneTeamFightLikely) { return "PushLaneTeamFightLikely"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneDefendTown) { return "PushLaneDefendTown"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneAttackTown) { return "PushLaneAttackTown"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneRavenKingsCurseActive) { return "PushLaneRavenKingsCurseActive"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneUnderworldBossActive) { return "PushLaneUnderworldBossActive"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLanePushWithAllyMercs) { return "PushLanePushWithAllyMercs"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneClearEnemyMercs) { return "PushLaneClearEnemyMercs"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneNearActiveObelisk) { return "PushLaneNearActiveObelisk"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TurnInDoubloonsHeadingToBeacon) { return "TurnInDoubloonsHeadingToBeacon"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapLow) { return "CustomMapLow"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI) { return "TakeCampMoveToCampOnlyAI"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_GenericPreformTeamStrategy) { return "GenericPreformTeamStrategy"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_AttackTreasureChestAnyState) { return "AttackTreasureChestAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneInMinionBattle) { return "PushLaneInMinionBattle"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneChangingLanes) { return "PushLaneChangingLanes"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureWatchTowerAnyState) { return "CaptureWatchTowerAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneNormalLogic) { return "PushLaneNormalLogic"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_Idle) { return "Idle"; }
    return null;
}

string libAIAI_ge_HeroAIStates_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIStates_HSUnused) { return "HSUnused"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDead) { return "HSDead"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAfterDeathAttack) { return "HSAfterDeathAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAfterDeathHeal) { return "HSAfterDeathHeal"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSReturnToSpawn) { return "HSReturnToSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitForGameToStart) { return "HSWaitForGameToStart"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitToHeal) { return "HSWaitToHeal"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitInSpawn) { return "HSWaitInSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAdvance) { return "HSAdvance"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSRetreat) { return "HSRetreat"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAvoidAOE) { return "HSAvoidAOE"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCastTactical) { return "HSCastTactical"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleRetreat) { return "HSMinionBattleRetreat"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleReposition) { return "HSMinionBattleReposition"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) { return "HSMinionBattleAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleHarass) { return "HSMinionBattleHarass"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy) { return "HSHarassSiegeEnemy"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitForMinions) { return "HSWaitForMinions"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSReturnToLane) { return "HSReturnToLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle) { return "HSPickUpHealthGlobeJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFocusHero) { return "HSFocusHero"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFocusCore) { return "HSFocusCore"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCoreAttack) { return "HSDefendCoreAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCoreLeash) { return "HSDefendCoreLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSVehicleReturnToLane) { return "HSVehicleReturnToLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane) { return "HSVehicleAdvanceInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCaptureWatchTower) { return "HSCaptureWatchTower"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPortHomeLane) { return "HSPortHomeLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDrinkMoonwell) { return "HSDrinkMoonwell"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear) { return "HSTearOfEluneMoveToTear"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture) { return "HSTearOfEluneCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneGuard) { return "HSTearOfEluneGuard"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneDefend) { return "HSTearOfEluneDefend"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPickUpDoubloon) { return "HSPickUpDoubloon"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTurnInDoubloons) { return "HSTurnInDoubloons"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTurnInDoubloonsDefend) { return "HSTurnInDoubloonsDefend"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTreasureChestMoveToChest) { return "HSTreasureChestMoveToChest"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTreasureChestAttackChest) { return "HSTreasureChestAttackChest"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTreasureChestDefend) { return "HSTreasureChestDefend"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMCampInit) { return "HSMCampInit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMoveToCamp) { return "HSMoveToCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitAtCamp) { return "HSWaitAtCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAttackSoloCamp) { return "HSAttackSoloCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCaptureCampBeacon) { return "HSCaptureCampBeacon"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCampAttack) { return "HSDefendCampAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCampLeash) { return "HSDefendCampLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFleeInJungle) { return "HSFleeInJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPortHomeJungle) { return "HSPortHomeJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSHarassInJungle) { return "HSHarassInJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPaceAround) { return "HSPaceAround"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSObeliskCapture) { return "HSObeliskCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDragonHarass) { return "HSDragonHarass"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDragonCapture) { return "HSDragonCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeader) { return "HSFollowerGuardLeader"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash) { return "HSFollowerGuardLeaderLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldEnter) { return "HSUnderworldEnter"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions) { return "HSUnderworldKillMinions"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldFocusHero) { return "HSUnderworldFocusHero"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull) { return "HSUnderworldPickupSkull"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit) { return "HSUnderworldMoveToExit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome) { return "HSUnderworldTeleportHome"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldExit) { return "HSUnderworldExit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane) { return "HSAbathurAdvanceInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane) { return "HSAbathurRetreatInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurHideInTown) { return "HSAbathurHideInTown"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurChangeLanes) { return "HSAbathurChangeLanes"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSEnterTransport) { return "HSEnterTransport"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCustomMapState) { return "HSCustomMapState"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendObjective) { return "HSDefendObjective"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSObjectiveStaging) { return "HSObjectiveStaging"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSBusy) { return "HSBusy"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefault) { return "HSDefault"; }
    return null;
}

// Functions
bool libAIAI_gf_MinionAITargetIsAttackableStructure (unit lp_caster, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(lp_target, "MinionAIAttackableStructure") == true) && (UnitFilterMatch(lp_target, UnitGetOwner(lp_caster), libAIAI_gv_uF_MinionAI_EnemyStructure) == true)) {
        return true;
    }

    return false;
}

int libAIAI_gf_MinionAINewMinionIndex () {
    // Variable Declarations
    int lv_minionIndex;

    // Automatic Variable Declarations
    const int auto0B4A2F57_ae = libAIAI_gv_minionAIMaxActiveMinions;
    const int auto0B4A2F57_ai = 1;

    // Variable Initialization

    // Implementation
    lv_minionIndex = 1;
    for ( ; ( (auto0B4A2F57_ai >= 0 && lv_minionIndex <= auto0B4A2F57_ae) || (auto0B4A2F57_ai < 0 && lv_minionIndex >= auto0B4A2F57_ae) ) ; lv_minionIndex += auto0B4A2F57_ai ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive == false)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive = true;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_Advancing;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_targetUnit = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = false;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardPoint = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardLastUpdate = 0.0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnitType = null;
            libAIAI_gv_minionAIActiveMinionsUpperBound = MaxI(lv_minionIndex, libAIAI_gv_minionAIActiveMinionsUpperBound);
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_prefersStructureTargets = false;
            return lv_minionIndex;
        }

    }
    return (libAIAI_gv_minionAIMaxActiveMinions + 1);
}

point libAIAI_gf_MinionAIGetPreviousWaypointForMinion (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
        return libAIAI_gf_MinionAIGetWaypointForMinion(lp_minionIndex, (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint - 1));
    }
    else {
        return libAIAI_gf_MinionAIGetWaypointForMinion(lp_minionIndex, (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint + 1));
    }
}

int libAIAI_gf_MinionAIGetWaypointCount (int lp_minionIndex) {
    // Variable Declarations
    int lv_itWp;
    point lv_wp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0)) {
        return libGame_gv_laneData[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane].lv_waypointCount;
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == libGame_gv_laneCustomLane)) {
        lv_itWp = 0;
        while (true) {
            lv_itWp += 1;
            lv_wp = libAIAI_gf_MinionAIGetWaypointForMinion(lp_minionIndex, lv_itWp);
            if ((lv_wp == null)) {
                return (lv_itWp - 1);
            }

        }
    }

    return 0;
}

unit libAIAI_gf_MinionAIGetHeroToFollow (int lp_minionIndex) {
    // Variable Declarations
    int lv_owningPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit)) == true)) {
        lv_owningPlayer = UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
        if ((UnitIsValid(libGame_gv_players[lv_owningPlayer].lv_heroUnit) == true)) {
            return libGame_gv_players[lv_owningPlayer].lv_heroUnit;
        }

    }

    return null;
}

bool libAIAI_gf_MinionAIIsValidTarget (int lp_minionIndex, unit lp_targetUnit) {
    // Variable Declarations
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_order = OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, lp_targetUnit);
    if ((UnitOrderIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lv_order) == true)) {
        return true;
    }
    else {
        return false;
    }
}

unit libAIAI_gf_MinionAIGetNearestEnemyMinionSummonedInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySummoned;
    unit lv_enemyMinion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySummoned = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyMinions, 0);
    lv_enemySummoned = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemySummoned, 0);
    UnitGroupAddUnitGroup(lv_enemyMinions, lv_enemySummoned);
    lv_enemyMinion = UnitGroupClosestToPoint(lv_enemyMinions, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition);
    if ((UnitIsAlive(lv_enemyMinion) == true) && (libAIAI_gf_MinionAIIsValidTarget(lp_minionIndex, lv_enemyMinion) == true) && (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitGetPosition(lv_enemyMinion)) == false)) {
        return lv_enemyMinion;
    }

    return null;
}

unit libAIAI_gf_MinionAIGetNearestEnemyStructureInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unit lv_targetUnit;
    unitgroup lv_nearbyAttackableStructues;
    unitgroup lv_nearbyInvalidStructures;
    int lv_townIndex;

    // Automatic Variable Declarations
    unitgroup autoBEB7DB65_g;
    int autoBEB7DB65_u;

    // Variable Initialization
    lv_nearbyAttackableStructues = UnitGroupEmpty();
    lv_nearbyInvalidStructures = UnitGroupEmpty();

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nearbyAttackableStructues = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyForStructure, 0);
    autoBEB7DB65_g = lv_nearbyAttackableStructues;
    autoBEB7DB65_u = UnitGroupCount(autoBEB7DB65_g, c_unitCountAll);
    for (;; autoBEB7DB65_u -= 1) {
        lv_targetUnit = UnitGroupUnitFromEnd(autoBEB7DB65_g, autoBEB7DB65_u);
        if (lv_targetUnit == null) { break; }
        lv_townIndex = libGame_gf_TownGetTownForUnit(lv_targetUnit);
        if ((lv_townIndex > 0) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane != libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) && (libAIAI_gv_minionAIMinionsIgnoreLaneRequirements == false)) {
            UnitGroupRemove(lv_nearbyAttackableStructues, lv_targetUnit);
        }
        else {
            if ((lv_townIndex <= 0) && (lv_targetUnit != libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) && (lv_targetUnit != libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) && (UnitHasBehavior2(lv_targetUnit, "MinionAIAttackableStructure") == false)) {
                UnitGroupRemove(lv_nearbyAttackableStructues, lv_targetUnit);
            }
            else {
                if (((libAIAI_gf_MinionAITargetIsAttackableStructure(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lv_targetUnit) == false) || (libAIAI_gf_MinionAIIsValidTarget(lp_minionIndex, lv_targetUnit) == false))) {
                    UnitGroupRemove(lv_nearbyAttackableStructues, lv_targetUnit);
                    UnitGroupAdd(lv_nearbyInvalidStructures, lv_targetUnit);
                }

            }
        }
    }
    lv_targetUnit = UnitGroupClosestToPoint(lv_nearbyAttackableStructues, lv_minionPosition);
    if ((lv_targetUnit == null)) {
        lv_targetUnit = UnitGroupClosestToPoint(lv_nearbyInvalidStructures, lv_minionPosition);
    }

    return lv_targetUnit;
}

unit libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unit lv_hero;
    unitgroup lv_scanGroup;
    fixed lv_minionDistanceToLane;
    unit lv_enemySummoned;
    fixed lv_enemyHeroDistancetoLane;

    // Automatic Variable Declarations
    unitgroup autoAA9E5A4D_g;
    int autoAA9E5A4D_u;

    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_scanGroup = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_GetNearestEnemyHero, 0);
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_minionDistanceToLane = DistanceBetweenPoints(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
    }

    autoAA9E5A4D_g = lv_scanGroup;
    autoAA9E5A4D_u = UnitGroupCount(autoAA9E5A4D_g, c_unitCountAll);
    for (;; autoAA9E5A4D_u -= 1) {
        lv_hero = UnitGroupUnitFromEnd(autoAA9E5A4D_g, autoAA9E5A4D_u);
        if (lv_hero == null) { break; }
        if ((libAIAI_gf_MinionAIIsValidTarget(lp_minionIndex, lv_hero) == false)) {
            UnitGroupRemove(lv_scanGroup, lv_hero);
        }
        else {
            if ((UnitFilterMatch(lv_hero, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitFilter(0, (1 << (c_targetFilterPassive - 32)), 0, 0)) == true) && (UnitHasBehavior2(lv_hero, "HeroGenericMount@Mounted") == false)) {
                UnitGroupRemove(lv_scanGroup, lv_hero);
            }
            else {
                if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true) && (UnitInRangeAndAbleToAttackTarget(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lv_hero) == false)) {
                    lv_enemyHeroDistancetoLane = DistanceBetweenPoints(UnitGetPosition(lv_hero), libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
                    if ((lv_enemyHeroDistancetoLane >= lv_minionDistanceToLane)) {
                        UnitGroupRemove(lv_scanGroup, lv_hero);
                    }

                }

            }
        }
    }
    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

bool libAIAI_gf_MinionAIWithinLeashingDistanceofLane (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
    lv_distanceToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
    if ((lv_distanceToBattleStandard <= libAIAI_gv_aIMinionLeashingOffDistance)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_missionTime;
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;
    fixed lv_distanceBetweenWaypoints;
    fixed lv_angleBetweenPreviousPointandMinionPosition;
    fixed lv_battleStandardDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == false)) {
        return ;
    }

    lv_missionTime = GameGetMissionTime();
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate >= lv_missionTime)) {
        return ;
    }

    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinion(lp_minionIndex);
    lv_distanceBetweenWaypoints = DistanceBetweenPoints(lv_previousWaypoint, lv_nextWaypoint);
    lv_angleBetweenPreviousPointandMinionPosition = (AngleBetweenPoints(lv_previousWaypoint, lv_minionPosition) - AngleBetweenPoints(lv_previousWaypoint, lv_nextWaypoint));
    lv_battleStandardDistance = (Cos(lv_angleBetweenPreviousPointandMinionPosition) * DistanceBetweenPoints(lv_previousWaypoint, lv_minionPosition));
    if ((lv_battleStandardDistance < 0.0)) {
        lv_battleStandardDistance = 0.0;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint = libNtve_gf_PointOffsetTowardsPoint(lv_previousWaypoint, lv_battleStandardDistance, lv_nextWaypoint);
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate = lv_missionTime;
}

bool libAIAI_gf_MinionAITestPastNextWaypoint (int lp_minionIndex) {
    // Variable Declarations
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinion(lp_minionIndex);
    return (DistanceSquaredBetweenPoints(lv_minionPosition, lv_previousWaypoint) >= (DistanceSquaredBetweenPoints(lv_minionPosition, lv_nextWaypoint) + DistanceSquaredBetweenPoints(lv_previousWaypoint, lv_nextWaypoint)));
}

void libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint (int lp_minionIndex) {
    // Variable Declarations
    int lv_ownerPlayer;
    int lv_minimapIndex;
    int lv_nextWaypoint;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ownerPlayer = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer;
    lv_nextWaypoint = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint;
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate = GameGetMissionTime();
    lv_waypointCount = libAIAI_gf_MinionAIGetWaypointCount(lp_minionIndex);
    if ((libCore_gv_mAPUsesCirclingAI == false)) {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
            if ((lv_nextWaypoint < (lv_waypointCount - 1))) {
                lv_nextWaypoint += 1;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
            }

        }
        else {
            if ((lv_nextWaypoint == 0)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
            }
            else {
                if ((lv_nextWaypoint > 2)) {
                    lv_nextWaypoint -= 1;
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
                }

            }
        }
    }
    else {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
            if ((lv_nextWaypoint < (lv_waypointCount - libCore_gv_mAPPathNodesBeforeLooping))) {
                lv_nextWaypoint += 1;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
            }
            else {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack = libGame_gv_teamOrderIndex_C;
                if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 3)) {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                }
                else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 1)) {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                }
                else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 2)) {
                    if ((ModI(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_waveNumber, 2) == 0)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                    }
                    else {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                    }
                }
                lv_waypointCount = libAIAI_gf_MinionAIGetWaypointCount(lp_minionIndex);
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = (lv_waypointCount - 1);
                libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lp_minionIndex);
            }
        }
        else {
            if ((lv_nextWaypoint == 0)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_waypointCount;
            }
            else {
                if ((lv_nextWaypoint > (libCore_gv_mAPPathNodesBeforeLooping + 1))) {
                    lv_nextWaypoint -= 1;
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
                }
                else {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack = libGame_gv_teamChaosIndex_C;
                    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 3)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                    }
                    else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 1)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                    }
                    else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 2)) {
                        if ((ModI(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_waveNumber, 2) == 0)) {
                            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                        }
                        else {
                            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                        }
                    }
                    libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lp_minionIndex);
                }
            }
        }
    }
    lv_minimapIndex = libMapM_gf_JungleMinimapGetIndexFromLanerCreepUnit(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
    if ((lv_minimapIndex != 0)) {
        libMapM_gf_JungleMinimapEditMercPath(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_leader, false);
    }

}

int libAIAI_gf_MinionAIDetermineState (int lp_minionIndex, int lp_oldState) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;
    unit lv_heroToFollow;
    int lv_attackState;

    // Automatic Variable Declarations
    int autoBB8221A1_val;

    // Variable Initialization

    // Implementation
    autoBB8221A1_val = lp_oldState;
    if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_Advancing) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_FollowHero) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)) == true)) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }

        lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollow(lp_minionIndex);
        if (((UnitIsValid(lv_heroToFollow) == false) || (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetPosition(lv_heroToFollow)) == false))) {
            return libAIAI_ge_MinionAIStates_HoldPosition;
        }

    }
    else if (autoBB8221A1_val == libAIAI_ge_MinionAIStates_HoldPosition) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)) == true)) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }

        lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollow(lp_minionIndex);
        if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetPosition(lv_heroToFollow)) == true)) {
            return libAIAI_ge_MinionAIStates_FollowHero;
        }

    }
    else {
    }
    return lp_oldState;
}

int libAIAI_gf_MinionAIDetermineAttackStateAndTarget (int lp_minionIndex) {
    // Variable Declarations
    order lv_minionOrder;
    unit lv_currentTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionOrder = UnitOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, 0);
    if ((lv_minionOrder != null) && ((OrderGetAbilityCommand(lv_minionOrder) == libAIAI_gv_aIAttackAbil) || (OrderGetAbilityCommand(lv_minionOrder) == libAIAI_gv_aIAttackAllyAbil)) && (OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit)) {
        lv_currentTarget = OrderGetTargetUnit(lv_minionOrder);
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_prefersStructureTargets == true)) {
        if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingStructure;
        }
        else {
            if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
                return libAIAI_ge_MinionAIStates_AttackingMinions;
            }
            else {
                return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
            }
        }
    }
    else {
        if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingMinions;
        }
        else {
            if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
                return libAIAI_ge_MinionAIStates_AttackingStructure;
            }
            else {
                return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
            }
        }
    }
}

bool libAIAI_gf_MinionAIShouldAttackMinions (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetMinion;
    fixed lv_pathingCostToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_currentTarget) == true) && (libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
        }

        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMinionLeashingOnDistance)) {
            lv_targetMinion = null;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
            return false;
        }

    }

    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeLight) == true)) && (UnitInRangeAndAbleToAttackTarget(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lp_currentTarget) == true)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    lv_targetMinion = libAIAI_gf_MinionAIGetNearestEnemyMinionSummonedInRangeOfMinion(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange);
    if ((UnitIsAlive(lv_targetMinion) == true)) {
        if ((lp_currentTarget != lv_targetMinion)) {
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        }

        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetMinion;
        return true;
    }

    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeLight) == true)) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetPosition(lp_currentTarget)) <= libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange) && (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitGetPosition(lp_currentTarget)) == true)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    return false;
}

bool libAIAI_gf_MinionAIShouldAttackStructure (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetStructure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_MinionAITargetIsAttackableStructure(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lp_currentTarget) == true)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    lv_targetStructure = libAIAI_gf_MinionAIGetNearestEnemyStructureInRangeOfMinion(lp_minionIndex, MaxF(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange, (libAIAI_gv_aIMinionEnemyMinionAttackRange + libAIAI_gv_aIMinionAttackStructureBonusScanRange)));
    if ((UnitIsAlive(lv_targetStructure) == true) && (UnitHasBehavior2(lv_targetStructure, "TownDeadController@DeadBehavior") == false)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetStructure;
        return true;
    }

    return false;
}

int libAIAI_gf_MinionAIAttackHeroState (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    point lv_minionPosition;
    fixed lv_pathingCostToBattleStandard;
    unit lv_targetHero;
    unit lv_heroToFollow;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestEnemyHero) == true) && (DistanceBetweenPoints(lv_minionPosition, UnitGetPosition(lp_currentTarget)) < (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackHeroRange + libAIAI_gv_aIMinionAttackHeroBufferDistance))) {
        lv_targetHero = lp_currentTarget;
    }
    else {
        lv_targetHero = libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackHeroRange);
    }
    if ((UnitIsValid(lv_targetHero) == true) && (libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMinionLeashingOnDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
        }

        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMinionLeashingOnDistance)) {
            lv_targetHero = null;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        }

    }

    if ((UnitIsValid(lv_targetHero) == false)) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true)) {
            if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeHeroic) == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lp_minionIndex) == false)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
            }

            return libAIAI_ge_MinionAIStates_Advancing;
        }
        else {
            lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollow(lp_minionIndex);
            if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(lv_minionPosition, UnitGetPosition(lv_heroToFollow)) == true)) {
                return libAIAI_ge_MinionAIStates_FollowHero;
            }

        }
        return libAIAI_ge_MinionAIStates_HoldPosition;
    }

    if ((lv_targetHero != lp_currentTarget)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetHero;
    return libAIAI_ge_MinionAIStates_AttackingHero;
}

void libAIAI_gf_MinionAITransitionMinionIntoState (int lp_minionIndex, int lp_state) {
    // Variable Declarations
    int lv_newState;
    point lv_previousWaypoint;
    point lv_nextWaypoint;
    point lv_heroPosition;
    point lv_offsetHeroPosition;

    // Automatic Variable Declarations
    int auto1E1BDF2A_val;

    // Variable Initialization

    // Implementation
    auto1E1BDF2A_val = lp_state;
    if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_Advancing) {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAllyAbil, libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)), c_orderQueueReplace);
        }
    }
    else if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        if ((UnitFilterMatch(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_AnyEnemyForStructure) == true) && (libAIAI_gf_MinionAIIsValidTarget(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit) == true)) {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
        }
        else {
            if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, 0)) == AbilityCommand("move", 2))) {
                UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }

        }
    }
    else if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_FollowHero) {
        lv_heroPosition = UnitGetPosition(libAIAI_gf_MinionAIGetHeroToFollow(lp_minionIndex));
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lv_heroPosition) > 2.5)) {
            lv_offsetHeroPosition = libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, 2.0, UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit));
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, lv_offsetHeroPosition), c_orderQueueReplace);
        }

    }
    else if (auto1E1BDF2A_val == libAIAI_ge_MinionAIStates_HoldPosition) {
    }
    else {
    }
    if ((lp_state != libAIAI_ge_MinionAIStates_Advancing)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_initialWaypoint = 0;
    }

}

void libAIAI_gf_MinionAIIssueFightOrder (int lp_minionIndex) {
    // Variable Declarations
    unit lv_itUnit;
    unitgroup lv_enemyGroup;
    unit lv_minionUnit;
    bool lv_needsNewOrders;

    // Automatic Variable Declarations
    string auto8F3E5725_val;
    unitgroup auto8E809562_g;
    int auto8E809562_u;
    unitgroup auto4C1913DB_g;
    int auto4C1913DB_u;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_minionUnit = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit;
    lv_needsNewOrders = true;
    if ((UnitWeaponPeriodRemaining(lv_minionUnit, 1) > 2.0)) {
        lv_needsNewOrders = false;
    }

    auto8F3E5725_val = UnitGetType(lv_minionUnit);
    if (auto8F3E5725_val == "MercenaryColossus@Laner") {
        if ((UnitGetCooldown(lv_minionUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("MercenaryColossusFireBeam"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny)) <= 0.0)) {
            lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_minionUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_minionUnit), 5.25), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            auto4C1913DB_g = lv_enemyGroup;
            auto4C1913DB_u = UnitGroupCount(auto4C1913DB_g, c_unitCountAll);
            for (;; auto4C1913DB_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto4C1913DB_g, auto4C1913DB_u);
                if (lv_itUnit == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_itUnit), UnitGetPosition(lv_minionUnit)) <= 2.25)) {
                    UnitGroupRemove(lv_enemyGroup, lv_itUnit);
                }

            }
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2)) {
                UnitBehaviorRemove(lv_minionUnit, "MercenaryColossusWeapon@TurretDisabler", 1);
                UnitIssueOrder(lv_minionUnit, OrderTargetingPoint(AbilityCommand("MercenaryColossusFireBeam", 0), UnitGetPosition(UnitGroupUnit(lv_enemyGroup, 1))), c_orderQueueReplace);
                lv_needsNewOrders = false;
            }

        }

        if ((lv_needsNewOrders == true) && (UnitGetCooldown(lv_minionUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("MercenaryColossusChargedBlast"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny)) <= 0.0)) {
            lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_minionUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_minionUnit), 8.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lv_minionUnit, OrderTargetingPoint(AbilityCommand("MercenaryColossusChargedBlast", 0), UnitGetPosition(UnitGroupUnit(lv_enemyGroup, 1))), c_orderQueueReplace);
                lv_needsNewOrders = false;
            }

        }

    }
    else {
        if (((UnitGetType(lv_minionUnit) == "JungleGraveGolemLaner"))) {
            if ((UnitGetCooldown(lv_minionUnit, "Abil/UnderworldBossStun") <= 0.0)) {
                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_minionUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_minionUnit), 5.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_minionUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                    lv_needsNewOrders = false;
                }
                else {
                    lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_minionUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_minionUnit), 5.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3)) {
                        UnitIssueOrder(lv_minionUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                        lv_needsNewOrders = false;
                    }

                }
            }

            lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_minionUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_minionUnit), 8.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
            if ((UnitGetCooldown(lv_minionUnit, "Abil/UnderworldBossRoots") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                auto8E809562_g = lv_enemyGroup;
                auto8E809562_u = UnitGroupCount(auto8E809562_g, c_unitCountAll);
                for (;; auto8E809562_u -= 1) {
                    lv_itUnit = UnitGroupUnitFromEnd(auto8E809562_g, auto8E809562_u);
                    if (lv_itUnit == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_itUnit), UnitGetPosition(lv_minionUnit)) >= 2.0)) {
                    }
                    else {
                        UnitGroupRemove(lv_enemyGroup, lv_itUnit);
                    }
                }
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lv_minionUnit, OrderTargetingPoint(AbilityCommand("UnderworldBossRoots", 0), UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive))), c_orderQueueReplace);
                    lv_needsNewOrders = false;
                }

            }

        }

    }
}

int libAIAI_gf_MinionAIGetIndexForMinion (unit lp_minion) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_MinionIndex, lp_minion);
}

point libAIAI_gf_MinionAIGetWaypointForMinion (int lp_minionIndex, int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0)) {
        return libGame_gv_laneData[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane].lv_waypoints[lp_waypointIndex];
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == libGame_gv_laneCustomLane)) {
        return libCore_gf_PointStoredForUnit(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lp_waypointIndex);
    }

    return null;
}

point libAIAI_gf_MinionAIGetNextWaypointForMinion (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_laneData[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane].lv_waypoints[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint];
}

void libAIAI_gf_MinionAIFreeMinionIndex (int lp_minionIndex) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto724A94E5_ae = 1;
    const int auto724A94E5_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_minionIndex <= 0)) {
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_isAlive = false;
    if ((lp_minionIndex == libAIAI_gv_minionAIActiveMinionsUpperBound)) {
        lv_i = (libAIAI_gv_minionAIActiveMinionsUpperBound - 1);
        for ( ; ( (auto724A94E5_ai >= 0 && lv_i <= auto724A94E5_ae) || (auto724A94E5_ai < 0 && lv_i >= auto724A94E5_ae) ) ; lv_i += auto724A94E5_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                libAIAI_gv_minionAIActiveMinionsUpperBound = lv_i;
                break;
            }

        }
    }

}

void libAIAI_gf_MinionAIUnhookUnitFromMinionAI (unit lp_unit) {
    // Variable Declarations
    int lv_minionIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lp_unit);
    if ((lv_minionIndex <= 0)) {
        return ;
    }

    libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    UnitSetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MinionIndex), 0.0);
    UnitIssueOrder(lp_unit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
}

void libAIAI_gf_MinionAIStartMinionAI (int lp_waveNumberOverride, unit lp_unit, int lp_lane, int lp_nextWaypoint, bool lp_pathToInitialWaypoint, int lp_teamToAttack, bool lp_prefersStructureTargets) {
    // Variable Declarations
    int lv_minionIndex;
    unit lv_heroToFollow;
    fixed lv_weaponRange;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lp_unit);
    lv_minionIndex = libAIAI_gf_MinionAINewMinionIndex();
    if ((lv_minionIndex > libAIAI_gv_minionAIMaxActiveMinions)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_278100D3"), true);
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit = lp_unit;
    UnitSetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MinionIndex), IntToFixed(lv_minionIndex));
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnitType = UnitGetType(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer = UnitGetOwner(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane = lp_lane;
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint = lp_nextWaypoint;
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = UnitGetPosition(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_prefersStructureTargets = lp_prefersStructureTargets;
    lv_weaponRange = libAIAI_gf_AIGetAnyWeaponRangeIncludesNonActive(lp_unit);
    if ((lp_waveNumberOverride == -1)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_waveNumber = libGame_gv_minionWaveSpawnCounter;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_waveNumber = lp_waveNumberOverride;
    }
    if ((lp_pathToInitialWaypoint == true)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint = lp_nextWaypoint;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint = 0;
    }
    if ((lv_weaponRange < libAIAI_gv_aIMinionEnemyMinionAttackRange)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackRange = libAIAI_gv_aIMinionEnemyMinionAttackRange;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackRange = lv_weaponRange;
    }
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackHeroRange = libAIAI_gv_aIMinionAttackHeroDistance;
    if (((lp_teamToAttack <= 0) || (lp_teamToAttack > libCore_gv_bALMaxTeams))) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = libGame_gf_EnemyTeamNumberOfPlayer(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer);
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack == 0)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = 1;
        }

    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = lp_teamToAttack;
    }
    libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lv_minionIndex);
    if ((lp_lane > 0) && (PointPathingIsConnected(UnitGetPosition(lp_unit), libAIAI_gf_MinionAIGetNextWaypointForMinion(lv_minionIndex)) == true)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_Advancing;
        libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
        return ;
    }

    lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollow(lv_minionIndex);
    if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(UnitGetPosition(lp_unit), UnitGetPosition(lv_heroToFollow)) == true)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_FollowHero;
        libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_HoldPosition;
    libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
}

void libAIAI_gf_MinionAIStartMinionAISimple (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lp_unit), UnitGetPosition(lp_unit));
    libAIAI_gf_MinionAIStartMinionAI(-1, lp_unit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, 0, false);
}

void libAIAI_gf_MinionAITurnMinionAISystemOnOff (bool lp_onOff) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto23ADD845_ae = libAIAI_gv_minionAIMaxActiveMinions;
    const int auto23ADD845_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, true);
    }
    else {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
        lv_i = 1;
        for ( ; ( (auto23ADD845_ai >= 0 && lv_i <= auto23ADD845_ae) || (auto23ADD845_ai < 0 && lv_i >= auto23ADD845_ae) ) ; lv_i += auto23ADD845_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                UnitRemove(libAIAI_gv_minionAIActiveMinions[lv_i].lv_minionUnit);
                libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive = false;
            }

        }
        libAIAI_gv_minionAIActiveMinionsUpperBound = 0;
    }
}

void libAIAI_gf_MinionAIPauseUnpauseMinionAISystem (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA6F16C9F_ae = libAIAI_gv_minionAIMaxActiveMinions;
    const int autoA6F16C9F_ai = 1;
    const int autoCBA278CA_ae = libAIAI_gv_minionAIMaxActiveMinions;
    const int autoCBA278CA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_pauseUnpause == true)) {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
        lv_index = 1;
        for ( ; ( (autoCBA278CA_ai >= 0 && lv_index <= autoCBA278CA_ae) || (autoCBA278CA_ai < 0 && lv_index >= autoCBA278CA_ae) ) ; lv_index += autoCBA278CA_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_index].lv_isAlive == true)) {
                libNtve_gf_PauseUnit(libAIAI_gv_minionAIActiveMinions[lv_index].lv_minionUnit, true);
            }

        }
    }
    else {
        lv_index = 1;
        for ( ; ( (autoA6F16C9F_ai >= 0 && lv_index <= autoA6F16C9F_ae) || (autoA6F16C9F_ai < 0 && lv_index >= autoA6F16C9F_ae) ) ; lv_index += autoA6F16C9F_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_index].lv_isAlive == true)) {
                libNtve_gf_PauseUnit(libAIAI_gv_minionAIActiveMinions[lv_index].lv_minionUnit, false);
            }

        }
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, true);
    }
}

void libAIAI_gf_MinionAIMinionsIgnoreLaneRequirements (bool lp_trueFalse) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gv_minionAIMinionsIgnoreLaneRequirements = lp_trueFalse;
}

void libAIAI_gf_MinionAIUpdateAIStatus (int lp_minionIndex) {
    // Variable Declarations
    int lv_loopIndex;
    text lv_botStatus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugUnit != libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel != c_invalidDialogControlId)) {
        DialogControlDestroy(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel);
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel = c_invalidDialogControlId;
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "BotStatusLabel", libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel = DialogControlLastCreated();
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugUnit = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit;
    }

    lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_MinionAIStates_Ident(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_state)));
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
        lv_botStatus = (lv_botStatus + StringToText(" Leashing"));
    }

    libNtve_gf_SetDialogItemText(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel, lv_botStatus, PlayerGroupAll());
}

void libAIAI_gf_MinionAIToggleAIStatus (bool lp_showHide) {
    // Variable Declarations
    int lv_minionAIIndex;

    // Automatic Variable Declarations
    int autoB79B3C3C_ae;
    const int autoB79B3C3C_ai = 1;

    // Variable Initialization

    // Implementation
    autoB79B3C3C_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    lv_minionAIIndex = 1;
    for ( ; ( (autoB79B3C3C_ai >= 0 && lv_minionAIIndex <= autoB79B3C3C_ae) || (autoB79B3C3C_ai < 0 && lv_minionAIIndex >= autoB79B3C3C_ae) ) ; lv_minionAIIndex += autoB79B3C3C_ai ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionAIIndex].lv_debugLabel != c_invalidDialogControlId)) {
            DialogControlSetVisible(libAIAI_gv_minionAIActiveMinions[lv_minionAIIndex].lv_debugLabel, PlayerGroupAll(), lp_showHide);
        }

    }
}

void libAIAI_gf_DestroyTowerTargetPersistent (int lp_towerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_towerTowers[lp_towerIndex].lv_hasTarget == true)) {
        libAIAI_gv_towerTowers[lp_towerIndex].lv_hasTarget = false;
        UnitCreateEffectUnit(libAIAI_gv_towerTowers[lp_towerIndex].lv_towerUnit, "TowerTargetingLaserRemoveTrackedUnit", libAIAI_gv_towerTowers[lp_towerIndex].lv_targetUnit);
    }

}

void libAIAI_gf_TowerTurnTowerSystemOnOff (bool lp_onOff) {
    // Variable Declarations
    int lv_itTower;

    // Automatic Variable Declarations
    int auto87F108A9_ae;
    const int auto87F108A9_ai = 1;
    int autoC4F89404_ae;
    const int autoC4F89404_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        libAIAI_gv_towerSystemOn = true;
        TriggerExecute(libAIAI_gt_InitializeTowerAISystem, true, true);
        TriggerEnable(libAIAI_gt_TowerAIRoutine, true);
    }
    else {
        libAIAI_gv_towerSystemOn = false;
        TriggerEnable(libAIAI_gt_TowerAIRoutine, false);
        TriggerStop(libAIAI_gt_TowerAIRoutine);
        auto87F108A9_ae = libAIAI_gv_towerTowerCount;
        lv_itTower = 1;
        for ( ; ( (auto87F108A9_ai >= 0 && lv_itTower <= auto87F108A9_ae) || (auto87F108A9_ai < 0 && lv_itTower >= auto87F108A9_ae) ) ; lv_itTower += auto87F108A9_ai ) {
            if ((libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit != null)) {
                libNtve_gf_MakeUnitInvulnerable(libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit, false);
                libAIAI_gf_DestroyTowerTargetPersistent(lv_itTower);
            }

        }
        autoC4F89404_ae = libAIAI_gv_towerTowerCount;
        lv_itTower = 1;
        for ( ; ( (autoC4F89404_ai >= 0 && lv_itTower <= autoC4F89404_ae) || (autoC4F89404_ai < 0 && lv_itTower >= autoC4F89404_ae) ) ; lv_itTower += autoC4F89404_ai ) {
            libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit = null;
            libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit = null;
        }
    }
}

int libAIAI_gf_DefenderAIDetermineState (int lp_defenderAIIndex, int lp_oldState) {
    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;
    int lv_camp;
    bool lv_defendersFinishedLeashing;
    int lv_playerIndex;

    // Automatic Variable Declarations
    int autoE0395F17_val;
    int auto2C5AAE0A_ae;
    const int auto2C5AAE0A_ai = 1;
    int auto61478051_ae;
    const int auto61478051_ai = 1;

    // Variable Initialization
    lv_defendersFinishedLeashing = true;

    // Implementation
    autoE0395F17_val = lp_oldState;
    if (autoE0395F17_val == libAIAI_ge_DefenderAIState_Idle) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, c_unitCountAlive) > 0)) {
            return libAIAI_ge_DefenderAIState_Fighting;
        }

        lv_camp = libMapM_gf_JungleGetCampIndexFromDefenderIndex(lp_defenderAIIndex);
        if (((lv_camp <= 0) || ((libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_HibernetingReadyToSpawn)))) {
            auto2C5AAE0A_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
            lv_unitIndex = 1;
            for ( ; ( (auto2C5AAE0A_ai >= 0 && lv_unitIndex <= auto2C5AAE0A_ae) || (auto2C5AAE0A_ai < 0 && lv_unitIndex >= auto2C5AAE0A_ae) ) ; lv_unitIndex += auto2C5AAE0A_ai ) {
                lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
                if ((UnitIsAlive(lv_defenderUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderFarFromLeashPosition)) {
                    return libAIAI_ge_DefenderAIState_Leashing;
                }

            }
        }

    }
    else if (autoE0395F17_val == libAIAI_ge_DefenderAIState_Fighting) {
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minAgroTime > TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_DefendersAnyOutsideLeashRegion(lp_defenderAIIndex) == false)) {
            return libAIAI_ge_DefenderAIState_Fighting;
        }

        if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, c_unitCountAlive) == 0)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minLeashTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinLeashTime);
            return libAIAI_ge_DefenderAIState_Leashing;
        }

    }
    else if (autoE0395F17_val == libAIAI_ge_DefenderAIState_Leashing) {
        lv_defendersFinishedLeashing = true;
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minLeashTime > TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_defendersFinishedLeashing = false;
        }
        else {
            auto61478051_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
            lv_unitIndex = 1;
            for ( ; ( (auto61478051_ai >= 0 && lv_unitIndex <= auto61478051_ae) || (auto61478051_ai < 0 && lv_unitIndex >= auto61478051_ae) ) ; lv_unitIndex += auto61478051_ai ) {
                lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
                if ((UnitIsAlive(lv_defenderUnit) == true) && ((UnitTestState(lv_defenderUnit, c_unitStateIdle) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderCloseEnoughDistance) || ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_healOnLeash == true) && (UnitGetPropertyFixed(lv_defenderUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)))) {
                    lv_defendersFinishedLeashing = false;
                    break;
                }

            }
        }
        if ((lv_defendersFinishedLeashing == true)) {
            return libAIAI_ge_DefenderAIState_Idle;
        }
        else {
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing < (TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_aIDefenderLeashReAnnounceTime))) {
                libUIUI_gf_UICombatFloatingElementsLeashing(lv_defenderUnit);
                libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libGame_gv_gameTimer);
            }

        }
    }
    else {
    }
    return lp_oldState;
}

void libAIAI_gf_DefenderAIStateLogic (int lp_defenderAIIndex) {
    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Automatic Variable Declarations
    int autoEB574A67_val;
    int auto3E9F2555_ae;
    const int auto3E9F2555_ai = 1;
    int auto0953264A_ae;
    const int auto0953264A_ai = 1;

    // Variable Initialization

    // Implementation
    autoEB574A67_val = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    if (autoEB574A67_val == libAIAI_ge_DefenderAIState_Idle) {
    }
    else if (autoEB574A67_val == libAIAI_ge_DefenderAIState_Fighting) {
        auto3E9F2555_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        lv_unitIndex = 1;
        for ( ; ( (auto3E9F2555_ai >= 0 && lv_unitIndex <= auto3E9F2555_ae) || (auto3E9F2555_ai < 0 && lv_unitIndex >= auto3E9F2555_ae) ) ; lv_unitIndex += auto3E9F2555_ai ) {
            if ((UnitIsAlive(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex]) == true)) {
                libAIAI_gf_DefenderAIIssueFightingOrderToCreep(lp_defenderAIIndex, lv_unitIndex);
            }

        }
    }
    else if (autoEB574A67_val == libAIAI_ge_DefenderAIState_Leashing) {
        auto0953264A_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        lv_unitIndex = 1;
        for ( ; ( (auto0953264A_ai >= 0 && lv_unitIndex <= auto0953264A_ae) || (auto0953264A_ai < 0 && lv_unitIndex >= auto0953264A_ae) ) ; lv_unitIndex += auto0953264A_ai ) {
            lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
            if ((UnitIsAlive(lv_defenderUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderCloseEnoughDistance)) {
                lv_currentOrder = UnitOrder(lv_defenderUnit, 0);
                lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
                if (((lv_currentOrder == null) || (lv_currentAbilityCommand != libAIAI_gv_aIMoveAbil) || (OrderGetTargetType(lv_currentOrder) != c_orderTargetPoint) || (OrderGetTargetPoint(lv_currentOrder) != libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]))) {
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]), c_orderQueueReplace);
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]))), c_orderQueueAddToEnd);
                }

            }

        }
    }
    else {
    }
}

void libAIAI_gf_DefenderAIUpdateValidTargetList (int lp_defenderAIIndex) {
    // Variable Declarations
    unit lv_u;
    int lv_defenderOwner;
    int lv_unitOwner;
    region lv_attackRegion;

    // Automatic Variable Declarations
    unitgroup autoAB6F3F72_g;
    int autoAB6F3F72_u;

    // Variable Initialization

    // Implementation
    libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets = UnitGroupEmpty();
    if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0)) {
        return ;
    }

    lv_defenderOwner = UnitGetOwner(UnitGroupRandomUnit(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive));
    autoAB6F3F72_g = UnitGroup(null, c_playerAny, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashRegion, UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    autoAB6F3F72_u = UnitGroupCount(autoAB6F3F72_g, c_unitCountAll);
    for (;; autoAB6F3F72_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoAB6F3F72_g, autoAB6F3F72_u);
        if (lv_u == null) { break; }
        lv_unitOwner = UnitGetOwner(lv_u);
        if (((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lv_unitOwner) == false) || (libNtve_gf_PlayerIsEnemy(lv_defenderOwner, lv_unitOwner, libNtve_ge_PlayerRelation_Enemy) == false) || (UnitTypeTestFlag(UnitGetType(lv_u), c_unitFlagUntargetable) == true))) {
            continue;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_canSeeCloaked == false) && (UnitTestState(lv_u, c_unitStateCloaked) == true)) {
            continue;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] == false) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion != null) && (libNtve_gf_UnitInRegion(lv_u, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion) == true)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] = true;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] == true)) {
            UnitGroupAdd(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, lv_u);
        }

    }
}

void libAIAI_gf_DefenderAITransitionDefenderAIIntoState (int lp_defenderAIIndex, int lp_state) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itDefender;
    unit lv_itUnit;
    int lv_oldState;

    // Automatic Variable Declarations
    int auto9CD00D6F_val;
    unitgroup auto121AEE85_g;
    int auto121AEE85_u;
    unitgroup autoFEC9DE21_g;
    int autoFEC9DE21_u;
    playergroup auto0531A549_g;
    int autoACA88278_ae;
    const int autoACA88278_ai = 1;
    unitgroup auto4BBECBE7_g;
    int auto4BBECBE7_u;

    // Variable Initialization

    // Implementation
    lv_oldState = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state = lp_state;
    auto9CD00D6F_val = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    if (auto9CD00D6F_val == libAIAI_ge_DefenderAIState_Idle) {
        auto121AEE85_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        auto121AEE85_u = UnitGroupCount(auto121AEE85_g, c_unitCountAll);
        for (;; auto121AEE85_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto121AEE85_g, auto121AEE85_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorRemove(lv_itUnit, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleCreepSoftLeashingNoHeal", 1);
            UnitIssueOrder(lv_itUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
            UnitBehaviorAdd(lv_itUnit, "JungleIdleState", lv_itUnit, 1);
        }
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount = 0;
    }
    else if (auto9CD00D6F_val == libAIAI_ge_DefenderAIState_Fighting) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_fightStartTime = TimerGetElapsed(libGame_gv_gameTimer);
        autoFEC9DE21_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        autoFEC9DE21_u = UnitGroupCount(autoFEC9DE21_g, c_unitCountAll);
        for (;; autoFEC9DE21_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoFEC9DE21_g, autoFEC9DE21_u);
            if (lv_itUnit == null) { break; }
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion == null)) {
                UnitBehaviorRemove(lv_itUnit, "JungleCreepBenign", 1);
            }

            UnitBehaviorRemove(lv_itUnit, "JungleCreepPassive", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleCreepSoftLeashingNoHeal", 1);
            UnitBehaviorRemove(lv_itUnit, "JungleIdleState", 1);
            if (((UnitGetType(lv_itUnit) == "MercDefenderSiegeGiant") || (UnitHasBehavior2(lv_itUnit, "JungleCreepUsesPrepAggro") == true)) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount == 0)) {
                UnitBehaviorAdd(lv_itUnit, "JungleCreepPrepAggro", lv_itUnit, 1);
            }

        }
    }
    else if (auto9CD00D6F_val == libAIAI_ge_DefenderAIState_Leashing) {
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount < libAIAI_gv_aIDefenderMaxLeashCount)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount += 1;
        }

        auto0531A549_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto0531A549_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_itPlayer] = false;
        }
        autoACA88278_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        lv_itDefender = 1;
        for ( ; ( (autoACA88278_ai >= 0 && lv_itDefender <= autoACA88278_ae) || (autoACA88278_ai < 0 && lv_itDefender >= autoACA88278_ae) ) ; lv_itDefender += autoACA88278_ai ) {
            lv_itUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_itDefender];
            if ((UnitIsAlive(lv_itUnit) == true)) {
                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_healOnLeash == true)) {
                    UnitBehaviorAddPlayer(lv_itUnit, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount >= libAIAI_gv_aIDefenderMaxLeashCount)) {
                        UnitSetPropertyFixed(lv_itUnit, c_unitPropLifePercent, 100.0);
                    }

                }
                else {
                    UnitBehaviorAddPlayer(lv_itUnit, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
                }
                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount >= libAIAI_gv_aIDefenderMaxLeashCount)) {
                    UnitBehaviorAddPlayer(lv_itUnit, "JungleCreepHardLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                }

                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion == null)) {
                    UnitBehaviorAddPlayer(lv_itUnit, "JungleCreepBenign", libCore_gv_cOMPUTER_Hostile, 1);
                }

                UnitBehaviorAddPlayer(lv_itUnit, "JungleCreepPassive", libCore_gv_cOMPUTER_Hostile, 1);
                UnitIssueOrder(lv_itUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_itDefender]), c_orderQueueReplace);
                UnitIssueOrder(lv_itUnit, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_itDefender], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_itDefender]))), c_orderQueueAddToEnd);
            }

        }
    }
    else {
    }
    if ((lv_oldState == libAIAI_ge_DefenderAIState_Idle) && (lp_state == libAIAI_ge_DefenderAIState_Fighting)) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minAgroTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinAgroTime);
        libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting(lp_defenderAIIndex);
    }

    if ((lv_oldState == libAIAI_ge_DefenderAIState_Leashing) && (lp_state == libAIAI_ge_DefenderAIState_Idle)) {
        libGame_gf_SendEventJungleDefenderAIDefendersEndFighting(lp_defenderAIIndex);
    }

    if ((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) && (lp_state == libAIAI_ge_DefenderAIState_Leashing)) {
        auto4BBECBE7_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        auto4BBECBE7_u = UnitGroupCount(auto4BBECBE7_g, c_unitCountAll);
        for (;; auto4BBECBE7_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto4BBECBE7_g, auto4BBECBE7_u);
            if (lv_itUnit == null) { break; }
            libUIUI_gf_UICombatFloatingElementsLeashing(lv_itUnit);
        }
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libGame_gv_gameTimer);
    }

}

void libAIAI_gf_DefenderAIIssueFightingOrderToCreep (int lp_defenderAIIndex, int lp_creep) {
    // Variable Declarations
    unit lv_itUnit;
    unitgroup lv_enemyGroup;
    unit lv_creepUnit;
    order lv_currentOrder;
    bool lv_creepNeedsNewOrders;
    unit lv_currentOrderTarget;
    unit lv_newOrderTarget;
    int lv_validTargets;

    // Automatic Variable Declarations
    string autoCA899BA8_val;
    unitgroup auto92094C1F_g;
    int auto92094C1F_u;
    unitgroup auto6D7D9EE6_g;
    int auto6D7D9EE6_u;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_creepUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lp_creep];
    lv_currentOrderTarget = OrderGetTargetUnit(UnitOrder(lv_creepUnit, 0));
    lv_creepNeedsNewOrders = true;
    if ((UnitWeaponPeriodRemaining(lv_creepUnit, 1) > 2.0)) {
        lv_creepNeedsNewOrders = false;
    }

    if ((libAIAI_gf_DefendersAreFighting(lp_defenderAIIndex) == true) && ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_fightStartTime + libAIAI_gv_aIDefenderMinTimeBeforeCasting) < TimerGetElapsed(libGame_gv_gameTimer))) {
        autoCA899BA8_val = UnitGetType(lv_creepUnit);
        if (autoCA899BA8_val == "MercenarySlaynElemental@Defender") {
            if ((UnitGetCooldown(lv_creepUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("MercenarySlaynElementalEssenceLeech"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny)) <= 0.0)) {
                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_creepUnit, Order(AbilityCommand("MercenarySlaynElementalEssenceLeech", 0)), c_orderQueueReplace);
                    lv_creepNeedsNewOrders = false;
                }

            }

        }
        else if (autoCA899BA8_val == "MercenaryColossus@Defender") {
            if ((UnitGetCooldown(lv_creepUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("MercenaryColossusFireBeam"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny)) <= 0.0)) {
                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 5.25), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                auto6D7D9EE6_g = lv_enemyGroup;
                auto6D7D9EE6_u = UnitGroupCount(auto6D7D9EE6_g, c_unitCountAll);
                for (;; auto6D7D9EE6_u -= 1) {
                    lv_itUnit = UnitGroupUnitFromEnd(auto6D7D9EE6_g, auto6D7D9EE6_u);
                    if (lv_itUnit == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_itUnit), UnitGetPosition(lv_creepUnit)) <= 2.25)) {
                        UnitGroupRemove(lv_enemyGroup, lv_itUnit);
                    }

                }
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2)) {
                    UnitBehaviorRemove(lv_creepUnit, "MercenaryColossusWeapon@TurretDisabler", 1);
                    UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(AbilityCommand("MercenaryColossusFireBeam", 0), UnitGetPosition(UnitGroupUnit(lv_enemyGroup, 1))), c_orderQueueReplace);
                    lv_creepNeedsNewOrders = false;
                }

            }

            if ((lv_creepNeedsNewOrders == true) && (UnitGetCooldown(lv_creepUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("MercenaryColossusChargedBlast"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny)) <= 0.0)) {
                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 8.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(AbilityCommand("MercenaryColossusChargedBlast", 0), UnitGetPosition(UnitGroupUnit(lv_enemyGroup, 1))), c_orderQueueReplace);
                    lv_creepNeedsNewOrders = false;
                }

            }

        }
        else {
            if (((UnitGetType(lv_creepUnit) == "JungleGraveGolemDefender"))) {
                if ((UnitGetCooldown(lv_creepUnit, "Abil/UnderworldBossStun") <= 0.0)) {
                    lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 5.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                        UnitIssueOrder(lv_creepUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                        lv_creepNeedsNewOrders = false;
                    }
                    else {
                        lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 5.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3)) {
                            UnitIssueOrder(lv_creepUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                            lv_creepNeedsNewOrders = false;
                        }

                    }
                }

                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 8.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGetCooldown(lv_creepUnit, "Abil/UnderworldBossRoots") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    auto92094C1F_g = lv_enemyGroup;
                    auto92094C1F_u = UnitGroupCount(auto92094C1F_g, c_unitCountAll);
                    for (;; auto92094C1F_u -= 1) {
                        lv_itUnit = UnitGroupUnitFromEnd(auto92094C1F_g, auto92094C1F_u);
                        if (lv_itUnit == null) { break; }
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_itUnit), UnitGetPosition(lv_creepUnit)) >= 2.0)) {
                            lv_validTargets += 1;
                        }

                    }
                    if ((lv_validTargets >= 1)) {
                        lv_newOrderTarget = libAIAI_gf_AIGetRandomEnemyHeroInRangeOfUnitWithMinimumRangeRequirements(lv_creepUnit, UnitGetPosition(lv_creepUnit), 0.0, 8.0, lv_currentOrderTarget);
                        if ((lv_newOrderTarget != null)) {
                            UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(AbilityCommand("UnderworldBossRoots", 0), UnitGetPosition(lv_newOrderTarget)), c_orderQueueReplace);
                            lv_creepNeedsNewOrders = false;
                        }

                    }
                    else {
                        UnitModifyCooldown(lv_creepUnit, "Abil/UnderworldBossRoots", 0.5, c_cooldownOperationAdd);
                    }
                }

            }

        }
    }

    if ((lv_creepNeedsNewOrders == true)) {
        lv_currentOrder = UnitOrder(lv_creepUnit, 0);
        if (((lv_currentOrder == null) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIMoveAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aITurnAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIAttackAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIAttackAllyAbil))) {
            lv_newOrderTarget = UnitGroupClosestToPoint(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, UnitGetPosition(lv_creepUnit));
            if ((lv_newOrderTarget == null)) {
                UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep]), c_orderQueueReplace);
                UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep]))), c_orderQueueAddToEnd);
            }
            else {
                if (((lv_newOrderTarget != lv_currentOrderTarget) || ((OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIAttackAbil) && (OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIAttackAllyAbil)))) {
                    UnitIssueOrder(lv_creepUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAbil, lv_newOrderTarget), c_orderQueueReplace);
                }

            }
        }

    }

}

void libAIAI_gf_DefenderAICreepDies (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_SendEventJungleDefenderAIDefenderKilled(lp_defenderAIIndex, lp_unit, lp_killingPlayer);
    if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_campDeathEventDispatched == false)) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_campDeathEventDispatched = true;
        libGame_gf_SendEventJungleDefenderAIAllDefendersKilled(lp_defenderAIIndex, lp_killingPlayer);
    }

}

int libAIAI_gf_DefenderAINewIndex () {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_bestIndex;
    fixed lv_bestIndexTime;

    // Automatic Variable Declarations
    const int autoD3E3EA4D_ae = libAIAI_gv_defenderAIMaxNumberOfDefenderAI;
    const int autoD3E3EA4D_ai = 1;
    const int autoD37A67CC_ae = libAIAI_gv_defenderAIMaxNumberOfDefenderAI;
    const int autoD37A67CC_ai = 1;

    // Variable Initialization
    lv_bestIndexTime = 524287.0;

    // Implementation
    lv_defenderAIIndex = 1;
    for ( ; ( (autoD3E3EA4D_ai >= 0 && lv_defenderAIIndex <= autoD3E3EA4D_ae) || (autoD3E3EA4D_ai < 0 && lv_defenderAIIndex >= autoD3E3EA4D_ae) ) ; lv_defenderAIIndex += autoD3E3EA4D_ai ) {
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_used == false)) {
            libAIAI_gv_defenderAIDefenderAIUpperBound = lv_defenderAIIndex;
            return lv_defenderAIIndex;
        }

    }
    lv_defenderAIIndex = 1;
    for ( ; ( (autoD37A67CC_ai >= 0 && lv_defenderAIIndex <= autoD37A67CC_ae) || (autoD37A67CC_ai < 0 && lv_defenderAIIndex >= autoD37A67CC_ae) ) ; lv_defenderAIIndex += autoD37A67CC_ai ) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0) && (libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted < lv_bestIndexTime)) {
            lv_bestIndex = lv_defenderAIIndex;
            lv_bestIndexTime = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_AIAI_20CD3A9B", "A", IntToText(lv_bestIndex));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_20CD3A9B"), true);
    return lv_bestIndex;
}

void libAIAI_gf_StartDefenderAI (unitgroup lp_defenders, region lp_leashRegion, region lp_aggroRegion, bool lp_healOnLeash) {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    unit lv_itUnit;
    int lv_unitIndex;

    // Automatic Variable Declarations
    unitgroup autoC7C9D694_g;
    int autoC7C9D694_u;

    // Variable Initialization

    // Implementation
    lv_defenderAIIndex = libAIAI_gf_DefenderAINewIndex();
    if ((lv_defenderAIIndex <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_520DB5F5"), true);
        return ;
    }

    if ((UnitGroupCount(lp_defenders, c_unitCountAlive) > libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_D35AA13C"), true);
        return ;
    }

    if ((TriggerIsEnabled(libAIAI_gt_DefenderAIDefenderAILogic) == false)) {
        TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, true);
        TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, true);
    }

    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_used = true;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashRegion = lp_leashRegion;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion = lp_aggroRegion;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_healOnLeash = lp_healOnLeash;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup = UnitGroupEmpty();
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount = 0;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_canSeeCloaked = false;
    autoC7C9D694_g = lp_defenders;
    autoC7C9D694_u = UnitGroupCount(autoC7C9D694_g, c_unitCountAll);
    for (;; autoC7C9D694_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoC7C9D694_g, autoC7C9D694_u);
        if (lv_itUnit == null) { break; }
        UnitGroupAdd(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, lv_itUnit);
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion == null)) {
            UnitBehaviorAdd(lv_itUnit, "JungleCreepBenign", lv_itUnit, 1);
        }

        UnitBehaviorAdd(lv_itUnit, "JungleCreepPassive", lv_itUnit, 1);
        UnitStatusBarOverride(lv_itUnit, c_unitStatusGroupAll);
        UnitSetCustomValue(lv_itUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderAIIndex), IntToFixed(lv_defenderAIIndex));
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount += 1;
        lv_unitIndex = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount;
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderUnits[lv_unitIndex] = lv_itUnit;
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion != null) && (RegionContainsPoint(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion, UnitGetPosition(lv_itUnit)) == false)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashPositions[lv_unitIndex] = libAIAI_gf_DefenderMovePointIntoRegion(UnitGetPosition(lv_itUnit), libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion);
        }
        else {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashPositions[lv_unitIndex] = UnitGetPosition(lv_itUnit);
        }
        if ((UnitHasBehavior2(lv_itUnit, "Truesight") == true)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_canSeeCloaked = true;
        }

    }
    libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Idle);
    DataTableSetInt(false, libAIAI_gv_defenderAILastCreatedDefenderAIIndex, lv_defenderAIIndex);
}

void libAIAI_gf_AddUnitsToDefenderAI (int lp_defenderAIIndex, unitgroup lp_defenders) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_unitIndex;

    // Automatic Variable Declarations
    unitgroup auto7C7F12E9_g;
    int auto7C7F12E9_u;

    // Variable Initialization

    // Implementation
    if (((lp_defenderAIIndex <= 0) || (lp_defenderAIIndex > libAIAI_gv_defenderAIDefenderAIUpperBound))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_400D7EF0"), true);
        return ;
    }

    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_31106EE1"), true);
        return ;
    }

    if (((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount + UnitGroupCount(lp_defenders, c_unitCountAll)) > libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_42439C81"), true);
        return ;
    }

    auto7C7F12E9_g = lp_defenders;
    auto7C7F12E9_u = UnitGroupCount(auto7C7F12E9_g, c_unitCountAll);
    for (;; auto7C7F12E9_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto7C7F12E9_g, auto7C7F12E9_u);
        if (lv_itUnit == null) { break; }
        UnitGroupAdd(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, lv_itUnit);
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state != libAIAI_ge_DefenderAIState_Fighting)) {
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion == null)) {
                UnitBehaviorAdd(lv_itUnit, "JungleCreepBenign", lv_itUnit, 1);
            }

            UnitBehaviorAdd(lv_itUnit, "JungleCreepPassive", lv_itUnit, 1);
        }

        UnitStatusBarOverride(lv_itUnit, c_unitStatusGroupAll);
        UnitSetCustomValue(lv_itUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderAIIndex), IntToFixed(lp_defenderAIIndex));
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount += 1;
        lv_unitIndex = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex] = lv_itUnit;
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion != null) && (RegionContainsPoint(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion, UnitGetPosition(lv_itUnit)) == false)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex] = libAIAI_gf_DefenderMovePointIntoRegion(UnitGetPosition(lv_itUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroRegion);
        }
        else {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex] = UnitGetPosition(lv_itUnit);
        }
        if ((UnitHasBehavior2(lv_itUnit, "Truesight") == true)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_canSeeCloaked = true;
        }

    }
}

int libAIAI_gf_LastCreatedDefenderAI () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, libAIAI_gv_defenderAILastCreatedDefenderAIIndex);
}

int libAIAI_gf_DefenderAIIndexOfUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderAIIndex)));
}

unitgroup libAIAI_gf_DefenderGroup (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return UnitGroupEmpty();
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
    }
}

unit libAIAI_gf_DefenderUnit (int lp_defenderAIIndex, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return null;
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lp_index];
    }
}

int libAIAI_gf_DefenderUnitCount (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return 0;
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
    }
}

bool libAIAI_gf_DefendersAreFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == true) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Fighting)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_DefendersAnyOutsideLeashRegion (int lp_defenderAIIndex) {
    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;

    // Automatic Variable Declarations
    int autoD33E12AE_ae;
    const int autoD33E12AE_ai = 1;

    // Variable Initialization

    // Implementation
    autoD33E12AE_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
    lv_unitIndex = 1;
    for ( ; ( (autoD33E12AE_ai >= 0 && lv_unitIndex <= autoD33E12AE_ae) || (autoD33E12AE_ai < 0 && lv_unitIndex >= autoD33E12AE_ae) ) ; lv_unitIndex += autoD33E12AE_ai ) {
        lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
        if ((UnitIsAlive(lv_defenderUnit) == true) && (libNtve_gf_UnitInRegion(lv_defenderUnit, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashRegion) == false)) {
            return true;
        }

    }
    return false;
}

point libAIAI_gf_DefenderMovePointIntoRegion (point lp_point, region lp_region) {
    // Variable Declarations
    point lv_center;
    point lv_dir;
    point lv_newPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_center = RegionGetCenter(lp_region);
    lv_dir = AIGetDirection(lv_center, lp_point);
    lv_newPoint = Point((PointGetX(lv_center) + (PointGetX(lv_dir) * 3.0)), (PointGetY(lv_center) + (PointGetY(lv_dir) * 3.0)));
    if ((RegionContainsPoint(lp_region, lp_point) == true)) {
        return lv_newPoint;
    }

    return lv_center;
}

void libAIAI_gf_DefenderAIUpdateAIStatus (int lp_defenderIndex) {
    // Variable Declarations
    int lv_loopIndex;
    unit lv_leader;
    text lv_botStatus;

    // Automatic Variable Declarations
    int auto2F6F0AD8_ae;
    const int auto2F6F0AD8_ai = 1;

    // Variable Initialization

    // Implementation
    auto2F6F0AD8_ae = libAIAI_gv_defenderAI[lp_defenderIndex].lv_defenderCount;
    lv_loopIndex = 1;
    for ( ; ( (auto2F6F0AD8_ai >= 0 && lv_loopIndex <= auto2F6F0AD8_ae) || (auto2F6F0AD8_ai < 0 && lv_loopIndex >= auto2F6F0AD8_ae) ) ; lv_loopIndex += auto2F6F0AD8_ai ) {
        lv_leader = libAIAI_gf_DefenderUnit(lp_defenderIndex, lv_loopIndex);
        if ((UnitIsAlive(lv_leader) == true)) {
            break;
        }

    }
    if ((UnitIsAlive(lv_leader) == false)) {
        return ;
    }
    else {
        if ((libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugUnit != lv_leader) && (libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel != c_invalidDialogControlId)) {
            DialogControlDestroy(libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel);
            libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel = c_invalidDialogControlId;
        }

    }
    if ((libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "BotStatusLabel", lv_leader);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel = DialogControlLastCreated();
        libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugUnit = lv_leader;
    }

    lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_DefenderAIState_Ident(libAIAI_gv_defenderAI[lp_defenderIndex].lv_state)));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_A896A071"));
    lv_botStatus = (lv_botStatus + IntToText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_leashCount));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_81B70A72"));
    lv_botStatus = (lv_botStatus + IntToText(UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderIndex].lv_defendersGroup, c_unitCountAlive)));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_CD8F4D0E"));
    lv_botStatus = (lv_botStatus + IntToText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_defenderCount));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_E560737A"));
    lv_botStatus = (lv_botStatus + IntToText(UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderIndex].lv_validTargets, c_unitCountAlive)));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_E72AABDE"));
    lv_botStatus = (lv_botStatus + IntToText(lp_defenderIndex));
    libNtve_gf_SetDialogItemText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel, lv_botStatus, PlayerGroupAll());
}

void libAIAI_gf_DefenderAIToggleAIStatus (bool lp_show) {
    // Variable Declarations
    int lv_defenderAIIndex;

    // Automatic Variable Declarations
    int auto62750211_ae;
    const int auto62750211_ai = 1;

    // Variable Initialization

    // Implementation
    auto62750211_ae = libAIAI_gv_defenderAIDefenderAIUpperBound;
    lv_defenderAIIndex = 1;
    for ( ; ( (auto62750211_ai >= 0 && lv_defenderAIIndex <= auto62750211_ae) || (auto62750211_ai < 0 && lv_defenderAIIndex >= auto62750211_ae) ) ; lv_defenderAIIndex += auto62750211_ai ) {
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel != c_invalidDialogControlId)) {
            if ((lp_show == true)) {
                DialogControlSetVisible(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel, PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel, PlayerGroupAll(), false);
            }
        }

    }
}

void libAIAI_gf_HeroAIInitializeItemData () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 1;

    // Implementation
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentFirstAid@Item";
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentStoneskin";
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentBloodForBlood";
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentDash";
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentDeafeningRoar";
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentRewind";
    lv_index = (lv_index + 1);
}

void libAIAI_gf_HeroAIRegisterPortalPair (int lp_teamIndex, unit lp_portalIn, unit lp_portalOut, abilcmd lp_portalAbility) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_heroAIPortalCount[lp_teamIndex] < libAIAI_gv_heroAIMaxPortalPairs)) {
        libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalIn = lp_portalIn;
        libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalInPosition = UnitGetPosition(lp_portalIn);
        libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalOut = lp_portalOut;
        libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalOutPosition = UnitGetPosition(lp_portalOut);
        libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalAbility = lp_portalAbility;
        libAIAI_gv_heroAIPortalCount[lp_teamIndex] += 1;
    }

}

void libAIAI_gf_HeroAIUnregisterPortalPair (int lp_teamIndex, unit lp_portalIn) {
    // Variable Declarations
    int lv_portalIndex;

    // Automatic Variable Declarations
    int auto16C9C8D7_ae;
    const int auto16C9C8D7_ai = 1;

    // Variable Initialization

    // Implementation
    auto16C9C8D7_ae = (libAIAI_gv_heroAIPortalCount[lp_teamIndex] - 1);
    lv_portalIndex = 0;
    for ( ; ( (auto16C9C8D7_ai >= 0 && lv_portalIndex <= auto16C9C8D7_ae) || (auto16C9C8D7_ai < 0 && lv_portalIndex >= auto16C9C8D7_ae) ) ; lv_portalIndex += auto16C9C8D7_ai ) {
        if ((lp_portalIn == libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalIn)) {
            libAIAI_gv_heroAIPortalCount[lp_teamIndex] -= 1;
            libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalIn = libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalIn;
            libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalInPosition = libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalInPosition;
            libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalOut = libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalOut;
            libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalOutPosition = libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalOutPosition;
            libAIAI_gv_heroAIPortals[lp_teamIndex][lv_portalIndex].lv_portalAbility = libAIAI_gv_heroAIPortals[lp_teamIndex][libAIAI_gv_heroAIPortalCount[lp_teamIndex]].lv_portalAbility;
            break;
        }

    }
}

int libAIAI_gf_HeroAIFindPortalToDestination (int lp_trigPlayer, point lp_destination, fixed lp_distanceToDestination) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_playerPosition;
    int lv_loopPortalIndex;
    fixed lv_loopPortalDistanceTotal;
    int lv_bestPortalIndex;
    fixed lv_bestPortalDistanceTotal;

    // Automatic Variable Declarations
    int auto6AA32345_ae;
    const int auto6AA32345_ai = 1;

    // Variable Initialization
    lv_bestPortalIndex = -1;
    lv_bestPortalDistanceTotal = (lp_distanceToDestination - libAIAI_gv_heroAIPortalUsageDistancePenalty);

    // Implementation
    lv_playerPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    auto6AA32345_ae = (libAIAI_gv_heroAIPortalCount[lv_teamIndex] - 1);
    lv_loopPortalIndex = 0;
    for ( ; ( (auto6AA32345_ai >= 0 && lv_loopPortalIndex <= auto6AA32345_ae) || (auto6AA32345_ai < 0 && lv_loopPortalIndex >= auto6AA32345_ae) ) ; lv_loopPortalIndex += auto6AA32345_ai ) {
        lv_loopPortalDistanceTotal = (DistanceBetweenPoints(lv_playerPosition, libAIAI_gv_heroAIPortals[lv_teamIndex][lv_loopPortalIndex].lv_portalInPosition) + DistanceBetweenPoints(libAIAI_gv_heroAIPortals[lv_teamIndex][lv_loopPortalIndex].lv_portalOutPosition, lp_destination));
    }
    return lv_bestPortalIndex;
}

text libAIAI_gf_HeroAIDifficultyDisplayText (int lp_player) {
    // Automatic Variable Declarations
    int autoD029D39E_val;

    // Implementation
    autoD029D39E_val = libAIAI_gv_aIHeroes[lp_player].lv_difficulty;
    if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy) {
        return StringExternal("Param/Value/lib_AIAI_570110F1");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally) {
        return StringExternal("Param/Value/lib_AIAI_C6E6192E");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy) {
        return StringExternal("Param/Value/lib_AIAI_15A33C50");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally) {
        return StringExternal("Param/Value/lib_AIAI_E89BF8AE");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode) {
        return StringExternal("Param/Value/lib_AIAI_521B7949");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy) {
        return StringExternal("Param/Value/lib_AIAI_9615B05D");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly) {
        return StringExternal("Param/Value/lib_AIAI_9F97310C");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasy) {
        return StringExternal("Param/Value/lib_AIAI_D7C2B718");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly) {
        return StringExternal("Param/Value/lib_AIAI_8FDCC7C3");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) {
        return StringExternal("Param/Value/lib_AIAI_8B3086F7");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) {
        return StringExternal("Param/Value/lib_AIAI_C9E7F064");
    }
    else if (autoD029D39E_val == libAIAI_ge_HeroAIDifficulty_HeroAIElite) {
        return StringExternal("Param/Value/lib_AIAI_47733AE9");
    }
    else {
        return StringExternal("Param/Value/lib_AIAI_B6806574");
    }
}

int libAIAI_gf_HeroAIDifficultyToTalentInteger (int lp_player) {
    // Automatic Variable Declarations
    int auto37CC47F0_val;

    // Implementation
    auto37CC47F0_val = libAIAI_gv_aIHeroes[lp_player].lv_difficulty;
    if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly) {
        return 0;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasy) {
        return 1;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly) {
        return 1;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) {
        return 2;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) {
        return 5;
    }
    else if (auto37CC47F0_val == libAIAI_ge_HeroAIDifficulty_HeroAIElite) {
        return 6;
    }
    else {
        return 0;
    }
}

void libAIAI_gf_HeroAIInitializeHeroTierData () {
    // Variable Declarations
    int lv_tierIndex;
    int lv_arrayIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tierIndex += 1;
    lv_arrayIndex = 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroDiablo";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroDemonHunter";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "KerriganHero";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroMalfurion";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "MuradinHero";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroTychus";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroUther";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroRaynor";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroLiLi";
    lv_tierIndex += 1;
    lv_arrayIndex = 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroArthas";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroStitches";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroTassadar";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "TyrandeHero";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroSgtHammer";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroWitchDoctor";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroBarbarian";
    lv_tierIndex += 1;
    lv_arrayIndex = 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "ETCHero";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroFalstad";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroNova";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroIllidan";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroTinker";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroTyrael";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroZeratul";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "HeroAbathur";
    lv_arrayIndex += 1;
    libAIAI_gv_heroAIHeroTierData[lv_tierIndex][lv_arrayIndex] = "BrightwingHero";
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData);
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroRehgar");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "AzmodanHero");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroZagara");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroChen");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroMurky");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "AnubarakHero");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroKaelthas");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroJaina");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "JohannaHero");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroThrall");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroButcher");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroSylvanas");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroLostVikingsController");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroLeoric");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "HeroRexxar");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "KharazimHero");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroArtanis");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "HeroMedic");
}

void libAIAI_gf_HeroAIAddHeroToTierData (int lp_tier, string lp_heroType) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoBDFC2A3A_ae = libCore_gv_dataHeroesMaxHeroCount;
    const int autoBDFC2A3A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoBDFC2A3A_ai >= 0 && lv_index <= autoBDFC2A3A_ae) || (autoBDFC2A3A_ai < 0 && lv_index >= autoBDFC2A3A_ae) ) ; lv_index += autoBDFC2A3A_ai ) {
        if ((libAIAI_gv_heroAIHeroTierData[lp_tier][lv_index] == null)) {
            libAIAI_gv_heroAIHeroTierData[lp_tier][lv_index] = lp_heroType;
            return ;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_AIAI_F73B08C2", "A", UnitTypeGetName(lp_heroType));
    TextExpressionSetToken("Param/Expression/lib_AIAI_F73B08C2", "B", IntToText((lp_tier)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_F73B08C2"), true);
}

void libAIAI_gf_SummonedAIInitialAttackLogic (bool lp_attackCreatorsTarget, unit lp_summonedUnit, unit lp_creatorUnit, bool lp_continuousScan) {
    // Variable Declarations
    unit lv_targetUnit;
    abilcmd lv_attackAbility;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitAbilityExists(lp_summonedUnit, "AttackAlly") == true)) {
        lv_attackAbility = AbilityCommand("AttackAlly", 0);
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if ((OrderGetAbilityCommand(UnitOrder(lp_creatorUnit, 0)) == AbilityCommand("attack", 0)) && (lp_attackCreatorsTarget == true)) {
        if ((OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0)) == null)) {
            lv_targetUnit = OrderGetTargetUnit(UnitOrder(lp_creatorUnit, 0));
            UnitIssueOrder(lp_summonedUnit, OrderTargetingUnit(lv_attackAbility, lv_targetUnit), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0))), c_orderQueueReplace);
        }
    }
    else {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_summonedUnit) == true)) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    while ((UnitIsAlive(lp_summonedUnit) == true) && (OrderGetAbilityCommand(UnitOrder(lp_summonedUnit, 0)) == lv_attackAbility) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
        Wait(0.125, c_timeGame);
        if ((lp_continuousScan == true) && (UnitIsAlive(lp_summonedUnit) == true) && ((lv_targetUnit == null) || (UnitIsAlive(lv_targetUnit) == false))) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lp_summonedUnit) == true) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
        libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lp_summonedUnit), UnitGetPosition(lp_summonedUnit));
        libAIAI_gf_MinionAIStartMinionAI(-1, lp_summonedUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, 0, false);
    }

}

bool libAIAI_gf_AIIsPointBehindEnemyGateEstimate (point lp_selfPosition, int lp_selfPlayer, point lp_otherPoint) {
    // Variable Declarations
    const fixed lv_maxSearchRadius = 8.0;
    const fixed lv_offsetFromEdge = 1.0;
    fixed lv_originalDistance;
    point lv_centerPoint;
    fixed lv_searchRadius;
    unitgroup lv_enemyStructures;
    unit lv_testUnit;
    unit lv_enemyGate;
    fixed lv_selfDistToGate;
    fixed lv_selfDistToEnemy;
    fixed lv_enemyDistToGate;
    point lv_enemyGatePos;
    point lv_inFrontOfGate;
    point lv_selfProjectedOntoGateLine;
    point lv_enemyProjectedOntoGateLine;

    // Automatic Variable Declarations
    unitgroup autoBCD82E72_g;
    int autoBCD82E72_u;

    // Variable Initialization
    lv_enemyStructures = UnitGroupEmpty();

    // Implementation
    lv_originalDistance = DistanceBetweenPoints(lp_selfPosition, lp_otherPoint);
    lv_searchRadius = MinF(MaxF(libAIAI_gv_aIGateNearbyRange, (lv_offsetFromEdge + (0.5 * lv_originalDistance))), lv_maxSearchRadius);
    if ((lv_originalDistance < ((lv_searchRadius - lv_offsetFromEdge) * 2.0))) {
        lv_centerPoint = MidPoint(lp_selfPosition, lp_otherPoint);
    }
    else {
        lv_centerPoint = libNtve_gf_PointOffsetTowardsPoint(lp_selfPosition, (lv_searchRadius - lv_offsetFromEdge), lp_otherPoint);
    }
    lv_enemyStructures = UnitGroupSearch(null, lp_selfPlayer, lv_centerPoint, lv_searchRadius, libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure, 0);
    autoBCD82E72_g = lv_enemyStructures;
    autoBCD82E72_u = UnitGroupCount(autoBCD82E72_g, c_unitCountAll);
    for (;; autoBCD82E72_u -= 1) {
        lv_testUnit = UnitGroupUnitFromEnd(autoBCD82E72_g, autoBCD82E72_u);
        if (lv_testUnit == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(lv_testUnit), c_unitFlagTownStructureGate) == true) && (UnitIsAlive(lv_testUnit) == true)) {
            lv_enemyGate = lv_testUnit;
            break;
        }

    }
    if ((lv_enemyGate == null)) {
        return false;
    }

    lv_enemyGatePos = UnitGetPosition(lv_enemyGate);
    lv_inFrontOfGate = PointWithOffsetPolar(lv_enemyGatePos, libAIAI_gv_aIGateNearbyRange, UnitGetFacing(lv_enemyGate));
    lv_selfProjectedOntoGateLine = libCore_gf_ProjectPointOntoLine(lv_enemyGatePos, lv_inFrontOfGate, lp_selfPosition);
    lv_enemyProjectedOntoGateLine = libCore_gf_ProjectPointOntoLine(lv_enemyGatePos, lv_inFrontOfGate, lp_otherPoint);
    lv_selfDistToGate = DistanceBetweenPoints(lv_selfProjectedOntoGateLine, lv_enemyGatePos);
    lv_selfDistToEnemy = DistanceBetweenPoints(lv_selfProjectedOntoGateLine, lv_enemyProjectedOntoGateLine);
    if ((lv_selfDistToGate < lv_selfDistToGate)) {
        return false;
    }

    lv_enemyDistToGate = DistanceBetweenPoints(lv_enemyProjectedOntoGateLine, lv_enemyGatePos);
    if ((lv_enemyDistToGate > lv_selfDistToEnemy)) {
        return false;
    }

    return true;
}

fixed libAIAI_gf_AIGetAnyWeaponRangeIncludesNonActive (unit lp_unit) {
    // Variable Declarations
    fixed lv_bestRange;
    int lv_weaponIndex;

    // Automatic Variable Declarations
    int autoBA3F6242_ae;
    const int autoBA3F6242_ai = 1;

    // Variable Initialization

    // Implementation
    autoBA3F6242_ae = UnitWeaponCount(lp_unit);
    lv_weaponIndex = 1;
    for ( ; ( (autoBA3F6242_ai >= 0 && lv_weaponIndex <= autoBA3F6242_ae) || (autoBA3F6242_ai < 0 && lv_weaponIndex >= autoBA3F6242_ae) ) ; lv_weaponIndex += autoBA3F6242_ai ) {
        if ((UnitWeaponRange(lp_unit, lv_weaponIndex) > lv_bestRange)) {
            lv_bestRange = UnitWeaponRange(lp_unit, lv_weaponIndex);
        }

    }
    return lv_bestRange;
}

unit libAIAI_gf_AIGetRandomEnemyHeroInRangeOfUnitWithMinimumRangeRequirements (unit lp_unit, point lp_position, fixed lp_minimumRange, fixed lp_maximumRange, unit lp_restrictedUnit) {
    // Variable Declarations
    unit lv_itUnit;
    unitgroup lv_unitGroup;
    unit lv_randomUnit;

    // Automatic Variable Declarations
    unitgroup autoBEAAD7E7_g;
    int autoBEAAD7E7_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    autoBEAAD7E7_g = UnitGroup(null, c_playerAny, RegionCircle(lp_position, lp_maximumRange), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoBEAAD7E7_u = UnitGroupCount(autoBEAAD7E7_g, c_unitCountAll);
    for (;; autoBEAAD7E7_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoBEAAD7E7_g, autoBEAAD7E7_u);
        if (lv_itUnit == null) { break; }
        if ((DistanceBetweenPoints(lp_position, UnitGetPosition(lv_itUnit)) >= lp_minimumRange) && (lv_itUnit != lp_restrictedUnit)) {
            UnitGroupAdd(lv_unitGroup, lv_itUnit);
        }

    }
    lv_randomUnit = UnitGroupRandomUnit(lv_unitGroup, c_unitCountAlive);
    return lv_randomUnit;
}

bool libAIAI_gf_IsAbilityHeroic (int lp_player, abilcmd lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_ability == libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3]) || (lp_ability == libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4]))) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libAIAI_gf_AIGetAlliesInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetAllyHeroesInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetAllyMinionsInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetEnemiesInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetEnemyHeroesInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetEnemyMinionsInRegion (int lp_player, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetVisibleUnitsFromGroup (int lp_player, unitgroup lp_group) {
    // Variable Declarations
    unit lv_enemy;
    unitgroup lv_enemies;

    // Automatic Variable Declarations
    unitgroup auto4F9B4194_g;
    int auto4F9B4194_u;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    auto4F9B4194_g = lp_group;
    auto4F9B4194_u = UnitGroupCount(auto4F9B4194_g, c_unitCountAll);
    for (;; auto4F9B4194_u -= 1) {
        lv_enemy = UnitGroupUnitFromEnd(auto4F9B4194_g, auto4F9B4194_u);
        if (lv_enemy == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_player) == true)) {
            UnitGroupAdd(lv_enemies, lv_enemy);
        }

    }
    return lv_enemies;
}

fixed libAIAI_gf_AIGetActiveWeaponRange (unit lp_unit) {
    // Variable Declarations
    fixed lv_bestRange;
    int lv_weaponIndex;

    // Automatic Variable Declarations
    int autoDE7F816B_ae;
    const int autoDE7F816B_ai = 1;

    // Variable Initialization

    // Implementation
    autoDE7F816B_ae = UnitWeaponCount(lp_unit);
    lv_weaponIndex = 1;
    for ( ; ( (autoDE7F816B_ai >= 0 && lv_weaponIndex <= autoDE7F816B_ae) || (autoDE7F816B_ai < 0 && lv_weaponIndex >= autoDE7F816B_ae) ) ; lv_weaponIndex += autoDE7F816B_ai ) {
        if ((UnitWeaponIsEnabled(lp_unit, lv_weaponIndex) == true) && (UnitWeaponRange(lp_unit, lv_weaponIndex) > lv_bestRange)) {
            lv_bestRange = UnitWeaponRange(lp_unit, lv_weaponIndex);
        }

    }
    return lv_bestRange;
}

bool libAIAI_gf_AIUnitBehindEnemyGateEstimate (point lp_selfPosition, int lp_selfPlayer, unit lp_enemyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gf_AIIsPointBehindEnemyGateEstimate(lp_selfPosition, lp_selfPlayer, UnitGetPosition(lp_enemyUnit));
}

fixed libAIAI_gf_AIGetClosestLanePosition (int lp_laneIndex, point lp_point) {
    // Variable Declarations
    int lv_secondaryIndex;
    int lv_closestIndex;
    point lv_closestPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gf_CalculateClosestLaneDataForLane(lp_point, lp_laneIndex);
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
    lv_closestPoint = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestPoint;
    return AILaneWaypointConvertPointToWaydist(lp_laneIndex, lv_closestIndex, lv_secondaryIndex, lv_closestPoint);
}

fixed libAIAI_gf_AIGetLaneOffsetOfPoint (int lp_laneIndex, point lp_testPoint) {
    // Variable Declarations
    int lv_nextIndex;
    int lv_previousIndex;
    point lv_nextPoint;
    point lv_previousPoint;
    point lv_dir;
    point lv_normal;
    point lv_relativePoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lp_laneIndex);
    if ((libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex < libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex)) {
        lv_previousIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
        lv_nextIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
    }
    else {
        lv_previousIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
        lv_nextIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
    }
    lv_nextPoint = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_nextIndex];
    lv_previousPoint = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_previousIndex];
    lv_dir = AIGetDirection(lv_previousPoint, lv_nextPoint);
    lv_normal = Point(PointGetY(lv_dir), (PointGetX(lv_dir) * -1.0));
    lv_relativePoint = AIGetDirection(lv_previousPoint, lp_testPoint);
    if ((((PointGetX(lv_relativePoint) * PointGetX(lv_normal)) + (PointGetY(lv_relativePoint) * PointGetY(lv_normal))) > 0.0)) {
        return libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist;
    }
    else {
        return (-1.0 * libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist);
    }
}

fixed libAIAI_gf_AIAdvanceLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, lp_distance);
    }
    else {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, (lp_distance * -1.0));
    }
}

fixed libAIAI_gf_AIRetreatLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, (lp_distance * -1.0));
    }
    else {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, lp_distance);
    }
}

fixed libAIAI_gf_AIMoveAlongLane (int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Variable Declarations
    fixed lv_distanceLeftToMove;
    point lv_currentPosition;
    int lv_nextWaypoint;
    int lv_waypointAdvance;
    point lv_nextWaypointPosition;
    fixed lv_distanceToNextWaypoint;
    point lv_direction;
    int lv_finalLanePosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_distanceLeftToMove = AbsF(lp_distance);
    lv_currentPosition = AILaneWaypointConvertWaydistOffsetToPoint(lp_laneIndex, lp_lanePosition, 0.0);
    if ((lp_distance > 0.0)) {
        lv_nextWaypoint = CeilingI(lp_lanePosition);
        lv_waypointAdvance = 1;
    }
    else {
        lv_nextWaypoint = FloorI(lp_lanePosition);
        lv_waypointAdvance = -1;
    }
    while ((lv_distanceLeftToMove > 0.0)) {
        lv_nextWaypointPosition = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_nextWaypoint];
        lv_distanceToNextWaypoint = DistanceBetweenPoints(lv_currentPosition, lv_nextWaypointPosition);
        if ((lv_distanceLeftToMove > lv_distanceToNextWaypoint)) {
            lv_currentPosition = lv_nextWaypointPosition;
            lv_distanceLeftToMove -= lv_distanceToNextWaypoint;
            lv_nextWaypoint += lv_waypointAdvance;
            if (((lv_nextWaypoint < 1) || (lv_nextWaypoint > libGame_gv_laneData[lp_laneIndex].lv_waypointCount))) {
                break;
            }

        }
        else {
            lv_direction = AIGetDirection(lv_currentPosition, lv_nextWaypointPosition);
            lv_currentPosition = libCore_gf_AdvancePointinDirection(lv_currentPosition, lv_direction, lv_distanceLeftToMove);
            lv_distanceLeftToMove = 0.0;
        }
    }
    return libAIAI_gf_AIGetClosestLanePosition(lp_laneIndex, lv_currentPosition);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include AI
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_IncludeAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_IncludeAI_Init () {
    libAIAI_gt_IncludeAI = TriggerCreate("libAIAI_gt_IncludeAI_Func");
    TriggerAddEventKeyPressed(libAIAI_gt_IncludeAI, c_playerAny, c_keyY, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionAI - AI Routine
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_MinionAIAIRoutine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstMinionIndex;
    int lv_minionIndex;
    int lv_oldState;
    int lv_newState;
    order lv_minionOrder;
    abilcmd lv_minionAbilityCommand;
    fixed lv_distanceToBattleStandard;

    // Automatic Variable Declarations
    int auto4CA69FE4_ae;
    const int auto4CA69FE4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4CA69FE4_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    lv_minionIndex = lv_firstMinionIndex;
    for ( ; ( (auto4CA69FE4_ai >= 0 && lv_minionIndex <= auto4CA69FE4_ae) || (auto4CA69FE4_ai < 0 && lv_minionIndex >= auto4CA69FE4_ae) ) ; lv_minionIndex += auto4CA69FE4_ai ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive == true) && (UnitIsValid(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit) == true) && (UnitTestState(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit, c_unitStateMoveSuppressed) == false)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit);
            if ((InShrub(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition) == true)) {
                libGame_gf_ShrubNearbyEnemyHeroRevealCheck(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition);
            }

            lv_minionOrder = UnitOrder(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit, 0);
            lv_minionAbilityCommand = OrderGetAbilityCommand(lv_minionOrder);
            if ((lv_minionOrder != null) && (lv_minionAbilityCommand != libAIAI_gv_aIMoveAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAllyAbil) && (lv_minionAbilityCommand != AbilityCommand("move", 2))) {
                continue;
            }

            libAIAI_gf_MinionAIIssueFightOrder(lv_minionIndex);
            if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane) == true) && ((DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition, libAIAI_gf_MinionAIGetNextWaypointForMinion(lv_minionIndex)) <= libAIAI_gv_aIMinionWaypointAdvanceDistance) || ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint != libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint) && (libAIAI_gf_MinionAITestPastNextWaypoint(lv_minionIndex) == true)))) {
                libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lv_minionIndex);
            }

            if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lv_minionIndex) == true)) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing = false;
            }

            lv_oldState = libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state;
            lv_newState = libAIAI_gf_MinionAIDetermineState(lv_minionIndex, lv_oldState);
            if (((lv_minionOrder == null) || (lv_minionAbilityCommand == AbilityCommand("move", 2)))) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
            }
            else {
                if ((lv_newState == libAIAI_ge_MinionAIStates_Advancing) && (lv_oldState == libAIAI_ge_MinionAIStates_Advancing) && (libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition == false)) {
                    if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing == true)) {
                        if (((lv_minionAbilityCommand != libAIAI_gv_aIMoveAbil) || (OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) != libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardPoint))) {
                            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                        }

                    }
                    else {
                        if ((lv_minionAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAllyAbil)) {
                            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                        }
                        else {
                            if ((OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit)) {
                            }
                            else {
                                if (((OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) != libAIAI_gf_MinionAIGetNextWaypointForMinion(lv_minionIndex)))) {
                                    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                                }

                            }
                        }
                    }
                }

            }
            if (((lv_oldState != lv_newState) || (libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition == true))) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = lv_newState;
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = false;
                libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lv_minionIndex);
                libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, lv_newState);
            }

            if ((libAIAI_gv_minionAIDisplayAIStatus == true)) {
                libAIAI_gf_MinionAIUpdateAIStatus(lv_minionIndex);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_MinionAIAIRoutine_Init () {
    libAIAI_gt_MinionAIAIRoutine = TriggerCreate("libAIAI_gt_MinionAIAIRoutine_Func");
    TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_MinionAIAIRoutine, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - AI Routine
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_TowerAIRoutine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_towerOwner;
    int lv_towerIndex;
    unit lv_towerIndexUnit;
    int lv_currentGameLoopMod;
    fixed lv_scanRange;
    unit lv_currentTarget;
    point lv_towerPosition;
    unitgroup lv_scanGroup;
    unitgroup lv_heroesInRange;
    unitgroup lv_minionsInRange;
    unitgroup lv_summonedUnitsInRange;
    unitgroup lv_towerPriority1UnitsInRange;
    unitgroup lv_towerPriority2UnitsInRange;
    unit lv_summonedUnit;
    unit lv_heroUnit;
    unit lv_towerPriority1Unit;
    unit lv_towerPriority2Unit;
    order lv_towerOrder;
    bool lv_clearedTowerUnit;
    unit lv_cFHTargetUnit;

    // Automatic Variable Declarations
    int auto9B021F17_ae;
    const int auto9B021F17_ai = 1;
    unitgroup autoDE689157_g;
    int autoDE689157_u;
    unit autoDE689157_var;
    unitgroup auto4C1F72F5_g;
    int auto4C1F72F5_u;
    unitgroup auto01EBC467_g;
    int auto01EBC467_u;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_heroesInRange = UnitGroupEmpty();
    lv_minionsInRange = UnitGroupEmpty();
    lv_summonedUnitsInRange = UnitGroupEmpty();
    lv_towerPriority1UnitsInRange = UnitGroupEmpty();
    lv_towerPriority2UnitsInRange = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B021F17_ae = libAIAI_gv_towerTowerCount;
    lv_towerIndex = 1;
    for ( ; ( (auto9B021F17_ai >= 0 && lv_towerIndex <= auto9B021F17_ae) || (auto9B021F17_ai < 0 && lv_towerIndex >= auto9B021F17_ae) ) ; lv_towerIndex += auto9B021F17_ai ) {
        lv_towerIndexUnit = libAIAI_gv_towerTowers[lv_towerIndex].lv_towerUnit;
        if ((UnitIsAlive(lv_towerIndexUnit) == true) && (UnitBehaviorCount(lv_towerIndexUnit, "TownCannonTowerInvulnerable") == 0) && (libAIAI_gv_towerTowers[lv_towerIndex].lv_dead == false) && (libCore_gf_ExecuteValidatorOnUnit("TargetIsDeadOrSpecialDeathState", lv_towerIndexUnit, lv_towerIndexUnit) == false)) {
            lv_clearedTowerUnit = false;
            lv_currentTarget = libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit;
            lv_towerOwner = libAIAI_gv_towerTowers[lv_towerIndex].lv_owner;
            lv_cFHTargetUnit = null;
            if (((UnitTypeTestFlag(UnitGetType(lv_towerIndexUnit), c_unitFlagTownStructureTownHall) == true) || (UnitTypeTestFlag(UnitGetType(lv_towerIndexUnit), c_unitFlagTownStructureCore) == true))) {
                lv_cFHTargetUnit = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_towerIndexUnit, "TowerCFHFocusedTargetTracker"), 1);
                if ((lv_cFHTargetUnit != null) && (lv_cFHTargetUnit != libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit)) {
                    lv_currentTarget = null;
                    lv_clearedTowerUnit = true;
                }

            }

            if ((lv_currentTarget != null)) {
                if (((UnitIsAlive(lv_currentTarget) == false) || (UnitFilterMatch(lv_currentTarget, lv_towerOwner, libAIAI_gv_uF_TowerAI_Required_Invulnerable) == true) || (UnitFilterMatch(lv_currentTarget, lv_towerOwner, libAIAI_gv_uF_TowerAI_Required_Stasis) == true) || (UnitFilterMatch(lv_currentTarget, lv_towerOwner, libAIAI_gv_uF_TowerAI_Required_Visible) == false) || (UnitFilterMatch(lv_currentTarget, lv_towerOwner, libAIAI_gv_uF_TowerAI_Required_Ignored) == true) || (UnitHasBehavior2(lv_currentTarget, "TowerAIPrioritizedTarget2") == true))) {
                    lv_clearedTowerUnit = true;
                    libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                    libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                    lv_currentTarget = null;
                    UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                }
                else {
                    if ((UnitInRangeAndAbleToAttackTarget(lv_towerIndexUnit, lv_currentTarget) == false)) {
                        lv_clearedTowerUnit = true;
                        libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                        libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                        lv_currentTarget = null;
                        UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                    }
                    else {
                        if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_hasTarget == true) && ((UnitTestState(lv_towerIndexUnit, c_unitStateAttackSuppressed) == true) || (UnitFilterMatch(lv_towerIndexUnit, lv_towerOwner, UnitFilter(0, (1 << (c_targetFilterStunned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitAbilityCheck(lv_towerIndexUnit, "attack", true) == false) || (UnitFilterMatch(lv_towerIndexUnit, lv_towerOwner, UnitFilter(0, (1 << (c_targetFilterPassive - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
                            libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                            libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                            lv_currentTarget = null;
                            UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                        }

                    }
                }
            }

            if ((UnitTestState(lv_towerIndexUnit, c_unitStateAttackSuppressed) == false) && ((lv_clearedTowerUnit == true) || ((UnitWeaponPeriodRemaining(lv_towerIndexUnit, 1) <= 2.0)))) {
                if ((lv_cFHTargetUnit != null)) {
                    if ((lv_cFHTargetUnit != libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit)) {
                        libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                        libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = lv_cFHTargetUnit;
                    }

                }
                else {
                    if (((lv_currentTarget == null) || (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeHeroic) == true))) {
                        lv_scanRange = (libAIAI_gv_towerTowers[lv_towerIndex].lv_range + UnitTypeGetProperty(UnitGetType(lv_towerIndexUnit), c_unitPropRadius));
                        lv_towerPosition = UnitGetPosition(lv_towerIndexUnit);
                        lv_scanGroup = UnitGroupSearch(null, lv_towerOwner, lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                        autoDE689157_g = lv_scanGroup;
                        autoDE689157_u = UnitGroupCount(autoDE689157_g, c_unitCountAll);
                        for (;; autoDE689157_u -= 1) {
                            autoDE689157_var = UnitGroupUnitFromEnd(autoDE689157_g, autoDE689157_u);
                            if (autoDE689157_var == null) { break; }
                            if ((UnitInRangeAndAbleToAttackTarget(lv_towerIndexUnit, autoDE689157_var) == false)) {
                                UnitGroupRemove(lv_scanGroup, autoDE689157_var);
                            }

                        }
                        if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
                            lv_minionsInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Minion, 0);
                            if ((UnitGroupCount(lv_minionsInRange, c_unitCountAlive) > 0)) {
                                libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_minionsInRange, lv_towerPosition);
                            }
                            else {
                                lv_summonedUnitsInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Summoned, 0);
                                if ((UnitGroupCount(lv_summonedUnitsInRange, c_unitCountAlive) > 0)) {
                                    libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                    libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_summonedUnitsInRange, lv_towerPosition);
                                }
                                else {
                                    lv_towerPriority1UnitsInRange = UnitGroupSearch(null, lv_towerOwner, lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                                    auto4C1F72F5_g = lv_towerPriority1UnitsInRange;
                                    auto4C1F72F5_u = UnitGroupCount(auto4C1F72F5_g, c_unitCountAll);
                                    for (;; auto4C1F72F5_u -= 1) {
                                        lv_towerPriority1Unit = UnitGroupUnitFromEnd(auto4C1F72F5_g, auto4C1F72F5_u);
                                        if (lv_towerPriority1Unit == null) { break; }
                                        if ((UnitHasBehavior2(lv_towerPriority1Unit, "TowerAIPrioritizedTarget1") == false)) {
                                            UnitGroupRemove(lv_towerPriority1UnitsInRange, lv_towerPriority1Unit);
                                        }

                                    }
                                    if ((UnitGroupCount(lv_towerPriority1UnitsInRange, c_unitCountAlive) > 0)) {
                                        libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                        libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_towerPriority1UnitsInRange, lv_towerPosition);
                                    }
                                    else {
                                        lv_towerPriority2UnitsInRange = UnitGroupSearch(null, lv_towerOwner, lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                                        auto01EBC467_g = lv_towerPriority2UnitsInRange;
                                        auto01EBC467_u = UnitGroupCount(auto01EBC467_g, c_unitCountAll);
                                        for (;; auto01EBC467_u -= 1) {
                                            lv_towerPriority2Unit = UnitGroupUnitFromEnd(auto01EBC467_g, auto01EBC467_u);
                                            if (lv_towerPriority2Unit == null) { break; }
                                            if ((UnitHasBehavior2(lv_towerPriority2Unit, "TowerAIPrioritizedTarget2") == false)) {
                                                UnitGroupRemove(lv_towerPriority2UnitsInRange, lv_towerPriority2Unit);
                                            }

                                        }
                                        if ((UnitGroupCount(lv_towerPriority2UnitsInRange, c_unitCountAlive) > 0)) {
                                            libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                            libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_towerPriority2UnitsInRange, lv_towerPosition);
                                        }
                                        else {
                                            if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit == null)) {
                                                lv_heroesInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Heroic, 0);
                                                if ((UnitGroupCount(lv_heroesInRange, c_unitCountAlive) > 0)) {
                                                    libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_heroesInRange, lv_towerPosition);
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }

                    }

                }
                if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit != null)) {
                    lv_towerOrder = UnitOrder(lv_towerIndexUnit, 0);
                    if ((UnitHasBehavior2(libAIAI_gv_towerTowers[lv_towerIndex].lv_towerUnit, "StructureAmmoDisabler") == false) && ((lv_towerOrder == null) || (OrderGetAbilityCommand(lv_towerOrder) != libAIAI_gv_aIAttackAbil) || (OrderGetAbilityCommand(lv_towerOrder) != libAIAI_gv_aIAttackAllyAbil) || (OrderGetTargetType(lv_towerOrder) != c_orderTargetUnit) || (OrderGetTargetUnit(lv_towerOrder) != libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit))) {
                        UnitIssueOrder(lv_towerIndexUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit), c_orderQueueReplace);
                    }

                }

            }

        }
        else {
            if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_dead == false)) {
                libAIAI_gv_towerTowers[lv_towerIndex].lv_dead = true;
                libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                UnitIssueOrder(lv_towerIndexUnit, Order(AbilityCommand("TowerDeadMorph", 0)), c_orderQueueReplace);
                if ((lv_towerIndex == libAIAI_gv_towerTowerCount)) {
                    libAIAI_gv_towerTowerCount -= 1;
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_TowerAIRoutine_Init () {
    libAIAI_gt_TowerAIRoutine = TriggerCreate("libAIAI_gt_TowerAIRoutine_Func");
    TriggerEnable(libAIAI_gt_TowerAIRoutine, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_TowerAIRoutine, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Attacks Unit
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_TowerAttacksUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTower;

    // Automatic Variable Declarations
    int autoEAB92F78_ae;
    const int autoEAB92F78_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEAB92F78_ae = libAIAI_gv_towerTowerCount;
    lv_itTower = 1;
    for ( ; ( (autoEAB92F78_ai >= 0 && lv_itTower <= autoEAB92F78_ae) || (autoEAB92F78_ai < 0 && lv_itTower >= autoEAB92F78_ae) ) ; lv_itTower += autoEAB92F78_ai ) {
        if ((libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit == EventPlayerEffectUsedUnit(c_effectUnitCaster))) {
            if ((libAIAI_gv_towerTowers[lv_itTower].lv_hasTarget == false)) {
                libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                if ((UnitFilterMatch(libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
                    UnitCreateEffectUnit(libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit, "TowerTargetingLaserHeroCreatePersistent", libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit);
                }
                else {
                    UnitCreateEffectUnit(libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit, "TowerTargetingLaserCreatePersistent", libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit);
                }
                libAIAI_gv_towerTowers[lv_itTower].lv_hasTarget = true;
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_TowerAttacksUnit_Init () {
    libAIAI_gt_TowerAttacksUnit = TriggerCreate("libAIAI_gt_TowerAttacksUnit_Func");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "TowerTargetingLaserAddTrackedUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Tower AI System
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_InitializeTowerAISystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laneIndex;
    int lv_structureIndex;
    unit lv_structureUnit;
    string lv_structureUnitType;
    int lv_structureLevel;

    // Automatic Variable Declarations
    unitgroup auto35CE26E7_g;
    int auto35CE26E7_u;
    unitgroup autoCD236BB4_g;
    int autoCD236BB4_u;
    int auto29917DAC_ae;
    const int auto29917DAC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_towerTowerCount = 0;
    libAIAI_gv_towerTowerCount += 1;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libAIAI_gv_towerTowerCount += 1;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    auto35CE26E7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35CE26E7_u = UnitGroupCount(auto35CE26E7_g, c_unitCountAll);
    for (;; auto35CE26E7_u -= 1) {
        lv_structureUnit = UnitGroupUnitFromEnd(auto35CE26E7_g, auto35CE26E7_u);
        if (lv_structureUnit == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(lv_structureUnit), c_unitFlagTownStructureTownHall) == true)) {
            libAIAI_gv_towerTowerCount += 1;
            libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = lv_structureUnit;
            libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_owner = UnitGetOwner(lv_structureUnit);
        }

    }
    autoCD236BB4_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD236BB4_u = UnitGroupCount(autoCD236BB4_g, c_unitCountAll);
    for (;; autoCD236BB4_u -= 1) {
        lv_structureUnit = UnitGroupUnitFromEnd(autoCD236BB4_g, autoCD236BB4_u);
        if (lv_structureUnit == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(lv_structureUnit), c_unitFlagTownStructureCannonTower) == true)) {
            libAIAI_gv_towerTowerCount += 1;
            libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = lv_structureUnit;
            libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_owner = UnitGetOwner(lv_structureUnit);
        }

    }
    auto29917DAC_ae = libAIAI_gv_towerTowerCount;
    lv_structureIndex = 1;
    for ( ; ( (auto29917DAC_ai >= 0 && lv_structureIndex <= auto29917DAC_ae) || (auto29917DAC_ai < 0 && lv_structureIndex >= auto29917DAC_ae) ) ; lv_structureIndex += auto29917DAC_ai ) {
        UnitStatusBarOverride(libAIAI_gv_towerTowers[lv_structureIndex].lv_towerUnit, c_unitStatusGroupAll);
        libAIAI_gv_towerTowers[lv_structureIndex].lv_dead = false;
        libAIAI_gv_towerTowers[lv_structureIndex].lv_range = (UnitWeaponRange(libAIAI_gv_towerTowers[lv_structureIndex].lv_towerUnit, 1) - 0.25);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_InitializeTowerAISystem_Init () {
    libAIAI_gt_InitializeTowerAISystem = TriggerCreate("libAIAI_gt_InitializeTowerAISystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DefenderAI - Creeps Attacked
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_DefenderAICreepsAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(EventUnit());
    if ((lv_defenderAIIndex > 0)) {
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_playerIsThreat[EventUnitDamageSourcePlayer()] = true;
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Idle)) {
            libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Fighting);
        }
        else if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Leashing)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_minLeashTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinLeashTime);
            libAIAI_gf_DefenderAIUpdateValidTargetList(lv_defenderAIIndex);
            if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_validTargets, c_unitCountAlive) > 0)) {
                libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Fighting);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_DefenderAICreepsAttacked_Init () {
    libAIAI_gt_DefenderAICreepsAttacked = TriggerCreate("libAIAI_gt_DefenderAICreepsAttacked_Func");
    TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, false);
    TriggerAddEventUnitDamaged(libAIAI_gt_DefenderAICreepsAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DefenderAI - Defender AI Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_DefenderAIDefenderAILogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstDefenderAIIndex;
    int lv_defenderAIIndex;
    int lv_creep;
    int lv_oldState;
    int lv_newState;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Automatic Variable Declarations
    int autoEE4A0F50_ae;
    const int autoEE4A0F50_ai = libAIAI_gv_aIDefenderIndexMod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstDefenderAIIndex = ModI(FixedToInt((GameGetMissionTime() * 16.0)), libAIAI_gv_aIDefenderIndexMod);
    autoEE4A0F50_ae = libAIAI_gv_defenderAIDefenderAIUpperBound;
    lv_defenderAIIndex = lv_firstDefenderAIIndex;
    for ( ; ( (autoEE4A0F50_ai >= 0 && lv_defenderAIIndex <= autoEE4A0F50_ae) || (autoEE4A0F50_ai < 0 && lv_defenderAIIndex >= autoEE4A0F50_ae) ) ; lv_defenderAIIndex += autoEE4A0F50_ai ) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0)) {
            continue;
        }
        else {
            if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount == 1)) {
                lv_currentOrder = UnitOrder(libAIAI_gf_DefenderUnit(1, lv_defenderAIIndex), 0);
                lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
                if ((lv_currentOrder != null) && (lv_currentAbilityCommand != libAIAI_gv_aIMoveAbil) && (lv_currentAbilityCommand != libAIAI_gv_aITurnAbil) && (lv_currentAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_currentAbilityCommand != libAIAI_gv_aIAttackAllyAbil)) {
                    continue;
                }

            }

        }
        lv_oldState = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state;
        if (((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) || ((lv_oldState == libAIAI_ge_DefenderAIState_Idle) && (libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggroRegion != null)))) {
            libAIAI_gf_DefenderAIUpdateValidTargetList(lv_defenderAIIndex);
        }

        lv_newState = libAIAI_gf_DefenderAIDetermineState(lv_defenderAIIndex, lv_oldState);
        if ((lv_oldState != lv_newState)) {
            libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, lv_newState);
        }

        libAIAI_gf_DefenderAIStateLogic(lv_defenderAIIndex);
        if ((libAIAI_gv_defenderAIDisplayAIStatus == true)) {
            libAIAI_gf_DefenderAIUpdateAIStatus(lv_defenderAIIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_DefenderAIDefenderAILogic_Init () {
    libAIAI_gt_DefenderAIDefenderAILogic = TriggerCreate("libAIAI_gt_DefenderAIDefenderAILogic_Func");
    TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_DefenderAIDefenderAILogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Initialize Difficulty Level Data
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIInitializeDifficultyLevelData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 10;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 15;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 2.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 5.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 2.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 33.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 66.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 100.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.5;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.25;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 12.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 8.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 10.0;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 8.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 8.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.5;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.5;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 15.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 6.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 15.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 7.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 8.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 12.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 8.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 7.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 4.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.333;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 0.5;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 3.5;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 2.5;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.5;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 1.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 30.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 70.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 35.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 10.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 95.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 50.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 75.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 45.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 75.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 75.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 65.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 55.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 0.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 30.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 60.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 60.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 80.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 80.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 30.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 80.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 80.0;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 15.0;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 65.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 70.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 95.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 90.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 65.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 45.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 60.0;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 30.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 35.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 25.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 40.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 50.0;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 3;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 2.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 20.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 3.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 2.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 3.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 3.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 2.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.0;
    libAIAI_gv_aIHeroDoubloonPickupSoloDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 6.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5.0;
    libAIAI_gv_aIHeroDoubloonPickupHumanDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 15.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 12.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 15.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 12.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 10.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 8.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 8.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 6.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.0;
    libAIAI_gv_aIHeroDoubloonChestDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 10.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 5.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 1.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 4;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIInitializeDifficultyLevelData_Init () {
    libAIAI_gt_HeroAIInitializeDifficultyLevelData = TriggerCreate("libAIAI_gt_HeroAIInitializeDifficultyLevelData_Func");
}

void libAIAI_InitTriggers () {
    libAIAI_gt_IncludeAI_Init();
    libAIAI_gt_MinionAIAIRoutine_Init();
    libAIAI_gt_TowerAIRoutine_Init();
    libAIAI_gt_TowerAttacksUnit_Init();
    libAIAI_gt_InitializeTowerAISystem_Init();
    libAIAI_gt_DefenderAICreepsAttacked_Init();
    libAIAI_gt_DefenderAIDefenderAILogic_Init();
    libAIAI_gt_HeroAIInitializeDifficultyLevelData_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAIAI_InitLib_completed = false;

void libAIAI_InitLib () {
    if (libAIAI_InitLib_completed) {
        return;
    }

    libAIAI_InitLib_completed = true;

    libAIAI_InitLibraries();
    libAIAI_InitVariables();
    libAIAI_InitTriggers();
}

include "LibCore"
include "LibGame"
include "LibMapM"
include "LibUIUI"

