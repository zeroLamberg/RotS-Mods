include "LibCore_h"
include "LibGame_h"

//--------------------------------------------------------------------------------------------------
// Library: UI
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libUIUI_ge_HotkeyHotkeyType_HotkeyMissing = 0;
const int libUIUI_ge_HotkeyHotkeyType_HotkeyNormal = 1;
const int libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade = 2;
const int libUIUI_ge_HotkeyHotkeyType_HotkeyQuest = 3;
const int libUIUI_ge_UIHeroResourceType_NoShields = 0;
const int libUIUI_ge_UIHeroResourceType_Blue = 1;
const int libUIUI_ge_UIHeroResourceType_Blinking = 2;
const int libUIUI_ge_UIHeroResourceType_Yellow = 3;
const int libUIUI_ge_UIHeroResourceType_Orange = 4;
const int libUIUI_ge_UIHeroResourceType_Pink = 5;
const int libUIUI_ge_UIHeroResourceType_Grey = 6;
const int libUIUI_ge_UIHeroResourceType_Purple = 7;
const int libUIUI_ge_UIHeroResourceType_Breath = 8;
const int libUIUI_ge_UIHeroResourceType_Rage = 9;
const int libUIUI_ge_UIHeroResourceType_None = 10;
const int libUIUI_ge_FullscreenOverlayPriorities_Death = 0;
const int libUIUI_ge_FullscreenOverlayPriorities_VoidPrison = 1;
const int libUIUI_ge_FullscreenOverlayPriorities_Invulnerable = 2;
const int libUIUI_ge_FullscreenOverlayPriorities_Stasis = 3;
const int libUIUI_ge_UIHeroLeaderboardSortType_Default = 0;
const int libUIUI_ge_UIHeroLeaderboardSortType_Kills = 1;
const int libUIUI_ge_UIHeroLeaderboardSortType_Assists = 2;
const int libUIUI_ge_UIHeroLeaderboardSortType_Deaths = 3;
const int libUIUI_ge_UIHeroLeaderboardSortType_SiegeDamage = 4;
const int libUIUI_ge_UIHeroLeaderboardSortType_HeroDamage = 5;
const int libUIUI_ge_UIHeroLeaderboardSortType_Healing = 6;
const int libUIUI_ge_UIHeroLeaderboardSortType_SelfHealing = 7;
const int libUIUI_ge_UIHeroLeaderboardSortType_Experience = 8;
const int libUIUI_ge_UIHeroLeaderboardSortType_SortTypeLatest = 9;
const int libUIUI_ge_HSUIIngameCellState_None = 0;
const int libUIUI_ge_HSUIIngameCellState_Empty = 1;
const int libUIUI_ge_HSUIIngameCellState_Normal = 2;
const int libUIUI_ge_HSUIIngameCellState_SelectedByMe = 3;
const int libUIUI_ge_HSUIIngameCellState_SelectedByAlly = 4;
const int libUIUI_ge_HSUIIngameCellState_LockedByMe = 5;
const int libUIUI_ge_HSUIIngameCellState_LockedByAlly = 6;
const int libUIUI_ge_HSUIIngameCellState_Thinking = 7;
const int libUIUI_ge_HSUIPanelType_None = 0;
const int libUIUI_ge_HSUIPanelType_SkinPanel = 1;
const int libUIUI_ge_HSUIPanelType_MountPanel = 2;
const int libUIUI_ge_HSUIPanelType_AnnouncerPanel = 3;
const int libUIUI_ge_KillLogItemType_Kill = 0;
const int libUIUI_ge_KillLogItemType_Quest = 1;
const int libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons = 0;
const int libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon = 1;
const int libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer = 0;
const int libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls = 1;
const int libUIUI_ge_MapMechanicsHauntedMinesModes_Golem = 2;
const int libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer = 0;
const int libUIUI_ge_MapMechanicsDragonShireModes_Shrines = 1;
const int libUIUI_ge_MapMechanicsDragonShireModes_Dragon = 2;
const int libUIUI_ge_MapMechanicsGardenOfTerrorModes_Day = 0;
const int libUIUI_ge_MapMechanicsGardenOfTerrorModes_Night = 1;
const int libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null = 0;
const int libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing = 1;
const int libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon = 2;
const int libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon = 3;
const int libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active = 4;
const int libUIUI_ge_MapMechanicsCursedHollowModes_NoActivity = 0;
const int libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawning = 1;
const int libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawned = 2;
const int libUIUI_ge_MapMechanicsCursedHollowModes_Curse = 3;
const int libUIUI_ge_UIPartyFrameHeroType_NormalHero = 0;
const int libUIUI_ge_UIPartyFrameHeroType_PetHero = 1;
const int libUIUI_ge_UIPartyFrameHeroType_LostVikings = 2;

// Constants
const fixed libUIUI_gv_dataXPPercentageUpdatePeriod_C2 = 3.0;
const fixed libUIUI_gv_dataXPPercentageUpdatePeriod_C3 = 5.0;
const fixed libUIUI_gv_uITimerUpdateDelay = 0.2;
const int libUIUI_gv_uIMaxHeroGroupStatusFrames = 10;
const int libUIUI_gv_defaultButtonSize_C = 120;
const int libUIUI_gv_defaultRenderPriority_C = 512;
const int libUIUI_gv_uIMaxBoostFrames = 3;
const int libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C = 96;
const int libUIUI_gv_deathRecap_MPercentLifeReference_C = 30;
const int libUIUI_gv_deathRecap_TotalEffectBarHeight_C = 250;
const int libUIUI_gv_deathRecap_TotalLineGraphPointHeight_C = 365;
const fixed libUIUI_gv_floatingCombatTextNormalDuration = 0.5;
const fixed libUIUI_gv_floatingCombatTextMediumDuration = 0.75;
const fixed libUIUI_gv_floatingCombatTextHighDuration = 1.0;
const fixed libUIUI_gv_floatingCombatTextInsaneDuration = 1.25;
const fixed libUIUI_gv_floatingCombatTextDurationXP = 1.5;
const fixed libUIUI_gv_floatingCombatTextStandardDuration = 0.75;
const fixed libUIUI_gv_floatingCombatTextFadeDuration = 0.25;
const fixed libUIUI_gv_floatingCombatTextFadeDuration2 = 2.0;
const fixed libUIUI_gv_floatingCombatTextFadeDuration4 = 1.5;
const fixed libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimerDuration_C = 1.0;
const fixed libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimerDuration_C = 2.0;
const int libUIUI_gv_fullscreenOverlayMaxQueueSize_C = 10;
const int libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C = 3;
const int libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C = 20;
const int libUIUI_gv_uIGameInfoHeroOverviewGraphDataSetMax_C = 10;
const int libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C = 20;
const int libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C = 31;
const fixed libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C = 2.0;
const int libUIUI_gv_helpButtonMaxCount_C = 10;
const string libUIUI_gv_helpButtonDataTableKey_C = "HelpButtonClickedPlayer";
const int libUIUI_gv_uIHeroLeaderboardMaxSortButtons = 8;
const int libUIUI_gv_hSUIIngameHeroButtons = 40;
const int libUIUI_gv_hSUIIngameHeroButtonsNonCollapsed = 32;
const int libUIUI_gv_hSUILoadoutMaxSkinItemCount_C = 12;
const int libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C = 2;
const int libUIUI_gv_hSUILoadoutMaxMountItemCount_C = 18;
const int libUIUI_gv_hSUILoadoutMaxMountItemCount_Collapsed_C = 12;
const int libUIUI_gv_hSUILoadoutMaxMountLaneCount_C = 3;
const int libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C = 18;
const int libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_Collapsed_C = 12;
const int libUIUI_gv_hSUILoadoutMaxAnnouncerLaneCount_C = 3;
const int libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C = libCore_gv_data_MaxHeroAllowedMountCategories_C;
const int libUIUI_gv_hSUILoadoutMaxListItemCount_C = libGame_gv_loadoutMaximumLoadoutsPerHero;
const int libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C = 3;
const int libUIUI_gv_uI_MaxHeroGroupStatusFrames = 10;
const int libUIUI_gv_uIUnitStatusFramesClassIconDefaultPoints = 3;
const int libUIUI_gv_killLogTopOffset_D0A1 = 80;
const int libUIUI_gv_killLogMaxVisibleItemCountD0A1 = 5;
const int libUIUI_gv_killLogMaxItemCountD0A1 = 6;
const int libUIUI_gv_killLogMaxComboPortraitsD0A1 = 11;
const int libUIUI_gv_killLogMaxComboIconsD0A1 = 4;
const fixed libUIUI_gv_killLogTimeoutD0A1 = libGame_gv_heroDeathMultikillTimeoutDuration;
const int libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C = 12;
const fixed libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimerDuration_C = 8.0;
const fixed libUIUI_gv_partyFrameTimersUpdateDelay_C = 0.2;
const int libUIUI_gv_uIPartyFrameHeroSlot_C = 1;
const int libUIUI_gv_uIPartyFrameHeroPetSlot_C = 2;
const int libUIUI_gv_uIPartyFrameHeroSlotA_C = 1;
const int libUIUI_gv_uIPartyFrameHeroSlotB_C = 2;
const int libUIUI_gv_uIPartyFrameHeroSlotC_C = 3;
const int libUIUI_gv_teamXPPartyFrameTeamPingCap_C = 2;
const int libUIUI_gv_uIPingMaxCount_C = 5;
const fixed libUIUI_gv_uIPingInputSuppressionTime_C = 0.25;
const fixed libUIUI_gv_uIPingCountResetTime_C = 3.0;
const fixed libUIUI_gv_uIPingLockoutTime_C = 4.0;
const fixed libUIUI_gv_uIOnMyWayPingPathDisplayDuration = 6.0;
const int libUIUI_gv_uIPingTargetMaxCount_C = 64;
const fixed libUIUI_gv_preloadPanelDisplayDuration = 5.0;

// Structures
struct libUIUI_gs_UIBoostsBoostFX {
    int lv_boostPanel;
    int[libCore_gv_bALMaxEnginePlayerCount + 1] lv_frameCount;
    int[libCore_gv_bALMaxEnginePlayerCount + 1][libUIUI_gv_uIMaxHeroGroupStatusFrames + 1] lv_boostFXAnchor;
    int[libCore_gv_bALMaxEnginePlayerCount + 1][libUIUI_gv_uIMaxHeroGroupStatusFrames + 1] lv_boostFXAnchorFrame;
    int[libCore_gv_bALMaxEnginePlayerCount + 1][libUIUI_gv_uIMaxHeroGroupStatusFrames + 1] lv_boostFXPanel;
};

struct libUIUI_gs_UIDamageFlashUI {
    int lv_mainDialog;
    int lv_lightSplashImage;
    int lv_intenseSplashImage;
    int lv_lowHealthPersistentImage;
};

struct libUIUI_gs_DeathRecapPanel {
    int lv_mainPanel;
    int lv_tabScreenButton;
    int lv_openDeathRecapButton;
    int lv_mainGraphLabel;
    int lv_highestDamagersPanel;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagersImages;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagersAmountLabels;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagersHeroNameLabels;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagersPlayerNameLabels;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagersProgressBars;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilityBars;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilityBarTooltips;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilityBarProgressBars;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilityLabels;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilAmountLabels;
    int[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1][libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_highestDamagersAbilityFrame;
    int lv_abilitiesPanel;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelTimeZone;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHeroImages;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHealthBars;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHealingBars;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelDamageBars;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHealthBarIcons;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHealthBarIconBorders;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelHealthBarTimeLabels;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelEventCountLabels;
    int[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_abilitiesPanelTooltipFrame;
    int lv_abilitiesPanelStartingHealthLabel;
};

struct libUIUI_gs_FullscreenOverlaysPanel {
    int lv_mainDialog;
    int lv_cCSplashImage;
    int lv_flashBangImage;
    int lv_abathurSymbioteOverlay;
    int lv_deathOverlay;
    int lv_specialOverlay;
};

struct libUIUI_gs_FullscreenOverlayPanelRework {
    int lv_mainDialog;
    int lv_overlayCutscene;
};

struct libUIUI_gs_FullscreenOverlayQueue {
    string[libUIUI_gv_fullscreenOverlayMaxQueueSize_C + 1] lv_cutscene;
    int lv_numberOfItemsInQueue;
    int[libUIUI_gv_fullscreenOverlayMaxQueueSize_C + 1] lv_priority;
    string[libUIUI_gv_fullscreenOverlayMaxQueueSize_C + 1] lv_behavior;
};

struct libUIUI_gs_UIGameInfoPlayer {
    fixed[libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C + 1][libUIUI_gv_uIGameInfoHeroOverviewGraphDataSetMax_C + 1] lv_heroOverviewHoverableTickValue;
    int lv_heroOverviewTimeValueMin;
    int lv_heroOverviewTimeValueMax;
};

struct libUIUI_gs_UIGameInfo {
    int lv_mainPanel;
    int lv_heroOverviewPanel;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroOverviewPlayerListButtonPlayer;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroOverviewPlayerListButtonPlayerHeroImage;
    int lv_heroOverviewPlayerListButtonIndividual;
    int lv_heroOverviewPlayerListButtonCompareCombined;
    int lv_heroOverviewPlayerListButtonCompareCombinedTeam;
    int[libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C + 1][libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C + 1] lv_heroOverviewFilterPanelCheckbox;
    int[libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C + 1][libUIUI_gv_uIGameInfoHeroOverviewFilterPanelButtonMax_C + 1] lv_heroOverviewFilterPanelCheckboxLabel;
    int[libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C + 1] lv_heroOverviewFilterPanelCompareButton;
    int[libUIUI_gv_uIGameInfoHeroOverviewFIlterPanelMax_C + 1] lv_heroOverviewFilterPanelCombineButton;
    int lv_heroOverviewGraphPanel;
    int[libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C + 1] lv_heroOverviewGraphPanelHoverableTick;
    int[libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C + 1][libUIUI_gv_uIGameInfoHeroOverviewGraphDataSetMax_C + 1] lv_heroOverviewGraphPanelHoverableTickLabel;
    int[libUIUI_gv_uIGameInfoHeroOverviewGraphHoverableTicksMax_C + 1] lv_heroOverviewGraphPanelHoverableTickLabelTotal;
    int lv_heroOverviewTimePanel;
    int lv_heroOverviewTimePanelSliderMin;
    int lv_heroOverviewTimePanelSliderMax;
};

struct libUIUI_gs_GameOverSplash {
    int lv_mainPanel;
    int lv_victoryFrame;
    int lv_defeatFrame;
    int lv_defeatLabel;
};

struct libUIUI_gs_GameStats {
    int lv_mainPanel;
    int lv_countdownProgressBar;
    int lv_countdownTextLabel;
    int lv_exitButton;
};

struct libUIUI_gs_UIGameUIHandles {
    int lv_gameUI;
    int lv_fullscreenUpperContainer;
    int lv_fullscreenLowerContainer;
    int lv_consoleUIContainer;
    int lv_consolePanel;
    int lv_mapMechanicButton;
    int lv_helpButton;
    int lv_gameUIContainer;
    int lv_minimapPanel;
    int lv_gameInfoLabel;
    int lv_serverLabel;
    int lv_gameVersionLabel;
    int lv_matchIDLabel;
    int lv_heroSpecificStatusContainer;
    int[libCore_gv_bALMaxEnginePlayerCount + 1] lv_playerHeroUnit;
    int lv_playerIDLabel;
};

struct libUIUI_gs_HealingFountainHelperTags {
    int lv_textTag;
    int lv_cooldown;
    unit lv_healingFountain;
};

struct libUIUI_gs_UIHeroConsole {
    int lv_mainPanel;
    int lv_heroStatsFrame;
    int lv_heroStatsUnitStatusFrame;
    int lv_heroStatsFuryStatFrame;
    int lv_heroStatsBrewStatFrame;
    int lv_heroStatsEnergyStatFrame;
    int lv_heroStatsBreathStatFrame;
    int lv_heroStatsRageStatFrame;
    int lv_heroStatsNoEnergyStatFrame;
    int lv_heroStatsNoEnergyNoShieldStatFrame;
    int lv_heroStatsBlinkingEnergyStatFrame;
    int lv_heroStatsHealthBar;
    int lv_heroStatsManaBar;
    int lv_gameUICommandPanel;
    int lv_gameUICommandCardPanelFrame;
    int lv_gameUIInventoryPanel;
    int lv_buffDebuffPanel;
    int lv_buffBar;
    int lv_debuffBar;
    int lv_neutralBar;
};

struct libUIUI_gs_HeroConsoleUnitStatusBars {
    int lv_stunDeathBarParentFrame;
    int lv_stunDeathBarLeftBar;
    int lv_stunDeathBarRightBar;
    int lv_stunDeathBarIcon;
    int lv_stunDeathBarDescriptionLabel;
    int lv_stunDeathBarTimeLabel;
    int lv_castChannelBarParentFrame;
    int lv_behaviorChannelBarParentFrame;
    int lv_behaviorChannelBarParentFrame_Right;
    int lv_behaviorChannelBarDurationBar;
    int lv_behaviorChannelBarDurationBar_Right;
    int lv_behaviorChannelBarBehaviorLabel;
    int lv_behaviorChannelBarBehaviorLabel_Right;
};

struct libUIUI_gs_HeroConsoleUnits {
    unit lv_monitorUnit_StunDeath;
    unit lv_monitorUnit_Behavior;
    unit lv_monitorUnit_Channel;
    string lv_stunDeathBarCurrentBehavior;
    string lv_behaviorChannelBarCurrentBehavior;
    string lv_behaviorChannelBarCurrentBehavior_Right;
};

struct libUIUI_gs_UIHeroLeaderboard {
    int lv_mainDialog;
    int[libCore_gv_bALMaxPlayers + 1] lv_unitStatusFrame;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentFrame;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentIcon;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentQuestProgressBar;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerCooldownLabel;
    string[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerCooldownAbilityLink;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentTooltip;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentTooltipNameLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentTooltipInfoLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentTooltipDescriptionLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerTalentTooltipQuestProgressionLabel;
    int[libUIUI_gv_uIHeroLeaderboardMaxSortButtons + 1] lv_sortButtons;
};

struct libUIUI_gs_HSUIPlayer {
    bool lv_pairedHeroForm;
    bool lv_lockedIn;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_filledHeroArray;
    int lv_filledHeroCount;
    bool lv_filterRoleTank;
    bool lv_filterRoleBruiser;
    bool lv_filterRoleRangedAssasin;
    bool lv_filterRoleMeleeAssasin;
    bool lv_filterRoleHealer;
    bool lv_filterRoleSupport;
    bool lv_filterUniverseWarCraft;
    bool lv_filterUniverseStarCraft;
    bool lv_filterUniverseDiablo;
    bool lv_filterUniverseOverwatch;
    bool lv_filterUniverseNexus;
    int lv_selectedHero;
    int lv_talentTierPressedButton;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitySelectorToggledBasic;
    int lv_abilitySelectorToggledActive;
    int lv_abilitySelectorToggledPassive;
};

struct libUIUI_gs_HeroSelectionIngame {
    int lv_dialog;
    int lv_mainPanel;
    int lv_mapNameLabel;
    int lv_selectedHeroPanel;
    int lv_selectedHeroName;
    int lv_selectedHeroRole;
    int lv_countdownLabel;
    int lv_finalCountdownFrame;
    int[libUIUI_gv_hSUIIngameHeroButtons + 1] lv_heroButton;
    int[libUIUI_gv_hSUIIngameHeroButtons + 1] lv_heroButtonImage;
    int[libCore_gv_bALMaxTeams + 1] lv_teamPanel;
    int[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_teamHeroFrame;
    int[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_teamHeroImage;
    int[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_teamPlayerName;
    int[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_teamHeroName;
};

struct libUIUI_gs_HeroSelection {
    int lv_changeHeroPanel;
    int lv_filterRoleTankButton;
    int lv_filterRoleBruiserButton;
    int lv_filterRoleRangedAssasinButton;
    int lv_filterRoleMeleeAssasinButton;
    int lv_filterRoleHealerButton;
    int lv_filterRoleSupportButton;
    int lv_filterUniverseWarCraftButton;
    int lv_filterUniverseStarCraftButton;
    int lv_filterUniverseDiabloButton;
    int lv_filterUniverseOverwatchButton;
    int lv_filterUniverseNexusButton;
    int lv_filterEditBox;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_filterEditBoxValue;
    int[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1] lv_buildButtons;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroContainerFrame;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroCutsceneFrame;
    int lv_abilitiesButton;
    int lv_talentsButton;
    int lv_brawlButton;
    int lv_lockButton;
    int lv_abilitiesPanel;
    int lv_abilitiesPanelHeroContainerFrame;
    int lv_abilitiesPanelUniverseIconImage;
    int lv_abilitiesPanelNameLabel;
    int lv_abilitiesPanelInfoLabel;
    int lv_abilitiesPanelAbilitiesTileList;
    int lv_abilitiesPanelPairedHeroTileList;
    int lv_abilitiesPanelPairedHeroTileListName;
    int[libCore_gv_dataHeroesNumberOfPairedHeroesPerHero + 1] lv_abilitiesPanelPairedHeroTileListItem;
    int[libCore_gv_dataHeroesNumberOfPairedHeroesPerHero + 1] lv_abilitiesPanelPairedHeroTileListItemHeroImage;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItem;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemIconImage;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemNameLabel;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemHotkeyFrame;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemHotkeyLabel;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemSelector;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1][libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility + 1] lv_abilitiesPanelBasicAbilItemSelectorButton;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemTooltipFrame;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemTooltipNameLabel;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemTooltipInfoLabel;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero + 1] lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel;
    int lv_abilitiesPanelTraitAbilItem;
    int lv_abilitiesPanelTraitAbilItemIconImage;
    int lv_abilitiesPanelTraitAbilItemNameLabel;
    int lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel;
    int lv_abilitiesPanelTraitAbilItemHotkeyFrame;
    int lv_abilitiesPanelTraitAbilItemHotkeyLabel;
    int lv_abilitiesPanelTraitAbilItemTooltipFrame;
    int lv_abilitiesPanelTraitAbilItemTooltipNameLabel;
    int lv_abilitiesPanelTraitAbilItemTooltipInfoLabel;
    int lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItem;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemIconImage;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemNameLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemHotkeyFrame;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemHotkeyLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemTooltipFrame;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemTooltipNameLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel;
    int[libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero + 1] lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel;
    int lv_abilitiesPanelActiveAbilItem;
    int lv_abilitiesPanelActiveAbilItemIconImage;
    int lv_abilitiesPanelActiveAbilItemNameLabel;
    int lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel;
    int lv_abilitiesPanelActiveAbilItemHotkeyFrame;
    int lv_abilitiesPanelActiveAbilItemHotkeyLabel;
    int lv_abilitiesPanelActiveAbilItemSelector;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility + 1] lv_abilitiesPanelActiveAbilItemSelectorButton;
    int lv_abilitiesPanelActiveAbilItemTooltipFrame;
    int lv_abilitiesPanelActiveAbilItemTooltipNameLabel;
    int lv_abilitiesPanelActiveAbilItemTooltipInfoLabel;
    int lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel;
    int lv_abilitiesPanelPassiveAbilItem;
    int lv_abilitiesPanelPassiveAbilItemIconImage;
    int lv_abilitiesPanelPassiveAbilItemNameLabel;
    int lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel;
    int lv_abilitiesPanelPassiveAbilItemHotkeyFrame;
    int lv_abilitiesPanelPassiveAbilItemHotkeyLabel;
    int lv_abilitiesPanelPassiveAbilItemSelector;
    int[libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility + 1] lv_abilitiesPanelPassiveAbilItemSelectorButton;
    int lv_abilitiesPanelPassiveAbilItemTooltipFrame;
    int lv_abilitiesPanelPassiveAbilItemTooltipNameLabel;
    int lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel;
    int lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel;
    int lv_talentsPanel;
    int lv_talentsPanelHeroContainerFrame;
    int lv_talentsPanelUniverseIconImage;
    int lv_talentsPanelNameLabel;
    int lv_talentsPanelInfoLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsPanelTierButton;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButton;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButtonIconImage;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButtonHotkeyFrame;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButtonHotkeyLabel;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButtonNameLabel;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTalentButtonDescriptionSimpleLabel;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTooltipFrame;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTooltipNameLabel;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTooltipInfoLabel;
    int[libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentsPanelTooltipDescriptionLabel;
};

struct libUIUI_gs_HeroSelectionSetting {
    timer lv_countdownTimer;
    bool lv_countdownEndWarning;
    bool lv_finalCountdownStarted;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_heroBanned;
};

struct libUIUI_gs_HSUILoadout {
    int lv_mainPanel;
    int lv_loadoutButton;
    int lv_closeButton;
    int lv_previewPanel;
    int lv_previewPanelMountCutscene;
    int lv_purchaseInfoPanel;
    int lv_purchaseInfoPanelName;
    int lv_purchaseInfoPanelDescription;
    int lv_purchaseCurrencySelectPanel;
    int lv_purchaseConfirmPanel;
    int lv_purchaseConfirmPanelConfirmButton;
    int lv_purchaseConfirmPanelCancelButton;
    int lv_loadoutSelectionPanel;
    int lv_loadoutSelectionPanelPulldown;
    int[libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C + 1] lv_loadoutSelectionPanelPulldownListItem;
    int lv_loadoutSelectionPanelNameEditBox;
    int lv_skinsButton;
    int lv_mountButton;
    int lv_bannersButton;
    int lv_spraysButton;
    int lv_announcerPacksButton;
    int lv_voiceLinesButton;
    int lv_skinsPanel;
    int[libUIUI_gv_hSUILoadoutMaxSkinItemCount_C + 1] lv_skinsPanelItemButton;
    int[libUIUI_gv_hSUILoadoutMaxSkinItemCount_C + 1] lv_skinsPanelItemButtonCutscene;
    int lv_skinsPanelScrollBar;
    int lv_skinsPanelScrollEditBox;
    int lv_skinsPanelSearchEditBox;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_skinsPanelSearchEditBoxValue;
    int lv_skinsPanelSelectedContentLabel;
    int lv_skinsPanelOwnershipFilterPulldown;
    int[libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C + 1] lv_skinsPanelOwnershipFilterPulldownListItem;
    int lv_mountsPanel;
    int[libUIUI_gv_hSUILoadoutMaxMountItemCount_C + 1] lv_mountsPanelItemButton;
    int lv_mountsPanelScrollBar;
    int lv_mountsPanelScrollEditBox;
    int lv_mountsPanelSearchEditBox;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_mountsPanelSearchEditBoxValue;
    int lv_mountsPanelSelectedContentLabel;
    int lv_mountsPanelOwnershipFilterPulldown;
    int[libUIUI_gv_hSUILoadoutMaxPulldownListItemCount_C + 1] lv_mountsPanelOwnershipFilterPulldownListItem;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_mountsPanelCategoryButton;
    int lv_mountsPanelReplacementContainerItem;
    int lv_mountsPanelReplacementContainerItemIcon;
    int lv_mountsPanelReplacementContainerItemNameLabel;
    int lv_mountsPanelReplacementContainerItemDescriptionLabel;
    int lv_mountsPanelReplacementContainerItemHotkeyLabel;
    int lv_mountsPanelReplacementContainerItemTooltip;
    int lv_mountsPanelReplacementContainerItemTooltipNameLabel;
    int lv_mountsPanelReplacementContainerItemTooltipInfoLabel;
    int lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel;
    int lv_announcersPanel;
    int[libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C + 1] lv_announcersPanelItemButton;
    int[libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C + 1] lv_announcersPanelItemPreviewButton;
    int lv_announcersPanelScrollBar;
    int lv_announcersPanelScrollEditBox;
    int lv_announcersPanelSearchEditBox;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_announcersPanelSearchEditBoxValue;
    int lv_announcersPanelSelectedContentLabel;
    int lv_announcersPanelOwnershipFilterPulldown;
    int[libUIUI_gv_hSUILoadoutMaxListItemCount_C + 1] lv_announcersPanelOwnershipFilterPulldownListItem;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_announcersPanelCategoryButton;
};

struct libUIUI_gs_HSUILoadoutPlayer {
    int lv_selectedPanel;
    int lv_tempSelectedLoadoutIndex;
    int lv_tempSelectedSkinIndex;
    int lv_tempSelectedMountIndex;
    int lv_tempSelectedMountCollectionCategoryIndex;
    int lv_tempSelectedAnnouncerIndex;
    int lv_tempSelectedAnnouncerCollectionCategoryIndex;
    int[libCore_gv_dataHeroesMaxAllowedSkinCount_C + 1] lv_tempSkinArray;
    int lv_tempSkinCount;
    int[libCore_gv_dataMountsMaxMountCount + 1] lv_tempMountArray;
    int lv_tempMountCount;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_tempMountCategoryArray;
    int[libCore_gv_dataAnnouncerVOMaxAnnouncerPackCount + 1] lv_tempAnnouncerArray;
    int lv_tempAnnouncerCount;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_tempAnnouncerCategoryArray;
    int[libUIUI_gv_hSUILoadoutMaxSkinItemCount_C + 1] lv_filledSkinSkinItemIndex;
    int[libUIUI_gv_hSUILoadoutMaxMountItemCount_C + 1] lv_filledMountMountItemIndex;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_filledMountMountCategoryIndex;
    int[libUIUI_gv_hSUILoadoutMaxAnnouncerItemCount_C + 1] lv_filledAnnouncerAnnouncerItemIndex;
    int[libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C + 1] lv_filledAnnouncerAnnouncerCategoryIndex;
    int lv_filledSkinTotalCount;
    int lv_filledMountTotalCount;
    int lv_filledAnnouncerTotalCount;
    int lv_laneControllerSkinCurrentLane;
    int lv_laneControllerMountCurrentLane;
    int lv_laneControllerAnnouncerCurrentLane;
    int lv_laneControllerSkinMaxLaneCount;
    int lv_laneControllerMountMaxLaneCount;
    int lv_laneControllerAnnouncerMaxLaneCount;
    fixed lv_lastScrollTime;
};

struct libUIUI_gs_UIHeroStatusFrame {
    int lv_playerNameLabel;
    int lv_heroNameLabel;
    int lv_botDifficultyLabel;
    int lv_botStatusLabel;
    int lv_mapMechanicFrame;
    int lv_mapMechanicIcon;
    int lv_mapMechanicCount;
};

struct libUIUI_gs_UIHeroTrackerArrows {
    int lv_unitCount;
    unit[libUIUI_gv_uI_MaxHeroGroupStatusFrames + 1] lv_unit;
    int lv_mainPanel;
    int[libUIUI_gv_uI_MaxHeroGroupStatusFrames + 1] lv_offscreenUnit;
    int[libUIUI_gv_uI_MaxHeroGroupStatusFrames + 1] lv_arrow;
    int[libUIUI_gv_uI_MaxHeroGroupStatusFrames + 1] lv_portraitImage;
};

struct libUIUI_gs_KillLogItem {
    unit lv_unit;
    int lv_player;
    timer lv_timer;
    int lv_frame;
    int lv_combo;
    int lv_type;
};

struct libUIUI_gs_KillLogQuestArray {
    string[libUIUI_gv_killLogMaxComboIconsD0A1 + 1] lv_quests;
};

struct libUIUI_gs_KillLogDebugPanel {
    int lv_mainPanel;
    int lv_closeButton;
    int[libCore_gv_bALMaxEnginePlayerCount + 1] lv_killButtons;
    int[libCore_gv_bALMaxEnginePlayerCount + 1] lv_questButtons;
    int lv_killCheckbox;
    int lv_questCheckbox;
};

struct libUIUI_gs_MapMechanicsPanel {
    int lv_mainPanel;
    int lv_cursedHollowPanel;
    int lv_cursedHollowTributeSpawnFrame;
    int lv_cursedHollowTributeSpawnInfoLabel;
    int lv_cursedHollowTributeSpawnTimerLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_cursedHollowTeamTributeFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_cursedHollowTeamTributeCounterLabel;
    int lv_cursedHollowCurseFrame;
    int lv_cursedHollowCurseInfoLabel;
    int lv_cursedHollowCurseTimerLabel;
    int lv_winterveilPanel;
    int lv_blackheartsBayPanel;
    int lv_blackheartsBayChestSpawnFrame;
    int lv_blackheartsBayDoubloonModeFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_blackheartsBayDoubloonCounterLabel;
    int lv_blackheartsBayCannonModeFrame;
    int lv_blackheartsBayCannonRemainingCannonballsLabel;
    int[libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C + 1] lv_blackheartsBayCannonCannonballImages;
    int[libCore_gv_bALMaxTeams + 1] lv_blackheartsBayCannonShotCounterLabel;
    int lv_hauntedMinesPanel;
    int lv_hauntedMinesSkullModeFrame;
    int lv_hauntedMinesSkullModeRemainingSkullsLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_hauntedMinesSkullModeSkullCounterLabel;
    int lv_hauntedMinesMineTimerModeFrame;
    int lv_hauntedMinesMineTimerLabel;
    int lv_hauntedMinesGolemModeFrame;
    int lv_hauntedMinesAllyGolemHealthUnitStatus;
    int lv_hauntedMinesEnemyGolemHealthUnitStatus;
    int lv_hauntedMinesAllyGolemModeSkullCounterLabel;
    int lv_hauntedMinesEnemyGolemModeSkullCounterLabel;
    int lv_dragonShirePanel;
    int lv_dragonShireShrineTimerModeFrame;
    int lv_dragonShireShrineTimerLabel;
    int lv_dragonShireShrineModeFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_dragonShireMoonShrineDisabledImage;
    int[libCore_gv_bALMaxTeams + 1] lv_dragonShireMoonShrineEnabledImage;
    int[libCore_gv_bALMaxTeams + 1] lv_dragonShireStarShrineDisabledImage;
    int[libCore_gv_bALMaxTeams + 1] lv_dragonShireStarShrineEnabledImage;
    int lv_dragonShireDragonModeFrame;
    int lv_dragonShireDragonInfoLabel;
    int lv_dragonShireDragonTimerLabel;
    int lv_dragonShireDragonHealthUnitStatus;
    int lv_dragonShireDragonHealthLabel;
    int lv_gardenOfTerrorPanel;
    int lv_gardenOfTerrorSeedsFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameSeedCounterLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameStatusLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameCountdownLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameCountdownLabelGold;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameCountdownLabelRed;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameBlueSeedImage;
    int[libCore_gv_bALMaxTeams + 1] lv_gardenOfTerrorSeedsFrameRedSeedImage;
    int lv_gardenOfTerrorTimeOfDayFrame;
    int lv_gardenOfTerrorTimeOfDayCountdownLabel;
    int lv_gardenOfTerrorGolemFrame;
    int lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus;
    int lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus;
    int lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel;
    int lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel;
    int lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel;
    int lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel;
};

struct libUIUI_gs_NotificationDisplay {
    int lv_mainPanel;
    int lv_multikillTimerCountdownImage;
    int lv_multikillTimerTitleLabel;
    int lv_multikillTimerNumberLabel;
    int lv_coreNotificationTitle;
    int lv_coreNotificationSubLabel;
    int lv_enemyNotificationTitle;
    int lv_enemyNotificationSubLabel;
    int lv_tutorialNotificationTitle;
    int lv_tutorialNotificationSubLabel;
    int lv_singleKillNotificationTitle;
    int lv_singleKillNotificationSubLabel;
    int lv_doubleKillNotificationTitle;
    int lv_doubleKillNotificationSubLabel;
    int lv_tripleKillNotificationTitle;
    int lv_tripleKillNotificationSubLabel;
    int lv_quadKillNotificationTitle;
    int lv_quadKillNotificationSubLabel;
    int lv_megaKillNotificationTitle;
    int lv_megaKillNotificationSubLabel;
    int lv_megaKillNotificationTitle2;
    int lv_megaKillNotificationSubLabel2;
    int lv_megaKillNotificationSubLabel3;
};

struct libUIUI_gs_UIPartyFrame {
    int lv_mainPanel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamHeroPanel;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPanels;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroPortraitImages;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroTargetFrames;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsDefault;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsOrange;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsYellow;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsPink;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsNoResource;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsRespawn;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusBarsSeparateShields;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusFrameHeroWithPet;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroStatusBarsHeroWithPet;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroStatusFrameLostVikings;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroStatusBarsLostVikings;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicTalentPanel;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicIcon;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicTalentReadyIcon;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicTalentProgressBar;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicCooldownLabel;
    string[libCore_gv_bALMaxPlayers + 1] lv_heroHeroicAbility;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroExtendedDeathIcon;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroCondensedDeathIcon;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroOnFireCutscene;
    int[libCore_gv_bALMaxPlayers + 1] lv_playerBoostEffect;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButton;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButtonPetOwner;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButtonPet;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButtonA;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButtonB;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroPartyButtonC;
    unit[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroUnits;
    timer[libCore_gv_bALMaxPlayers + 1] lv_heroPetDeathTimer;
    timer[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroVikingsDeathTimers;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroDeathTimeOverlay;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroDeathTimeLabel;
    int[libCore_gv_bALMaxPlayers + 1] lv_heroDeathTimePetLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroDeathTimeVikingsLabels;
    bool[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxAlternateHeroes + 1] lv_heroDeathRespawnReminderSent;
    bool[libCore_gv_bALMaxPlayers + 1] lv_heroDeathInSpecialDeathState;
    int lv_gameTimerLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamLevelInfoPanel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamLevelLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamNextLevelTalentIcon;
    int[libCore_gv_bALMaxTeams + 1] lv_teamNextLevelNoTalentIcon;
    int[libCore_gv_bALMaxTeams + 1] lv_teamXPVeterancyBar;
    int[libCore_gv_bALMaxTeams + 1] lv_teamTalentAdvantageIcon;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamHasHeroes;
    int[libCore_gv_bALMaxTeams + 1] lv_coreHealthUnitStatusFrames;
    int lv_coreHealthLabel;
    int lv_xPContributionClickableButton;
    int[libCore_gv_bALMaxTeams + 1] lv_xPContributionPopup;
    int[libCore_gv_bALMaxTeams + 1] lv_heroXPContributionLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_mercenaryXPContributionLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_minionXPContributionLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_passiveXPContributionLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_structureXPContributionLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_totalXPContributionLabel;
};

struct libUIUI_gs_PingTarget {
    string lv_unitType;
    bool lv_pingIsForOccupiedVehicle;
    text lv_targetNameOverride;
    text lv_textMessageAlliedTarget;
    text lv_textMessageEnemyTarget;
    soundlink lv_pingSoundAlliedTarget;
    soundlink lv_pingSoundEnemyTarget;
    string lv_heroVOLineAlliedTarget;
    string lv_heroVOLineEnemyTarget;
    string lv_heroVOLineHumanPingingPlayer;
    string lv_heroVOLineAIPingingPlayer;
    trigger lv_customPingResponseTrigger;
};

struct libUIUI_gs_PreloadPanel {
    int lv_dialog;
    int lv_mainPanel;
    int lv_backgroundImage;
    int lv_title;
    int lv_headerLabel;
};

struct libUIUI_gs_UITabScreenPanel {
    int lv_mainPanel;
    int lv_container;
    int lv_tabControl;
    int lv_closeButton;
    int lv_statsButton;
    int lv_deathRecapButton;
    int lv_lockInButton;
    int[libCore_gv_bALMaxTeams + 1] lv_teamKillsLabel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamLevelLabel;
};

struct libUIUI_gs_UITalentChoicePanel {
    int lv_heroTalentTreeSelectionIndicatorContainer;
    int lv_heroTalentTreeSelectionToggleButton;
    int lv_talentsPanel;
    int lv_talentsPanelTabControl;
    int[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1] lv_buildButton;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButton;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonIconFrame;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonIconImage;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonQuestProgressBar;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonTooltipNameLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonTooltipInfoLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_tierButtonTooltipDescriptionLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButton;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonIcon;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonName;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonHotkeyFrame;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonHotkeyLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonTooltipNameLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonTooltipInfoLabel;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1][libCore_gv_dataHeroesMaxTalentsPerTier + 1] lv_talentButtonTooltipDescriptionLabel;
};

struct libUIUI_gs_UITalentPanel {
    int lv_mainDialog;
    int[libCore_gv_bALMaxPlayers + 1] lv_unitStatusFrame;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentFrame;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentIcon;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentQuestProgressBar;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentCooldownLabel;
    string[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentsContainerCooldownAbilityLink;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_heroicAbilityLink;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentTooltip;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentTooltipNameLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentTooltipInfoLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentTooltipDescriptionLabel;
    int[libCore_gv_bALMaxPlayers + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentTooltipQuestProgressionLabel;
};

struct libUIUI_gs_UITargetInfoPanel {
    int lv_mainPanel;
    int lv_portraitImageHandler;
    int lv_unitStatusFrame;
    int lv_spellPowerLabel;
    int lv_physicalArmorLabel;
    int lv_spellArmorLabel;
    int lv_weaponDamageLabel;
};

struct libUIUI_gs_UITargetInfoPanelPlayer {
    unit lv_unit;
    bool lv_unitIsVisibleInFoW;
    fixed lv_lastTimeClicked;
    bool lv_suppressSpam;
};

// Variable Declarations
timer libUIUI_gv_uITimeLabelUpdateTimer;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_lastUsedDialogItemTime;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIQuestsUpdateQuestUIOfPlayer;
int libUIUI_gv_playerAnnounceCommandPanel;
int libUIUI_gv_playerAnnounceEditBox;
text libUIUI_gv_playerAnnounceVitalPercent;
text libUIUI_gv_playerAnnounceVitalAmount;
text libUIUI_gv_playerAnnounceVitalNotEnough;
text libUIUI_gv_playerAnnounceCooldown;
text libUIUI_gv_playerAnnounceReady;
text libUIUI_gv_playerAnnounceDisabled;
text libUIUI_gv_playerAnnouceTooMuchSpam;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_playerAnnounceTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_playerAnnounceInputSuppressionTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_playerAnnounceLockoutTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_playerAnnounceCountResetTime;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_playerAnnouncePingCount;
libUIUI_gs_UIBoostsBoostFX libUIUI_gv_uIBoosts;
libUIUI_gs_UIDamageFlashUI libUIUI_gv_uIDamageFlashUI;
fixed libUIUI_gv_uIDamageFlashLowHPThreshold;
bool libUIUI_gv_uIDebugPanelForceMinionWaveComp;
int libUIUI_gv_uIDebugPanelForcedMinionWaveCompIndex;
bool libUIUI_gv_uIDebugPanelShowAllCombatText;
libUIUI_gs_DeathRecapPanel libUIUI_gv_deathRecapPanel;
bool libUIUI_gv_floatingCombatTextSuppressLeashingText;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer;
libUIUI_gs_FullscreenOverlaysPanel libUIUI_gv_fullscreenOverlaysPanel;
libUIUI_gs_FullscreenOverlayPanelRework libUIUI_gv_fullscreenOverlaysPanelRework;
libUIUI_gs_FullscreenOverlayQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_fullscreenOverlayQueue;
libUIUI_gs_UIGameInfoPlayer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIGameInfoPlayer;
libUIUI_gs_UIGameInfo libUIUI_gv_uIGameInfo;
libUIUI_gs_GameOverSplash libUIUI_gv_gameOverSplash;
libUIUI_gs_GameStats libUIUI_gv_gameStats;
libUIUI_gs_UIGameUIHandles libUIUI_gv_uIGameUIHandles;
libUIUI_gs_HealingFountainHelperTags[libCore_gv_bALMaxEnginePlayerCount + 1][libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C + 1] libUIUI_gv_uIHealingFountainsHelpText;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIHealingFountainsHelpTextTextShowing;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIHealingFountainsHelpTextCooldownShowing;
int[libUIUI_gv_helpButtonMaxCount_C + 1] libUIUI_gv_helpButtonFrames;
int[libUIUI_gv_helpButtonMaxCount_C + 1] libUIUI_gv_helpButtonLabels;
trigger[libUIUI_gv_helpButtonMaxCount_C + 1] libUIUI_gv_helpButtonCallbacks;
unit[libUIUI_gv_helpButtonMaxCount_C + 1] libUIUI_gv_helpButtonUnits;
int libUIUI_gv_helpButtonCount;
libUIUI_gs_UIHeroConsole libUIUI_gv_uIHeroConsole;
libUIUI_gs_HeroConsoleUnitStatusBars libUIUI_gv_heroConsoleUnitStatusBars;
libUIUI_gs_HeroConsoleUnits[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_heroConsoleUnits;
libUIUI_gs_UIHeroLeaderboard libUIUI_gv_uIHeroLeaderboard;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIHeroLeaderboardSortingPlayerOldSort;
playergroup libUIUI_gv_uIHeroLeaderboardSortingPlayerGroup;
int libUIUI_gv_uIHeroLeaderboardSortingHighestPlayer;
libUIUI_gs_HSUIPlayer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_heroSelectionPlayer;
libUIUI_gs_HeroSelectionIngame libUIUI_gv_heroSelectionIngame;
libUIUI_gs_HeroSelection libUIUI_gv_heroSelection;
libUIUI_gs_HeroSelectionSetting libUIUI_gv_heroSelectionSetting;
libUIUI_gs_HSUILoadout libUIUI_gv_hSUILoadout;
sound[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_hSUILoadoutAnnouncerPreviewSound;
libUIUI_gs_HSUILoadoutPlayer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_hSUILoadoutPlayer;
libUIUI_gs_UIHeroStatusFrame[libCore_gv_bALMaxPlayers + 1] libUIUI_gv_uIHeroStatusFrames;
libUIUI_gs_UIHeroTrackerArrows libUIUI_gv_uIHeroTrackerArrows;
int libUIUI_gv_killLogPanel;
libUIUI_gs_KillLogItem[libUIUI_gv_killLogMaxItemCountD0A1 + 1] libUIUI_gv_killLogItems;
libUIUI_gs_KillLogQuestArray[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_killLogQuestResetCache;
libUIUI_gs_KillLogDebugPanel libUIUI_gv_killLogDebugPanel;
libUIUI_gs_MapMechanicsPanel libUIUI_gv_mapMechanicsPanel;
timer libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer;
int libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode;
int[libCore_gv_bALMaxTeams + 1] libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus;
bool[libCore_gv_bALMaxTeams + 1] libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible;
int[libCore_gv_bALMaxTeams + 1] libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel;
libUIUI_gs_NotificationDisplay libUIUI_gv_notificationDisplay;
timer libUIUI_gv_partyFrameDeathUpdateTimer;
int[libCore_gv_bALMaxTeams + 1] libUIUI_gv_teamXPPartyFrameTeamTalentTier;
int[libCore_gv_bALMaxTeams + 1] libUIUI_gv_uIPartyFrameMaxLevelForTeam;
int[libCore_gv_bALMaxTeams + 1] libUIUI_gv_teamXPPartySpamCounter;
timer[libCore_gv_bALMaxTeams + 1] libUIUI_gv_teamXPPartySpamLockoutTimer;
timer[libCore_gv_bALMaxTeams + 1] libUIUI_gv_teamXPPartyFrameDecrementPingCountTimer;
libUIUI_gs_UIPartyFrame libUIUI_gv_uIPartyFrame;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_pingInputSuppressionTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_pingLockoutTimer;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_pingCountResetTime;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_pingCount;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_pingPlayerHearthstonePing;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_hearthPingTextLockoutTimer;
text libUIUI_gv_pingLockoutTimerNotification;
int libUIUI_gv_pingPingCallbackPingingPlayer;
unit libUIUI_gv_pingPingCallbackTargetUnit;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uIOnMyWayPingPathDisplayTimer;
libUIUI_gs_PingTarget[libUIUI_gv_uIPingTargetMaxCount_C + 1] libUIUI_gv_pingPingTarget;
int libUIUI_gv_pingTargetCount;
bool libUIUI_gv_preloadPanelInitialized;
timer libUIUI_gv_preloadPanelTimer;
libUIUI_gs_PreloadPanel libUIUI_gv_preloadPanel;
libUIUI_gs_UITabScreenPanel libUIUI_gv_uITabScreenPanel;
libUIUI_gs_UITalentChoicePanel libUIUI_gv_uITalentChoicePanel;
libUIUI_gs_UITalentPanel libUIUI_gv_uITalentPanel;
libUIUI_gs_UITargetInfoPanel libUIUI_gv_uITargetInfoPanel;
libUIUI_gs_UITargetInfoPanelPlayer[libCore_gv_bALMaxEnginePlayerCount + 1] libUIUI_gv_uITargetInfoPanelPlayer;

// Function Declarations
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer (int lp_hotkeyDialogItem, int lp_hotkeyType, int lp_player);
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup (int lp_hotkeyDialogItem, int lp_hotkeyType, playergroup lp_playerGroup);
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer (int lp_hotkeyType, int lp_hotkeyDialogItem, int lp_player);
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayerGroup (int lp_hotkeyType, int lp_hotkeyDialogItem, playergroup lp_playerGroup);
void libUIUI_gf_UIUpdateTimeLabels ();
void libUIUI_gf_UISetDialogItemToSelectedOrObserved (int lp_dialogItem);
void libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer (int lp_player);
bool libUIUI_gf_CanUseDialogItemTime (int lp_player);
void libUIUI_gf_InitPathingLines (unit lp_unit, int lp_player);
void libUIUI_gf_UIQuestsUpdateQuestUIOfPlayer (int lp_player);
void libUIUI_gf_UIQuestsUpdateQuestUIOfPlayerForSingleBehavior (string lp_behavior, int lp_player);
int libUIUI_gf_UIGetHeroResourceType (string lp_heroUnitType);
int libUIUI_gf_UIGetHeroResourceTypeForPartyFrame (string lp_heroUnitType);
void libUIUI_gf_PlayerAnnounceEnableDisableForPlayer (bool lp_enableDisable, int lp_player);
void libUIUI_gf_PlayerAnnounceHealth (int lp_pingingPlayer, string lp_output);
void libUIUI_gf_PlayerAnnounceXPContribution (int lp_pingingPlayer);
void libUIUI_gf_PlayerAnnounceEnergy (int lp_pingingPlayer, string lp_output);
void libUIUI_gf_PlayerAnnounceCommandPanel (int lp_pingingPlayer, string lp_output);
void libUIUI_gf_PlayerAnnounceInventoryPanel (int lp_pingingPlayer, string lp_output);
void libUIUI_gf_PlayerAnnounceButtonAnnounce (int lp_player, string lp_ability, text lp_abilityName, abilcmd lp_abilCmd, unit lp_unit, string lp_unitType, text lp_hotkey);
void libUIUI_gf_PlayerAnnouncePartyPanel (int lp_pingingPlayer, string lp_output);
bool libUIUI_gf_PlayerAnnounceAllowedToAnnouce (int lp_player);
void libUIUI_gf_PlayerAnnounceIncrementPingCountAndManageTimersForPlayer (int lp_player);
void libUIUI_gf_UIBoostsInitializeBoostFX (int lp_player, unit lp_heroUnit);
void libUIUI_gf_UIBoostsInitializeBoostFXForPlayers (int lp_player);
void libUIUI_gf_UIBoostsShowBoostFXFrames ();
void libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects (int lp_player);
void libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects (int lp_player);
void libUIUI_gf_UILowHPSetSoundChannelsForLowHealth (int lp_player);
void libUIUI_gf_UILowHPSetSoundChannelsForSilence (int lp_player);
void libUIUI_gf_UILowHPSetSoundChannelsForNormal (int lp_player);
void libUIUI_gf_DeathRecapShowHideForPlayer (bool lp_showHide, int lp_player);
void libUIUI_gf_DeathRecapShowHideToastButtonForPlayer (bool lp_showHide, int lp_player);
text libUIUI_gf_DeathRecapCreateTooltipTextNoSentence (int lp_deadPlayer, int lp_effectIndex);
void libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel (int lp_deadPlayer);
void libUIUI_gf_DeathRecapPopulateAbilityandHeroDataForAbilitiesPanel (int lp_deadPlayer);
void libUIUI_gf_DeathRecapPopulateHighestDamagersForPlayer (int lp_deadPlayer);
void libUIUI_gf_DeathRecapPopulateHighestDamagersAbilities (int lp_deadPlayer, int lp_highestDamager, int lp_highestDamagerAbilities);
fixed libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset (unit lp_casterUnit, unit lp_displayUnit);
void libUIUI_gf_UIFloatingCombatTextCreateTextTag (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset);
void libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset);
void libUIUI_gf_UIFloatingCombatTextCreateQuestTagAtPoint (point lp_displayPoint, playergroup lp_displayPlayers);
void libUIUI_gf_UICombatFloatingElementsXP (playergroup lp_playerGroup, unit lp_target, text lp_amount, string lp_style);
void libUIUI_gf_UICombatFloatingElementsLeashing (unit lp_unit);
void libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player);
void libUIUI_gf_FullscreenOverlaysStopSpecialOverlay (int lp_player);
void libUIUI_gf_FullscreenOverlaysShowSpecialOverlay (string lp_cutscene, int lp_player);
void libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer (int lp_player, fixed lp_cCDuration);
void libUIUI_gf_FullscreenOverlayAddItemForPlayer (int lp_player, int lp_priority, string lp_cutscene, string lp_behavior);
void libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_desiredInsertPosition, string lp_cutscene, string lp_behavior);
void libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer (int lp_player, string lp_cutscene, string lp_behavior);
void libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer (int lp_player);
void libUIUI_gf_FullscreenOverlayPlayCutscene (int lp_player, string lp_cutscene);
void libUIUI_gf_FullscreenOverlaysHideMainPanelForAllPlayers ();
void libUIUI_gf_GameOverSplashDisplayForAllPlayers (int lp_winningTeam);
void libUIUI_gf_GameOverSplashShowHideForAllPlayers (bool lp_showHide, int lp_winningTeam);
void libUIUI_gf_GameStatsShowHidePanel (bool lp_showHide);
void libUIUI_gf_GameStatsUpdateCountdownandLabel (fixed lp_countdownMaxTime, fixed lp_countdownCurrentTime, int lp_currentPlayerCount, int lp_targetPlayerCount);
void libUIUI_gf_UIGameUIToggleMinimapCommandsForPlayer (int lp_player);
void libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer (int lp_player);
void libUIUI_gf_UIGameUITurnOnFactionStateForPlayer (int lp_faction, int lp_player);
void libUIUI_gf_UIGameUISetPlayerHeroUnit (int lp_player, unit lp_hero);
void libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam (int lp_team);
void libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer (int lp_player, bool lp_showHide);
void libUIUI_gf_AttachHelpButtonToUnit (unit lp_attachedUnit, trigger lp_callback, text lp_helpText, int lp_xOffset, int lp_yOffset);
void libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer (int lp_player, bool lp_showHide, unit lp_unit);
int libUIUI_gf_HelpButtonClickedPlayer ();
void libUIUI_gf_SetHelpButtonText (unit lp_unit, text lp_text, playergroup lp_players);
int libUIUI_gf_HelpButtonFromUnit (unit lp_unit);
void libUIUI_gf_UIHeroConsoleShowHideForPlayer (bool lp_showHide, int lp_player);
void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer (bool lp_showHide, int lp_player);
void libUIUI_gf_UIHeroConsoleSetUpForPlayer (unit lp_unit, int lp_player);
void libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars (unit lp_unit, int lp_player);
void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar (string lp_newBehavior, int lp_player);
void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer (int lp_player);
void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar (int lp_player, string lp_behavior);
void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarRight (int lp_player, string lp_behavior);
void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarFromUnit (int lp_player, string lp_behavior, unit lp_unit);
void libUIUI_gf_UIHeroLeaderboardAssignPlayeronLeaderboardToSlotForPlayerGroup (int lp_player, int lp_slot, playergroup lp_observingPlayerGroup);
void libUIUI_gf_UIHeroLeaderboardResetSlotForPlayer (int lp_slot, playergroup lp_observingPlayerGroup);
void libUIUI_gf_UIHeroLeaderboardSortingUpdateSortingTab (int lp_sortingTab);
void libUIUI_gf_UIHeroLeaderboardSortingUpdatePlayerGroupToState (playergroup lp_observingPlayerGroup, int lp_sorting);
void libUIUI_gf_UIHeroLeaderboardSortingSetState (int lp_player, int lp_sorting);
bool libUIUI_gf_UIHeroLeaderboardSortingSortTypeGT0 (int lp_sorting);
void libUIUI_gf_UIHeroLeaderboardHideMainPanelForAllPlayers ();
bool libUIUI_gf_HSUICompareHeroSearchTextForPlayer (int lp_heroIndex, int lp_player);
bool libUIUI_gf_HSUIHeroFilterRoleAllowedForPlayer (int lp_heroIndex, int lp_player);
bool libUIUI_gf_HSUIHeroFilterUniverseAllowedForPlayer (int lp_heroIndex, int lp_player);
bool libUIUI_gf_HSUIHeroSelectedByTeam (int lp_heroIndex, int lp_team);
bool libUIUI_gf_HSUIGoodToLockInForPlayer (int lp_player);
int libUIUI_gf_HSUISelectRandomHeroForPlayer (int lp_player);
void libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection (bool lp_muteUnmute);
void libUIUI_gf_HSUIUpdateFilledDataForPlayerGroup (playergroup lp_playerGroup);
void libUIUI_gf_HSUILockUnlockHeroChoise (int lp_player, bool lp_lockUnlock);
void libUIUI_gf_HSUISelectHeroForPlayer (int lp_player, int lp_buttonIndex);
bool libUIUI_gf_HSUIAllPlayersLockedIn ();
void libUIUI_gf_HSUICountdownDisableAndHideStuff ();
void libUIUI_gf_HSUIIngameUpdateHeroButtonsForPlayerGroup (playergroup lp_playerGroup);
void libUIUI_gf_HSUIIngameUpdateHeroButtonIconsForPlayer (int lp_player);
void libUIUI_gf_HSUIIngameUpdateHeroButtonsVisibilityForPlayer (int lp_player);
void libUIUI_gf_HSUIIngameUpdateHeroButtonsStateForPlayer (int lp_player);
void libUIUI_gf_HSUIIngameUpdateSelectedHeroFrameForPlayer (int lp_player);
void libUIUI_gf_HSUIIngameSetHeroButtonStateForPlayer (int lp_state, int lp_dialogItem, int lp_player);
void libUIUI_gf_HSUIIngameEnableDisableHeroButtonForPlayer (bool lp_enableDisable, int lp_button, int lp_player, bool lp_desaturated);
void libUIUI_gf_HSUIIngameUpdateTeamPanels ();
void libUIUI_gf_HSUIIngameSetRoleAnimationStateOfDialogForPlayerGroup (string lp_role, int lp_dialogItem, playergroup lp_playerGroup);
void libUIUI_gf_HSUIIngameUpdatePlayerNameStyleForPlayer (int lp_player);
void libUIUI_gf_HSUIIngameShowCalloutsDuringHeroSelectionCountdown (timer lp_timer);
void libUIUI_gf_HSUIAttributeAbilityPanelInitialize (int lp_parentPanel);
void libUIUI_gf_HSUIAttributeTalentPanelInitialize (int lp_parentPanel);
void libUIUI_gf_HSUIAttributeInfoPanelInitialize (int lp_parentPanel);
void libUIUI_gf_HSUIChangeHeroChangeHeroPanelInitialize (int lp_parentPanel);
void libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer (int lp_player, bool lp_choosePaired);
void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer (int lp_player, int lp_newVariation, string lp_heroAbilitySlot);
void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple (int lp_player, int lp_newVariation, string lp_heroAbilitySlot);
void libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer (int lp_player, int lp_talentTier);
void libUIUI_gf_HSUIUpdateTalentTierLevelsForPlayer (int lp_player);
void libUIUI_gf_HSUIUpdatePairedSelectionForPlayer (int lp_player, int lp_pairedSelectedPortraitNumber);
void libUIUI_gf_HSUILoadoutInitialization (int lp_parentPanel);
int libUIUI_gf_HSUILoadoutGetMaxLaneCount (int lp_maxItemsCount, int lp_itemsPerLane, int lp_panel);
void libUIUI_gf_HSUISetScrollBarValueForPlayer (int lp_scrollBar, fixed lp_value, int lp_player);
void libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer (int lp_scrollBar, fixed lp_valueMin, fixed lp_valueMax, int lp_player);
void libUIUI_gf_HSUIVariationsFillVariationDataForPlayer (int lp_player);
void libUIUI_gf_HSUIVariationsUpdateEditBoxNameForPlayer (int lp_player);
void libUIUI_gf_HSUIVariationsSelectVariationForPlayer (int lp_variation, int lp_player);
bool libUIUI_gf_HSUISkinsSkinItemButtonIsSelectedForPlayer (int lp_player, int lp_item);
bool libUIUI_gf_HSUISkinsCompareSearchTextForPlayer (int lp_skin, int lp_player);
void libUIUI_gf_HSUISkinsSetLoadoutSkinItemToSkinForPlayer (int lp_skinIndex, int lp_dialogItemIndex, int lp_player);
void libUIUI_gf_HSUISkinsFillLoadoutSkinDataForPlayer (int lp_player);
void libUIUI_gf_HSUISkinsFillTempArrayForPlayer (int lp_player);
void libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer (int lp_skinIndex, int lp_player);
bool libUIUI_gf_HSUIMountsMountItemButtonIsSelectedForPlayer (int lp_player, int lp_item);
bool libUIUI_gf_HSUIMountsMountIsInTempArrayForPlayer (int lp_mountIndex, int lp_player);
bool libUIUI_gf_HSUIMountsCollapsedForPlayer (int lp_player);
int libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer (int lp_player);
bool libUIUI_gf_HSUIMountsCompareSearchTextForPlayer (int lp_mount, int lp_player);
int libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer (int lp_player);
void libUIUI_gf_HSUISetMountCategoryItemTextForPlayer (int lp_dialogItem, text lp_text, int lp_player);
void libUIUI_gf_HSUISetLoadoutMountItemToMountForPlayer (int lp_mountIndex, int lp_dialogItemIndex, int lp_player);
void libUIUI_gf_HSUIMountsFillLoadoutMountDataForPlayer (int lp_player);
void libUIUI_gf_HSUIMountsFillTempArrayForPlayer (int lp_categoryButtonIndex, int lp_player);
void libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayForPlayer (int lp_player);
void libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player);
bool libUIUI_gf_HSUIMountsFillTempArrayMountIsValidForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player);
bool libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayPulldownAccessForPlayer (int lp_mountIndex, int lp_player);
void libUIUI_gf_HSUIMountsUpdateMountCollectionCategoryButtonsForPlayer (int lp_player);
void libUIUI_gf_HSUIMountsFillMountReplacementContainerForPlayer (int lp_player);
bool libUIUI_gf_HSUIAnnouncersAnnouncerItemButtonIsSelectedForPlayer (int lp_player, int lp_item);
bool libUIUI_gf_HSUIAnnouncersAnnouncerIsInTempArrayForPlayer (int lp_announcerIndex, int lp_player);
bool libUIUI_gf_HSUIAnnouncersCollapsedForPlayer (int lp_player);
int libUIUI_gf_HSUIAnnouncersCurrentMaxItemCountForPlayer (int lp_player);
bool libUIUI_gf_HSUIAnnouncersCompareSearchTextForPlayer (int lp_announcer, int lp_player);
int libUIUI_gf_HSUIAnnouncersCollectionCategoryIndexForSelectedAnnouncerForPlayer (int lp_player);
void libUIUI_gf_HSUISetAnnouncerCategoryItemTextForPlayer (int lp_dialogItem, text lp_text, int lp_player);
void libUIUI_gf_HSUISetLoadoutAnnouncerItemToAnnouncerForPlayer (int lp_announcerIndex, int lp_dialogItemIndex, int lp_player);
void libUIUI_gf_HSUIAnnouncersFillLoadoutAnnouncerDataForPlayer (int lp_player);
void libUIUI_gf_HSUIAnnouncersFillTempArrayForPlayer (int lp_categoryButtonIndex, int lp_player);
void libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayForPlayer (int lp_player);
void libUIUI_gf_HSUIAnnouncersAddAnnouncerToTempArrayForPlayer (int lp_categoryButtonIndex, int lp_announcerIndex, int lp_player);
bool libUIUI_gf_HSUIAnnouncersFillTempArrayAnnouncerIsValidForPlayer (int lp_categoryButtonIndex, int lp_announcerIndex, int lp_player);
bool libUIUI_gf_HSUIAnnouncersFillTempCollectionCategoryArrayPulldownAccessForPlayer (int lp_announcerIndex, int lp_player);
void libUIUI_gf_HSUIAnnouncersUpdateAnnouncerCollectionCategoryButtonsForPlayer (int lp_player);
void libUIUI_gf_HSUIAnnouncersPlayPreviewSoundForPlayer (int lp_buttonItem, int lp_player);
void libUIUI_gf_HSUISetSkinContainerNameForPlayer (int lp_player);
void libUIUI_gf_HSUISetMountContainerNameForPlayer (int lp_player);
void libUIUI_gf_HSUISetAnnouncerContainerNameForPlayer (int lp_player);
void libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer (bool lp_selectDeselect, int lp_dialogItem, int lp_player);
void libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer (bool lp_lockedUnlocked, int lp_dialogItem, int lp_player);
void libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer (string lp_event, int lp_button, int lp_player);
void libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer (bool lp_f2P, int lp_dialogItem, int lp_player);
void libUIUI_gf_HSUILoadBankDataForPlayer (int lp_player);
void libUIUI_gf_HSUILoadBankDataForSelectedVariationForPlayer (int lp_player);
void libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer (int lp_panel, int lp_player);
void libUIUI_gf_HSUIFillLoadoutPanelForPlayer (int lp_player);
void libUIUI_gf_HSUIFillLoadoutSkinPanelForPlayer (int lp_player);
void libUIUI_gf_HSUIFillLoadoutMountPanelForPlayer (int lp_player);
void libUIUI_gf_HSUIFillLoadoutAnnouncerPanelForPlayer (int lp_player);
void libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer (int lp_player);
void libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer (int lp_player);
void libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit (unit lp_unit);
void libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer (bool lp_showHide, int lp_player);
void libUIUI_gf_UIHeroTrackerArrowShowHideHeroUnitForPlayer (bool lp_showHide, int lp_player, unit lp_unit);
void libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer (int lp_player);
int libUIUI_gf_KillLogGetUnusedItemIndex ();
int libUIUI_gf_KillLogGetItemIndexForUnit (int lp_sourcePlayer, int lp_type);
int libUIUI_gf_KillLogGetItemWithLeastRemainingTime ();
string libUIUI_gf_KillLogGetPortraitPathForUnit (unit lp_unit);
int libUIUI_gf_KillLogAddNewItem (int lp_sourcePlayer, int lp_eventType);
void libUIUI_gf_KillLogAnnounceKill (int lp_sourcePlayer, unit lp_target);
void libUIUI_gf_KillLogAnnounceQuestCompletion (int lp_player, string lp_questToken, fixed lp_progress);
void libUIUI_gf_KillLogSaveQuestResetDataToCache (int lp_player, string lp_questTokenCounter);
void libUIUI_gf_KillLogClearQuestResetDataCacheForPlayer (int lp_player);
void libUIUI_gf_KillLogDisplayQuestResetDataFromCache (int lp_player, int lp_portraitFrame);
void libUIUI_gf_KillLogHideItem (int lp_indexToRemove);
void libUIUI_gf_KillLogDebugInitPanel ();
string libUIUI_gf_KillLogDebugRandomQuestBehavior ();
void libUIUI_gf_MapMechanicsBlackheartsBayShowHidePanel (bool lp_showHide);
void libUIUI_gf_MapMechanicsBlackheartsBaySetMode (int lp_mode);
void libUIUI_gf_MapMechanicsBlackheartsBayShowChestsSpawnedFrame ();
void libUIUI_gf_MapMechanicsBlackheartsBayShowCannonballForTeam (int lp_team);
void libUIUI_gf_MapMechanicsBlackheartsBaySetDoubloonCountForTeam (int lp_count, int lp_maxCount, int lp_team);
void libUIUI_gf_MapMechanicsBlackheartsBaySetShotCountForTeam (int lp_count, int lp_team);
void libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel (bool lp_showHide);
void libUIUI_gf_MapMechanicsHauntedMinesSetMode (int lp_mode);
void libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime (int lp_remainingSeconds);
void libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam (int lp_count, int lp_team);
void libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining (int lp_count);
void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam (unit lp_golemUnit, int lp_skullCount, int lp_team);
void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed, int lp_skullCountTeamBlue, int lp_skullCountTeamRed);
void libUIUI_gf_MapMechanicsDragonShireShowHidePanel (bool lp_showHide);
void libUIUI_gf_MapMechanicsDragonShireSetMode (int lp_mode);
void libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime (int lp_remainingSeconds);
void libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner (int lp_team);
void libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner (int lp_team);
void libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime (int lp_remainingSeconds);
void libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam (unit lp_dragonUnit, int lp_team);
void libUIUI_gf_MapMechanicsGardenOfTerrorInit (int lp_parentPanel);
void libUIUI_gf_MapMechanicsGardenOfTerrorShowHidePanel (bool lp_showHide);
void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideNightWarning (bool lp_showHide);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetNightWarningTime (int lp_remainingSeconds);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemSummonPossibleForTeam (int lp_team, bool lp_summonPossible);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (text lp_countText, int lp_team, bool lp_golemSummonPossible);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam (int lp_team, bool lp_golemSummonPossible);
void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideGolemFrame (bool lp_showHide);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (unit lp_golemUnit, int lp_team);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemRemainingTimeForTeam (int lp_team, int lp_remainingTime);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemGrowTimeForTeam (int lp_team, int lp_remainingTime);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemStatusTextForTeam (int lp_team, int lp_status);
void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameStatusTextForTeam (int lp_team, int lp_status);
void libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText (int lp_team, bool lp_flash, int lp_level);
void libUIUI_gf_MapMechanicsCursedHollowInit (int lp_parentPanel);
void libUIUI_gf_MapMechanicsCursedHollowShowHidePanel (bool lp_showHide);
void libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam (int lp_mode, int lp_teamThatWonTheCurse);
void libUIUI_gf_MapMechanicsCursedHollowSetTributeCountForTeam (int lp_count, int lp_team);
void libUIUI_gf_MapMechanicsCursedHollowSetRemainingCurseTimeForTeam (int lp_remainingSeconds, int lp_team);
void libUIUI_gf_MapMechanicsCursedHollowSetRemainingTributeSpawnTime (int lp_remainingSeconds);
void libUIUI_gf_MapMechanicsWinterveilInit (int lp_parentPanel);
void libUIUI_gf_MapMechanicsWinterveilShowHidePanel (bool lp_showHide);
void libUIUI_gf_UIEnableMapMechanicButtonForPlayer (int lp_playerID, bool lp_playIntroAnim);
void libUIUI_gf_UIEnableMapMechanicButtonAllPlayers (bool lp_playIntroAnim);
void libUIUI_gf_UIDisableMapMechanicButtonForPlayer (int lp_playerID);
void libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer (int lp_player, text lp_titleText, text lp_numberText);
int libUIUI_gf_UIPartyFrameHeroTypeofHero (unit lp_hero);
int libUIUI_gf_UIPartyFrameUIIndexofHeroUnit (unit lp_heroUnit, int lp_player);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart (unit lp_hero);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroUsesPairedRespawnTimer (unit lp_heroUnit);
timer libUIUI_gf_UIPartyFrameSpecialCaseHeroPairedRespawnTimer (int lp_player);
timer libUIUI_gf_UIPartyFrameDeathTimer (int lp_player, unit lp_heroUnit);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasExtendedDeath (int lp_player);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasCondensedDeath (unit lp_hero);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent (unit lp_hero);
bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicCoolup (string lp_hero);
void libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer (bool lp_showHide, int lp_player);
void libUIUI_gf_UIPartyFrameShowHideHeroicAbility (bool lp_showHide, int lp_player);
void libUIUI_gf_UIPartyFrameHeroicTalentUpdate (int lp_player, int lp_talentTierIndex);
void libUIUI_gf_UIPartyFrameAddPlayerToPartyFrame (int lp_player);
void libUIUI_gf_UIPartyFrameHeroicAbilitySet (string lp_heroicAbility, int lp_player);
void libUIUI_gf_UIPartyFrameHeroicTalentIconSet (string lp_icon, int lp_player);
void libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate (int lp_player);
void libUIUI_gf_UIPartyFrameShowHidePlayerForPartyFrame (bool lp_showHide, int lp_player);
void libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup (bool lp_showHide, int lp_player, playergroup lp_playerGroup);
void libUIUI_gf_UIPartyFrameShowHideCoreHealth (bool lp_showHide);
void libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning (int lp_teamNumber, bool lp_showHide);
void libUIUI_gf_UIPartyFrameShowHideTeamPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup);
void libUIUI_gf_UIPartyFrameShowHideLevelInfoPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup);
void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameMainPanel (string lp_animationEvent, playergroup lp_playerGroup);
void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameHeroPanelforPlayer (string lp_animationEvent, int lp_player, playergroup lp_playerGroup);
void libUIUI_gf_UIPartyFrameHeroDies (int lp_killedPlayer, unit lp_killedUnit);
void libUIUI_gf_UIPartyFrameSetUpCoreHealthBarforTeam (int lp_team);
void libUIUI_gf_UIPartyFrameTalentAdvantageUpdate ();
void libUIUI_gf_UIPartyFrameTeamLevelUpdate (int lp_team, int lp_level);
void libUIUI_gf_UIPartyFrameSetPetFrame (unit lp_petUnit, int lp_player);
void libUIUI_gf_UIPartyFrameSetVikingFrame (int lp_player, unit lp_vikingUnit);
void libUIUI_gf_UIPartyFrameSetDVaFrame (int lp_playerID, bool lp_inMech);
void libUIUI_gf_UIPartyFramePetDies (int lp_player, timer lp_petDeathTimer);
void libUIUI_gf_UIPartyFrameVikingDies (int lp_player, unit lp_viking, timer lp_deathTimer);
void libUIUI_gf_UIPartyFrameHeroHearthstoneStart (int lp_player, unit lp_unit);
void libUIUI_gf_UIPartyFrameHeroHearthstoneFizzle (int lp_player, unit lp_unit);
void libUIUI_gf_UIPartyFrameSpecialCaseAurielRevivesHero (int lp_revivedPlayer, unit lp_revivedUnit);
void libUIUI_gf_UIPartyFrameGameTimerUpdate (text lp_gameTimeText);
void libUIUI_gf_UIPartyFrameHeroicTalentCooldownUpdate ();
void libUIUI_gf_UIPartyFrameSpecialCaseUpdatePetDeath (int lp_player);
void libUIUI_gf_UIPartyFrameSpecialCaseUpdateVikingsDeath (int lp_player);
void libUIUI_gf_UIPartyFrameAllyPing (int lp_pingingPlayer, unit lp_targetUnit, int lp_targetPlayerID, int lp_uIRosterSlot, int lp_vikingIndex);
void libUIUI_gf_UIPartyFrameEnemyPing (int lp_pingingPlayer, unit lp_targetUnit, int lp_targetPlayerID, int lp_uIRosterSlot, int lp_vikingIndex);
void libUIUI_gf_UIPartyFrameTeamXPUpdateandManageTeamSpamTimers (int lp_teamNumber);
void libUIUI_gf_UIPartyFrameSetCoreLifeTo0 (int lp_team);
void libUIUI_gf_UIPartyFrameTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel (int lp_team, unit lp_unit);
unit libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint (point lp_point, bool lp_pingFromMinimap, int lp_pingingPlayer);
void libUIUI_gf_UIPingPlayerPingsUnit (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup);
void libUIUI_gf_UIPingPlayerUsesOnMyWayPing (unit lp_pingedUnit, int lp_player, point lp_location);
void libUIUI_gf_UIPingPlayerUsesDefendPing (unit lp_pingedUnit, int lp_player, point lp_location);
void libUIUI_gf_UIPingPlayerUsesRetreatPing (int lp_player, point lp_location);
void libUIUI_gf_UIPingPlayerUsesDangerPing (int lp_player, point lp_location, unit lp_targetUnit);
void libUIUI_gf_UIPingPlayerUsesAssistMePing (int lp_player, unit lp_targetUnit, point lp_location);
int libUIUI_gf_PingDeterminePingTargetType (unit lp_unit);
int libUIUI_gf_PingLastCreatedPingTarget ();
void libUIUI_gf_PingPlayerStartsHearthStonePing (int lp_player, point lp_location);
void libUIUI_gf_PingCancelPlayersHearthStonePing (int lp_player);
void libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer (int lp_player);
void libUIUI_gf_PingResetPingLockoutTimeandPingCount (int lp_player);
void libUIUI_gf_PingAIResponse (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup);
void libUIUI_gf_PingCreateNewPingTarget (string lp_unitType, bool lp_pingIsForOccupiedVehicle, text lp_pingTargetNameOverride, text lp_alliedTargetMessageText, text lp_enemyTargetMessageText, soundlink lp_alliedTargetPingSound, soundlink lp_enemyTargetPingSound);
void libUIUI_gf_PingCreateNewPingTargetNameOverrideOnly (string lp_unitType, text lp_pingTargetNameOverride);
void libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget (int lp_pingTarget, string lp_allyTargetHeroVO, string lp_enemyTargetHeroVO);
void libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget (int lp_pingTarget, string lp_humanSourceHeroVO, string lp_aISourceHeroVO);
void libUIUI_gf_PingSetCustomResponseTriggerForPingTarget (int lp_pingTarget, trigger lp_trigger);
void libUIUI_gf_PingSetCustomResponseTriggerForPingbyUnitType (string lp_pingUnitType, trigger lp_responseTrigger);
void libUIUI_gf_PreloadPanelShowHideHeader (bool lp_showHide);
void libUIUI_gf_PreloadPanelShowHidePanel (bool lp_showHide);
void libUIUI_gf_PreloadPanelSetNewTitle (text lp_title);
void libUIUI_gf_UITabScreenPanelUpdateTeamKills (int lp_team, int lp_kills);
void libUIUI_gf_UITabScreenPanelUpdateTeamLevel (int lp_team, int lp_level);
void libUIUI_gf_UITalentChoicePanelSetButtonStateForPlayer (int lp_player, int lp_buttonItem, string lp_state);
void libUIUI_gf_UITalentChoicePanelFillPanelForPlayer (int lp_player);
void libUIUI_gf_UITalentChoicePanelUpdateTalentButtonsForPlayer (int lp_player);
void libUIUI_gf_UITalentChoicePanelChooseTierForPlayer (int lp_tier, int lp_player);
void libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionForPlayer (int lp_player);
void libUIUI_gf_UITalentChoicePanelSetTierButtonLevelsForPlayer (int lp_player);
void libUIUI_gf_UITalentChoicePanelSetToggleButtonStateForPlayer (bool lp_toggled, int lp_player);
void libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionIndicatorForPlayer (int lp_player);
void libUIUI_gf_UITalentChoisePanelUpdateTierButtonsForPlayer (int lp_player);
void libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsForPlayer (int lp_player);
void libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsBehaviorForPlayer (int lp_player, string lp_tokenCounterBehavior);
void libUIUI_gf_UITalentPanelSetUpPlayeronLeaderboard (int lp_player);
void libUIUI_gf_UITalentPanelSetupStartQuestOfPlayer (int lp_player);
void libUIUI_gf_UITalentPanelUpdateTalentTierOfPlayer (int lp_player, int lp_talentTier);
void libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer (int lp_player);
void libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer (int lp_player);
void libUIUI_gf_UITalentPanelUpdateTalentsQuestsBehaviorOfPlayer (int lp_player, string lp_tokenCounterBehavior);
void libUIUI_gf_UIHeroLeaderboardTalentsHeroicAbilityLinkUpdate2 (int lp_player);
void libUIUI_gf_UIHeroLeaderboardTalentsUpdateHeroicTalentCooldown2 ();
void libUIUI_gf_UITalentPanelSetTalentTierStateOfPlayer (int lp_targetPlayer, string lp_talentState, int lp_talentTier);
void libUIUI_gf_UITalentPanelSetTalentTierQuestStateOfPlayer (int lp_targetPlayer, int lp_talentLevel, string lp_talentLevelQuestState);
void libUIUI_gf_UITalentPanelSetTalentTierQuestProgressOfPlayer (fixed lp_currentValue, fixed lp_maxValue, int lp_targetPlayer, int lp_talentLevel);
void libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerIngame (int lp_player);
void libUIUI_gf_UITalentsPrepickedUpdateBuildButtonForPlayerHeroSelection (int lp_player);
void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame (int lp_player);
void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection (int lp_player);
void libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup (int lp_dialogItem, bool lp_prepicked, playergroup lp_playerGroup);
void libUIUI_gf_UITargetInfoPanelUpdateUnit (int lp_player);
void libUIUI_gf_UITargetInfoPanelUpdateUnitStatValue (int lp_dialogItem, string lp_unitStats, int lp_player);
string libUIUI_gf_UITargetInfoPanelGetUnitIcon (unit lp_unit);
bool libUIUI_gf_UIUnitStatusStatsDisplayUnitHasStatsDisplay (unit lp_unit);
void libUIUI_gf_UIUnitStatusStatsDisplayUpdateOnUnit (unit lp_unit);

// Trigger Declarations
trigger libUIUI_gt_IncludeUI;
trigger libUIUI_gt_InitializeUI;
trigger libUIUI_gt_UIUpdateTimeLabelsTimerExpires;
trigger libUIUI_gt_PlayerAnnounceInitialize;
trigger libUIUI_gt_PlayerAnnounceListenForAnnounce;
trigger libUIUI_gt_PlayerAnnouncePingCountResetTimerExpires;
trigger libUIUI_gt_UIInitializeDamageFlashUI;
trigger libUIUI_gt_UIDamageFlashTriggerDamageFlash;
trigger libUIUI_gt_UIDamageFlashLowHPSoundsLooper;
trigger libUIUI_gt_UIDeathRecapPanelInitialize;
trigger libUIUI_gt_DeathRecapOpenButtonClicked;
trigger libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens;
trigger libUIUI_gt_UIFloatingCombatTextQuestProgressViaEffect;
trigger libUIUI_gt_UICombatFloatingElementsDamage;
trigger libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech;
trigger libUIUI_gt_UICombatFloatingElementsHeal;
trigger libUIUI_gt_UICombatFloatingElementsHealPrevented;
trigger libUIUI_gt_UICombatFloatingElementsDamagePrevented;
trigger libUIUI_gt_UICombatFloatingElementsMana;
trigger libUIUI_gt_UICombatFloatingElementsMissing;
trigger libUIUI_gt_UICombatFloatingElementsBlocked;
trigger libUIUI_gt_FullscreenOverlaysInitialize;
trigger libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires;
trigger libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires;
trigger libUIUI_gt_FullscreenOverlaysInitializeRework;
trigger libUIUI_gt_UIGameInfoInitialize;
trigger libUIUI_gt_GameOverSplashInitialize;
trigger libUIUI_gt_GameStatsInitialize;
trigger libUIUI_gt_UIInitializeGameUIHandles;
trigger libUIUI_gt_UIGameUITurnOnFactionStates;
trigger libUIUI_gt_UIGameUISetGameData;
trigger libUIUI_gt_UIInitializeHealingFountainsHelpText;
trigger libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain;
trigger libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController;
trigger libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies;
trigger libUIUI_gt_HelpButtonDebugPosition;
trigger libUIUI_gt_UIInitializeHeroConsole;
trigger libUIUI_gt_HeroConsoleUnitStatusBarsInitialize;
trigger libUIUI_gt_HeroConsoleUnitStatusBarsUpdate;
trigger libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded;
trigger libUIUI_gt_UIHeroLeaderboardInitialize;
trigger libUIUI_gt_UIHeroLeaderboardSortingUpdate;
trigger libUIUI_gt_HSUIIngameButtonUsed;
trigger libUIUI_gt_HSUIIngameFilterEditBox;
trigger libUIUI_gt_HSUIIngameShowHeroSelection;
trigger libUIUI_gt_HSUIIngameCountdownTimerExpires;
trigger libUIUI_gt_HSUIIngameUIInit;
trigger libUIUI_gt_HSUILoadoutScrollBarUsed;
trigger libUIUI_gt_HSUILoadoutInputTrigger;
trigger libUIUI_gt_HSUILoadoutListBoxSelected;
trigger libUIUI_gt_HSUILoadoutEditBoxTextChanges;
trigger libUIUI_gt_UIInitializeHeroTrackerArrow;
trigger libUIUI_gt_UIInputIngameButtonUsed;
trigger libUIUI_gt_InputPlayerClicksUnit;
trigger libUIUI_gt_InputUIClearTextOption;
trigger libUIUI_gt_KillLogInitialize;
trigger libUIUI_gt_KillLogOnHeroUnitDies;
trigger libUIUI_gt_KillLogOnQuestCompleteViaTokens;
trigger libUIUI_gt_KillLogOnQuestCompleteViaEffects;
trigger libUIUI_gt_KillLogOnQuestReset;
trigger libUIUI_gt_KillLogItemTimerExpires;
trigger libUIUI_gt_MapMechanicsPanelInitialize;
trigger libUIUI_gt_MapMechanicsPanelUpdate;
trigger libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires;
trigger libUIUI_gt_NotificationDisplayInitialize;
trigger libUIUI_gt_DEBUGNotificationAnimCheat;
trigger libUIUI_gt_UIInitializePartyFrameUI;
trigger libUIUI_gt_UIPartyFrameHeroRespawn;
trigger libUIUI_gt_UIPartyFrameHeroHearthstoneComplete;
trigger libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState;
trigger libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires;
trigger libUIUI_gt_UIPingListenForPlayerPing;
trigger libUIUI_gt_InitializeBaseModPingData;
trigger libUIUI_gt_PingCountResetTimerExpires;
trigger libUIUI_gt_PingOnMyWayPathDisplayTimerExpires;
trigger libUIUI_gt_PreloadPanelInitialization;
trigger libUIUI_gt_UIInitializeTabScreenPanel;
trigger libUIUI_gt_UIInitializeTalentChoicePanel;
trigger libUIUI_gt_UITalentPanelInitialize;
trigger libUIUI_gt_UITargetInfoPanelInitialize;
trigger libUIUI_gt_UITargetInfoPanelUnitClicked;
trigger libUIUI_gt_UITargetInfoPanelPeriodicUpdate;
trigger libUIUI_gt_UITargetInfoPanelLMBClicked;
trigger libUIUI_gt_UIUnitStatusDimmed;

// Library Initialization
void libUIUI_InitVariables ();

