include "TriggerLibs/NativeLib"
include "LibGame_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibUIUI_h"

include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: Core
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCore_InitLibraries () {
    libNtve_InitVariables();
    libGame_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libCore_InitVariables_completed = false;

void libCore_InitVariables () {
    int init_i;
    int init_i1;

    if (libCore_InitVariables_completed) {
        return;
    }

    libCore_InitVariables_completed = true;

    libCore_gv_dEBUGPingLimitEnabled = true;
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSEventsEnabled = true;
    libCore_gv_sYSStartGame = true;
    libCore_gv_sYSHeroStartLevel = 1;
    libCore_gv_sYSXPOn = true;
    libCore_gv_sYSXPTrickleEnabled = true;
    libCore_gv_mAPMapStringID = "";
    libCore_gv_allPlayersStorm = PlayerGroupAll();
    libCore_gv_allHeroPlayers = PlayerGroupEmpty();
    libCore_gv_allHeroPlayersPlusObservers = PlayerGroupEmpty();
    libCore_gv_observerPlayers = PlayerGroupEmpty();
    libCore_gv_teamOrder = PlayerGroupEmpty();
    libCore_gv_teamChaos = PlayerGroupEmpty();
    libCore_gv_activeHumanPlayers = PlayerGroupEmpty();
    libCore_gv_nPCPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libCore_gv_playerGroupFromPlayer[init_i] = PlayerGroupEmpty();
    }
    libCore_gv_cONFIGDefaultAnnouncer = UserDataGetUserInstance("Config", "Default", "Announcer", 1);
    libCore_gv_cONFIGDefaultMount = UserDataGetUserInstance("Config", "Default", "Mount", 1);
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVOMaxAnnouncerPackCount; init_i += 1) {
        libCore_gv_dataAnnouncerVOPacks[init_i].lv_iDPersonal = "";
    }
    libCore_gv_cOLORPlayerColor = Color(0,0,0);
    libCore_gv_cOLORAllyColor = Color(0,0,0);
    libCore_gv_cOLOREnemyColor = Color(0,0,0);
    libCore_gv_cOLORNeutralColor = Color(0,0,0);
    libCore_gv_cOLORJungleCreepColor = Color(23.53, 0.00, 35.69);
    libCore_gv_filtersAlly = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersEnemy = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersVisible = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersNoMinionAggro = UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersIgnoredByTargetingAI = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroic = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicjustexcludingCloakedandDead = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)));
    libCore_gv_filtersHeroicjustexcludingMissile = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0);
    libCore_gv_filtersHeroicjustexcludingHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicAlly = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyandnotHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicAllyandnotImmuneToFriendlyAbilitiesorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicAllyorPlayer = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyandnotHallucinationHoverorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHallucinationorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHover = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHoverorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemy = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemyorNeutral = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemyandnotHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicandnotBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicandnotBenignInvulnerableorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicandnotCloaked = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicandnotHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterResistant - 32)));
    libCore_gv_filtersHeroicandnotInvulnerable = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libCore_gv_filtersHeroicandnotInvulnerableorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libCore_gv_filtersHeroicandnotPlayer = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicandnotStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMinionsAllLaners = UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMinionsTownMinions = UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    libCore_gv_filtersMercLaner = UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMercDefender = UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMapBosses = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMapCreatures = UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersStructure = UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersSummoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        libCore_gv_dataHeroesHeroData[init_i].lv_heroID = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_func_HeroIncrement = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_func_HeroDecrement = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_mountScaling = -1.0;
    }
    for (init_i = 0; init_i <= libCore_gv_dataHeroVOMaxNumberOfHeroVOEvents; init_i += 1) {
        libCore_gv_dataHeroVODataFieldMap[init_i] = "";
    }
    for (init_i = 0; init_i <= libCore_gv_mapCountMax; init_i += 1) {
        libCore_gv_mapData[init_i].lv_offlinePath = "";
        libCore_gv_mapData[init_i].lv_gameMutator = libCore_ge_GameMutators_None;
    }
    libCore_gv_bALMinionWaveInterval = 30.0;
    for (init_i = 0; init_i <= libCore_gv_dataMountsMaxMountCount; init_i += 1) {
        libCore_gv_dataMountsMountData[init_i].lv_mountID = "";
        libCore_gv_dataMountsMountData[init_i].lv_mountIDPersonal = "";
        libCore_gv_dataMountsMountData[init_i].lv_mountModel = "HorseMount";
        libCore_gv_dataMountsMountData[init_i].lv_mountModelScale = 1.0;
        libCore_gv_dataMountsMountData[init_i].lv_mountModelWalkAnimMoveSpeed = 4.5;
        libCore_gv_dataMountsMountData[init_i].lv_mountPoseAnimGroup = "Ride";
        libCore_gv_dataMountsMountData[init_i].lv_mountPoseAnimGroupStatus = "Ride";
    }
    libCore_gv_bALCancelDelay = 1.5;
    libCore_gv_bALHeroKillCreditTimeWindow = 5.0;
    libCore_gv_bALDeathTimeScaler = 1.0;
    for (init_i = 0; init_i <= libCore_gv_dataSkinsMaxSkinCount; init_i += 1) {
        libCore_gv_dataSkinsSkinData[init_i].lv_skinID = "";
        libCore_gv_dataSkinsSkinData[init_i].lv_skinIDPersonal = "";
        libCore_gv_dataSkinsSkinData[init_i].lv_vODefinition = "";
    }
    for (init_i = 0; init_i <= libCore_gv_talents_MaxTalentEntryCount_C; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_talents_CatalogLinkReplacementMax_C; init_i1 += 1) {
            libCore_gv_talentData[init_i].lv_catalogLinkReplacementType[init_i1] = c_gameCatalogUnit;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_talents_CatalogLinkReplacementMax_C; init_i1 += 1) {
            libCore_gv_talentData[init_i].lv_catalogLinkReplacementTo[init_i1] = "";
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_talents_CatalogLinkReplacementMax_C; init_i1 += 1) {
            libCore_gv_talentData[init_i].lv_catalogLinkReplacementFrom[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_dataUnitHistoryDataTypeMax; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataUnitHistoryDataMaxEntryCount; init_i1 += 1) {
            libCore_gv_dataUnitHistoryData[init_i].lv_dataUnitHistoryData[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libCore_gv_data_XP_HeroXPModifier[init_i] = 1.0;
    }
    libCore_gv_data_XP_CatchUpXPPunishmentScaler = 1.0;
    libCore_gv_data_XP_CatchUpXPBonusScaler = 1.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libCore_gv_data_XP_MinionXPModifier[init_i] = 1.0;
    }
}

// Presets
string libCore_ge_GameModes_Ident (int lp_val) {
         if (lp_val == -1) { return "Sandbox"; }
    else if (lp_val == -1) { return "Debug"; }
    else if (lp_val == libCore_ge_GameModes_TryMe) { return "TryMe"; }
    else if (lp_val == libCore_ge_GameModes_Launcher) { return "Launcher"; }
    else if (lp_val == libCore_ge_GameModes_Normal) { return "Normal"; }
    else if (lp_val == libCore_ge_GameModes_Swift) { return "Swift"; }
    else if (lp_val == libCore_ge_GameModes_Mutator) { return "Mutator"; }
    else if (lp_val == libCore_ge_GameModes_Arena) { return "Arena"; }
    else if (lp_val == libCore_ge_GameModes_Arcade) { return "Arcade"; }
    else if (lp_val == libCore_ge_GameModes_AttackDefend) { return "AttackDefend"; }
    else if (lp_val == libCore_ge_GameModes_PvE) { return "PvE"; }
    return null;
}

string libCore_ge_GameMutators_Ident (int lp_val) {
         if (lp_val == libCore_ge_GameMutators_None) { return "None"; }
    else if (lp_val == libCore_ge_GameMutators_Winterveil) { return "Winterveil"; }
    return null;
}

string libCore_ge_GameOptions_Ident (int lp_val) {
         if (lp_val == libCore_ge_GameOptions_None) { return "None"; }
    else if (lp_val == libCore_ge_GameOptions_Preloading) { return "Preloading"; }
    else if (lp_val == libCore_ge_GameOptions_Sandbox) { return "Sandbox"; }
    else if (lp_val == libCore_ge_GameOptions_SameHeroSelection) { return "SameHeroSelection"; }
    return null;
}

string libCore_ge_MAPMap_Ident (int lp_val) {
         if (lp_val == libCore_ge_MAPMap_Unknown) { return "Unknown"; }
    else if (lp_val == libCore_ge_MAPMap_Launcher) { return "Launcher"; }
    else if (lp_val == libCore_ge_MAPMap_BuriedBackwoods) { return "BuriedBackwoods"; }
    else if (lp_val == libCore_ge_MAPMap_KingsCrest) { return "KingsCrest"; }
    else if (lp_val == libCore_ge_MAPMap_CursedHollow) { return "CursedHollow"; }
    else if (lp_val == libCore_ge_MAPMap_CursedHollowWinterveil) { return "CursedHollowWinterveil"; }
    return null;
}

string libCore_ge_AnnouncerVOEvents_Ident (int lp_val) {
         if (lp_val == libCore_ge_AnnouncerVOEvents_Null) { return "Null"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GetReadyForBattle) { return "GetReadyForBattle"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BattleStartingIn) { return "BattleStartingIn"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown10) { return "Countdown10"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown5) { return "Countdown5"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown4) { return "Countdown4"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown3) { return "Countdown3"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown2) { return "Countdown2"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown1) { return "Countdown1"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LetTheBattleBegin) { return "LetTheBattleBegin"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled) { return "YouHaveBeenKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyKilled) { return "AllyKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants) { return "EnemyKilledNonparticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants) { return "EnemyKilledParticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroKilledObserver) { return "HeroKilledObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_DoubleKill) { return "DoubleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TripleKill) { return "TripleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_QuadraKill) { return "QuadraKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_MegaKill) { return "MegaKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_SixKill) { return "SixKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_SevenKill) { return "SevenKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EightKill) { return "EightKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_NineKill) { return "NineKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TenKill) { return "TenKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TeamKill) { return "TeamKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamKilled) { return "BlueTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamKilled) { return "RedTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyFirstBlood) { return "AllyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyFirstBlood) { return "EnemyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood) { return "BlueTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood) { return "RedTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeStart) { return "KillingSpreeStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou) { return "KillingSpreeEndYou"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem) { return "KillingSpreeUpgrade1Mayhem"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage) { return "KillingSpreeUpgrade2Rampage"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable) { return "KillingSpreeUpgrade3Untouchable"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar) { return "KillingSpreeUpgrade4AllStar"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame) { return "APlayerHasLeftTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame) { return "APlayerHasRejoinedTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestoneRevive) { return "GravestoneRevive"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed) { return "AlliedOutpostDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed) { return "EnemyOutpostDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed) { return "AlliedKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed) { return "EnemyKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown) { return "BlueTeamDestroysTown"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown) { return "RedTeamDestroysTown"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep) { return "BlueTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep) { return "RedTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack) { return "AlliedCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack) { return "BlueTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack) { return "RedTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Victory) { return "Victory"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Defeat) { return "Defeat"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamWins) { return "BlueTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamWins) { return "RedTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventStart) { return "LegendaryEventStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventEnd) { return "LegendaryEventEnd"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp) { return "AlliesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp) { return "EnemiesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp) { return "BlueTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp) { return "RedTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LevelUp) { return "LevelUp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TalentUnlocked) { return "TalentUnlocked"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventCount) { return "EventCount"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GamePaused) { return "GamePaused"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GameResumed) { return "GameResumed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_MVP) { return "MVP"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_MVPVoteEpic) { return "MVPVoteEpic"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_MVPVoteLegendary) { return "MVPVoteLegendary"; }
    return null;
}

string libCore_ge_SegregationTriggerTypes_Ident (int lp_val) {
         if (lp_val == libCore_ge_SegregationTriggerTypes_DefenderAIIssueOrdersToCreep) { return "DefenderAIIssueOrdersToCreep"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData) { return "HeroAIInitializeHeroTierData"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIInitAbilities) { return "HeroAIInitAbilities"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIEnableAIForPlayer) { return "HeroAIEnableAIForPlayer"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIDebuggingUpdateStatus) { return "HeroAIDebuggingUpdateStatus"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIMapMechanicPinged) { return "HeroAIMapMechanicPinged"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIFollowerNearbyMapObjective) { return "HeroAIFollowerNearbyMapObjective"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAITalentLogic) { return "HeroAITalentLogic"; }
    return null;
}

string libCore_ge_StormDamagingEffectKind_Ident (int lp_val) {
         if (lp_val == libCore_ge_StormDamagingEffectKind_Any) { return "Any"; }
    else if (lp_val == libCore_ge_StormDamagingEffectKind_Physical) { return "Physical"; }
    else if (lp_val == libCore_ge_StormDamagingEffectKind_Spell) { return "Spell"; }
    else if (lp_val == libCore_ge_StormDamagingEffectKind_Pure) { return "Pure"; }
    return null;
}

string libCore_ge_StormDamagingEffectType_Ident (int lp_val) {
         if (lp_val == libCore_ge_StormDamagingEffectType_Any) { return "Any"; }
    else if (lp_val == libCore_ge_StormDamagingEffectType_BasicAttack) { return "BasicAttack"; }
    else if (lp_val == libCore_ge_StormDamagingEffectType_DoT) { return "DoT"; }
    else if (lp_val == libCore_ge_StormDamagingEffectType_Normal) { return "Normal"; }
    return null;
}

string libCore_ge_UserRecordValueType_Ident (int lp_val) {
         if (lp_val == libCore_ge_UserRecordValueType_None) { return "None"; }
    else if (lp_val == libCore_ge_UserRecordValueType_Integer) { return "Integer"; }
    else if (lp_val == libCore_ge_UserRecordValueType_Real) { return "Real"; }
    else if (lp_val == libCore_ge_UserRecordValueType_Boolean) { return "Boolean"; }
    else if (lp_val == libCore_ge_UserRecordValueType_PathDisplay) { return "PathDisplay"; }
    else if (lp_val == libCore_ge_UserRecordValueType_TalentIndex) { return "TalentIndex"; }
    else if (lp_val == libCore_ge_UserRecordValueType_TokenCounterInstanceIndex) { return "TokenCounterInstanceIndex"; }
    else if (lp_val == libCore_ge_UserRecordValueType_TokenCounterBehaviorIndex) { return "TokenCounterBehaviorIndex"; }
    else if (lp_val == libCore_ge_UserRecordValueType_DialogItem) { return "DialogItem"; }
    else if (lp_val == libCore_ge_UserRecordValueType_EffectSourceButtonIndex) { return "EffectSourceButtonIndex"; }
    return null;
}

// Functions
void libCore_gf_MAPTilesetActivate (int lp_tileset) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto5522C308_g;
    int auto7FD1EFB2_val;

    // Variable Initialization

    // Implementation
    libCore_gv_mAPTileset = lp_tileset;
    auto5522C308_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5522C308_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto7FD1EFB2_val = lp_tileset;
        if (auto7FD1EFB2_val == libCore_ge_MAPTileset_RavenCourt) {
            PlayerApplySkin(lv_itPlayer, "TilesetRavenCourtReplacement", true);
        }
        else {
        }
    }
}

int libCore_gf_CONFIGDefaultAnnouncerIndex () {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UserDataInstanceGetIndex("Announcer", libCore_gv_cONFIGDefaultAnnouncer);
}

int libCore_gf_AbilityIndexOfAbility (string lp_abilityLink) {
    // Variable Declarations
    int lv_itAbility;

    // Automatic Variable Declarations
    int auto5A00C893_ae;
    const int auto5A00C893_ai = 1;

    // Variable Initialization

    // Implementation
    auto5A00C893_ae = libCore_gv_abilityDataNumberOfAbilities;
    lv_itAbility = 1;
    for ( ; ( (auto5A00C893_ai >= 0 && lv_itAbility <= auto5A00C893_ae) || (auto5A00C893_ai < 0 && lv_itAbility >= auto5A00C893_ae) ) ; lv_itAbility += auto5A00C893_ai ) {
        if ((lp_abilityLink == libCore_gv_abilityData[lv_itAbility].lv_abilityLink)) {
            return lv_itAbility;
        }

    }
    return -1;
}

void libCore_gf_DataAnnouncerVOMapDataField (int lp_event, string lp_soundEntry, bool lp_playAtGameEnd) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gv_dataAnnouncerVOData[(lp_event)].lv_soundLink = (lp_soundEntry);
    libCore_gv_dataAnnouncerVOData[(lp_event)].lv_playAtGameEnd = lp_playAtGameEnd;
}

void libCore_gf_DataInitializeAnnouncerVOPack (string lp_instance) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks + 1);
    if ((lv_index > libCore_gv_dataAnnouncerVOMaxAnnouncerPackCount)) {
        TextExpressionSetToken("Param/Expression/lib_Core_C63F95DA", "A", IntToText(libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks));
        TextExpressionSetToken("Param/Expression/lib_Core_C63F95DA", "B", IntToText(libCore_gv_dataAnnouncerVOMaxAnnouncerPackCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_C63F95DA"), true);
        return ;
    }

    libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks = lv_index;
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_name = UserDataGetText("Announcer", lp_instance, "Name", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_description = UserDataGetText("Announcer", lp_instance, "Description", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_searchText = UserDataGetText("Announcer", lp_instance, "SearchText", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_iDPersonal = (lp_instance);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_event = UserDataGetUserInstance("Announcer", lp_instance, "Event", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_collectionCategory = UserDataGetUserInstance("Announcer", lp_instance, "Collection Category", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_skinEntry = UserDataGetGameLink("Announcer", lp_instance, "SkinEntry", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_previewHidden = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Announcer", lp_instance, "Preview Hidden", 1));
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_previewImage = UserDataGetImagePath("Announcer", lp_instance, "Preview Image", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_previewSound = UserDataGetGameLink("Announcer", lp_instance, "Preview Sound", 1);
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_releaseDate = StringToDateTime(UserDataGetString("Announcer", lp_instance, "ReleaseDate", 1));
    libCore_gv_dataAnnouncerVOPacks[lv_index].lv_isNew = libCore_gf_LoadoutElementIsNew(libCore_gv_dataAnnouncerVOPacks[lv_index].lv_releaseDate);
}

int libCore_gf_DataAnnouncersFindAnnouncerWithAnnouncerID (string lp_announcerID) {
    // Variable Declarations
    int lv_itAnnouncer;

    // Automatic Variable Declarations
    int autoF7238C9B_ae;
    const int autoF7238C9B_ai = 1;

    // Variable Initialization

    // Implementation
    autoF7238C9B_ae = libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks;
    lv_itAnnouncer = 1;
    for ( ; ( (autoF7238C9B_ai >= 0 && lv_itAnnouncer <= autoF7238C9B_ae) || (autoF7238C9B_ai < 0 && lv_itAnnouncer >= autoF7238C9B_ae) ) ; lv_itAnnouncer += autoF7238C9B_ai ) {
        if ((libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_iDPersonal == lp_announcerID)) {
            return lv_itAnnouncer;
        }

    }
    return -1;
}

text libCore_gf_AbilityTalentHotkeyTextExpanded (string lp_slot) {
    // Variable Declarations
    text lv_hotkeyText;

    // Automatic Variable Declarations
    string autoF6DF7057_val;

    // Variable Initialization

    // Implementation
    autoF6DF7057_val = lp_slot;
    if (autoF6DF7057_val == "Basic1") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Basic2") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Basic3") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Heroic") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
        TextExpressionSetToken("Param/Expression/lib_Core_7EFAD522", "Hotkey", lv_hotkeyText);
        lv_hotkeyText = TextExpressionAssemble("Param/Expression/lib_Core_7EFAD522");
    }
    else if (autoF6DF7057_val == "Trait") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
        TextExpressionSetToken("Param/Expression/lib_Core_BB91A195", "Hotkey", lv_hotkeyText);
        lv_hotkeyText = TextExpressionAssemble("Param/Expression/lib_Core_BB91A195");
    }
    else if (autoF6DF7057_val == "Mount") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Hearthstone") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Active") {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_986463C2");
    }
    else if (autoF6DF7057_val == "Passive") {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_07F7F697");
    }
    else {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_6333985E");
    }
    return lv_hotkeyText;
}

void libCore_gf_DataInitializeHero (string lp_instance) {
    // Variable Declarations
    string lv_heroInstance;
    string lv_string;
    string lv_stringPlayer;
    text lv_stringHeroInstance;
    string lv_questButton;
    string lv_playerAsString;
    int lv_heroIndex;
    int lv_itAlertnateHero;
    int lv_itTalentTier;
    int lv_itTalentColumn;
    int lv_talentIndex;
    int lv_itAbil;
    int lv_itHeroAbility;
    int lv_itPlayer;
    string lv_skinID;
    int lv_itUserDataSkin;
    int lv_itSkinVar;
    int lv_skinsCount;
    int lv_skinNumber;
    string lv_heroUnitType;
    int lv_mountInstanceIndex;
    int lv_itMount;
    int lv_itMountCategory;
    int lv_allowedMount;

    // Automatic Variable Declarations
    const int autoDA72E260_ae = libCore_gv_dataHeroesMaxAlternateHeroes;
    const int autoDA72E260_ai = 1;
    const int auto11FBA96B_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    const int auto11FBA96B_ai = 1;
    const int auto24DCCB09_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto24DCCB09_ai = 1;
    const int auto1F37094C_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto1F37094C_ai = 1;
    const int auto9674B3B0_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto9674B3B0_ai = 1;
    const int autoADC384A9_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoADC384A9_ai = 1;
    int autoDDD273CC_ae;
    const int autoDDD273CC_ai = 1;
    int auto9B9BF26F_ae;
    const int auto9B9BF26F_ai = 1;
    int auto3BA2C658_ae;
    const int auto3BA2C658_ai = 1;
    const int auto2E412424_ae = libCore_gv_data_MaxHeroAllowedUserDataSkinCount_C;
    const int auto2E412424_ai = 1;
    const int autoDF4DA52C_ae = libCore_gv_dataSkinsMaxSkinVariationCount;
    const int autoDF4DA52C_ai = 1;

    // Variable Initialization
    lv_string = "";
    lv_stringPlayer = "";
    lv_stringHeroInstance = StringToText((lp_instance));
    lv_playerAsString = "";
    lv_skinID = "";

    // Implementation
    lv_heroInstance = lp_instance;
    if ((lv_heroInstance == "TestHero")) {
        return ;
    }

    libCore_gv_dataHeroesNumberOfHeroes += 1;
    if ((libCore_gv_dataHeroesNumberOfHeroes > libCore_gv_dataHeroesMaxHeroCount)) {
        libCore_gv_dataHeroesNumberOfHeroes -= 1;
        TextExpressionSetToken("Param/Expression/lib_Core_848619D4", "A", IntToText(libCore_gv_dataHeroesNumberOfHeroes));
        TextExpressionSetToken("Param/Expression/lib_Core_848619D4", "B", IntToText(libCore_gv_dataHeroesMaxHeroCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_848619D4"), true);
        return ;
    }

    lv_heroIndex = libCore_gv_dataHeroesNumberOfHeroes;
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroID = (lv_heroInstance);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroInstance = lp_instance;
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect = UserDataGetGameLink("Hero", lp_instance, "HeroLevelScalingEffect", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_func_HeroIncrement = UserDataGetString("Hero", lp_instance, "Func_HeroIncrement", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_func_HeroDecrement = UserDataGetString("Hero", lp_instance, "Func_HeroDecrement", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType = UserDataGetGameLink("Hero", lp_instance, "HeroUnit", 1);
    lv_itAlertnateHero = 1;
    for ( ; ( (autoDA72E260_ai >= 0 && lv_itAlertnateHero <= autoDA72E260_ae) || (autoDA72E260_ai < 0 && lv_itAlertnateHero >= autoDA72E260_ae) ) ; lv_itAlertnateHero += autoDA72E260_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[lv_itAlertnateHero] = UserDataGetGameLink("Hero", lp_instance, "HeroUnit_Alternate", lv_itAlertnateHero);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[lv_itAlertnateHero] == "")) {
            continue;
        }

        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAlternateHeroUnitTypes += 1;
    }
    lv_itAbil = 1;
    for ( ; ( (auto11FBA96B_ai >= 0 && lv_itAbil <= auto11FBA96B_ae) || (auto11FBA96B_ai < 0 && lv_itAbil >= auto11FBA96B_ae) ) ; lv_itAbil += auto11FBA96B_ai ) {
        if ((libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Hero", lp_instance, "Abilities", lv_itAbil)) <= 0)) {
            break;
        }

        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil] = libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Hero", lp_instance, "Abilities", lv_itAbil));
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount += 1;
    }
    lv_heroUnitType = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType;
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType == null)) {
        TextExpressionSetToken("Param/Expression/lib_Core_D5ED4E40", "A", lv_stringHeroInstance);
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_D5ED4E40"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }
    else {
        if ((CatalogEntryIsValid(c_gameCatalogUnit, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_4E47FF53", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType)));
            TextExpressionSetToken("Param/Expression/lib_Core_4E47FF53", "B", lv_stringHeroInstance);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_4E47FF53"), true);
            libCore_gv_dataHeroesNumberOfHeroes -= 1;

        }

    }

    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType, "Name", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitHeroSelectScreenButton = UserDataGetImagePath("Hero", lp_instance, "Portrait_HeroSelectButton", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitHeroSelectScreenDraft = UserDataGetImagePath("Hero", lp_instance, "Portrait_HeroSelectDraft", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPartyFrame = UserDataGetImagePath("Hero", lp_instance, "Portrait_PartyFrame", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitDeathRecap = UserDataGetImagePath("Hero", lp_instance, "Portrait_DeathRecap", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_description = UserDataGetText("Hero", lp_instance, "Description", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_role = UserDataGetUserInstance("Hero", lp_instance, "Role", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe = UserDataGetUserInstance("Hero", lp_instance, "Universe", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon = UserDataGetImagePath("HeroUniverse", libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe, "Icon", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "IsFlyer", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "IsPaired", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMount = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "UsesMount", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier = UserDataGetInt("Hero", lp_instance, "TalentHeroicTier", 1);
    lv_itTalentTier = 1;
    for ( ; ( (auto24DCCB09_ai >= 0 && lv_itTalentTier <= auto24DCCB09_ae) || (auto24DCCB09_ai < 0 && lv_itTalentTier >= auto24DCCB09_ae) ) ; lv_itTalentTier += auto24DCCB09_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier] = UserDataGetInt("Hero", lp_instance, "TalentTierLevel", lv_itTalentTier);
    }
    lv_itTalentTier = 1;
    for ( ; ( (auto1F37094C_ai >= 0 && lv_itTalentTier <= auto1F37094C_ae) || (auto1F37094C_ai < 0 && lv_itTalentTier >= auto1F37094C_ae) ) ; lv_itTalentTier += auto1F37094C_ai ) {
        lv_itTalentColumn = 1;
        for ( ; ( (auto9674B3B0_ai >= 0 && lv_itTalentColumn <= auto9674B3B0_ae) || (auto9674B3B0_ai < 0 && lv_itTalentColumn >= auto9674B3B0_ae) ) ; lv_itTalentColumn += auto9674B3B0_ai ) {
            lv_talentIndex = libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Hero", lp_instance, "TalentTier" + IntToString(lv_itTalentTier), lv_itTalentColumn));
            if ((lv_talentIndex <= 0)) {
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTalentTier][lv_itTalentColumn] = 0;
            }
            else {
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTalentTier][lv_itTalentColumn] = lv_talentIndex;
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentCountPerTier[lv_itTalentTier] += 1;
            }
        }
    }

    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance = UserDataGetUserInstance("Hero", lp_instance, "QuestDataTokenCounterInstance", 1);
    if ((libCore_gf_UserDataInstanceisUsed(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance) == true)) {
        lv_questButton = UserDataGetGameLink("Hero", lp_instance, "QuestDataButton", 1);
        if ((lv_questButton != null) && (lv_questButton != "")) {
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_questButton, "Icon", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_questButton, "Name", c_playerAny));
            lv_itPlayer = 0;
            for ( ; ( (autoADC384A9_ai >= 0 && lv_itPlayer <= autoADC384A9_ae) || (autoADC384A9_ai < 0 && lv_itPlayer >= autoADC384A9_ae) ) ; lv_itPlayer += autoADC384A9_ai ) {
                lv_playerAsString = ("player=\"" + IntToString(lv_itPlayer) + "\"");
                lv_string = libCore_gf_ConvertTextToString(StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_questButton, "Tooltip", lv_itPlayer)));
                lv_string = StringReplaceWord(lv_string, "option=\"player\"", lv_playerAsString, c_stringReplaceAll, c_stringNoCase);
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTooltipText[lv_itPlayer] = StringToText(lv_string);
            }
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Core_B3607438", "A", StringToText((lv_heroInstance)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_B3607438"), true);
        }
    }

    if ((libCore_gf_UserDataInstanceisUsed(UserDataGetUserInstance("Hero", lv_heroInstance, "Default Mount", 1)) == false)) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_defaultMount = libCore_gf_DataMountsFindMountWithMountID((libCore_gv_cONFIGDefaultMount), 1);
    }
    else {
        lv_mountInstanceIndex = libNtve_gf_UserDataInstanceGetIndex("Mount", UserDataGetUserInstance("Hero", lv_heroInstance, "Default Mount", 1));
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_defaultMount = libCore_gf_DataMountsFindMountWithMountID((UserDataInstance("Mount", lv_mountInstanceIndex)), 1);
    }
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountScaling = UserDataGetFixed("Hero", lv_heroInstance, "Mount Scaling Override", 1);
    autoDDD273CC_ae = UserDataFieldValueCount("Hero", "Mount Category Array");
    lv_itMountCategory = 1;
    for ( ; ( (autoDDD273CC_ai >= 0 && lv_itMountCategory <= autoDDD273CC_ae) || (autoDDD273CC_ai < 0 && lv_itMountCategory >= autoDDD273CC_ae) ) ; lv_itMountCategory += autoDDD273CC_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory] = UserDataGetUserInstance("Hero", lv_heroInstance, "Mount Category Array", lv_itMountCategory);
        if ((libCore_gf_UserDataInstanceisUsed(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory]) == true)) {
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategoryCount += 1;
        }
        else {
            break;
        }
    }
    auto9B9BF26F_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (auto9B9BF26F_ai >= 0 && lv_itMount <= auto9B9BF26F_ae) || (auto9B9BF26F_ai < 0 && lv_itMount >= auto9B9BF26F_ae) ) ; lv_itMount += auto9B9BF26F_ai ) {
        auto3BA2C658_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategoryCount;
        lv_itMountCategory = 1;
        for ( ; ( (auto3BA2C658_ai >= 0 && lv_itMountCategory <= auto3BA2C658_ae) || (auto3BA2C658_ai < 0 && lv_itMountCategory >= auto3BA2C658_ae) ) ; lv_itMountCategory += auto3BA2C658_ai ) {
            if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory == libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory]) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory) == true)) {
                lv_allowedMount += 1;
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount += 1;
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_allowedMount] = lv_itMount;
            }

        }
    }
    lv_itUserDataSkin = 1;
    for ( ; ( (auto2E412424_ai >= 0 && lv_itUserDataSkin <= auto2E412424_ae) || (auto2E412424_ai < 0 && lv_itUserDataSkin >= auto2E412424_ae) ) ; lv_itUserDataSkin += auto2E412424_ai ) {
        lv_skinID = (UserDataGetUserInstance("Hero", lv_heroInstance, "Skins", lv_itUserDataSkin));
        if ((lv_skinID != null)) {
            lv_itSkinVar = 1;
            for ( ; ( (autoDF4DA52C_ai >= 0 && lv_itSkinVar <= autoDF4DA52C_ae) || (autoDF4DA52C_ai < 0 && lv_itSkinVar >= autoDF4DA52C_ae) ) ; lv_itSkinVar += autoDF4DA52C_ai ) {
                lv_skinNumber = libCore_gf_DataSkinsFindSkinWithSkinID(lv_skinID, lv_itSkinVar);
                if ((lv_skinNumber > 0)) {
                    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount += 1;
                    lv_skinsCount = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
                    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_skinsCount] = lv_skinNumber;
                }

            }
        }

    }
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1] = UserDataGetImagePath("Hero", lv_heroInstance, "PairedPortrait", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2] = UserDataGetImagePath("Hero", lv_heroInstance, "PairedPortrait", 2);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_namePaired[1] = UserDataGetText("Hero", lv_heroInstance, "PairedName", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_namePaired[2] = UserDataGetText("Hero", lv_heroInstance, "PairedName", 2);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_vOArrayUserData = UserDataGetUserInstance("Hero", lp_instance, "VOArray", 1);
}

text libCore_gf_HeroDataHeroRoleName (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("HeroRole", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_role, "Name", 1);
}

int libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero (int lp_heroIndex, string lp_abilitySlot, bool lp_paired) {
    // Variable Declarations
    int lv_abilityVariationsCount;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto773AC389_ae;
    const int auto773AC389_ai = 1;

    // Variable Initialization

    // Implementation
    auto773AC389_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto773AC389_ai >= 0 && lv_itAbility <= auto773AC389_ae) || (auto773AC389_ai < 0 && lv_itAbility >= auto773AC389_ae) ) ; lv_itAbility += auto773AC389_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_slot == lp_abilitySlot)) {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 0)) {
                if ((lp_paired == false) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired != "Paired2")) {
                    lv_abilityVariationsCount += 1;
                }
                else if ((lp_paired == true) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2")) {
                    lv_abilityVariationsCount += 1;
                }
            }
            else {
                return 1;
            }
        }

    }
    return lv_abilityVariationsCount;
}

int libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero (int lp_heroIndex, string lp_abilitySlot, int lp_variation, bool lp_paired) {
    // Variable Declarations
    int lv_abilityVariationsCount;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto109C47D3_ae;
    const int auto109C47D3_ai = 1;

    // Variable Initialization

    // Implementation
    auto109C47D3_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto109C47D3_ai >= 0 && lv_itAbility <= auto109C47D3_ae) || (auto109C47D3_ai < 0 && lv_itAbility >= auto109C47D3_ae) ) ; lv_itAbility += auto109C47D3_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_slot == lp_abilitySlot) && (libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber == lp_variation)) {
            if ((lp_paired == false) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired != "Paired2")) {
                return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
            }
            else if ((lp_paired == true) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2")) {
                return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
            }
        }

    }
    return -1;
}

bool libCore_gf_HeroDataHeroHasQuest (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_UserDataInstanceisUsed(libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_questDataTokenCounterInstance);
}

fixed libCore_gf_HeroDeathTime (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_deathTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libGame_gf_PlayerIsHeroPlayer(lp_player) == false) || (lp_level < 1) || (lp_level > libCore_gv_bALMaxLevel))) {
        TextExpressionSetToken("Param/Expression/lib_Core_22B78357", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Core_22B78357", "B", IntToText(lp_level));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_22B78357"), true);
        return 0.0;
    }

    if ((libCore_gv_bALDeathTimeOverride != 0.0)) {
        return libCore_gv_bALDeathTimeOverride;
    }

    lv_deathTime = (libCore_gv_bALDeathTimes[lp_level] * libCore_gv_bALDeathTimeScaler);
    return lv_deathTime;
}

int libCore_gf_HeroIndexForUnitType (string lp_heroUnitType) {
    // Variable Declarations
    int lv_itHeroIndex;
    int lv_itAlternateHeroIndex;

    // Automatic Variable Declarations
    int auto8F248380_ae;
    const int auto8F248380_ai = 1;
    int auto48E4178E_ae;
    const int auto48E4178E_ai = 1;

    // Variable Initialization

    // Implementation
    auto8F248380_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; ( (auto8F248380_ai >= 0 && lv_itHeroIndex <= auto8F248380_ae) || (auto8F248380_ai < 0 && lv_itHeroIndex >= auto8F248380_ae) ) ; lv_itHeroIndex += auto8F248380_ai ) {
        if ((lp_heroUnitType == libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroUnitType)) {
            return lv_itHeroIndex;
        }

        if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateHeroUnitTypes > 0)) {
            auto48E4178E_ae = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateHeroUnitTypes;
            lv_itAlternateHeroIndex = 1;
            for ( ; ( (auto48E4178E_ai >= 0 && lv_itAlternateHeroIndex <= auto48E4178E_ae) || (auto48E4178E_ai < 0 && lv_itAlternateHeroIndex >= auto48E4178E_ae) ) ; lv_itAlternateHeroIndex += auto48E4178E_ai ) {
                if ((lp_heroUnitType == libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroUnitTypeAlternate[lv_itAlternateHeroIndex])) {
                    return lv_itHeroIndex;
                }

            }
        }

    }
    return -1;
}

int libCore_gf_HeroIndexOfUnit (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_HeroIndexForUnitType(UnitGetType(lp_hero));
}

int libCore_gf_HeroIndexOfPlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroIndex;
}

string libCore_gf_HeroIDFromIndex (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataInstance("Hero", lp_heroIndex));
}

int libCore_gf_DataHeroesDefaultSkinIndexOfHero (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinArray[1];
}

int libCore_gf_DataHeroesDefaultMountIndexOfHero (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_defaultMount;
}

void libCore_gf_DataHeroVOMapDataField (int lp_event, string lp_arrayIndexName) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gv_dataHeroVODataFieldMap[(lp_event)] = ("VOArray[" + lp_arrayIndexName + "]");
}

void libCore_gf_DataHeroVOReloadHeroVODataForHero (int lp_heroIndex) {
    // Variable Declarations
    int lv_eventindex;
    int lv_lineindex;
    string lv_heroCatalogLink;
    string lv_dataField;
    int lv_targetHeroIndex;

    // Automatic Variable Declarations
    int auto1045E3B5_ae;
    const int auto1045E3B5_ai = 1;
    int autoE6FB506D_ae;
    const int autoE6FB506D_ai = 1;

    // Variable Initialization
    lv_dataField = "";

    // Implementation
    if ((lv_heroCatalogLink != null)) {
        auto1045E3B5_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray", c_playerAny);
        lv_lineindex = 1;
        for ( ; ( (auto1045E3B5_ai >= 0 && lv_lineindex <= auto1045E3B5_ae) || (auto1045E3B5_ai < 0 && lv_lineindex >= auto1045E3B5_ae) ) ; lv_lineindex += auto1045E3B5_ai ) {
            lv_targetHeroIndex = libCore_gf_HeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)));
            if ((lv_targetHeroIndex > 0)) {
                libCore_gv_dataHeroVO[lp_heroIndex].lv_specificHeroTakedownLines[lv_targetHeroIndex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex - 1)) + "].Sound", c_playerAny));
            }

        }
        autoE6FB506D_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray", c_playerAny);
        lv_lineindex = 1;
        for ( ; ( (autoE6FB506D_ai >= 0 && lv_lineindex <= autoE6FB506D_ae) || (autoE6FB506D_ai < 0 && lv_lineindex >= autoE6FB506D_ae) ) ; lv_lineindex += autoE6FB506D_ai ) {
            lv_targetHeroIndex = libCore_gf_HeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)));
            if ((lv_targetHeroIndex > 0)) {
                libCore_gv_dataHeroVO[lp_heroIndex].lv_specificHeroIntroQuestionLines[lv_targetHeroIndex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Question", c_playerAny));
            }

            lv_targetHeroIndex = libCore_gf_HeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)));
            if ((lv_targetHeroIndex > 0)) {
                libCore_gv_dataHeroVO[lp_heroIndex].lv_specificHeroIntroResponseLines[lv_targetHeroIndex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Response", c_playerAny));
            }

        }
    }

}

text libCore_gf_MapDataGetMapName (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_mapData[lp_mapIndex].lv_mapName;
}

int libCore_gf_MapDataGetMapMapPreset (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_mapData[lp_mapIndex].lv_map;
}

int libCore_gf_MapDataGetMapMutatorPreset (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_mapData[lp_mapIndex].lv_gameMutator;
}

int libCore_gf_MapDataGetMapModePreset (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_mapData[lp_mapIndex].lv_gameMode;
}

string libCore_gf_DataMinionUnitTypeFromPreset (int lp_type, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataMinionWaveComposition[lp_team].lv_minionUnitType[(lp_type)];
}

int libCore_gf_DataMinionTypeOfUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "MeleeMinionScaling") == true)) {
        return libCore_ge_MinionType_Footmen;
    }
    else if ((UnitHasBehavior2(lp_unit, "WizardMinionScaling") == true)) {
        return libCore_ge_MinionType_Wizard;
    }
    else if ((UnitHasBehavior2(lp_unit, "RangedMinionScaling") == true)) {
        return libCore_ge_MinionType_Ranged;
    }
    else if ((UnitHasBehavior2(lp_unit, "CatapultMinionScaling") == true)) {
        return libCore_ge_MinionType_Catapult;
    }
    return libCore_ge_MinionType_Null;
}

bool libCore_gf_DataUnitGroupHasMinionType (int lp_minionType, unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto6B7020CF_g;
    int auto6B7020CF_u;

    // Variable Initialization

    // Implementation
    auto6B7020CF_g = lp_unitGroup;
    auto6B7020CF_u = UnitGroupCount(auto6B7020CF_g, c_unitCountAll);
    for (;; auto6B7020CF_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto6B7020CF_g, auto6B7020CF_u);
        if (lv_itUnit == null) { break; }
        if ((libCore_gf_DataMinionTypeOfUnit(lv_itUnit) == lp_minionType)) {
            return true;
        }

    }
    return false;
}

void libCore_gf_DataInitializeMinion (string lp_unitType, int lp_minionType, int lp_minionCount, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_minionType == libCore_ge_MinionType_Null)) {
        return ;
    }

    libCore_gv_dataMinionWaveComposition[lp_team].lv_groupMinionCount[(lp_minionType)] = lp_minionCount;
    libCore_gv_dataMinionWaveComposition[lp_team].lv_groupMinionType[(lp_minionType)] = lp_minionType;
    libCore_gv_dataMinionWaveComposition[lp_team].lv_minionUnitType[(lp_minionType)] = lp_unitType;
}

string libCore_gf_DataMountsMountCollectionCategory (int lp_mountIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataMountsMountData[lp_mountIndex].lv_collectionCategory;
}

int libCore_gf_DataMountsFindMountWithMountID (string lp_moundID, int lp_variation) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoBA5916EC_ae;
    const int autoBA5916EC_ai = 1;

    // Variable Initialization

    // Implementation
    autoBA5916EC_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (autoBA5916EC_ai >= 0 && lv_itMount <= autoBA5916EC_ae) || (autoBA5916EC_ai < 0 && lv_itMount >= autoBA5916EC_ae) ) ; lv_itMount += autoBA5916EC_ai ) {
        if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountID == lp_moundID) && (libCore_gv_dataMountsMountData[lv_itMount].lv_mountVariation == lp_variation)) {
            return lv_itMount;
        }

    }
    return -1;
}

int libCore_gf_DataMountsFindMountWithMountIDPersonal (string lp_mountIDPersonal) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoACD4F94A_ae;
    const int autoACD4F94A_ai = 1;

    // Variable Initialization

    // Implementation
    autoACD4F94A_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (autoACD4F94A_ai >= 0 && lv_itMount <= autoACD4F94A_ae) || (autoACD4F94A_ai < 0 && lv_itMount >= autoACD4F94A_ae) ) ; lv_itMount += autoACD4F94A_ai ) {
        if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountIDPersonal == lp_mountIDPersonal)) {
            return lv_itMount;
        }

    }
    return -1;
}

void libCore_gf_DataMountsAddMountPlusVariationsToMountList (string lp_mountInstance) {
    // Variable Declarations
    bool lv_variationIsUsed;
    int lv_itMountVarIndex;
    int lv_itSearchWord;
    string lv_mountID;
    string lv_cutscenePath;
    string lv_releaseDateString;
    string lv_suffix;

    // Automatic Variable Declarations
    const int auto4ECC8E8B_ae = libCore_gv_dataMountsMaxMountVariationCount;
    const int auto4ECC8E8B_ai = 1;

    // Variable Initialization
    lv_mountID = "";
    lv_cutscenePath = "";
    lv_releaseDateString = "";
    lv_suffix = "";

    // Implementation
    lv_mountID = (lp_mountInstance);
    lv_itMountVarIndex = 1;
    for ( ; ( (auto4ECC8E8B_ai >= 0 && lv_itMountVarIndex <= auto4ECC8E8B_ae) || (auto4ECC8E8B_ai < 0 && lv_itMountVarIndex >= auto4ECC8E8B_ae) ) ; lv_itMountVarIndex += auto4ECC8E8B_ai ) {
        lv_variationIsUsed = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Mount", lp_mountInstance, "VariationIsUsed", lv_itMountVarIndex));
        if ((lv_variationIsUsed == false)) {
            continue;
        }

        libCore_gv_dataMountsMountCount += 1;
        if ((libCore_gv_dataMountsMountCount > libCore_gv_dataMountsMaxMountCount)) {
            libCore_gv_dataMountsMountCount -= 1;
            TextExpressionSetToken("Param/Expression/lib_Core_7A58DDAE", "A", IntToText(libCore_gv_dataMountsMaxMountCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7A58DDAE"), true);
            return ;
        }

        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountCategory = UserDataGetUserInstance("Mount", lp_mountInstance, "MountCategory", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_collectionCategory = UserDataGetUserInstance("Mount", lp_mountInstance, "CollectionCategory", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountID = lv_mountID;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelScale = UserDataGetFixed("Mount", lp_mountInstance, "Model Scale", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelWalkAnimMoveSpeed = UserDataGetFixed("Mount", lp_mountInstance, "WalkAnimMoveSpeed", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountPoseAnimGroup = UserDataGetString("Mount", lp_mountInstance, "HeroPoseAnimGroup", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountPoseAnimGroupStatus = UserDataGetString("Mount", lp_mountInstance, "HeroPoseAnimGroup", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModel = UserDataGetGameLink("Mount", lp_mountInstance, "Model", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_attachedMountModel = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Mount", lp_mountInstance, "IsAttached", 1), "True/Flase", 1) == 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_event = UserDataGetUserInstance("Mount", lp_mountInstance, "Event", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountIDPersonal = (lv_mountID + "Var" + IntToString(lv_itMountVarIndex));
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountVariation = lv_itMountVarIndex;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_creationActorMessageMacro = UserDataGetGameLink("Mount", lp_mountInstance, "VariationCreationActorMessage", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountUpFXActor = UserDataGetGameLink("Mount", lp_mountInstance, "FX Actor Mount Up", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_dismountFXActor = UserDataGetGameLink("Mount", lp_mountInstance, "FX Actor Dismount ", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountName = UserDataGetText("Mount", lp_mountInstance, "VariationName", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountInfo = UserDataGetText("Mount", lp_mountInstance, "VariationInfo", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountAdditionalSearchTextWord = UserDataGetText("Mount", lp_mountInstance, "VariationAdditionalSearchText", lv_itMountVarIndex);
        if ((libCore_gv_dataMountsMountData[lv_itMountVarIndex].lv_mountInfo == null) && (lv_itMountVarIndex > 1)) {
            libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountInfo = UserDataGetText("Mount", lp_mountInstance, "VariationInfo", 1);
        }

        lv_releaseDateString = UserDataGetString("Mount", lp_mountInstance, "VariationReleaseDate", lv_itMountVarIndex);
        if ((lv_itMountVarIndex == 1)) {
            libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_releaseDate = StringToDateTime(lv_releaseDateString);
        }
        else {
            if ((lv_releaseDateString != "")) {
                libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_releaseDate = StringToDateTime(lv_releaseDateString);
            }
            else {
                libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_releaseDate = StringToDateTime(UserDataGetString("Mount", lp_mountInstance, "VariationReleaseDate", 1));
            }
        }
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_isNew = libCore_gf_LoadoutElementIsNew(libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_releaseDate);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_isMorphMount = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Mount", lp_mountInstance, "IsMorphUnit", 1));
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_showInStore = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Mount", lp_mountInstance, "Show In Store", 1));
        if ((lv_itMountVarIndex == 1)) {
            lv_suffix = "";
        }
        else {
            lv_suffix = ("_Var" + IntToString((lv_itMountVarIndex - 1)));
        }
        lv_cutscenePath = ("Cutscenes\\Mounts\\" + lv_mountID + "\\" + "StoreMount" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_previewCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mounts\\" + lv_mountID + "\\" + "FrameMount" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_tileCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mounts\\" + lv_mountID + "\\" + "MiniPortrait" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_miniPortraitCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mounts\\" + lv_mountID + "\\" + "HeroSelect" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_heroSelectCutsceneFile = lv_cutscenePath;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMountSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Mounted", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vODismountSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Dismounted", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOLoopingSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Looping", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMovingSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOStationarySound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Stationary", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMoveStartSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Start Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMoveStopSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Stop Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOTurboSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Turbo", 1);
    }
}

void libCore_gf_RegisterSegregationTrigger (int lp_type, trigger lp_trigger) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto6B7015E3_ae = libCore_gv_segregationTriggerCountPerType;
    const int auto6B7015E3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto6B7015E3_ai >= 0 && lv_index <= auto6B7015E3_ae) || (auto6B7015E3_ai < 0 && lv_index >= auto6B7015E3_ae) ) ; lv_index += auto6B7015E3_ai ) {
        if ((libCore_gv_segregationTriggers[lp_type][lv_index] == lp_trigger)) {
            return ;
        }

        if ((libCore_gv_segregationTriggers[lp_type][lv_index] == null)) {
            libCore_gv_segregationTriggers[lp_type][lv_index] = lp_trigger;
            return ;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Core_99250FCE", "A", StringToText(libCore_ge_SegregationTriggerTypes_Ident(lp_type)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_99250FCE"), true);
}

void libCore_gf_CallRegisteredSegregationTriggers (int lp_type) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto518E6751_ae = libCore_gv_segregationTriggerCountPerType;
    const int auto518E6751_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto518E6751_ai >= 0 && lv_index <= auto518E6751_ae) || (auto518E6751_ai < 0 && lv_index >= auto518E6751_ae) ) ; lv_index += auto518E6751_ai ) {
        if ((libCore_gv_segregationTriggers[lp_type][lv_index] != null)) {
            TriggerExecute(libCore_gv_segregationTriggers[lp_type][lv_index], true, true);
        }
        else {
            break;
        }
    }
    libCore_gv_segTriggerPlayer = 0;
    libCore_gv_segTriggerUnit = null;
    libCore_gv_segTriggerPoint = null;
    libCore_gv_segTriggerIndex = 0;
}

int libCore_gf_DataSkinsFindSkinWithSkinID (string lp_skinID, int lp_variation) {
    // Variable Declarations
    int lv_itSkin;

    // Automatic Variable Declarations
    int auto71C6BD9A_ae;
    const int auto71C6BD9A_ai = 1;

    // Variable Initialization

    // Implementation
    auto71C6BD9A_ae = libCore_gv_dataSkinsSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto71C6BD9A_ai >= 0 && lv_itSkin <= auto71C6BD9A_ae) || (auto71C6BD9A_ai < 0 && lv_itSkin >= auto71C6BD9A_ae) ) ; lv_itSkin += auto71C6BD9A_ai ) {
        if ((libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinID == lp_skinID) && (libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinVariationNumber == lp_variation)) {
            return lv_itSkin;
        }

    }
    return -1;
}

int libCore_gf_DataSkinsFindSkinWithSkinIDPersonal (string lp_skinIDPersonal) {
    // Variable Declarations
    int lv_itSkin;

    // Automatic Variable Declarations
    int auto77A0EBDC_ae;
    const int auto77A0EBDC_ai = 1;

    // Variable Initialization

    // Implementation
    auto77A0EBDC_ae = libCore_gv_dataSkinsSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto77A0EBDC_ai >= 0 && lv_itSkin <= auto77A0EBDC_ae) || (auto77A0EBDC_ai < 0 && lv_itSkin >= auto77A0EBDC_ae) ) ; lv_itSkin += auto77A0EBDC_ai ) {
        if ((libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinIDPersonal == lp_skinIDPersonal)) {
            return lv_itSkin;
        }

    }
    return -1;
}

void libCore_gf_DataSkinsAddSkinPlusVariationsToSkinList (string lp_skinInstance) {
    // Variable Declarations
    string lv_event;
    string lv_additionalMountCategory;
    string lv_mountID;
    int lv_defaultMountIndex;
    string[libCore_gv_dataSkinsMaxFeatureCount + 1] lv_featureArray;
    int lv_featureArrayCount;
    int lv_itFeature;
    string lv_vODefinition;
    bool lv_variationIsUsed;
    int lv_itSkinVarIndex;
    int lv_itSearchWord;
    string lv_skinID;
    string lv_cutscenePath;
    string lv_releaseDateString;
    string lv_suffix;

    // Automatic Variable Declarations
    const int auto1FC50C9D_ae = libCore_gv_dataSkinsMaxFeatureCount;
    const int auto1FC50C9D_ai = 1;
    const int auto7D73E50D_ae = libCore_gv_dataSkinsMaxSkinVariationCount;
    const int auto7D73E50D_ai = 1;
    int auto59AC582F_ae;
    const int auto59AC582F_ai = 1;

    // Variable Initialization
    lv_mountID = "";
    lv_vODefinition = "";
    lv_skinID = "";
    lv_cutscenePath = "";
    lv_releaseDateString = "";
    lv_suffix = "";

    // Implementation
    lv_skinID = (lp_skinInstance);
    lv_event = UserDataGetUserInstance("Skin", lp_skinInstance, "Event", 1);
    lv_additionalMountCategory = UserDataGetUserInstance("Skin", lp_skinInstance, "AdditionalMountCategoryArray", 1);
    lv_mountID = (UserDataInstance("Mount", UserDataGetInt("Skin", lp_skinInstance, "DefaultMount", 1)));
    lv_defaultMountIndex = libCore_gf_DataMountsFindMountWithMountID(lv_mountID, 1);
    lv_vODefinition = UserDataGetString("Skin", lp_skinInstance, "VODefinition", 1);
    lv_itFeature = 1;
    for ( ; ( (auto1FC50C9D_ai >= 0 && lv_itFeature <= auto1FC50C9D_ae) || (auto1FC50C9D_ai < 0 && lv_itFeature >= auto1FC50C9D_ae) ) ; lv_itFeature += auto1FC50C9D_ai ) {
        lv_featureArray[lv_itFeature] = UserDataGetUserInstance("Skin", lp_skinInstance, "FeatureArray", lv_itFeature);
        if ((lv_featureArray[lv_itFeature] != null) && (lv_featureArray[lv_itFeature] != "[Default]")) {
            lv_featureArrayCount += 1;
        }

    }
    lv_itSkinVarIndex = 1;
    for ( ; ( (auto7D73E50D_ai >= 0 && lv_itSkinVarIndex <= auto7D73E50D_ae) || (auto7D73E50D_ai < 0 && lv_itSkinVarIndex >= auto7D73E50D_ae) ) ; lv_itSkinVarIndex += auto7D73E50D_ai ) {
        lv_variationIsUsed = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Skin", lp_skinInstance, "VariationIsUsed", lv_itSkinVarIndex), "True/Flase", 1) == 1);
        if ((lv_variationIsUsed == false)) {
            continue;
        }

        libCore_gv_dataSkinsSkinCount += 1;
        if ((libCore_gv_dataSkinsSkinCount > libCore_gv_dataSkinsMaxSkinCount)) {
            libCore_gv_dataSkinsSkinCount -= 1;
            TextExpressionSetToken("Param/Expression/lib_Core_7D826725", "A", IntToText(libCore_gv_dataSkinsMaxSkinCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7D826725"), true);
            return ;
        }

        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_event = lv_event;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_mountCategory = lv_additionalMountCategory;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_defaultMount = lv_defaultMountIndex;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinID = lv_skinID;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_vODefinition = lv_vODefinition;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_name = UserDataGetText("Skin", lp_skinInstance, "VariationName", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinVariationNumber = lv_itSkinVarIndex;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinLink = UserDataGetGameLink("Skin", lp_skinInstance, "VariationSkinLink", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinIDPersonal = (lv_skinID + "Var" + IntToString(lv_itSkinVarIndex));
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_upgradeLink = UserDataGetGameLink("Skin", lp_skinInstance, "VariationUpgradeLink", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_additionalSearchText = UserDataGetText("Skin", lp_skinInstance, "VariationAdditionalSearchText", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info = UserDataGetText("Skin", lp_skinInstance, "VariationInfo", lv_itSkinVarIndex);
        if ((libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info == null) && (lv_itSkinVarIndex > 1)) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info = UserDataGetText("Skin", lp_skinInstance, "VariationInfo", 1);
        }

        lv_releaseDateString = UserDataGetString("Skin", lp_skinInstance, "VariationReleaseDate", lv_itSkinVarIndex);
        if ((lv_itSkinVarIndex == 1)) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_releaseDate = StringToDateTime(lv_releaseDateString);
        }
        else {
            if ((lv_releaseDateString != "")) {
                libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_releaseDate = StringToDateTime(lv_releaseDateString);
            }
            else {
                libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_releaseDate = StringToDateTime(UserDataGetString("Skin", lp_skinInstance, "VariationReleaseDate", 1));
            }
        }
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_isNew = libCore_gf_LoadoutElementIsNew(libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_releaseDate);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_featureArrayCount = lv_featureArrayCount;
        auto59AC582F_ae = lv_featureArrayCount;
        lv_itFeature = 1;
        for ( ; ( (auto59AC582F_ai >= 0 && lv_itFeature <= auto59AC582F_ae) || (auto59AC582F_ai < 0 && lv_itFeature >= auto59AC582F_ae) ) ; lv_itFeature += auto59AC582F_ai ) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_featureArray[lv_itFeature] = lv_featureArray[lv_itFeature];
        }
        if ((lv_itSkinVarIndex == 1)) {
            lv_suffix = "";
        }
        else {
            lv_suffix = ("_Var" + IntToString((lv_itSkinVarIndex - 1)));
        }
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "HeroSelect" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_heroSelectCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "ScoreScreen" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_scoreScreenCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "MiniPortrait" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_miniPortraitCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "Store" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_previewCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "Draft" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_draftCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "DraftPick" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_draftPickCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "EndOfMatch_LineUp" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_endOfMatchCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "Frame" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_tileCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Heroes\\" + lv_skinID + "\\" + "MiniPortrait" + lv_suffix + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_lootChestRewardCutscene = lv_cutscenePath;
    }
}

void libCore_gf_DataInitializeTalent (string lp_talentInstance) {
    // Variable Declarations
    string lv_talentID;
    string lv_buttonID;
    int lv_talentIndex;
    int lv_behaviorCount;
    bool lv_questFound;
    int lv_itBehavior;
    int lv_itPlayer;
    int lv_itCatalogLinkReplacement;
    int lv_itItem;
    string lv_itAbilButtonLink;
    string lv_behaviorLink;
    string lv_abilitySlot;
    string lv_string;
    string lv_playerAsString;
    string lv_catalogLinkReplacementType;

    // Automatic Variable Declarations
    const int auto6F70F207_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto6F70F207_ai = 1;
    const int auto11EE9737_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    const int auto11EE9737_ai = 1;
    const int autoA68E4212_ae = libCore_gv_talents_MaxItemEntryCount_C;
    const int autoA68E4212_ai = 1;
    const int autoA24A0608_ae = libCore_gv_talents_CatalogLinkReplacementMax_C;
    const int autoA24A0608_ai = 1;
    string autoBFD34C05_val;

    // Variable Initialization
    lv_talentID = "";
    lv_buttonID = "";
    lv_string = "";
    lv_playerAsString = "";

    // Implementation
    libCore_gv_talents_TalentEntryCount += 1;
    if ((libCore_gv_talents_TalentEntryCount > libCore_gv_talents_MaxTalentEntryCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_296F05A7"), true);
        return ;
    }

    lv_talentIndex = libCore_gv_talents_TalentEntryCount;
    libCore_gv_talentData[lv_talentIndex].lv_talentLink = UserDataGetGameLink("Talent", lp_talentInstance, "TalentLink", 1);
    lv_talentID = (libCore_gv_talentData[lv_talentIndex].lv_talentLink);
    lv_buttonID = (UserDataGetGameLink("Talent", lp_talentInstance, "TalentButton", 1));
    if ((libCore_gv_talentData[lv_talentIndex].lv_talentLink == "")) {
        TextExpressionSetToken("Param/Expression/lib_Core_72BC087A", "A", StringToText((lp_talentInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_72BC087A"), true);
        libCore_gv_talentData[lv_talentIndex].lv_talentLink = null;

    }
    else if ((CatalogEntryIsValid(c_gameCatalogTalent, libCore_gv_talentData[lv_talentIndex].lv_talentLink) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_758DF11F", "A", StringToText((lp_talentInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_758DF11F"), true);
        libCore_gv_talentData[lv_talentIndex].lv_talentLink = null;

    }
    if ((lv_buttonID == "")) {
        TextExpressionSetToken("Param/Expression/lib_Core_563B0940", "A", StringToText((lp_talentInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_563B0940"), true);

    }
    else if ((CatalogEntryIsValid(c_gameCatalogButton, lv_buttonID) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_EF5126B5", "A", StringToText((lp_talentInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_EF5126B5"), true);

    }

    libCore_gv_talentData[lv_talentIndex].lv_talentInstance = lp_talentInstance;
    libCore_gv_talentData[lv_talentIndex].lv_buttonEntry = (lv_buttonID);
    libCore_gv_talentData[lv_talentIndex].lv_buttonIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
    libCore_gv_talentData[lv_talentIndex].lv_buttonName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Name", c_playerAny));
    libCore_gv_talentData[lv_talentIndex].lv_buttonSimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "SimpleDisplayText", c_playerAny));
    libCore_gv_talentData[lv_talentIndex].lv_talentType = UserDataGetUserInstance("Talent", lp_talentInstance, "TalentType", 1);
    libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex = MaxI(0, libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Talent", lp_talentInstance, "PrerequisiteTalent", 1)));
    lv_itPlayer = 0;
    for ( ; ( (auto6F70F207_ai >= 0 && lv_itPlayer <= auto6F70F207_ae) || (auto6F70F207_ai < 0 && lv_itPlayer >= auto6F70F207_ae) ) ; lv_itPlayer += auto6F70F207_ai ) {
        lv_playerAsString = ("player=\"" + IntToString(lv_itPlayer) + "\"");
        lv_string = libCore_gf_ConvertTextToString(StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Tooltip", lv_itPlayer)));
        lv_string = StringReplaceWord(lv_string, "option=\"player\"", lv_playerAsString, c_stringReplaceAll, c_stringNoCase);
        libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lv_itPlayer] = StringToText(lv_string);
    }
    if ((CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "TooltipCooldownOverrideText", c_playerAny) != "")) {
        libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "TooltipCooldownOverrideText", c_playerAny));
    }
    else {
        libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText = null;
    }
    libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance = UserDataGetUserInstance("Talent", lp_talentInstance, "QuestDataTokenCounterInstance", 1);
    lv_itBehavior = 1;
    for ( ; ( (auto11EE9737_ai >= 0 && lv_itBehavior <= auto11EE9737_ae) || (auto11EE9737_ai < 0 && lv_itBehavior >= auto11EE9737_ae) ) ; lv_itBehavior += auto11EE9737_ai ) {
        if ((UserDataGetGameLink("Talent", lp_talentInstance, "TalentBehavior", lv_itBehavior) != null)) {
            libCore_gv_talentData[lv_talentIndex].lv_behavior[lv_itBehavior] = UserDataGetGameLink("Talent", lp_talentInstance, "TalentBehavior", lv_itBehavior);
            if ((libCore_gf_UserDataInstanceisUsed(libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance) == true) && (UserDataGetGameLink("TokenCounter", libCore_gv_talentData[lv_talentIndex].lv_questDataTokenCounterInstance, "BehaviorTokenCounter", 1) == libCore_gv_talentData[lv_talentIndex].lv_behavior[lv_itBehavior])) {
                lv_questFound = true;
            }

        }

    }
    lv_itItem = 1;
    for ( ; ( (autoA68E4212_ai >= 0 && lv_itItem <= autoA68E4212_ae) || (autoA68E4212_ai < 0 && lv_itItem >= autoA68E4212_ae) ) ; lv_itItem += autoA68E4212_ai ) {
        libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem] = UserDataGetGameLink("Talent", lp_talentInstance, "TalentItem", lv_itItem);
        if ((libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem] == "")) {
            libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem] = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogUnit, libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem]) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_9BE49188", "A", StringToText((lp_talentInstance)));
                TextExpressionSetToken("Param/Expression/lib_Core_9BE49188", "B", StringToText(CatalogFieldValueGet(c_gameCatalogUnit, libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem], "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_9BE49188"), true);
                libCore_gv_talentData[lv_talentIndex].lv_item[lv_itItem] = null;
            }

        }
    }
    libCore_gv_talentData[lv_talentIndex].lv_effectModification = UserDataGetGameLink("Talent", lp_talentInstance, "TalentEffectModification", 1);
    if ((libCore_gv_talentData[lv_talentIndex].lv_effectModification == "")) {
        libCore_gv_talentData[lv_talentIndex].lv_effectModification = null;
    }
    else {
        if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_talentData[lv_talentIndex].lv_effectModification) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_A2FCB179", "A", StringToText((lp_talentInstance)));
            TextExpressionSetToken("Param/Expression/lib_Core_A2FCB179", "B", StringToText(CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lv_talentIndex].lv_effectModification, "Name", c_playerAny)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A2FCB179"), true);
            libCore_gv_talentData[lv_talentIndex].lv_effectModification = null;
        }
        else {
            if ((CatalogEntryScope(c_gameCatalogEffect, libCore_gv_talentData[lv_talentIndex].lv_effectModification) != "CEffectModifyPlayer")) {
                TextExpressionSetToken("Param/Expression/lib_Core_E2B69991", "A", StringToText((lp_talentInstance)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E2B69991"), true);
            }

        }
    }
    lv_itCatalogLinkReplacement = 1;
    for ( ; ( (autoA24A0608_ai >= 0 && lv_itCatalogLinkReplacement <= autoA24A0608_ae) || (autoA24A0608_ai < 0 && lv_itCatalogLinkReplacement >= autoA24A0608_ae) ) ; lv_itCatalogLinkReplacement += autoA24A0608_ai ) {
        lv_catalogLinkReplacementType = UserDataGetUserInstance("Talent", lp_talentInstance, "CatalogLinkReplacement_Type", lv_itCatalogLinkReplacement);
        if ((libCore_gf_UserDataDefaultInstance(lv_catalogLinkReplacementType) == false)) {
            libCore_gv_talentData[lv_talentIndex].lv_catalogLinkReplacementUsed[lv_itCatalogLinkReplacement] = true;
            libCore_gv_talentData[lv_talentIndex].lv_catalogLinkReplacementType[lv_itCatalogLinkReplacement] = libCore_gf_TalentDataCatalogReplacementType(lv_catalogLinkReplacementType);
            libCore_gv_talentData[lv_talentIndex].lv_catalogLinkReplacementFrom[lv_itCatalogLinkReplacement] = UserDataGetString("Talent", lp_talentInstance, "CatalogLinkReplacement_From", lv_itCatalogLinkReplacement);
            libCore_gv_talentData[lv_talentIndex].lv_catalogLinkReplacementTo[lv_itCatalogLinkReplacement] = UserDataGetString("Talent", lp_talentInstance, "CatalogLinkReplacement_To", lv_itCatalogLinkReplacement);
        }

    }
    autoBFD34C05_val = libCore_gv_talentData[lv_talentIndex].lv_talentType;
    if (autoBFD34C05_val == "Active") {
        libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded("Active");
    }
    else if (autoBFD34C05_val == "Passive") {
        libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded("Passive");
    }
    else {
        lv_abilitySlot = UserDataGetUserInstance("Ability", UserDataGetUserInstance("Talent", lp_talentInstance, "AbilityHotkey", 1), "Slot", 1);
        libCore_gv_talentData[lv_talentIndex].lv_abilityIndex = libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Talent", lp_talentInstance, "AbilityHotkey", 1));
        libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded(lv_abilitySlot);
    }
}

bool libCore_gf_TalentDataTalentHasQuest (int lp_talentIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_UserDataInstanceisUsed(libCore_gv_talentData[lp_talentIndex].lv_questDataTokenCounterInstance);
}

int libCore_gf_TalentDataCatalogReplacementType (string lp_userDataCatalogType) {
    // Automatic Variable Declarations
    string auto2E976E8C_val;

    // Implementation
    auto2E976E8C_val = lp_userDataCatalogType;
    if (auto2E976E8C_val == "Actor") {
        return c_gameCatalogActor;
    }
    else if (auto2E976E8C_val == "Button") {
        return c_gameCatalogButton;
    }
    else if (auto2E976E8C_val == "Model") {
        return c_gameCatalogModel;
    }
    else if (auto2E976E8C_val == "Sound") {
        return c_gameCatalogSound;
    }
    else {
    }
    return c_gameCatalogAbil;
}

int libCore_gf_TokenTokenCounterIndex (string lp_behavior) {
    // Variable Declarations

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return libCore_gf_ValueFromUserRecordTokenCounterBehaviorIndex((lp_behavior));
}

string libCore_gf_TokenGetBehavior (string lp_tokenCounterIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libCore_gf_ValueFromUserRecordTokenCounterInstanceIndex((lp_tokenCounterIndex));
    if ((lv_index > 0)) {
        return libCore_gv_tokenCounterData[lv_index].lv_behaviorTokenCounter;
    }

    return null;
}

void libCore_gf_TokenInitializeToken (string lp_tokenInstance) {
    // Variable Declarations
    int lv_itEvent;
    string lv_dummyEffect;

    // Automatic Variable Declarations
    const int autoE101A538_ae = libCore_gv_tokenConditionalEventsMaxCount;
    const int autoE101A538_ai = 1;
    const int auto5CA266C8_ae = libCore_gv_tokenDeltaEventsMaxCount;
    const int auto5CA266C8_ai = 1;

    // Variable Initialization

    // Implementation
    libCore_gv_tokenCurrentCount += 1;
    if ((libCore_gv_tokenCurrentCount > libCore_gv_tokenMaxCount)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_E4AC55D9"), true);
        libCore_gv_tokenCurrentCount = libCore_gv_tokenMaxCount;
        return ;
    }

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_behaviorTokenCounter = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "BehaviorTokenCounter", 1);
    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_behaviorTokenCounter == "")) {
        TextExpressionSetToken("Param/Expression/lib_Core_AF3173D5", "A", StringToText((lp_tokenInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_AF3173D5"), true);
        libCore_gv_tokenCurrentCount -= 1;
        libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_behaviorTokenCounter = null;
        return ;
    }

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_type = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Type", 1);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_isQuest = libCore_gf_UserDataBoolean(UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "IsQuest", 1));
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_scoreValueLink = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "ScoreValueLink", 1);
    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_scoreValueLink == "")) {
        libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_scoreValueLink = null;
    }

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_targetAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_behaviorTokenCounter, "DamageResponse.Cost.Charge.CountMax", c_playerAny);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_maxAmount = UserDataGetFixed("TokenCounter", lp_tokenInstance, "Max", 1);
    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_targetAmount == 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_Core_481CB7C6", "A", StringToText((lp_tokenInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_481CB7C6"), true);
        libCore_gv_tokenCurrentCount -= 1;
        return ;
    }

    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_targetAmount > libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_maxAmount)) {
        TextExpressionSetToken("Param/Expression/lib_Core_6E1685CA", "A", StringToText((lp_tokenInstance)));
        TextExpressionSetToken("Param/Expression/lib_Core_6E1685CA", "B", FixedToText(libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_targetAmount, c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_Core_6E1685CA", "C", FixedToText(libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_maxAmount, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_6E1685CA"), true);
        libCore_gv_tokenCurrentCount -= 1;
        return ;
    }

    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_targetAmount > 65535.0)) {
        TextExpressionSetToken("Param/Expression/lib_Core_5C655B74", "A", StringToText((lp_tokenInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_5C655B74"), true);
        libCore_gv_tokenCurrentCount -= 1;
        return ;
    }

    if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_maxAmount > 65535.0)) {
        TextExpressionSetToken("Param/Expression/lib_Core_8FF150CF", "A", StringToText((lp_tokenInstance)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_8FF150CF"), true);
        libCore_gv_tokenCurrentCount -= 1;
        return ;
    }

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_optionResetAtMax = libCore_gf_UserDataBoolean(UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Option_ResetAtMax", 1));
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_optionSuppressQuestCompleteCheat = libCore_gf_UserDataBoolean(UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Option_SuppressQuestCompleteCheat", 1));
    libCore_gf_SaveUserRecordValueTokenCounterInstanceIndex((lp_tokenInstance), libCore_gv_tokenCurrentCount);
    libCore_gf_SaveUserRecordValueTokenCounterBehaviorIndex((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_behaviorTokenCounter), libCore_gv_tokenCurrentCount);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsIncreaseEffect = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "Events_Increase_Effect", 1);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsIncreaseQuestEvent = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Events_Increase_QuestEvent", 1);

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsDecreaseEffect = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "Events_Decrease_Effect", 1);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsDecreaseQuestEvent = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Events_Decrease_QuestEvent", 1);

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsAtMaxEffect = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "Events_AtMax_Effect", 1);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsAtMaxQuestEvent = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Events_AtMax_QuestEvent", 1);

    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsAtMinEffect = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "Events_AtMin_Effect", 1);
    libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_eventsAtMinQuestEvent = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "Events_AtMin_QuestEvent", 1);

    lv_itEvent = 1;
    for ( ; ( (autoE101A538_ai >= 0 && lv_itEvent <= autoE101A538_ae) || (autoE101A538_ai < 0 && lv_itEvent >= autoE101A538_ae) ) ; lv_itEvent += autoE101A538_ai ) {
        if ((libCore_gf_UserDataBoolean(UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "ConditionalEvents_IsUsed", lv_itEvent)) == true)) {
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsCount += 1;
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsCompareValue[lv_itEvent] = UserDataGetInt("TokenCounter", lp_tokenInstance, "ConditionalEvents_CompareValue", lv_itEvent);
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsEffect[lv_itEvent] = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "ConditionalEvents_Effect", lv_itEvent);
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsQuestEvent[lv_itEvent] = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "ConditionalEvents_QuestEvent", lv_itEvent);
            if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsCompareValue[lv_itEvent] <= 0)) {
                libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_conditionalEventsCompareValue[lv_itEvent] = 0;
                TextExpressionSetToken("Param/Expression/lib_Core_D409EEC1", "A", StringToText((lp_tokenInstance)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_D409EEC1"), true);
            }

        }
        else {
            break;
        }
    }

    lv_itEvent = 1;
    for ( ; ( (auto5CA266C8_ai >= 0 && lv_itEvent <= auto5CA266C8_ae) || (auto5CA266C8_ai < 0 && lv_itEvent >= auto5CA266C8_ae) ) ; lv_itEvent += auto5CA266C8_ai ) {
        if ((libCore_gf_UserDataBoolean(UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "DeltaEvents_IsUsed", lv_itEvent)) == true)) {
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_deltaEventsCount += 1;
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_deltaEventsEffect[lv_itEvent] = UserDataGetGameLink("TokenCounter", lp_tokenInstance, "DeltaEvents_Effect", lv_itEvent);
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_deltaEventsDelta[lv_itEvent] = UserDataGetInt("TokenCounter", lp_tokenInstance, "DeltaEvents_Delta", lv_itEvent);
            libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_deltaEventsQuestEvent[lv_itEvent] = UserDataGetUserInstance("TokenCounter", lp_tokenInstance, "DeltaEvents_QuestEvent", lv_itEvent);
            if ((libCore_gv_tokenCounterData[libCore_gv_tokenCurrentCount].lv_deltaEventsDelta[lv_itEvent] == 0)) {
                TextExpressionSetToken("Param/Expression/lib_Core_19C03852", "A", StringToText((lp_tokenInstance)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_19C03852"), true);
            }

        }
        else {
            break;
        }
    }

}

void libCore_gf_DataUnitHistoryAddHistoryData (string lp_entry, int lp_type) {
    // Variable Declarations
    int lv_entryCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_type == libCore_ge_DataUnitHistoryDataType_Ability)) {
        libCore_gv_dataUnitHistoryDataAbilitiesCurrentCountInEDITOR += 1;
        lv_entryCount = libCore_gv_dataUnitHistoryDataCurrentEntryCountAbilities;
        lv_entryCount += 1;
        if ((lv_entryCount <= libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
            libCore_gv_dataUnitHistoryDataCurrentEntryCountAbilities = lv_entryCount;
        }

    }
    else if ((lp_type == libCore_ge_DataUnitHistoryDataType_Behavior)) {
        libCore_gv_dataUnitHistoryDataBehaviorsCurrentCountInEDITOR += 1;
        lv_entryCount = libCore_gv_dataUnitHistoryDataCurrentEntryCountBehaviors;
        lv_entryCount += 1;
        if ((lv_entryCount <= libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
            libCore_gv_dataUnitHistoryDataCurrentEntryCountBehaviors = lv_entryCount;
        }

    }
    else if ((lp_type == libCore_ge_DataUnitHistoryDataType_Button)) {
        libCore_gv_dataUnitHistoryDataButtonsCurrentCountInEDITOR += 1;
        lv_entryCount = libCore_gv_dataUnitHistoryDataCurrentEntryCountButtons;
        lv_entryCount += 1;
        if ((lv_entryCount <= libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
            libCore_gv_dataUnitHistoryDataCurrentEntryCountButtons = lv_entryCount;
        }

    }
    else if ((lp_type == libCore_ge_DataUnitHistoryDataType_Effect)) {
        libCore_gv_dataUnitHistoryDataEffectsCurrentCountInEDITOR += 1;
        lv_entryCount = libCore_gv_dataUnitHistoryDataCurrentEntryCountEffects;
        lv_entryCount += 1;
        if ((lv_entryCount <= libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
            libCore_gv_dataUnitHistoryDataCurrentEntryCountEffects = lv_entryCount;
        }

    }
    else if ((lp_type == libCore_ge_DataUnitHistoryDataType_Unit)) {
        libCore_gv_dataUnitHistoryDataUnitsCurrentCountInEDITOR += 1;
        lv_entryCount = libCore_gv_dataUnitHistoryDataCurrentEntryCountUnits;
        lv_entryCount += 1;
        if ((lv_entryCount <= libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
            libCore_gv_dataUnitHistoryDataCurrentEntryCountUnits = lv_entryCount;
        }

    }
    if ((lv_entryCount > libCore_gv_dataUnitHistoryDataMaxEntryCount)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_BCAABAD1"), true);
        return ;
    }

    libCore_gv_dataUnitHistoryData[(lp_type)].lv_dataUnitHistoryData[lv_entryCount] = (lp_entry);
    libGame_gf_UnitStatsStoreUserDataToUnit(libCore_gv_mAPUserRecordUnit, ("Type" + IntToString((lp_type)) + "_Entry" + (lp_entry)), IntToFixed(lv_entryCount));
}

int libCore_gf_DataUnitHistoryDataMaxEntryOfType (int lp_type) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    int auto966A9D69_val;

    // Variable Initialization

    // Implementation
    auto966A9D69_val = lp_type;
    if (auto966A9D69_val == libCore_ge_DataUnitHistoryDataType_Ability) {
        lv_value = libCore_gv_dataUnitHistoryDataCurrentEntryCountAbilities;
    }
    else if (auto966A9D69_val == libCore_ge_DataUnitHistoryDataType_Behavior) {
        lv_value = libCore_gv_dataUnitHistoryDataCurrentEntryCountBehaviors;
    }
    else if (auto966A9D69_val == libCore_ge_DataUnitHistoryDataType_Button) {
        lv_value = libCore_gv_dataUnitHistoryDataCurrentEntryCountButtons;
    }
    else if (auto966A9D69_val == libCore_ge_DataUnitHistoryDataType_Effect) {
        lv_value = libCore_gv_dataUnitHistoryDataCurrentEntryCountEffects;
    }
    else if (auto966A9D69_val == libCore_ge_DataUnitHistoryDataType_Unit) {
        lv_value = libCore_gv_dataUnitHistoryDataCurrentEntryCountUnits;
    }
    else {
        lv_value = libCore_gv_dataUnitHistoryDataMaxEntryCount;
    }
    return lv_value;
}

int libCore_gf_DataUnitHistoryDataGetIndexOfEntryType (int lp_type, string lp_entry) {
    // Variable Declarations
    int lv_itIndex;
    int lv_highValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_highValue = libCore_gf_DataUnitHistoryDataMaxEntryOfType(lp_type);

    // Implementation
    lv_itIndex = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(("Type" + IntToString((lp_type)) + "_Entry" + (lp_entry)), libCore_gv_mAPUserRecordUnit));
    if ((lv_itIndex > 0)) {
        return lv_itIndex;
    }

    return -1;
}

string libCore_gf_DataUnitHistoryDataGetEntryOfIndexType (int lp_type, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataUnitHistoryData[(lp_type)].lv_dataUnitHistoryData[lp_index];
}

int libCore_gf_DataXPLevelGapBetweenHeroes (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    int lv_levelOfAwardPlayer;
    int lv_deadUnitOwner;
    int lv_levelOfDeadPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_levelOfAwardPlayer = UnitLevel(libGame_gv_players[lp_awardPlayer].lv_heroUnit);
    lv_deadUnitOwner = UnitGetOwner(lp_deadUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_deadUnitOwner) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_214C6069", "A", IntToText(lp_awardPlayer));
        TextExpressionSetToken("Param/Expression/lib_Core_214C6069", "B", UnitTypeGetName(UnitGetType(EventUnit())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_214C6069"), true);
        return 0;
    }

    lv_levelOfDeadPlayer = UnitLevel(libGame_gv_players[lv_deadUnitOwner].lv_heroUnit);
    return (lv_levelOfDeadPlayer - lv_levelOfAwardPlayer);
}

fixed libCore_gf_DataXPGetValueCoefficientForUnit (unit lp_deadUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_deadUnit, "OneQuarterValueHero") == true)) {
        return libCore_gv_data_XP_HeroOneQuarterValueCoefficient_C;
    }

    if ((UnitHasBehavior2(lp_deadUnit, "HalfValueHero") == true)) {
        return libCore_gv_data_XP_HeroHalfValueCoefficient_C;
    }

    if ((UnitHasBehavior2(lp_deadUnit, "ThreeQuarterValueHero") == true)) {
        return libCore_gv_data_XP_HeroThreeQuarterValueCoefficient_C;
    }

    return 1.0;
}

fixed libCore_gf_DataXPXPForHero2 (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_levelOfDeadPlayer;
    fixed lv_baseXP;
    fixed lv_valueCoefficient;
    fixed lv_modifierValue;
    fixed lv_finalXP;
    int lv_levelOfAwardPlayer;
    int lv_levelGap;
    fixed lv_levelGapMultiplier;

    // Automatic Variable Declarations
    int auto7FB162CC_val;

    // Variable Initialization
    lv_levelGapMultiplier = 1.0;

    // Implementation
    lv_heroUnit = libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_heroUnit;
    lv_levelOfDeadPlayer = UnitLevel(lv_heroUnit);
    lv_baseXP = (libCore_gv_data_XP_HeroValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadUnit);
    lv_baseXP *= lv_valueCoefficient;
    lv_levelGap = libCore_gf_DataXPLevelGapBetweenHeroes(lp_awardPlayer, lp_deadUnit);
    auto7FB162CC_val = lv_levelGap;
    if (auto7FB162CC_val == 1) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero1LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == 2) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero2LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == 3) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero3LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == -1) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero1LevelGapMultiplier_C), 0.0);
    }
    else if (auto7FB162CC_val == -2) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero2LevelGapMultiplier_C), 0.0);
    }
    else if (auto7FB162CC_val == -3) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero3LevelGapMultiplier_C), 0.0);
    }
    else {
        if ((lv_levelGap >= 4)) {
            lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero4LevelGapMultiplier_C);
        }
        else {
            if ((lv_levelGap <= -4)) {
                lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero4LevelGapMultiplier_C), 0.0);
            }

        }
    }
    lv_finalXP = (lv_baseXP * lv_levelGapMultiplier);
    return lv_finalXP;
}

fixed libCore_gf_DataXPXPForMinion (fixed lp_baseXPValue, int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    unit lv_heroUnitOfAllyofDeadUnit;
    fixed lv_modifierCoefficient;
    fixed lv_finalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGBonusMinionXP == true)) {
        if (((UnitGetOwner(lp_deadUnit) == libCore_gv_cOMPUTER_TeamOrder) || (UnitGetOwner(lp_deadUnit) == libCore_gv_cOMPUTER_TeamChaos))) {
            lv_heroUnitOfAllyofDeadUnit = libGame_gv_players[PlayerGroupPlayer(libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupEnemy, UnitGetOwner(lp_deadUnit)), 1)].lv_heroUnit;
        }
        else {
            return lp_baseXPValue;
        }
        if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
            TextExpressionSetToken("Param/Expression/lib_Core_52817918", "A", FixedToText(lp_baseXPValue, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_52817918"), true);
        }

        lv_modifierCoefficient = (1.0 + ((libCore_gf_DataXPGetMoreGranularBountyXPModifier(lv_heroUnitOfAllyofDeadUnit, libGame_gv_players[lp_awardPlayer].lv_heroUnit) - 1.0) * 0.5));
        if ((lv_modifierCoefficient > 1)) {
            lv_finalXP = (lp_baseXPValue * lv_modifierCoefficient);
        }
        else {
            lv_finalXP = lp_baseXPValue;
        }
        if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
            TextExpressionSetToken("Param/Expression/lib_Core_6AAB686A", "A", FixedToText(lv_finalXP, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_6AAB686A"), true);
        }

    }
    else {
        lv_finalXP = lp_baseXPValue;
    }
    lv_finalXP *= libCore_gv_data_XP_MinionXPModifier[libGame_gf_TeamNumberOfPlayer(lp_awardPlayer)];
    return lv_finalXP;
}

fixed libCore_gf_DataXPXPForHeroNEW (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_levelOfDeadPlayer;
    fixed lv_baseXP;
    fixed lv_valueCoefficient;
    fixed lv_modifierValue;
    fixed lv_finalXP;
    int lv_levelOfAwardPlayer;
    int lv_levelGap;
    fixed lv_levelGapMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levelGapMultiplier = 1.0;

    // Implementation
    lv_heroUnit = libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_heroUnit;
    lv_levelOfDeadPlayer = UnitLevel(lv_heroUnit);
    lv_baseXP = (libCore_gv_data_XP_HeroValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadUnit);
    lv_baseXP *= lv_valueCoefficient;
    lv_baseXP *= libCore_gv_data_XP_HeroXPModifier[libGame_gf_TeamNumberOfPlayer(lp_awardPlayer)];
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_E3C2659E", "A", FixedToText(lv_baseXP, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E3C2659E"), true);
    }

    if ((libSprt_gv_dEBUGBonusMinionXP == false)) {
        lv_finalXP = (lv_baseXP * libCore_gf_DataXPGetMoreGranularBountyXPModifier(lp_deadUnit, libGame_gv_players[lp_awardPlayer].lv_heroUnit));
        if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
            TextExpressionSetToken("Param/Expression/lib_Core_10A87317", "A", FixedToText(lv_finalXP, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_10A87317"), true);
        }

    }
    else {
        lv_modifierValue = libCore_gf_DataXPGetMoreGranularBountyXPModifier(lp_deadUnit, libGame_gv_players[lp_awardPlayer].lv_heroUnit);
        if ((lv_modifierValue < 1)) {
            lv_finalXP = (lv_baseXP * lv_modifierValue);
        }
        else {
            lv_finalXP = lv_baseXP;
        }
    }
    return lv_finalXP;
}

fixed libCore_gf_DataXPGetMoreGranularBountyXPModifier (unit lp_deadHero, unit lp_playerHero) {
    // Variable Declarations
    int lv_player;
    int lv_deadPlayer;
    int lv_deadHeroWholeLevel;
    fixed lv_deadHeroLevelProgress;
    fixed lv_deadHeroLevelCombined;
    int lv_playerHeroWholeLevel;
    fixed lv_playerHeroLevelProgress;
    fixed lv_playerHeroLevelCombined;
    int lv_playerTeam;
    int lv_enemyTeam;
    fixed lv_xPMath;
    fixed lv_levelDifferenceReal;
    fixed lv_levelDifferenceTrunc;
    fixed lv_levelDifferenceModulo;
    bool lv_isNegative;
    fixed lv_experienceLevelBaseXP;
    fixed lv_experienceLevelTotalXP;
    int lv_experienceLevelBase1XP;
    fixed lv_levelDifferenceModuloPostCalc;
    fixed lv_truncMod;
    fixed lv_moduloMod;
    fixed lv_combinedMod;
    fixed lv_finalMod;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_playerHero);
    lv_deadPlayer = UnitGetOwner(lp_deadHero);

    // Implementation
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe)) {
        return 1.0;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(lp_playerHero)) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_7B6C983C", "A", IntToText(lv_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7B6C983C"), true);
        return 1.0;
    }

    lv_deadHeroWholeLevel = UnitXPGetCurrentLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit, null);
    lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_deadHeroWholeLevel);
    lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[lv_deadPlayer].lv_heroUnit, null);
    lv_experienceLevelBase1XP = (lv_deadHeroWholeLevel + 1);
    lv_xPMath = (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP);
    if ((lv_xPMath != 0.0)) {
        lv_deadHeroLevelProgress = ((lv_experienceLevelTotalXP - lv_experienceLevelBaseXP) / (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP));
    }
    else {
        lv_deadHeroLevelProgress = 0.0;
    }
    lv_deadHeroLevelCombined = (IntToFixed(lv_deadHeroWholeLevel) + lv_deadHeroLevelProgress);
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_8AEA0ECF", "A", FixedToText(lv_deadHeroLevelCombined, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_8AEA0ECF"), true);
    }

    lv_playerHeroWholeLevel = UnitXPGetCurrentLevel(libGame_gv_players[lv_player].lv_heroUnit, null);
    lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_playerHeroWholeLevel);
    lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[lv_player].lv_heroUnit, null);
    lv_experienceLevelBase1XP = (lv_playerHeroWholeLevel + 1);
    lv_xPMath = (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP);
    if ((lv_xPMath != 0.0)) {
        lv_playerHeroLevelProgress = ((lv_experienceLevelTotalXP - lv_experienceLevelBaseXP) / (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP));
    }
    else {
        lv_playerHeroLevelProgress = 0.0;
    }
    lv_playerHeroLevelCombined = (IntToFixed(lv_playerHeroWholeLevel) + lv_playerHeroLevelProgress);
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_E7C13BFA", "A", FixedToText(lv_playerHeroLevelCombined, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E7C13BFA"), true);
    }

    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lv_player);
    lv_enemyTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_levelDifferenceReal = (lv_deadHeroLevelCombined - lv_playerHeroLevelCombined);
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_C1143C92", "A", FixedToText(lv_levelDifferenceReal, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_C1143C92"), true);
    }

    if ((lv_levelDifferenceReal < 0.0)) {
        lv_isNegative = true;
    }

    if ((lv_levelDifferenceReal > -1.0) && (lv_levelDifferenceReal < 1.0)) {
        lv_levelDifferenceTrunc = 0.0;
    }
    else {
        lv_levelDifferenceTrunc = AbsF(Trunc(lv_levelDifferenceReal));
    }
    lv_levelDifferenceModulo = AbsF(ModF(lv_levelDifferenceReal, 1.0));
    lv_levelDifferenceModuloPostCalc = (lv_levelDifferenceModulo * 0.1);
    if ((lv_levelDifferenceTrunc == 0.0)) {
        lv_truncMod = 0.0;
        lv_moduloMod = 1.0;
    }
    else if ((lv_levelDifferenceTrunc == 1.0)) {
        lv_truncMod = 0.1;
        lv_moduloMod = 2.0;
    }
    else if ((lv_levelDifferenceTrunc == 2.0)) {
        lv_truncMod = 0.3;
        lv_moduloMod = 3.0;
    }
    else if ((lv_levelDifferenceTrunc == 3.0)) {
        lv_truncMod = 0.6;
        lv_moduloMod = 4.0;
    }
    else if ((lv_levelDifferenceTrunc >= 4.0)) {
        lv_truncMod = 1.0;
        lv_moduloMod = 0.0;
    }
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_AD67A377", "A", FixedToText(lv_truncMod, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_AD67A377"), true);
        TextExpressionSetToken("Param/Expression/lib_Core_2BB18C9C", "A", FixedToText((lv_levelDifferenceModuloPostCalc * lv_moduloMod), 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_2BB18C9C"), true);
    }

    lv_combinedMod = (lv_truncMod + (lv_levelDifferenceModuloPostCalc * lv_moduloMod));
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringToText("") + FixedToText(lv_combinedMod, 0)), true);
    }

    if ((lv_isNegative == true)) {
        lv_combinedMod = (lv_combinedMod * libCore_gv_data_XP_CatchUpXPPunishmentScaler);
        lv_combinedMod = (1.0 - lv_combinedMod);
    }
    else {
        lv_combinedMod = (lv_combinedMod * libCore_gv_data_XP_CatchUpXPBonusScaler);
        lv_combinedMod = (1.0 + lv_combinedMod);
    }
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_31EA1BE7", "A", FixedToText(lv_combinedMod, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_31EA1BE7"), true);
    }

    if ((lv_combinedMod >= 0.05) && (lv_combinedMod <= 2.0)) {
        lv_finalMod = lv_combinedMod;
    }
    else if ((lv_combinedMod > 2.0)) {
        lv_finalMod = 2.0;
    }
    else if ((lv_combinedMod < 0.05)) {
        lv_finalMod = 0.05;
    }
    if ((libCore_gv_data_XP_GranularBountyXPMathDisplayEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_547F04EC", "A", FixedToText(lv_finalMod, 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_547F04EC"), true);
    }

    return lv_finalMod;
}

color libCore_gf_GetAllianceColorFromGameUIData (string lp_overrideColor, int lp_player) {
    // Variable Declarations
    color lv_neutralColor;
    string lv_fullColorString;
    int lv_commaPosition;
    string lv_rString;
    string lv_gString;
    string lv_bString;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_neutralColor = Color(0,0,0);
    lv_fullColorString = "";
    lv_rString = "";
    lv_gString = "";
    lv_bString = "";

    // Implementation
    lv_fullColorString = CatalogFieldValueGet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + lp_overrideColor + "].Value[0]", lp_player);
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_rString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_gString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_bString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_r = (StringToFixed(lv_rString) * 100.0);
    lv_g = (StringToFixed(lv_gString) * 100.0);
    lv_b = (StringToFixed(lv_bString) * 100.0);
    return Color(lv_r, lv_g, lv_b);
}

fixed libCore_gf_GetWeaponDamageForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;
    fixed lv_weaponDamage;

    // Automatic Variable Declarations
    int autoCEE614CE_ae;
    const int autoCEE614CE_ai = 1;

    // Variable Initialization

    // Implementation
    autoCEE614CE_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (autoCEE614CE_ai >= 0 && lv_itWeapon <= autoCEE614CE_ae) || (autoCEE614CE_ai < 0 && lv_itWeapon >= autoCEE614CE_ae) ) ; lv_itWeapon += autoCEE614CE_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            lv_weaponDamage = UnitWeaponDamage(lp_unit, lv_itWeapon, c_unitAttributeNone, false);
            break;
        }

    }
    return lv_weaponDamage;
}

string libCore_gf_GetTimeStamp (fixed lp_time) {
    // Variable Declarations
    fixed lv_elapsedTime;
    fixed lv_minutesElapsed;
    fixed lv_secondsElapsed;
    fixed lv_loopsElapsed;
    string lv_tempString;
    string lv_timeElapsedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempString = "";
    lv_timeElapsedString = "";

    // Implementation
    lv_elapsedTime = lp_time;
    lv_loopsElapsed = (ModF(lv_elapsedTime, 1.0) * 16.0);
    lv_elapsedTime -= (lv_loopsElapsed / 16.0);
    if ((lv_loopsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_loopsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_loopsElapsed, 0);
    }
    lv_timeElapsedString = lv_tempString;
    lv_secondsElapsed = ModF(lv_elapsedTime, 60.0);
    lv_elapsedTime -= lv_secondsElapsed;
    if ((lv_secondsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_secondsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_secondsElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    lv_minutesElapsed = (lv_elapsedTime / 60.0);
    if ((lv_minutesElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_minutesElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_minutesElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    return lv_timeElapsedString;
}

point libCore_gf_AdvancePointinDirection (point lp_point, point lp_dir, fixed lp_distance) {
    // Variable Declarations
    fixed lv_xVal;
    fixed lv_yVal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_xVal = (PointGetX(lp_point) + (PointGetX(lp_dir) * lp_distance));
    lv_yVal = (PointGetY(lp_point) + (PointGetY(lp_dir) * lp_distance));
    return Point(lv_xVal, lv_yVal);
}

point libCore_gf_ProjectPointOntoLine (point lp_p1, point lp_p2, point lp_t) {
    // Variable Declarations
    fixed lv_diffX;
    fixed lv_diffY;
    fixed lv_length;
    point lv_axis;
    point lv_line;
    fixed lv_projMag;
    point lv_final;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_diffX = (PointGetX(lp_p2) - PointGetX(lp_p1));
    lv_diffY = (PointGetY(lp_p2) - PointGetY(lp_p1));
    lv_length = SquareRoot(((lv_diffX*lv_diffX) + (lv_diffY*lv_diffY)));
    if ((lv_length == 0.0)) {
        return lp_p1;
    }

    lv_axis = Point((lv_diffX / lv_length), (lv_diffY / lv_length));
    lv_line = Point((PointGetX(lp_t) - PointGetX(lp_p1)), (PointGetY(lp_t) - PointGetY(lp_p1)));
    lv_projMag = ((PointGetX(lv_axis)*PointGetX(lv_line)) + (PointGetY(lv_axis)*PointGetY(lv_line)));
    lv_final = Point((PointGetX(lp_p1) + PointGetX(lv_axis) * lv_projMag), (PointGetY(lp_p1) + PointGetY(lv_axis) * lv_projMag));
    return lv_final;
}

fixed libCore_gf_GetTotalXPForLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level < 1) && (lp_level > libCore_gv_bALMaxLevel)) {
        return 0.0;
    }
    else {
        return libCore_gv_dataXPLevelXPValues[lp_level];
    }
}

void libCore_gf_WaitForConversationToFinish () {
    // Variable Declarations
    int lv_itPlayer;
    bool lv_finished;

    // Automatic Variable Declarations
    playergroup autoDA495425_g;

    // Variable Initialization

    // Implementation
    while (true) {
        lv_finished = true;
        autoDA495425_g = libCore_gv_allHeroPlayersPlusObservers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoDA495425_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((TransmissionPlayerHasActiveTransmission(lv_itPlayer) == true)) {
                lv_finished = false;
                break;
            }

        }
        if ((lv_finished == true)) {
            return ;
        }

        Wait(0.5, c_timeGame);
    }
}

bool libCore_gf_StormUnitIsHallucination (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitFilterMatch(lp_unit, 0, UnitFilter(0, (1 << (c_targetFilterResistant - 32)), 0, 0)) == true)) {
        return true;
    }

    return false;
}

void libCore_gf_StormMapToMapLoad (int lp_map, playergroup lp_victoryPlayers, playergroup lp_defeatPlayers) {
    // Variable Declarations
    string lv_mapPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mapPath = "";

    // Implementation
    if ((lp_map == libCore_ge_MAPMap_Unknown)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_67E3E3E2"), true);
        return ;
    }

    if ((GameIsOnline() == true)) {
        OnlineMapToMapLoad((lp_map), lp_victoryPlayers, lp_defeatPlayers);
    }
    else {
        lv_mapPath = libCore_gv_mapData[(lp_map)].lv_offlinePath;
        GameSetNextMap(lv_mapPath);
        GameOver(libCore_gv_lOCAL_Player, c_gameOverTie, false, false);
    }
}

bool libCore_gf_AbilityHasCategory (string lp_ability, string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, lp_category, c_playerAny) == 1)) {
        return true;
    }

    return false;
}

bool libCore_gf_IsAbilityOnCooldown (unit lp_unit, string lp_ability) {
    // Variable Declarations
    fixed lv_time;
    string lv_cooldownLink;
    string lv_chargeLink;
    fixed lv_chargeUsed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Implementation
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
    lv_time = UnitGetCooldown(lp_unit, lv_cooldownLink);
    if ((lv_time > 0.0)) {
        return true;
    }
    else {
        lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", c_playerAny);
        lv_chargeUsed = UnitGetChargeUsed(lp_unit, lv_chargeLink);
        if ((lv_chargeUsed > 0.0)) {
            lv_time = UnitGetChargeRegen(lp_unit, lv_chargeLink);
        }

    }
    return (lv_time > 0.0);
}

fixed libCore_gf_AbilityCooldownTimeForPlayer (unit lp_unit, string lp_ability, int lp_player) {
    // Variable Declarations
    fixed lv_cooldownTime;
    string lv_cooldownLink;
    string lv_chargeLink;
    fixed lv_chargesUsed;
    int lv_chargesMax;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);
    lv_chargesMax = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player);
    if ((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Location", lp_player) == "Unit")) {
        if ((lv_chargesMax > 0)) {
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", lp_player);
            lv_chargesUsed = UnitGetChargeUsed(lp_unit, lv_chargeLink);
            if ((lv_chargesUsed >= IntToFixed(lv_chargesMax))) {
                lv_cooldownTime = UnitGetChargeRegen(lp_unit, lv_chargeLink);
            }
            else {
                lv_cooldownTime = UnitGetCooldown(lp_unit, lv_cooldownLink);
            }
        }
        else {
            lv_cooldownTime = UnitGetCooldown(lp_unit, lv_cooldownLink);
        }
    }
    else if ((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Location", lp_player) == "Player")) {
        if ((lv_chargesMax > 0)) {
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", lp_player);
            lv_chargesUsed = PlayerGetChargeUsed(lp_player, lv_chargeLink);
            if ((lv_chargesUsed >= IntToFixed(lv_chargesMax))) {
                lv_cooldownTime = PlayerGetChargeRegen(lp_player, lv_chargeLink);
            }
            else {
                lv_cooldownTime = PlayerGetCooldown(lp_player, lv_cooldownLink);
            }
        }
        else {
            lv_cooldownTime = PlayerGetCooldown(lp_player, lv_cooldownLink);
        }
    }
    return lv_cooldownTime;
}

void libCore_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType == null)) {
        lv_terms = ("ScopeContains" + (lp_doodadType));
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

bool libCore_gf_UnitHasBehaviorWithFlag (unit lp_unit, int lp_flag) {
    // Variable Declarations
    string lv_itBehavior;

    // Automatic Variable Declarations
    unit autoC6AFA5A8_u;
    int autoC6AFA5A8_i;

    // Variable Initialization

    // Implementation
    autoC6AFA5A8_u = lp_unit;
    autoC6AFA5A8_i = 1;
    for ( ; autoC6AFA5A8_i <= UnitBehaviorCountAll(autoC6AFA5A8_u) ; autoC6AFA5A8_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(autoC6AFA5A8_u, autoC6AFA5A8_i)) ) {
        lv_itBehavior = UnitBehaviorGet(autoC6AFA5A8_u, autoC6AFA5A8_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, lp_flag) == true)) {
            return true;
        }

    }
    return false;
}

void libCore_gf_RunCustomCatalogChangesForPlayer (int lp_player, string lp_modifyPlayerEffect, int lp_times, bool lp_reset) {
    // Variable Declarations
    string lv_effect;
    string lv_catalogReference;
    int lv_itArray;
    int lv_maxArrayValue;
    int lv_operation;
    string lv_string;
    string lv_amount;
    string lv_baseAmount;

    // Automatic Variable Declarations
    int auto5534EF16_ae;
    const int auto5534EF16_ai = 1;
    string auto1E2DF2A9_val;

    // Variable Initialization
    lv_string = "";
    lv_amount = "";
    lv_baseAmount = "";

    // Implementation
    lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lp_modifyPlayerEffect, "EffectArray", c_playerAny);
    if ((lv_maxArrayValue > 0)) {
        auto5534EF16_ae = (lv_maxArrayValue-1);
        lv_itArray = 0;
        for ( ; ( (auto5534EF16_ai >= 0 && lv_itArray <= auto5534EF16_ae) || (auto5534EF16_ai < 0 && lv_itArray >= auto5534EF16_ae) ) ; lv_itArray += auto5534EF16_ai ) {
            lv_catalogReference = (CatalogFieldValueGet(c_gameCatalogEffect, lp_modifyPlayerEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny));
            if ((lp_reset == true)) {
                CatalogReferenceSet((lv_catalogReference), lp_player, CatalogReferenceGet(lv_catalogReference, c_playerAny));
            }
            else {
                lv_amount = CatalogFieldValueGet(c_gameCatalogEffect, lp_modifyPlayerEffect, "EffectArray[" + IntToString(lv_itArray) + "].Value", c_playerAny);
                auto1E2DF2A9_val = CatalogFieldValueGet(c_gameCatalogEffect, lp_modifyPlayerEffect, "EffectArray[" + IntToString(lv_itArray) + "].Operation", c_playerAny);
                if (auto1E2DF2A9_val == "Add") {
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times), c_fixedPrecisionAny), c_upgradeOperationAdd);
                }
                else if (auto1E2DF2A9_val == "AddBaseMultiply") {
                    lv_baseAmount = CatalogReferenceGet(lv_catalogReference, c_playerAny);
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times * StringToFixed(lv_baseAmount)), 2), c_upgradeOperationAdd);
                }
                else if (auto1E2DF2A9_val == "Divide") {
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times), c_fixedPrecisionAny), c_upgradeOperationDivide);
                }
                else if (auto1E2DF2A9_val == "Multiply") {
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times), c_fixedPrecisionAny), c_upgradeOperationMultiply);
                }
                else if (auto1E2DF2A9_val == "Set") {
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times), c_fixedPrecisionAny), c_upgradeOperationSet);
                }
                else if (auto1E2DF2A9_val == "Subtract") {
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times), c_fixedPrecisionAny), c_upgradeOperationSubtract);
                }
                else if (auto1E2DF2A9_val == "SubtractBaseMultiply") {
                    lv_baseAmount = CatalogReferenceGet(lv_catalogReference, c_playerAny);
                    CatalogReferenceModify((lv_catalogReference), lp_player, FixedToString((StringToFixed(lv_amount) * lp_times * StringToFixed(lv_baseAmount)), 2), c_upgradeOperationSubtract);
                }
                else {
                }
            }
        }
    }

}

text libCore_gf_ConvertCatalogEntryToText (string lp_entry) {
    // Automatic Variable Declarations
    // Implementation
    return StringToText((lp_entry));
}

string libCore_gf_ConvertTextToString (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    return TextToString(lp_text);
}

bool libCore_gf_CombatCheckCritState (unit lp_targetUnit, int lp_casterPlayer, string lp_effectEntry) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = ("Player" + IntToString(lp_casterPlayer) + " " + (lp_effectEntry));
    if ((libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_targetUnit) > 0.0)) {
        return true;
    }
    else if ((libCore_gf_TechAliasExist(c_gameCatalogEffect, lp_effectEntry, "StormFlag Critical") == true)) {
        return true;
    }
    return false;
}

int libCore_gf_CombatDamageKindFromEffect (string lp_effect) {
    // Automatic Variable Declarations
    string auto21780E8F_val;

    // Implementation
    auto21780E8F_val = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Kind", c_playerAny);
    if (auto21780E8F_val == "Ranged") {
        return libCore_ge_StormDamagingEffectKind_Physical;
    }
    else if (auto21780E8F_val == "Melee") {
        return libCore_ge_StormDamagingEffectKind_Physical;
    }
    else if (auto21780E8F_val == "Splash") {
        return libCore_ge_StormDamagingEffectKind_Pure;
    }
    else if (auto21780E8F_val == "Spell") {
        return libCore_ge_StormDamagingEffectKind_Spell;
    }
    else {
    }
    return libCore_ge_StormDamagingEffectKind_Any;
}

int libCore_gf_CombatDamageTypeFromEffect (string lp_effect) {
    // Automatic Variable Declarations
    string autoDD3F777E_val;

    // Implementation
    autoDD3F777E_val = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Type", c_playerAny);
    if (autoDD3F777E_val == "Normal") {
        return libCore_ge_StormDamagingEffectType_Normal;
    }
    else if (autoDD3F777E_val == "Poison") {
        return libCore_ge_StormDamagingEffectType_DoT;
    }
    else if (autoDD3F777E_val == "Universal") {
        return libCore_ge_StormDamagingEffectType_BasicAttack;
    }
    else {
    }
    return libCore_ge_StormDamagingEffectKind_Any;
}

fixed libCore_gf_CombatCalculateDamageAmount () {
    // Variable Declarations
    fixed lv_damageTaken;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gf_TriggerEventType() == 68)) {
        lv_damageTaken = (EventUnitDamageAmount() + EventUnitDamageBehaviorShield());
    }
    else if ((libCore_gf_TriggerEventType() == 97)) {
        if ((libCore_gf_TechAliasExist(c_gameCatalogBehavior, EventUnitBehavior(), "StormFlag AbsorbFatalDamage") == true)) {
            lv_damageTaken = EventUnitDamageAbsorbed();
        }
        else if ((libCore_gf_CombatDamageTypeFromEffect(EventUnitDamageEffect()) == libCore_ge_StormDamagingEffectType_BasicAttack) && (UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagUser3) == true)) {
            lv_damageTaken = 0.0;
        }
    }
    else if (true) {
        lv_damageTaken = EventUnitDamageAttempted();
    }
    return lv_damageTaken;
}

void RemoveDataTableValueInstance (int lp_instance, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    DataTableInstanceValueRemove(lp_instance, lp_name);
}

string libCore_gf_ConvertIntegerToStringDigit (int lp_integer, int lp_digit) {
    // Variable Declarations
    string lv_integerString;
    int lv_length;

    // Automatic Variable Declarations
    int auto23CC739B_n;
    int auto23CC739B_i;

    // Variable Initialization
    lv_integerString = "";

    // Implementation
    lv_integerString = IntToString(lp_integer);
    lv_length = StringLength(lv_integerString);
    if ((lv_length < lp_digit)) {
        auto23CC739B_n = (lp_digit - lv_length);
        for (auto23CC739B_i = 1; auto23CC739B_i <= auto23CC739B_n; auto23CC739B_i += 1) {
            lv_integerString = ("0" + lv_integerString);
        }
    }

    return lv_integerString;
}

void CreateArray (string lp_arrayName) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, lp_arrayName, 0);
}

int LengthofArray (string lp_arrayName) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_length = DataTableGetInt(true, lp_arrayName);
    return lv_length;
}

void libCore_gf_LengthAdd (string lp_arrayName) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, lp_arrayName, (DataTableGetInt(true, lp_arrayName)+1));
}

bool libCore_gf_ArrayKeyExists (string lp_arrayName, int lp_arrayKey) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_arrayKey < 0) && (lp_arrayKey > LengthofArray(lp_arrayName))) {
        return false;
    }

    return true;
}

int libCore_gf_TypeofArrayValue (string lp_arrayName, int lp_arrayKey) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueType(true, (lp_arrayName + "[" + IntToString(lp_arrayKey) + "]"));
}

void libCore_gf_CommonSet (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_arrayIndex > (LengthofArray(lp_arrayName) - 1))) {
        DataTableSetInt(true, lp_arrayName, (lp_arrayIndex + 1));
    }

}

void libCore_gf_SetArrayValueInteger (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueReal (string lp_arrayName, int lp_arrayIndex, fixed lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetFixed(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueAbilityCommand (string lp_arrayName, int lp_arrayIndex, abilcmd lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetAbilCmd(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueBoolean (string lp_arrayName, int lp_arrayIndex, bool lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetBool(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueDialog (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetDialog(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueDialogItem (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValuePoint (string lp_arrayName, int lp_arrayIndex, point lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetPoint(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueRegion (string lp_arrayName, int lp_arrayIndex, region lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetRegion(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueString (string lp_arrayName, int lp_arrayIndex, string lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetString(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueTrigger (string lp_arrayName, int lp_arrayIndex, trigger lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetTrigger(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueUnit (string lp_arrayName, int lp_arrayIndex, unit lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetUnit(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueUnitGroup (string lp_arrayName, int lp_arrayIndex, unitgroup lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetUnitGroup(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_PushArrayValueInteger (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetInt(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueReal (string lp_arrayName, fixed lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetFixed(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueAbilityCommand (string lp_arrayName, abilcmd lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetAbilCmd(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueBoolean (string lp_arrayName, bool lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetBool(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueDialog (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetDialog(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueDialogItem (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValuePoint (string lp_arrayName, point lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetPoint(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueRegion (string lp_arrayName, region lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetRegion(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueString (string lp_arrayName, string lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetString(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueTrigger (string lp_arrayName, trigger lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetTrigger(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueUnit (string lp_arrayName, unit lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetUnit(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueUnitGroup (string lp_arrayName, unitgroup lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetUnitGroup(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

int libCore_gf_GetArrayValueInteger (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

fixed libCore_gf_GetArrayValueReal (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName, lp_arrayIndex) == c_dataTypeInt)) {
        return IntToFixed(DataTableGetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]")));
    }
    else {
        return DataTableGetFixed(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
    }
}

abilcmd libCore_gf_GetArrayValueAbilityCommand (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetAbilCmd(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

bool libCore_gf_GetArrayValueBoolean (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_GetArrayValueDialog (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetDialog(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_GetArrayValueDialogItem (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableDialogItem(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

point libCore_gf_GetArrayValuePoint (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

region libCore_gf_GetArrayValueRegion (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

string libCore_gf_GetArrayValueString (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

trigger libCore_gf_GetArrayValueTrigger (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

unit libCore_gf_GetArrayValueUnit (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

unitgroup libCore_gf_GetArrayValueUnitGroup (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_SearchArrayValueInteger (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoDD948735_ae;
    const int autoDD948735_ai = 1;

    // Variable Initialization

    // Implementation
    autoDD948735_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoDD948735_ai >= 0 && lv_itIndex <= autoDD948735_ae) || (autoDD948735_ai < 0 && lv_itIndex >= autoDD948735_ae) ) ; lv_itIndex += autoDD948735_ai ) {
        if ((libCore_gf_GetArrayValueInteger(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueReal (string lp_arrayName, fixed lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoCEB1D4E6_ae;
    const int autoCEB1D4E6_ai = 1;

    // Variable Initialization

    // Implementation
    autoCEB1D4E6_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoCEB1D4E6_ai >= 0 && lv_itIndex <= autoCEB1D4E6_ae) || (autoCEB1D4E6_ai < 0 && lv_itIndex >= autoCEB1D4E6_ae) ) ; lv_itIndex += autoCEB1D4E6_ai ) {
        if ((libCore_gf_GetArrayValueReal(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueAbilityCommand (string lp_arrayName, abilcmd lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto09FE276C_ae;
    const int auto09FE276C_ai = 1;

    // Variable Initialization

    // Implementation
    auto09FE276C_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto09FE276C_ai >= 0 && lv_itIndex <= auto09FE276C_ae) || (auto09FE276C_ai < 0 && lv_itIndex >= auto09FE276C_ae) ) ; lv_itIndex += auto09FE276C_ai ) {
        if ((libCore_gf_GetArrayValueAbilityCommand(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueBoolean (string lp_arrayName, bool lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC6F31681_ae;
    const int autoC6F31681_ai = 1;

    // Variable Initialization

    // Implementation
    autoC6F31681_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoC6F31681_ai >= 0 && lv_itIndex <= autoC6F31681_ae) || (autoC6F31681_ai < 0 && lv_itIndex >= autoC6F31681_ae) ) ; lv_itIndex += autoC6F31681_ai ) {
        if ((libCore_gf_GetArrayValueBoolean(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueDialog (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto437B116C_ae;
    const int auto437B116C_ai = 1;

    // Variable Initialization

    // Implementation
    auto437B116C_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto437B116C_ai >= 0 && lv_itIndex <= auto437B116C_ae) || (auto437B116C_ai < 0 && lv_itIndex >= auto437B116C_ae) ) ; lv_itIndex += auto437B116C_ai ) {
        if ((libCore_gf_GetArrayValueDialog(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueDialogItem (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoDAC39F23_ae;
    const int autoDAC39F23_ai = 1;

    // Variable Initialization

    // Implementation
    autoDAC39F23_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoDAC39F23_ai >= 0 && lv_itIndex <= autoDAC39F23_ae) || (autoDAC39F23_ai < 0 && lv_itIndex >= autoDAC39F23_ae) ) ; lv_itIndex += autoDAC39F23_ai ) {
        if ((libCore_gf_GetArrayValueDialogItem(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValuePoint (string lp_arrayName, point lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoB91B52AB_ae;
    const int autoB91B52AB_ai = 1;

    // Variable Initialization

    // Implementation
    autoB91B52AB_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoB91B52AB_ai >= 0 && lv_itIndex <= autoB91B52AB_ae) || (autoB91B52AB_ai < 0 && lv_itIndex >= autoB91B52AB_ae) ) ; lv_itIndex += autoB91B52AB_ai ) {
        if ((libCore_gf_GetArrayValuePoint(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueRegion (string lp_arrayName, region lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto51E0995D_ae;
    const int auto51E0995D_ai = 1;

    // Variable Initialization

    // Implementation
    auto51E0995D_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto51E0995D_ai >= 0 && lv_itIndex <= auto51E0995D_ae) || (auto51E0995D_ai < 0 && lv_itIndex >= auto51E0995D_ae) ) ; lv_itIndex += auto51E0995D_ai ) {
        if ((libCore_gf_GetArrayValueRegion(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueString (string lp_arrayName, string lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoA4D09FC6_ae;
    const int autoA4D09FC6_ai = 1;

    // Variable Initialization

    // Implementation
    autoA4D09FC6_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoA4D09FC6_ai >= 0 && lv_itIndex <= autoA4D09FC6_ae) || (autoA4D09FC6_ai < 0 && lv_itIndex >= autoA4D09FC6_ae) ) ; lv_itIndex += autoA4D09FC6_ai ) {
        if ((libCore_gf_GetArrayValueString(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueTrigger (string lp_arrayName, trigger lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto33DF484F_ae;
    const int auto33DF484F_ai = 1;

    // Variable Initialization

    // Implementation
    auto33DF484F_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto33DF484F_ai >= 0 && lv_itIndex <= auto33DF484F_ae) || (auto33DF484F_ai < 0 && lv_itIndex >= auto33DF484F_ae) ) ; lv_itIndex += auto33DF484F_ai ) {
        if ((libCore_gf_GetArrayValueTrigger(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueUnit (string lp_arrayName, unit lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto98679AF9_ae;
    const int auto98679AF9_ai = 1;

    // Variable Initialization

    // Implementation
    auto98679AF9_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto98679AF9_ai >= 0 && lv_itIndex <= auto98679AF9_ae) || (auto98679AF9_ai < 0 && lv_itIndex >= auto98679AF9_ae) ) ; lv_itIndex += auto98679AF9_ai ) {
        if ((libCore_gf_GetArrayValueUnit(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libCore_gf_SearchArrayValueUnitGroup (string lp_arrayName, unitgroup lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto73B206B4_ae;
    const int auto73B206B4_ai = 1;

    // Variable Initialization

    // Implementation
    auto73B206B4_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto73B206B4_ai >= 0 && lv_itIndex <= auto73B206B4_ae) || (auto73B206B4_ai < 0 && lv_itIndex >= auto73B206B4_ae) ) ; lv_itIndex += auto73B206B4_ai ) {
        if ((libCore_gf_GetArrayValueUnitGroup(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }

    }
    return -1;
}

void libCore_gf_SetArrayValuetoArrayValue (string lp_arrayName1, int lp_arrayIndex1, string lp_arrayName2, int lp_arrayIndex2) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeInt)) {
        libCore_gf_SetArrayValueInteger(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueInteger(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeFixed)) {
        libCore_gf_SetArrayValueReal(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueReal(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeAbilCmd)) {
        libCore_gf_SetArrayValueAbilityCommand(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueAbilityCommand(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeBool)) {
        libCore_gf_SetArrayValueBoolean(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueBoolean(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypePoint)) {
        libCore_gf_SetArrayValuePoint(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValuePoint(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeRegion)) {
        libCore_gf_SetArrayValueRegion(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueRegion(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeString)) {
        libCore_gf_SetArrayValueString(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueString(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeUnit)) {
        libCore_gf_SetArrayValueUnit(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueUnit(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeUnitGroup)) {
        libCore_gf_SetArrayValueUnitGroup(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueUnitGroup(lp_arrayName2, lp_arrayIndex2));
    }
}

void libCore_gf_SplitStringintoArray (string lp_arrayName, string lp_string, string lp_delimiter) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    int auto7DF9A4A8_ae;
    const int auto7DF9A4A8_ai = 1;

    // Variable Initialization
    lv_b = StringLength(lp_string);
    lv_x = "";
    lv_y = "";

    // Implementation
    CreateArray(lp_arrayName);
    auto7DF9A4A8_ae = lv_b;
    lv_a = 1;
    for ( ; ( (auto7DF9A4A8_ai >= 0 && lv_a <= auto7DF9A4A8_ae) || (auto7DF9A4A8_ai < 0 && lv_a >= auto7DF9A4A8_ae) ) ; lv_a += auto7DF9A4A8_ai ) {
        lv_x = StringSub(lp_string, lv_a, lv_b);
        if ((StringCompare(lv_x, lp_delimiter, c_stringCase) == 0)) {
            libCore_gf_PushArrayValueString(lp_arrayName, lv_y);
            lv_y = "";
        }
        else {
            lv_y = (lv_y + lv_x);
        }
    }
    libCore_gf_PushArrayValueString(lp_arrayName, lv_y);
}

string libCore_gf_JoinArrayintoString (string lp_arrayName, string lp_glue) {
    // Variable Declarations
    int lv_index;
    int lv_length;
    string lv_string;

    // Automatic Variable Declarations
    int autoAF4F31B4_ae;
    const int autoAF4F31B4_ai = 1;

    // Variable Initialization
    lv_length = (LengthofArray(lp_arrayName)-1);
    lv_string = "";

    // Implementation
    autoAF4F31B4_ae = lv_length;
    lv_index = 1;
    for ( ; ( (autoAF4F31B4_ai >= 0 && lv_index <= autoAF4F31B4_ae) || (autoAF4F31B4_ai < 0 && lv_index >= autoAF4F31B4_ae) ) ; lv_index += autoAF4F31B4_ai ) {
        lv_string = (lv_string + "+" + libCore_gf_GetArrayValueString(lp_arrayName, lv_index) + "+" + lp_glue);
    }
    lv_string = (lv_string + libCore_gf_GetArrayValueString(lp_arrayName, lv_length));
    return lv_string;
}

int libCore_gf_IndexofGreatestLowestValue (string lp_arrayName, bool lp_greatestLowest) {
    // Variable Declarations
    int lv_itIndex;
    int lv_maxIndex;
    fixed lv_currenValue;
    fixed lv_greatestValue;
    int lv_return_Index;

    // Automatic Variable Declarations
    int auto54E26ECD_ae;
    const int auto54E26ECD_ai = 1;

    // Variable Initialization
    lv_maxIndex = LengthofArray(lp_arrayName);

    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) == c_dataTypeInt)) {
        lv_greatestValue = IntToFixed(libCore_gf_GetArrayValueInteger(lp_arrayName, 0));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) == c_dataTypeFixed)) {
        lv_greatestValue = libCore_gf_GetArrayValueReal(lp_arrayName, 0);
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) != c_dataTypeInt) && (libCore_gf_TypeofArrayValue(lp_arrayName, 0) != c_dataTypeFixed)) {
        return 0;
    }
    auto54E26ECD_ae = lv_maxIndex;
    lv_itIndex = 1;
    for ( ; ( (auto54E26ECD_ai >= 0 && lv_itIndex <= auto54E26ECD_ae) || (auto54E26ECD_ai < 0 && lv_itIndex >= auto54E26ECD_ae) ) ; lv_itIndex += auto54E26ECD_ai ) {
        if ((libCore_gf_TypeofArrayValue(lp_arrayName, lv_itIndex) == c_dataTypeInt)) {
            lv_currenValue = IntToFixed(libCore_gf_GetArrayValueInteger(lp_arrayName, lv_itIndex));
        }
        else {
            lv_currenValue = libCore_gf_GetArrayValueReal(lp_arrayName, lv_itIndex);
        }
        if ((lp_greatestLowest == true)) {
            if ((lv_currenValue > lv_greatestValue)) {
                lv_return_Index = lv_itIndex;
                lv_greatestValue = lv_currenValue;
            }

        }
        else {
            if ((lv_currenValue < lv_greatestValue)) {
                lv_return_Index = lv_itIndex;
                lv_greatestValue = lv_currenValue;
            }

        }
    }
    return lv_return_Index;
}

void libCore_gf_sortArray (string lp_arrayName, bool lp_ascendingDescendingOrder) {
    int init_i;

    // Variable Declarations
    int lv_indexOuter;
    int lv_indexInner;
    int lv_indexMin;
    fixed lv_scoreSwap;
    int[3] lv_valueTypes;

    // Automatic Variable Declarations
    int autoCB725928_ae;
    const int autoCB725928_ai = 1;
    int auto65EDE988_ae;
    const int auto65EDE988_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_valueTypes[init_i] = c_dataTypeInt;
    }

    // Implementation
    autoCB725928_ae = (LengthofArray(lp_arrayName) - 2);
    lv_indexOuter = 0;
    for ( ; ( (autoCB725928_ai >= 0 && lv_indexOuter <= autoCB725928_ae) || (autoCB725928_ai < 0 && lv_indexOuter >= autoCB725928_ae) ) ; lv_indexOuter += autoCB725928_ai ) {
        lv_indexMin = lv_indexOuter;
        auto65EDE988_ae = (LengthofArray(lp_arrayName) - 1);
        lv_indexInner = (lv_indexOuter + 1);
        for ( ; ( (auto65EDE988_ai >= 0 && lv_indexInner <= auto65EDE988_ae) || (auto65EDE988_ai < 0 && lv_indexInner >= auto65EDE988_ae) ) ; lv_indexInner += auto65EDE988_ai ) {
            if ((libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexInner) < libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexMin))) {
                lv_indexMin = lv_indexInner;
            }

        }
        if ((lv_indexMin != lv_indexOuter)) {
            lv_scoreSwap = libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexOuter);
            lv_valueTypes[0] = libCore_gf_TypeofArrayValue(lp_arrayName, lv_indexMin);
            lv_valueTypes[1] = libCore_gf_TypeofArrayValue(lp_arrayName, lv_indexOuter);
            if ((lv_valueTypes[0] == c_dataTypeFixed)) {
                libCore_gf_SetArrayValueReal(lp_arrayName, lv_indexOuter, libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexMin));
            }
            else {
                libCore_gf_SetArrayValueInteger(lp_arrayName, lv_indexOuter, libCore_gf_GetArrayValueInteger(lp_arrayName, lv_indexMin));
            }
            if ((lv_valueTypes[1] == c_dataTypeFixed)) {
                libCore_gf_SetArrayValueReal(lp_arrayName, lv_indexMin, lv_scoreSwap);
            }
            else {
                libCore_gf_SetArrayValueInteger(lp_arrayName, lv_indexMin, FixedToInt(lv_scoreSwap));
            }
        }

    }
    if ((lp_ascendingDescendingOrder == false)) {
        libCore_gf_ReverseArray(lp_arrayName);
    }

}

void CopyArray (string lp_arrayName, string lp_newArrayName) {
    // Variable Declarations
    int lv_itIndex;
    int lv_maxIndex;

    // Automatic Variable Declarations
    int auto2BE2821D_ae;
    const int auto2BE2821D_ai = 1;

    // Variable Initialization
    lv_maxIndex = LengthofArray(lp_arrayName);

    // Implementation
    CreateArray(lp_newArrayName);
    auto2BE2821D_ae = lv_maxIndex;
    lv_itIndex = 0;
    for ( ; ( (auto2BE2821D_ai >= 0 && lv_itIndex <= auto2BE2821D_ae) || (auto2BE2821D_ai < 0 && lv_itIndex >= auto2BE2821D_ae) ) ; lv_itIndex += auto2BE2821D_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_newArrayName, lv_itIndex, lp_arrayName, lv_itIndex);
    }
}

void libCore_gf_DeleteArrayKey (string lp_arrayName, int lp_arrayKey) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    int auto54C5FF56_ae;
    const int auto54C5FF56_ai = 1;

    // Variable Initialization
    lv_a = lp_arrayKey;
    lv_b = LengthofArray(lp_arrayName);

    // Implementation
    auto54C5FF56_ae = lv_b;
    lv_a = lp_arrayKey;
    for ( ; ( (auto54C5FF56_ai >= 0 && lv_a <= auto54C5FF56_ae) || (auto54C5FF56_ai < 0 && lv_a >= auto54C5FF56_ae) ) ; lv_a += auto54C5FF56_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, (lv_a-1), lp_arrayName, lv_a);
    }
    DataTableSetInt(true, lp_arrayName, (DataTableGetInt(true, lp_arrayName)-1));
    DataTableValueRemove(true, (lp_arrayName + "[" + IntToString(lp_arrayKey) + "]"));
}

void libCore_gf_Move (string lp_arrayName, int lp_indexFrom, int lp_indexTo) {
    // Variable Declarations
    string lv_temp;
    int lv_increment;
    int lv_k;

    // Automatic Variable Declarations
    int autoA71CF8D3_ae;
    int autoA71CF8D3_ai;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    if ((lp_indexFrom == lp_indexTo)) {
        return ;
    }

    if ((lp_indexTo < lp_indexFrom)) {
        lv_increment = -1;
    }
    else {
        lv_increment = 1;
    }
    lv_temp = (lp_arrayName + "__func_move__TEMP_");
    CreateArray(lv_temp);
    libCore_gf_SetArrayValuetoArrayValue(lv_temp, 0, lp_arrayName, lp_indexFrom);
    autoA71CF8D3_ae = lp_indexTo;
    autoA71CF8D3_ai = lv_increment;
    lv_k = lp_indexFrom;
    for ( ; ( (autoA71CF8D3_ai >= 0 && lv_k <= autoA71CF8D3_ae) || (autoA71CF8D3_ai < 0 && lv_k >= autoA71CF8D3_ae) ) ; lv_k += autoA71CF8D3_ai ) {
        if ((lv_k != lp_indexTo)) {
            libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lv_k, lp_arrayName, (lv_k + lv_increment));
        }

    }
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_indexTo, lv_temp, 0);
    DataTableValueRemove(true, lv_temp);
    DataTableValueRemove(true, (lv_temp + "[0]"));
}

void libCore_gf_SwapArrayValues (string lp_arrayName, int lp_arrayIndex1, int lp_arrayIndex2) {
    // Variable Declarations
    string lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = (lp_arrayName + "__func_swap__TEMP_");
    CreateArray(lv_temp);
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_arrayIndex1, lp_arrayName, lp_arrayIndex2);
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_arrayIndex2, lv_temp, 0);
    DataTableValueRemove(true, lv_temp);
    DataTableValueRemove(true, ("temp" + "[0]"));
}

void libCore_gf_ReverseArray (string lp_arrayName) {
    // Variable Declarations
    int lv_itIndex;
    int lv_reversedIndex;
    int lv_tempIndex;
    string lv_array_temp;

    // Automatic Variable Declarations
    const int autoDD7A84E7_ae = 0;
    const int autoDD7A84E7_ai = -1;
    int auto07B9DADE_ae;
    const int auto07B9DADE_ai = 1;

    // Variable Initialization
    lv_array_temp = (lp_arrayName + "__func_reverse__TEMP_");

    // Implementation
    CopyArray(lp_arrayName, lv_array_temp);
    lv_itIndex = (LengthofArray(lp_arrayName)-1);
    for ( ; ( (autoDD7A84E7_ai >= 0 && lv_itIndex <= autoDD7A84E7_ae) || (autoDD7A84E7_ai < 0 && lv_itIndex >= autoDD7A84E7_ae) ) ; lv_itIndex += autoDD7A84E7_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lv_reversedIndex, lv_array_temp, lv_itIndex);
        lv_reversedIndex += 1;
    }
    DataTableValueRemove(true, lv_array_temp);
    auto07B9DADE_ae = LengthofArray(lp_arrayName);
    lv_tempIndex = 0;
    for ( ; ( (auto07B9DADE_ai >= 0 && lv_tempIndex <= auto07B9DADE_ae) || (auto07B9DADE_ai < 0 && lv_tempIndex >= auto07B9DADE_ae) ) ; lv_tempIndex += auto07B9DADE_ai ) {
        DataTableValueRemove(true, (lv_array_temp + "[" + IntToString(lv_tempIndex) + "]"));
    }
}

void libCore_gf_Shuffle (string lp_arrayName) {
    // Variable Declarations
    int lv_index;
    int lv_indexRandom;
    int lv_scoreSwap;

    // Automatic Variable Declarations
    int autoDB31B383_ae;
    const int autoDB31B383_ai = 1;

    // Variable Initialization

    // Implementation
    autoDB31B383_ae = (LengthofArray(lp_arrayName) - 1);
    lv_index = 0;
    for ( ; ( (autoDB31B383_ai >= 0 && lv_index <= autoDB31B383_ae) || (autoDB31B383_ai < 0 && lv_index >= autoDB31B383_ae) ) ; lv_index += autoDB31B383_ai ) {
        lv_indexRandom = RandomInt(lv_index, (LengthofArray(lp_arrayName) - 1));
        if ((lv_indexRandom != lv_index)) {
            libCore_gf_SwapArrayValues(lp_arrayName, lv_index, lv_indexRandom);
        }

    }
}

void libCore_gf_MergeArrays (string lp_arrayName1, string lp_arrayName2) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;

    // Automatic Variable Declarations
    int autoBA13B59F_ae;
    const int autoBA13B59F_ai = 1;

    // Variable Initialization
    lv_b = LengthofArray(lp_arrayName2);
    lv_c = LengthofArray(lp_arrayName1);

    // Implementation
    autoBA13B59F_ae = lv_b;
    lv_a = 1;
    for ( ; ( (autoBA13B59F_ai >= 0 && lv_a <= autoBA13B59F_ae) || (autoBA13B59F_ai < 0 && lv_a >= autoBA13B59F_ae) ) ; lv_a += autoBA13B59F_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName1, (lv_a+lv_c), lp_arrayName2, lv_a);
    }
}

int libCore_gf_UnitInventoryItemPositionInInventoryOfUnit (string lp_inventoryItem, unit lp_unit) {
    // Variable Declarations
    int lv_itSlot;
    int lv_itItem;
    int lv_position;
    unit lv_item;
    int[libCore_gv_bALPlayerTotalInventorySlots + 1] lv_itemPosition;
    int lv_itemsCount;

    // Automatic Variable Declarations
    unitgroup autoB164B651_g;
    int autoB164B651_u;

    // Variable Initialization

    // Implementation
    lv_itemsCount = UnitInventoryCount(lp_unit, c_unitInventoryCountCarried);
    if ((lv_itemsCount > 0)) {
        autoB164B651_g = UnitInventoryGroup(lp_unit);
        autoB164B651_u = UnitGroupCount(autoB164B651_g, c_unitCountAll);
        for (;; autoB164B651_u -= 1) {
            lv_item = UnitGroupUnitFromEnd(autoB164B651_g, autoB164B651_u);
            if (lv_item == null) { break; }
            if ((UnitGetType(lv_item) == lp_inventoryItem)) {
                return UnitInventoryContainer(lv_item);
            }

        }
    }

    TextExpressionSetToken("Param/Expression/lib_Core_28542C72", "A", UnitGetName(lp_unit));
    TextExpressionSetToken("Param/Expression/lib_Core_28542C72", "B", UnitTypeGetName(lp_inventoryItem));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_28542C72"), true);
    return -1;
}

unit libCore_gf_InventoryItemInInventoryPositionOfUnit (unit lp_unit, int lp_inventoryPosition) {
    // Variable Declarations
    int lv_itSlot;
    int lv_itItem;
    int lv_position;
    unit lv_item;
    int[libCore_gv_bALPlayerTotalInventorySlots + 1] lv_itemPosition;
    int lv_itemsCount;

    // Automatic Variable Declarations
    unitgroup autoED6184E4_g;
    int autoED6184E4_u;

    // Variable Initialization

    // Implementation
    lv_itemsCount = UnitInventoryCount(lp_unit, c_unitInventoryCountCarried);
    if ((lv_itemsCount > 0)) {
        autoED6184E4_g = UnitInventoryGroup(lp_unit);
        autoED6184E4_u = UnitGroupCount(autoED6184E4_g, c_unitCountAll);
        for (;; autoED6184E4_u -= 1) {
            lv_item = UnitGroupUnitFromEnd(autoED6184E4_g, autoED6184E4_u);
            if (lv_item == null) { break; }
            if ((lp_inventoryPosition == UnitInventoryContainer(lv_item))) {
                return lv_item;
            }

        }
    }

    return null;
}

void libCore_gf_RemoveInventoryItemUnitTypeFromInventoryOfUnitGroup (unitgroup lp_unitGroup, string lp_item) {
    // Variable Declarations
    unit lv_itUnit;
    unit lv_item;

    // Automatic Variable Declarations
    unitgroup auto61D3EDB3_g;
    int auto61D3EDB3_u;
    unitgroup autoD599ABB7_g;
    int autoD599ABB7_u;

    // Variable Initialization

    // Implementation
    auto61D3EDB3_g = lp_unitGroup;
    auto61D3EDB3_u = UnitGroupCount(auto61D3EDB3_g, c_unitCountAll);
    for (;; auto61D3EDB3_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto61D3EDB3_g, auto61D3EDB3_u);
        if (lv_itUnit == null) { break; }
        autoD599ABB7_g = UnitInventoryGroup(lv_itUnit);
        autoD599ABB7_u = UnitGroupCount(autoD599ABB7_g, c_unitCountAll);
        for (;; autoD599ABB7_u -= 1) {
            lv_item = UnitGroupUnitFromEnd(autoD599ABB7_g, autoD599ABB7_u);
            if (lv_item == null) { break; }
            if ((UnitGetType(lv_item) == lp_item)) {
                UnitInventoryRemove(lv_item);
            }

        }
    }
}

bool libCore_gf_LoadoutElementIsNew (datetime lp_elementReleaseDateTime) {
    // Variable Declarations
    int lv_yearDiff;
    int lv_monthDiff;
    int lv_currentMonth;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_yearDiff = MaxI((GetDateTimeYear(CurrentDateTimeGet()) - GetDateTimeYear(lp_elementReleaseDateTime)), 0);
    lv_currentMonth = ((lv_yearDiff*12)+GetDateTimeMonth(CurrentDateTimeGet()));
    lv_monthDiff = MaxI((lv_currentMonth - GetDateTimeMonth(lp_elementReleaseDateTime)), 0);
    if ((lv_monthDiff <= libCore_gv_loadoutNewItemReleaseDateMonthThreshold)) {
        return true;
    }

    return false;
}

void libCore_gf_CreateMinimapPingStorm (playergroup lp_players, string lp_pingData, point lp_position, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    PingCreateFromData(lp_players, lp_pingData, lp_position);
    if ((lp_color != ColorWithAlpha(0,0,0,0))) {
        PingSetColor(PingLastCreated(), lp_color);
    }

    if ((lp_duration != -1)) {
        PingSetDuration(PingLastCreated(), lp_duration);
    }

}

void libCore_gf_CreatePingFacingAngleWithType (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle, int lp_pingingPlayerID) {
    // Variable Declarations
    point lv_pointWithAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pointWithAngle = libNtve_gf_PointFacingAngle(lp_position, lp_angle);
    PingCreateWithPlayerId(lp_players, lp_model, lv_pointWithAngle, lp_color, lp_duration, lp_pingingPlayerID);
}

void libCore_gf_PlayerApplySkinReplacingExistingUnit (int lp_player, string lp_skin, bool lp_activateDeactivate) {
    // Variable Declarations
    string lv_modelOld;
    string lv_modelNew;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;
    string lv_fromPath;
    string lv_toPath;
    string lv_replacementType;

    // Automatic Variable Declarations
    int auto1C25F9B8_ae;
    const int auto1C25F9B8_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_modelNew = "";
    lv_c = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skin, "ReplacementArray", c_playerAny) - 1);
    lv_fromPath = "From";
    lv_toPath = "To";
    lv_replacementType = "";

    // Implementation
    PlayerApplySkin(lp_player, lp_skin, lp_activateDeactivate);
    if ((lp_activateDeactivate == false)) {
        lv_fromPath = "To";
        lv_toPath = "From";
    }

    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    auto1C25F9B8_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto1C25F9B8_ai >= 0 && lv_i <= auto1C25F9B8_ae) || (auto1C25F9B8_ai < 0 && lv_i >= auto1C25F9B8_ae) ) ; lv_i += auto1C25F9B8_ai ) {
        lv_replacementType = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "ReplacementArray[" + IntToString(lv_i) + "].Catalog", c_playerAny);
        if ((lv_replacementType == "Model")) {
            lv_modelOld = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_fromPath)), c_playerAny);
            lv_modelNew = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_toPath)), c_playerAny);
            if ((CatalogEntryIsValid(c_gameCatalogModel, lv_modelOld) == true) && (CatalogEntryIsValid(c_gameCatalogModel, lv_modelNew) == true)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, (("ModelSwap " + lv_modelNew)), "", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

playergroup libCore_gf_PlayerGroupExceptOfPlayer (playergroup lp_sourceGroup, int lp_exceptedPlayer) {
    // Variable Declarations
    playergroup lv_targetGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetGroup = PlayerGroupEmpty();

    // Implementation
    lv_targetGroup = PlayerGroupCopy(lp_sourceGroup);
    PlayerGroupRemove(lv_targetGroup, lp_exceptedPlayer);
    return lv_targetGroup;
}

int libCore_gf_RandomPlayerFromPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(lp_playerGroup) > 0)) {
        lv_player = PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
        return lv_player;
    }

    return -1;
}

playergroup libCore_gf_PlayerGroupMuting (int lp_muteType, int lp_player, bool lp_muted) {
    // Variable Declarations
    playergroup lv_mutedGroup;
    playergroup lv_unmutedGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto511DF6E6_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto511DF6E6_ai = 1;
    int autoEC8DB49D_val;

    // Variable Initialization
    lv_mutedGroup = PlayerGroupEmpty();
    lv_unmutedGroup = PlayerGroupEmpty();

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto511DF6E6_ai >= 0 && lv_itPlayer <= auto511DF6E6_ae) || (auto511DF6E6_ai < 0 && lv_itPlayer >= auto511DF6E6_ae) ) ; lv_itPlayer += auto511DF6E6_ai ) {
        if ((lv_itPlayer != lp_player)) {
            autoEC8DB49D_val = lp_muteType;
            if (autoEC8DB49D_val == libCore_ge_MuteType_Announcements) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupAnnouncements, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else if (autoEC8DB49D_val == libCore_ge_MuteType_ChatMessages) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupChat, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else if (autoEC8DB49D_val == libCore_ge_MuteType_Pings) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupPing, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else {
            }
        }

    }
    if ((lp_muted == true)) {
        return lv_mutedGroup;
    }
    else {
        return lv_unmutedGroup;
    }
}

playergroup PlayerGroupExceptOfPlayerGroup (playergroup lp_playerGroup, playergroup lp_playerGroupExclude) {
    // Variable Declarations
    playergroup lv_returnGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnGroup = PlayerGroupEmpty();

    // Implementation
    lv_returnGroup = PlayerGroupCopy(lp_playerGroup);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_playerGroupExclude, lv_returnGroup);
    return lv_returnGroup;
}

point libCore_gf_PointFromPositionAndAngle (point lp_point, fixed lp_angle) {
    // Variable Declarations
    point lv_pointWithFacing;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pointWithFacing = lp_point;
    PointSetFacing(lv_pointWithFacing, lp_angle);
    return lv_pointWithFacing;
}

bool libCore_gf_TechAliasExist (int lp_catalog, string lp_catalogEntry, string lp_techAlias) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = (IntToString((lp_catalog)) + "_" + (lp_catalogEntry) + "_" + lp_techAlias);

    // Implementation
    return (UnitBehaviorEffectTreeUserData(libCore_gv_mAPUserRecordUnit, "HeroGenericUserRecord", lv_name) == 1.0);
}

string libCore_gf_TechAliasToString (string lp_techAlias) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_techAlias);
}

void libCore_gf_TechAliasSuppressHealResponseEffectOverride (string lp_effect) {
    // Variable Declarations
    int lv_itEffect;
    int lv_effectArrayMax;
    string lv_techAlias;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int autoF82F66C5_ae;
    const int autoF82F66C5_ai = 1;
    const int auto1BE62810_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1BE62810_ai = 1;

    // Variable Initialization
    lv_techAlias = "";

    // Implementation
    if ((CatalogEntryScope(c_gameCatalogEffect, lp_effect) != "CEffectSet")) {
        return ;
    }

    lv_effectArrayMax = CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", c_playerAny);
    if ((lv_effectArrayMax > 0)) {
        autoF82F66C5_ae = (lv_effectArrayMax-1);
        lv_itEffect = 0;
        for ( ; ( (autoF82F66C5_ai >= 0 && lv_itEffect <= autoF82F66C5_ae) || (autoF82F66C5_ai < 0 && lv_itEffect >= autoF82F66C5_ae) ) ; lv_itEffect += autoF82F66C5_ai ) {
            if ((CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_itEffect) + "]", c_playerAny) == ("HeroGenericUniversalHealResponseSet"))) {
                lv_itPlayer = 0;
                for ( ; ( (auto1BE62810_ai >= 0 && lv_itPlayer <= auto1BE62810_ae) || (auto1BE62810_ai < 0 && lv_itPlayer >= auto1BE62810_ae) ) ; lv_itPlayer += auto1BE62810_ai ) {
                    CatalogFieldValueSet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_itEffect) + "]", lv_itPlayer, "");
                }
                return ;
            }

        }
    }

}

void libCore_gf_TechAliasIgnoreCallForHelpBehaviorOverride (string lp_effect) {
    // Variable Declarations
    int lv_itEffect;
    int lv_effectArrayMax;
    int lv_itPlayer;
    string lv_behavior;
    int lv_effectArrayCounter;

    // Automatic Variable Declarations
    int autoFDC7C254_ae;
    const int autoFDC7C254_ai = 1;
    int autoD9F4326C_ae;
    const int autoD9F4326C_ai = 1;
    const int autoE2C61AC7_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoE2C61AC7_ai = 1;
    int auto88BE655C_ae;
    const int auto88BE655C_ai = 1;
    int autoB5F3D771_ae;
    const int autoB5F3D771_ai = 1;
    const int autoC6E4DDDC_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoC6E4DDDC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryScope(c_gameCatalogEffect, lp_effect) != "CEffectDamage")) {
        return ;
    }

    lv_behavior = "TowerCFHDamageResponse";
    lv_effectArrayMax = CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray", libCore_gv_cOMPUTER_Neutral);
    if ((lv_effectArrayMax <= 0)) {
        lv_effectArrayCounter = 0;
        TextExpressionSetToken("Param/Expression/lib_Core_222D0C14", "A", StringToText((lp_effect)));
        TextExpressionSetToken("Param/Expression/lib_Core_222D0C14", "B", StringToText((lv_behavior)));
        TextExpressionSetToken("Param/Expression/lib_Core_222D0C14", "C", IntToText(lv_effectArrayCounter));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_222D0C14"), true);
    }
    else {
        lv_effectArrayCounter = 0;
        autoFDC7C254_ae = (lv_effectArrayMax-1);
        lv_itEffect = 0;
        for ( ; ( (autoFDC7C254_ai >= 0 && lv_itEffect <= autoFDC7C254_ae) || (autoFDC7C254_ai < 0 && lv_itEffect >= autoFDC7C254_ae) ) ; lv_itEffect += autoFDC7C254_ai ) {
            if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", libCore_gv_cOMPUTER_Neutral) == "")) {
                lv_effectArrayCounter += 1;
            }

        }
        if ((lv_effectArrayCounter == 0)) {
            TextExpressionSetToken("Param/Expression/lib_Core_A1F62A6C", "A", StringToText((lp_effect)));
            TextExpressionSetToken("Param/Expression/lib_Core_A1F62A6C", "B", StringToText((lv_behavior)));
            TextExpressionSetToken("Param/Expression/lib_Core_A1F62A6C", "C", IntToText(lv_effectArrayMax));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A1F62A6C"), true);
        }
        else {
            autoD9F4326C_ae = (lv_effectArrayMax-1);
            lv_itEffect = 0;
            for ( ; ( (autoD9F4326C_ai >= 0 && lv_itEffect <= autoD9F4326C_ae) || (autoD9F4326C_ai < 0 && lv_itEffect >= autoD9F4326C_ae) ) ; lv_itEffect += autoD9F4326C_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", libCore_gv_cOMPUTER_Neutral) == "")) {
                    lv_itPlayer = 0;
                    for ( ; ( (autoE2C61AC7_ai >= 0 && lv_itPlayer <= autoE2C61AC7_ae) || (autoE2C61AC7_ai < 0 && lv_itPlayer >= autoE2C61AC7_ae) ) ; lv_itPlayer += autoE2C61AC7_ai ) {
                        CatalogFieldValueSet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", lv_itPlayer, (lp_effect));
                    }
                    break;
                }

            }
        }
    }
    lv_behavior = "TowerCFHDamageResponseBasicAttack";
    lv_effectArrayMax = CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray", libCore_gv_cOMPUTER_Neutral);
    if ((lv_effectArrayMax <= 0)) {
        lv_effectArrayCounter = 0;
        TextExpressionSetToken("Param/Expression/lib_Core_6A3BEDA1", "A", StringToText((lp_effect)));
        TextExpressionSetToken("Param/Expression/lib_Core_6A3BEDA1", "B", StringToText((lv_behavior)));
        TextExpressionSetToken("Param/Expression/lib_Core_6A3BEDA1", "C", IntToText(lv_effectArrayCounter));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_6A3BEDA1"), true);
    }
    else {
        lv_effectArrayCounter = 0;
        auto88BE655C_ae = (lv_effectArrayMax-1);
        lv_itEffect = 0;
        for ( ; ( (auto88BE655C_ai >= 0 && lv_itEffect <= auto88BE655C_ae) || (auto88BE655C_ai < 0 && lv_itEffect >= auto88BE655C_ae) ) ; lv_itEffect += auto88BE655C_ai ) {
            if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", libCore_gv_cOMPUTER_Neutral) == "")) {
                lv_effectArrayCounter += 1;
            }

        }
        if ((lv_effectArrayCounter == 0)) {
            TextExpressionSetToken("Param/Expression/lib_Core_E3ED6832", "A", StringToText((lp_effect)));
            TextExpressionSetToken("Param/Expression/lib_Core_E3ED6832", "B", StringToText((lv_behavior)));
            TextExpressionSetToken("Param/Expression/lib_Core_E3ED6832", "C", IntToText(lv_effectArrayMax));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E3ED6832"), true);
        }
        else {
            autoB5F3D771_ae = (lv_effectArrayMax-1);
            lv_itEffect = 0;
            for ( ; ( (autoB5F3D771_ai >= 0 && lv_itEffect <= autoB5F3D771_ae) || (autoB5F3D771_ai < 0 && lv_itEffect >= autoB5F3D771_ae) ) ; lv_itEffect += autoB5F3D771_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", libCore_gv_cOMPUTER_Neutral) == "")) {
                    lv_itPlayer = 0;
                    for ( ; ( (autoC6E4DDDC_ai >= 0 && lv_itPlayer <= autoC6E4DDDC_ae) || (autoC6E4DDDC_ai < 0 && lv_itPlayer >= autoC6E4DDDC_ae) ) ; lv_itPlayer += autoC6E4DDDC_ai ) {
                        CatalogFieldValueSet(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ExcludeEffectArray[" + IntToString(lv_itEffect) + "]", lv_itPlayer, (lp_effect));
                    }
                    break;
                }

            }
        }
    }
}

void libCore_gf_TechAliasPlayerIndexOverride (string lp_effect) {
    // Variable Declarations
    int lv_itEffect;
    int lv_itPlayer;
    string lv_string;

    // Automatic Variable Declarations
    const int autoEA79F776_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoEA79F776_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((CatalogEntryScope(c_gameCatalogEffect, lp_effect) != "CEffectUserData")) {
        return ;
    }

    lv_itPlayer = 0;
    for ( ; ( (autoEA79F776_ai >= 0 && lv_itPlayer <= autoEA79F776_ae) || (autoEA79F776_ai < 0 && lv_itPlayer >= autoEA79F776_ae) ) ; lv_itPlayer += autoEA79F776_ai ) {
        lv_string = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Key", c_playerAny);
        lv_string = StringReplaceWord(lv_string, "Player", ("Player" + IntToString(lv_itPlayer)), c_stringReplaceAll, c_stringNoCase);
        CatalogFieldValueSet(c_gameCatalogEffect, lp_effect, "Key", lv_itPlayer, lv_string);
        lv_string = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SourceKey", c_playerAny);
        lv_string = StringReplaceWord(lv_string, "Player", ("Player" + IntToString(lv_itPlayer)), c_stringReplaceAll, c_stringNoCase);
        CatalogFieldValueSet(c_gameCatalogEffect, lp_effect, "SourceKey", lv_itPlayer, lv_string);
    }
}

int libCore_gf_TriggerEventType () {
    // Automatic Variable Declarations
    // Implementation
    return EventType();
}

int libCore_gf_TriggerEventIndex () {
    // Automatic Variable Declarations
    // Implementation
    return EventType();
}

void libCore_gf_RunTriggerByNameStorm (string lp_triggerName, bool lp_check, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_TriggerExecuteByName((lp_triggerName + "_Func"), lp_check, lp_wait);
}

void libCore_gf_TriggerAddEventEffectUsed (int lp_player, string lp_effect, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventPlayerEffectUsed(lp_trigger, lp_player, lp_effect);
}

void libCore_gf_TriggerAddEventTimer (timer lp_timer, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventTimer(lp_trigger, lp_timer);
}

string libCore_gf_GetModelLinkForUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_unitTypeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTypeString = "";

    // Implementation
    lv_unitTypeString = (lp_unitType);
    return (CatalogFieldValueGet(c_gameCatalogActor, lp_unitType, "Model", c_playerAny));
}

string libCore_gf_UnitTagUI (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (IntToString(libCore_gf_UnitTagIndex(lp_unit)) + "#" + IntToString(libCore_gf_UnitTagRecycle(lp_unit)));
}

int libCore_gf_UnitTagRecycle (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetTag(lp_unit) & 0x0003ffff;
}

int libCore_gf_UnitTagIndex (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetTag(lp_unit) >> 18) & 0x00003fff;
}

string libCore_gf_GetWeaponDamageForUnit2 (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int auto73743F23_ae;
    const int auto73743F23_ai = 1;

    // Variable Initialization

    // Implementation
    auto73743F23_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (auto73743F23_ai >= 0 && lv_itWeapon <= auto73743F23_ae) || (auto73743F23_ai < 0 && lv_itWeapon >= auto73743F23_ae) ) ; lv_itWeapon += auto73743F23_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponGet(lp_unit, lv_itWeapon);
        }

    }
    return null;
}

string libCore_gf_GetWeaponDamageForUnit3 (unit lp_unit) {
    // Variable Declarations
    string lv_effect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_effect = (CatalogFieldValueGet(c_gameCatalogWeapon, libCore_gf_GetWeaponDamageForUnit2(lp_unit), "DisplayEffect", UnitGetOwner(lp_unit)));
    return lv_effect;
}

bool libCore_gf_UserDataBoolean (string lp_userDataInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("GenericTrueFalse", lp_userDataInstance, "True/Flase", 1) == 1);
}

bool libCore_gf_UserDataDefaultInstance (string lp_userDataInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_userDataInstance != "[Default]") && (lp_userDataInstance != null)) {
        return false;
    }

    return true;
}

bool libCore_gf_UserDataInstanceisUsed (string lp_userDataInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_userDataInstance != "[Default]") && (lp_userDataInstance != null)) {
        return true;
    }

    return false;
}

void libCore_gf_SaveUserRecordValue (string lp_name, fixed lp_value, unit lp_location) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_location == null)) {
        lv_unit = libCore_gv_mAPUserRecordUnit;
    }
    else {
        lv_unit = lp_location;
    }
    UnitBehaviorEffectTreeSetUserData(lv_unit, "HeroGenericUserRecord", lp_name, lp_value);
}

void libCore_gf_SaveUserRecordValueBoolean (string lp_name, bool lp_value, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Boolean);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(BoolToInt(lp_value)), lp_location);
}

void libCore_gf_SaveUserRecordValueInteger (string lp_name, int lp_value, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Integer);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), lp_location);
}

void libCore_gf_SaveUserRecordValueDialogItem (string lp_name, int lp_value, unit lp_location) {
    // Variable Declarations

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCore_gf_SaveUserRecordValue(lp_name, IntToFixed(lp_value), lp_location);
}

void libCore_gf_SaveUserRecordValueEffectSourceButtonIndex (string lp_name, int lp_value) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_EffectSourceButtonIndex);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), null);
}

void libCore_gf_SaveUserRecordValueReal (string lp_name, fixed lp_value, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Real);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, lp_value, lp_location);
}

void libCore_gf_SaveUserRecordValuePathDisplay (string lp_name, int lp_value, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_PathDisplay);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), lp_location);
}

void libCore_gf_SaveUserRecordValueTalentIndex (string lp_name, int lp_value) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TalentIndex);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), null);
}

void libCore_gf_SaveUserRecordValueTokenCounterInstanceIndex (string lp_name, int lp_value) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TokenCounterInstanceIndex);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), null);
}

void libCore_gf_SaveUserRecordValueTokenCounterBehaviorIndex (string lp_name, int lp_value) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TokenCounterBehaviorIndex);

    // Implementation
    libCore_gf_SaveUserRecordValue(lv_valueName, IntToFixed(lp_value), null);
}

fixed libCore_gf_ValueFromUserRecord (string lp_name, unit lp_location) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_location == null)) {
        lv_unit = libCore_gv_mAPUserRecordUnit;
    }
    else {
        lv_unit = lp_location;
    }
    return UnitBehaviorEffectTreeUserData(lv_unit, "HeroGenericUserRecord", lp_name);
}

bool libCore_gf_ValueFromUserRecordBoolean (string lp_name, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Boolean);

    // Implementation
    return (FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, lp_location)) == 1);
}

int libCore_gf_ValueFromUserRecordInteger (string lp_name, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Integer);

    // Implementation
    return FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, lp_location));
}

int libCore_gf_ValueFromUserRecordDialogItem (string lp_name, unit lp_location) {
    // Variable Declarations
    int lv_dialogItemAsInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_dialogItemAsInt = FixedToInt(libCore_gf_ValueFromUserRecord(lp_name, lp_location));
    return lv_dialogItemAsInt;
}

int libCore_gf_ValueFromUserRecordEffectSourceButtonIndex (string lp_name) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_EffectSourceButtonIndex);

    // Implementation
    return FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, null));
}

fixed libCore_gf_ValueFromUserRecordReal (string lp_name, unit lp_location) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_Real);

    // Implementation
    return libCore_gf_ValueFromUserRecord(lv_valueName, lp_location);
}

int libCore_gf_ValueFromUserRecordPathDisplay (string lp_name, unit lp_location) {
    // Variable Declarations
    int lv_pathAsInt;
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_PathDisplay);

    // Implementation
    lv_pathAsInt = FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, lp_location));
    return lv_pathAsInt;
}

int libCore_gf_ValueFromUserRecordTalentIndex (string lp_name) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TalentIndex);

    // Implementation
    return FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, null));
}

int libCore_gf_ValueFromUserRecordTokenCounterInstanceIndex (string lp_name) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TokenCounterInstanceIndex);

    // Implementation
    return FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, null));
}

int libCore_gf_ValueFromUserRecordTokenCounterBehaviorIndex (string lp_name) {
    // Variable Declarations
    string lv_valueName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_valueName = libCore_gf_UserRecordValueName(lp_name, libCore_ge_UserRecordValueType_TokenCounterBehaviorIndex);

    // Implementation
    return FixedToInt(libCore_gf_ValueFromUserRecord(lv_valueName, null));
}

string libCore_gf_UserRecordValueName (string lp_name, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return (IntToString((lp_type)) + "_" + lp_name);
}

bool libCore_gf_ExecuteValidatorOnUnit (string lp_validator, unit lp_sourceUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((ValidatorExecute(lp_validator, lp_sourceUnit, lp_targetUnit) == 0)) {
        return true;
    }

    return false;
}

string libCore_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto1FBE3EB6_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto1FBE3EB6_val = lp_type;
    if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libCore_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libCore_gf_ActorStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libCore_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libCore_gf_TextTagStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libCore_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libCore_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StoreRegionForUnit (unit lp_unit, int lp_index, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_region);
}

region libCore_gf_RegionStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libCore_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libCore_gf_StoreIntegerForUnit (unit lp_unit, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index), lp_value);
}

int libCore_gf_IntegerStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index));
}

void libCore_gf_StoreUnitForUnit (unit lp_unit, int lp_index, unit lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index), lp_value);
}

unit libCore_gf_UnitStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index));
}

void libCore_gf_StoreUnitGroupForUnit (unit lp_unit, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index), lp_value);
}

unitgroup libCore_gf_UnitGroupStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Core
//--------------------------------------------------------------------------------------------------
bool libCore_gt_IncludeCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_IncludeCore_Init () {
    libCore_gt_IncludeCore = TriggerCreate("libCore_gt_IncludeCore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Mod
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeGameMod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto6B3C57C7_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto6B3C57C7_ai = 1;
    playergroup auto115F7BFF_g;
    int auto115F7BFF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NeutralPlayerUnitHandle", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, Point(0.0, 0.0));
    libCore_gv_mAPNeutralHeroUnit = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UserRecordUnitHandle", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, Point(0.0, 0.0));
    libCore_gv_mAPUserRecordUnit = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NeutralPlayerUnitHandle", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, Point(0.0, 0.0));
    libCore_gv_mAPHostileHeroUnit = UnitLastCreated();
    lv_itPlayer = 0;
    for ( ; ( (auto6B3C57C7_ai >= 0 && lv_itPlayer <= auto6B3C57C7_ae) || (auto6B3C57C7_ai < 0 && lv_itPlayer >= auto6B3C57C7_ae) ) ; lv_itPlayer += auto6B3C57C7_ai ) {
        libCore_gv_playerGroupFromPlayer[lv_itPlayer] = PlayerGroupSingle(lv_itPlayer);
    }
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libUIUI_gf_HSUIMuteUnmuteSoundChannelsNotUsedForHeroSelection(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto115F7BFF_g = PlayerGroupAll();
    auto115F7BFF_var = -1;
    while (true) {
        auto115F7BFF_var = PlayerGroupNextPlayer(auto115F7BFF_g, auto115F7BFF_var);
        if (auto115F7BFF_var < 0) { break; }
        CameraPan(auto115F7BFF_var, RegionGetBoundsMax(RegionEntireMap()), 0.0, -1, 0.0, false);
    }
    if ((GameIsOnline() == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetPauseable(false);
    }
    else {
        TriggerDebugWindowOpen(true);
    }
    TriggerExecute(libCore_gt_InitializeDataMiningAndDebugOutput, true, true);
    TriggerExecute(libCore_gt_InitializeData, true, true);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, true);
    TriggerExecute(libUIUI_gt_InitializeUI, true, true);
    if ((libCore_gv_dEBUGErrorDuringInitialization == true)) {
        return true;
    }

    TriggerExecute(libUIUI_gt_PreloadPanelInitialization, true, true);
    libUIUI_gf_PreloadPanelShowHidePanel(true);

    TriggerExecute(libGame_gt_BankOpenBanks, true, true);
    TriggerExecute(libGame_gt_InitializeBanks, true, true);
    TriggerExecute(libCore_gt_InitializeMAPSystemFlags, true, true);
    TriggerExecute(libGame_gt_InitializePlayers, true, true);
    TriggerExecute(libMapM_gt_InitializeMapMechanics, true, true);
    TriggerExecute(libGame_gt_PreloadingInitialize, true, true);
    TriggerExecute(libCore_gt_InitializeMiscStuff, true, false);
    libGame_gf_SendEventIncludeModeInitialization();
    libUIUI_gf_PreloadPanelShowHidePanel(false);
    if ((libCore_gv_sYSStartGame == true)) {
        TriggerExecute(libUIUI_gt_HSUIIngameShowHeroSelection, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeGameMod_Init () {
    libCore_gt_InitializeGameMod = TriggerCreate("libCore_gt_InitializeGameMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_colorString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapLight = (CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Lighting", c_playerAny));
    libCore_gv_cOLORPlayerColor = libCore_gf_GetAllianceColorFromGameUIData("Self", c_playerAny);
    libCore_gv_cOLORAllyColor = libCore_gf_GetAllianceColorFromGameUIData("Ally", c_playerAny);
    libCore_gv_cOLOREnemyColor = libCore_gf_GetAllianceColorFromGameUIData("Hostile", c_playerAny);
    libCore_gv_cOLORNeutralColor = libCore_gf_GetAllianceColorFromGameUIData("Neutral", c_playerAny);
    TriggerExecute(libCore_gt_DataXPInitializeLevelXPValues, true, true);
    TriggerExecute(libCore_gt_DataInitializeMountData, true, true);
    TriggerExecute(libCore_gt_DataInitializeSkinData, true, true);
    TriggerExecute(libCore_gt_DataInitializeAbilities, true, true);
    TriggerExecute(libCore_gt_DataInitializeTalentData, true, true);
    TriggerExecute(libCore_gt_DataInitializeHeroes, true, true);
    TriggerExecute(libCore_gt_DataAnnouncerVOMapDataFields, true, true);
    TriggerExecute(libCore_gt_DataHeroVOInitializeHeroVOData, true, true);
    TriggerExecute(libCore_gt_TokenInitializeTokenData, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderData, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampMercData, true, true);
    TriggerExecute(libCore_gt_InitializeUserDataEffectsSpecificEffects, true, true);
    TriggerExecute(libCore_gt_TechAliasInitialize, true, true);
    TriggerExecute(libCore_gt_DataUnitHistoryDataInitialize, true, true);
    TriggerExecute(libCore_gt_DataEffectsSourceButtonDataInitialize, true, true);
    TriggerExecute(libCore_gt_DataInitializeAnnouncerVOData, true, true);
    TriggerExecute(libCore_gt_DataDeathTimes, true, true);
    TriggerExecute(libCore_gt_MapDataInitialize, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeData_Init () {
    libCore_gt_InitializeData = TriggerCreate("libCore_gt_InitializeData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Misc Stuff
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeMiscStuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFrom("::Scene"), "SceneHaloSetColor 255,0,0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeMiscStuff_Init () {
    libCore_gt_InitializeMiscStuff = TriggerCreate("libCore_gt_InitializeMiscStuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data Mining And Debug Output
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeDataMiningAndDebugOutput_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugEnableType(1, true);
    if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeDataMiningAndDebugOutput_Init () {
    libCore_gt_InitializeDataMiningAndDebugOutput = TriggerCreate("libCore_gt_InitializeDataMiningAndDebugOutput_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize MAP System Flags
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeMAPSystemFlags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itSoundtrack;

    // Automatic Variable Declarations
    const int auto951C2551_ae = libCore_gv_bALMaxTeams;
    const int auto951C2551_ai = 1;
    const int auto7F0310FA_ae = libCore_gv_maxMapSoundtracks_C;
    const int auto7F0310FA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSMapIndexHasBeenForced == false)) {
        libCore_gv_sYSMapIndex = libGame_gv_mTMLGameSetupData.lv_mapDataIndex;
        libGame_gv_gameDataMatchID = libGame_gf_MTMLGenerateMatchID();
    }
    else {
        libGame_gv_gameDataMatchID = libGame_gv_mTMLGameSetupData.lv_matchID;
    }
    libCore_gv_sYSIsSandbox = libGame_gf_MTMLGetGameOption(libCore_ge_GameOptions_Sandbox);
    libCore_gv_sYSPreloadingEnabled = libGame_gf_MTMLGetGameOption(libCore_ge_GameOptions_Preloading);
    libCore_gv_sYSGameMode = libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_gameMode;
    libCore_gv_sYSGameMutator = libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_gameMutator;
    libCore_gv_mAPMap = libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_map;
    libCore_gf_MAPTilesetActivate(libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_tileset);
    lv_itTeam = 1;
    for ( ; ( (auto951C2551_ai >= 0 && lv_itTeam <= auto951C2551_ae) || (auto951C2551_ai < 0 && lv_itTeam >= auto951C2551_ae) ) ; lv_itTeam += auto951C2551_ai ) {
        libCore_gv_mAPMapAnnouncer[lv_itTeam] = libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_mapAnnouncer[lv_itTeam];
    }
    lv_itSoundtrack = 0;
    for ( ; ( (auto7F0310FA_ai >= 0 && lv_itSoundtrack <= auto7F0310FA_ae) || (auto7F0310FA_ai < 0 && lv_itSoundtrack >= auto7F0310FA_ae) ) ; lv_itSoundtrack += auto7F0310FA_ai ) {
        libCore_gv_mAPMapSoundtrack[lv_itSoundtrack] = libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_soundtrack[lv_itSoundtrack];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeMAPSystemFlags_Init () {
    libCore_gt_InitializeMAPSystemFlags = TriggerCreate("libCore_gt_InitializeMAPSystemFlags_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Abilities
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    bool lv_heroIsPaired;
    int lv_itAbilityIndex;
    string lv_itAbilButtonLink;
    string lv_itInstance;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsQ;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsW;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsE;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsActive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPassive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedQ;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedW;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedE;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedActive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedPassive;

    // Automatic Variable Declarations
    string auto85D39618_userType;
    int auto85D39618_i;
    string autoF01004B0_val;
    string autoDB91DDA6_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto85D39618_userType = "Ability";
    auto85D39618_i = 1;
    for ( ; auto85D39618_i <= UserDataInstanceCount(auto85D39618_userType) ; auto85D39618_i += 1 ) {
        lv_itInstance = UserDataInstance(auto85D39618_userType, auto85D39618_i);
        lv_itAbilityIndex += 1;
        libCore_gv_abilityDataNumberOfAbilities += 1;
        if ((libCore_gv_abilityDataNumberOfAbilities > libCore_gv_abilityDataMaxAbilityCount)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_499D4730"), true);
            libCore_gv_abilityDataNumberOfAbilities -= 1;
            return true;
        }

        lv_heroIndex = libNtve_gf_UserDataInstanceGetIndex("Hero", UserDataGetUserInstance("Ability", lv_itInstance, "Hero", 1));
        lv_heroIsPaired = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", UserDataInstance("Hero", lv_heroIndex), "IsPaired", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityInventoryUnit = UserDataGetGameLink("Ability", lv_itInstance, "InventoryUnitEntry", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityLink = UserDataGetGameLink("Ability", lv_itInstance, "AbilityEntry", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityButtonLink = UserDataGetGameLink("Ability", lv_itInstance, "ButtonEntry", 1);
        lv_itAbilButtonLink = libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityButtonLink;
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Name", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Icon", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilitySimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "SimpleDisplayText", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityTooltipText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Tooltip", c_playerAny));
        if ((CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "TooltipCooldownOverrideText", c_playerAny) != "")) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityInfoText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "TooltipCooldownOverrideText", c_playerAny));
        }
        else {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityInfoText = null;
        }
        if ((CatalogFieldValueCount(c_gameCatalogAbil, libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityLink, "Cost", c_playerAny) > 0)) {
            if ((CatalogFieldValueGet(c_gameCatalogAbil, libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityLink, "Cost[" + IntToString(0) + "].Cooldown.Location", c_playerAny) == "Player")) {
                libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityCooldownLocation = libCore_ge_AbilityCooldownLocation_Player;
            }
            else {
                libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityCooldownLocation = libCore_ge_AbilityCooldownLocation_Unit;
            }
        }

        libCore_gv_abilityData[lv_itAbilityIndex].lv_flag_MountReplacement = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_MountReplacement", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_flag_AffectedByCooldownReduction = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_AffectedByCooldownReduction", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_flag_ShowInHeroSelection = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_ShowInHeroSelection", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_flag_UsesCharges = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_UsesCharges", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_flag_CooldownPerUnit = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_CooldownPerUnit", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_paired = UserDataGetUserInstance("Ability", lv_itInstance, "Paired", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_slot = UserDataGetUserInstance("Ability", lv_itInstance, "Slot", 1);
        if ((libCore_gf_UserDataInstanceisUsed(libCore_gv_abilityData[lv_itAbilityIndex].lv_slot) == false)) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_slot = "Passive";
        }

        libCore_gv_abilityData[lv_itAbilityIndex].lv_type = UserDataGetUserInstance("Ability", lv_itInstance, "Type", 1);
        if ((libCore_gf_UserDataInstanceisUsed(libCore_gv_abilityData[lv_itAbilityIndex].lv_type) == false)) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_type = "Passive";
        }

        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded(libCore_gv_abilityData[lv_itAbilityIndex].lv_slot);
        if (((lv_heroIsPaired == false) || ((lv_heroIsPaired == true) && (libCore_gv_abilityData[lv_itAbilityIndex].lv_paired == "Paired1")))) {
            autoF01004B0_val = libCore_gv_abilityData[lv_itAbilityIndex].lv_slot;
            if (autoF01004B0_val == "Basic1") {
                lv_abilityVariationsQ[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsQ[lv_heroIndex];
            }
            else if (autoF01004B0_val == "Basic2") {
                lv_abilityVariationsW[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsW[lv_heroIndex];
            }
            else if (autoF01004B0_val == "Basic3") {
                lv_abilityVariationsE[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsE[lv_heroIndex];
            }
            else if (autoF01004B0_val == "Active") {
                lv_abilityVariationsActive[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsActive[lv_heroIndex];
            }
            else if (autoF01004B0_val == "Trait") {
            }
            else if (autoF01004B0_val == "Heroic") {
            }
            else if (autoF01004B0_val == "Mount") {
            }
            else if (autoF01004B0_val == "Hearthstone") {
            }
            else {
                lv_abilityVariationsPassive[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPassive[lv_heroIndex];
            }
        }
        else if ((lv_heroIsPaired == true) && (libCore_gv_abilityData[lv_itAbilityIndex].lv_paired == "Paired2")) {
            autoDB91DDA6_val = libCore_gv_abilityData[lv_itAbilityIndex].lv_slot;
            if (autoDB91DDA6_val == "Basic1") {
                lv_abilityVariationsPairedQ[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedQ[lv_heroIndex];
            }
            else if (autoDB91DDA6_val == "Basic2") {
                lv_abilityVariationsPairedW[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedW[lv_heroIndex];
            }
            else if (autoDB91DDA6_val == "Basic3") {
                lv_abilityVariationsPairedE[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedE[lv_heroIndex];
            }
            else if (autoDB91DDA6_val == "Active") {
                lv_abilityVariationsPairedActive[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedActive[lv_heroIndex];
            }
            else if (autoDB91DDA6_val == "Trait") {
            }
            else if (autoDB91DDA6_val == "Heroic") {
            }
            else if (autoDB91DDA6_val == "Mount") {
            }
            else if (autoDB91DDA6_val == "Hearthstone") {
            }
            else {
                lv_abilityVariationsPairedPassive[lv_heroIndex] += 1;
                libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedPassive[lv_heroIndex];
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeAbilities_Init () {
    libCore_gt_DataInitializeAbilities = TriggerCreate("libCore_gt_DataInitializeAbilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Announcer VO - Map Data Fields
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataAnnouncerVOMapDataFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "Announcer_PH@HeroSelect", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BattleStartingIn, "Announcer_PH@CountdownRemain", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown10, "Announcer_PH@Countdown10sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown5, "Announcer_PH@Countdown5sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown4, "Announcer_PH@Countdown4sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown3, "Announcer_PH@Countdown3sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown2, "Announcer_PH@Countdown2sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown1, "Announcer_PH@Countdown1sec", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "Announcer_PH@GameStart", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "Announcer_PH@HeroSlain", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants, "Announcer_PH@HeroKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_HeroKilledObserver, "Announcer_PH@Kill_Observer", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_DoubleKill, "Announcer_PH@DoubleKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TripleKill, "Announcer_PH@TripleKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_QuadraKill, "Announcer_PH@FourKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_MegaKill, "Announcer_PH@MegaKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TeamKill, "Announcer_PH@TeamKill", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamKilled, "Announcer_PH@TeamKill_Blue", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamKilled, "Announcer_PH@TeamKill_Red", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AllyFirstBlood, "Announcer_PH@FirstBloodAlly", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood, "Announcer_PH@FirstBlood_Red", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood, "Announcer_PH@FirstBlood_Blue", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "Announcer_PH@SpreeStart", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "Announcer_PH@SpreeEnd", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "Announcer_PH@SpreeFirstUpgrade", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage, "Announcer_PH@SpreeSecondUpgrade", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable, "Announcer_PH@SpreeThirdUpgrade", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar, "Announcer_PH@SpreeMax", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame, "Announcer_PH@PlayerAbandon", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame, "Announcer_PH@PlayerRejoin", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GravestoneRevive, "Announcer_PH@Revive", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "Announcer_PH@OutpostLost", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "Announcer_PH@OutpostDestroy", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "Announcer_PH@KeepLost", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "Announcer_PH@KeepDestroy", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "Announcer_PH@OutpostDestroy_Red", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "Announcer_PH@OutpostDestroy_Blue", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep, "Announcer_PH@KeepDestroy_Red", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep, "Announcer_PH@KeepDestroy_Blue", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "Announcer_PH@CastleAttackAlly", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack, "Announcer_PH@CastleAttack_Blue", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack, "Announcer_PH@CastleAttack_Red", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Victory, "Announcer_PH@EndingWin", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Defeat, "Announcer_PH@EndingLose", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamWins, "Announcer_PH@Ending_Blue", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamWins, "Announcer_PH@Ending_Red", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_LevelUp, "Announcer_PH@LevelAnnounce", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TalentUnlocked, "Announcer_PH@TalentUnlock", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_MVP, "Announcer_PH@MVP", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_MVPVoteEpic, "Announcer_PH@ResultEpic", true);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_MVPVoteLegendary, "Announcer_PH@ResultLegendary", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataAnnouncerVOMapDataFields_Init () {
    libCore_gt_DataAnnouncerVOMapDataFields = TriggerCreate("libCore_gt_DataAnnouncerVOMapDataFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Announcer VO Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeAnnouncerVOData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_announcerPackID;
    string lv_instance;

    // Automatic Variable Declarations
    string auto2CB4CE62_userType;
    int auto2CB4CE62_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2CB4CE62_userType = "Announcer";
    auto2CB4CE62_i = 1;
    for ( ; auto2CB4CE62_i <= UserDataInstanceCount(auto2CB4CE62_userType) ; auto2CB4CE62_i += 1 ) {
        lv_instance = UserDataInstance(auto2CB4CE62_userType, auto2CB4CE62_i);
        libCore_gf_DataInitializeAnnouncerVOPack(lv_instance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeAnnouncerVOData_Init () {
    libCore_gt_DataInitializeAnnouncerVOData = TriggerCreate("libCore_gt_DataInitializeAnnouncerVOData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Effects Source Button Data Initialize
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataEffectsSourceButtonDataInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    string lv_button;
    string lv_effect;
    int lv_index;

    // Automatic Variable Declarations
    string auto802D4C16_userType;
    int auto802D4C16_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto802D4C16_userType = "EffectSourceButton";
    auto802D4C16_i = 1;
    for ( ; auto802D4C16_i <= UserDataInstanceCount(auto802D4C16_userType) ; auto802D4C16_i += 1 ) {
        lv_itInstance = UserDataInstance(auto802D4C16_userType, auto802D4C16_i);
        lv_effect = UserDataGetGameLink("EffectSourceButton", lv_itInstance, "Effect_Link", 1);
        lv_button = UserDataGetGameLink("EffectSourceButton", lv_itInstance, "Button_Link", 1);
        if (((lv_effect == null) || (lv_button == null) || (CatalogEntryIsValid(c_gameCatalogEffect, lv_effect) == false) || (CatalogEntryIsValid(c_gameCatalogButton, lv_button) == false))) {
            TextExpressionSetToken("Param/Expression/lib_Core_27E01494", "A", StringToText((lv_itInstance)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_27E01494"), true);
            continue;
        }

        lv_index = libCore_gf_DataUnitHistoryDataGetIndexOfEntryType(libCore_ge_DataUnitHistoryDataType_Button, (lv_button));
        libCore_gf_SaveUserRecordValueEffectSourceButtonIndex((lv_effect), lv_index);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataEffectsSourceButtonDataInitialize_Init () {
    libCore_gt_DataEffectsSourceButtonDataInitialize = TriggerCreate("libCore_gt_DataEffectsSourceButtonDataInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Heroes
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;

    // Automatic Variable Declarations
    string auto7804382C_userType;
    int auto7804382C_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataFieldValueCount("Hero", "Skins") != libCore_gv_data_MaxHeroAllowedUserDataSkinCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_7D5D2167"), true);
    }

    auto7804382C_userType = "Hero";
    auto7804382C_i = 1;
    for ( ; auto7804382C_i <= UserDataInstanceCount(auto7804382C_userType) ; auto7804382C_i += 1 ) {
        lv_itInstance = UserDataInstance(auto7804382C_userType, auto7804382C_i);
        libCore_gf_DataInitializeHero(lv_itInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeHeroes_Init () {
    libCore_gt_DataInitializeHeroes = TriggerCreate("libCore_gt_DataInitializeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Death Times
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataDeathTimes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALDeathTimes[1] = 12.0;
    libCore_gv_bALDeathTimes[2] = 12.8;
    libCore_gv_bALDeathTimes[3] = 13.6;
    libCore_gv_bALDeathTimes[4] = 14.4;
    libCore_gv_bALDeathTimes[5] = 15.2;
    libCore_gv_bALDeathTimes[6] = 16.0;
    libCore_gv_bALDeathTimes[7] = 16.8;
    libCore_gv_bALDeathTimes[8] = 17.6;
    libCore_gv_bALDeathTimes[9] = 18.4;
    libCore_gv_bALDeathTimes[10] = 19.2;
    libCore_gv_bALDeathTimes[11] = 20.8;
    libCore_gv_bALDeathTimes[12] = 23.2;
    libCore_gv_bALDeathTimes[13] = 25.6;
    libCore_gv_bALDeathTimes[14] = 28.8;
    libCore_gv_bALDeathTimes[15] = 32.0;
    libCore_gv_bALDeathTimes[16] = 35.2;
    libCore_gv_bALDeathTimes[17] = 40.0;
    libCore_gv_bALDeathTimes[18] = 44.8;
    libCore_gv_bALDeathTimes[19] = 49.6;
    libCore_gv_bALDeathTimes[20] = 52.0;
    libCore_gv_bALDeathTimes[21] = 54.5;
    libCore_gv_bALDeathTimes[22] = 57.0;
    libCore_gv_bALDeathTimes[23] = 59.5;
    libCore_gv_bALDeathTimes[24] = 62.0;
    libCore_gv_bALDeathTimes[25] = 64.5;
    libCore_gv_bALDeathTimes[26] = 67.0;
    libCore_gv_bALDeathTimes[27] = 69.5;
    libCore_gv_bALDeathTimes[28] = 72.0;
    libCore_gv_bALDeathTimes[29] = 74.5;
    libCore_gv_bALDeathTimes[30] = 77.0;
    libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataDeathTimes_Init () {
    libCore_gt_DataDeathTimes = TriggerCreate("libCore_gt_DataDeathTimes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Map Data Fields
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOMapDataFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Revive, "Revive");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Healed, "Healed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Resurrected, "Resurrected");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Pissed, "Pissed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_GenericKill, "KillGeneric");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TeamKilled, "TeamKilled");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Laugh, "Laugh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_No, "No");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_EndEnemyKillingSpree, "EndEnemyKillSpree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TalentChosen, "SpecChosen");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Celebrate, "Celebrate");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WorthIt, "WorthIt");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Comeback, "Comeback");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIRetreat, "AIRetreat");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIGoodJob, "AIGoodJob");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIOnMyWay, "AIOnMyWay");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIMercCapture, "AIMercCapture");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AICaution, "AICaution");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIAttack, "AIAttack");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIUhOh, "AIUhOh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIHeal, "AIHeal");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackHere, "PingAttackHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendHere, "PingDefendHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackTown, "PingAttackTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendTown, "PingDefendTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackWatchTower, "PingAttackWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendWatchTower, "PingDefendWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackCore, "PingAttackCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendCore, "PingDefendCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackMercCamp, "PingAttackMercCamp");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingKillHero, "PingAttackHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistHero, "PingAssistHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistMe, "PingAssistMe");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistMe, "PingEnemyMissing");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroQuestion, "IntroQuestion");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroResponse, "IntroResponse");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroBoast, "IntroBoast");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroAgree, "IntroAgree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHit, "GetHit");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitLarge, "GetHitLarge");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitSmall, "GetHitSmall");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Hello, "Hello");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Thanks, "Thanks");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WellPlayed, "WellPlayed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Sorry, "Sorry");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Goodbye, "Goodbye");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Cheer, "Cheer");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_GlueTrial, "GlueTrial");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOMapDataFields_Init () {
    libCore_gt_DataHeroVOMapDataFields = TriggerCreate("libCore_gt_DataHeroVOMapDataFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Initialize Hero VO Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOInitializeHeroVOData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroindex;

    // Automatic Variable Declarations
    int auto85A70B6A_ae;
    const int auto85A70B6A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCore_gt_DataHeroVOMapDataFields, true, true);
    auto85A70B6A_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_heroindex = 1;
    for ( ; ( (auto85A70B6A_ai >= 0 && lv_heroindex <= auto85A70B6A_ae) || (auto85A70B6A_ai < 0 && lv_heroindex >= auto85A70B6A_ae) ) ; lv_heroindex += auto85A70B6A_ai ) {
        libCore_gf_DataHeroVOReloadHeroVODataForHero(lv_heroindex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOInitializeHeroVOData_Init () {
    libCore_gt_DataHeroVOInitializeHeroVOData = TriggerCreate("libCore_gt_DataHeroVOInitializeHeroVOData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Data Initialize
//--------------------------------------------------------------------------------------------------
bool libCore_gt_MapDataInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mapIndex += 1;
    libCore_gv_mapData[lv_mapIndex].lv_map = libCore_ge_MAPMap_Launcher;
    libCore_gv_mapData[lv_mapIndex].lv_mapName = StringExternal("UI/MapName/Launcher");
    libCore_gv_mapData[lv_mapIndex].lv_offlinePath = "Resurgence of the Storm/0-Glue/Launcher.SC2Map";
    libCore_gv_mapData[lv_mapIndex].lv_gameMode = libCore_ge_GameModes_Launcher;
    libCore_gv_mapData[lv_mapIndex].lv_tileset = libCore_ge_MAPTileset_Kingscrest;
    lv_mapIndex += 1;
    libCore_gv_mapData[lv_mapIndex].lv_map = libCore_ge_MAPMap_BuriedBackwoods;
    libCore_gv_mapData[lv_mapIndex].lv_mapName = StringExternal("UI/MapName/BuriedBackwoods");
    libCore_gv_mapData[lv_mapIndex].lv_offlinePath = "Resurgence of the Storm/2-Swift/BuriedBackwoods.SC2Map";
    libCore_gv_mapData[lv_mapIndex].lv_gameMode = libCore_ge_GameModes_Normal;
    libCore_gv_mapData[lv_mapIndex].lv_tileset = libCore_ge_MAPTileset_Kingscrest;
    libCore_gv_mapData[lv_mapIndex].lv_backgroundImage = "assets\\Textures\\UI_Ingame_MapMechanic_LoadScreen_BuriedBackwoods.dds";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[0] = "MX_Dragonshire_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[1] = "MX_Dragonshire_LVL_1";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[2] = "MX_Dragonshire_LVL_10";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[3] = "MX_Dragonshire_LVL_20";
    libCore_gv_mapData[lv_mapIndex].lv_mapSelectionSoundtrack = "MX_Heroes_Delta";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamOrderIndex_C] = "RavenLord";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamChaosIndex_C] = "RavenLord";
    lv_mapIndex += 1;
    libCore_gv_mapData[lv_mapIndex].lv_map = libCore_ge_MAPMap_KingsCrest;
    libCore_gv_mapData[lv_mapIndex].lv_mapName = StringExternal("UI/MapName/KingsCrest");
    libCore_gv_mapData[lv_mapIndex].lv_offlinePath = "Resurgence of the Storm/2-Swift/KingsCrest.SC2Map";
    libCore_gv_mapData[lv_mapIndex].lv_gameMode = libCore_ge_GameModes_Normal;
    libCore_gv_mapData[lv_mapIndex].lv_tileset = libCore_ge_MAPTileset_Kingscrest;
    libCore_gv_mapData[lv_mapIndex].lv_backgroundImage = "assets\\Textures\\Storm_UI_Logo_Resurgence_PurpleIcon.dds";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[0] = "MX_Dragonshire_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[1] = "MX_Dragonshire_LVL_1";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[2] = "MX_Dragonshire_LVL_10";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[3] = "MX_Dragonshire_LVL_20";
    libCore_gv_mapData[lv_mapIndex].lv_mapSelectionSoundtrack = "MX_Dragonshire_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamOrderIndex_C] = "RavenLord";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamChaosIndex_C] = "RavenLord";
    lv_mapIndex += 1;
    libCore_gv_mapData[lv_mapIndex].lv_map = libCore_ge_MAPMap_CursedHollow;
    libCore_gv_mapData[lv_mapIndex].lv_mapName = StringExternal("UI/MapName/CursedHollow");
    libCore_gv_mapData[lv_mapIndex].lv_offlinePath = "Resurgence of the Storm/1-Normal/CursedHollow.SC2Map";
    libCore_gv_mapData[lv_mapIndex].lv_gameMode = libCore_ge_GameModes_Normal;
    libCore_gv_mapData[lv_mapIndex].lv_tileset = libCore_ge_MAPTileset_RavenCourt;
    libCore_gv_mapData[lv_mapIndex].lv_backgroundImage = "assets\\Textures\\UI_Ingame_MapMechanic_LoadScreen_Cursedhollow.dds";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[0] = "MX_RavensCourt_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[1] = "MX_RavensCourt_LVL_1";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[2] = "MX_RavensCourt_LVL_10";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[3] = "MX_RavensCourt_LVL_20";
    libCore_gv_mapData[lv_mapIndex].lv_mapSelectionSoundtrack = "MX_RavensCourt_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamOrderIndex_C] = "RavenLord";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamChaosIndex_C] = "RavenLord";
    lv_mapIndex += 1;
    libCore_gv_mapData[lv_mapIndex].lv_map = libCore_ge_MAPMap_CursedHollowWinterveil;
    libCore_gv_mapData[lv_mapIndex].lv_mapName = StringExternal("UI/MapName/CursedHollowWinterveil");
    libCore_gv_mapData[lv_mapIndex].lv_offlinePath = "Resurgence of the Storm/3-Mutator/Cursed Hollow (Winterveil).SC2Map";
    libCore_gv_mapData[lv_mapIndex].lv_gameMode = libCore_ge_GameModes_Normal;
    libCore_gv_mapData[lv_mapIndex].lv_gameMutator = libCore_ge_GameMutators_Winterveil;
    libCore_gv_mapData[lv_mapIndex].lv_tileset = libCore_ge_MAPTileset_RavenCourt;
    libCore_gv_mapData[lv_mapIndex].lv_backgroundImage = "assets\\Textures\\Storm_UI_HomeScreenBackground_SnowBrawl.dds";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[0] = "MX_RavensCourt_Intro";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[1] = "MX_RavensCourt_LVL_1";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[2] = "MX_RavensCourt_LVL_10";
    libCore_gv_mapData[lv_mapIndex].lv_soundtrack[3] = "MX_RavensCourt_LVL_20";
    libCore_gv_mapData[lv_mapIndex].lv_mapSelectionSoundtrack = "MX_Heroes_Toys18";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamOrderIndex_C] = "RavenLord";
    libCore_gv_mapData[lv_mapIndex].lv_mapAnnouncer[libGame_gv_teamChaosIndex_C] = "RavenLord";
    libCore_gv_mapData[lv_mapIndex].lv_mapMechanicAbility[1] = "MapMechanicAbilityTargetSnowBrawl";
    libCore_gv_mapData[lv_mapIndex].lv_mapMechanicAbility[2] = "MapMechanicAbilityTarget2SnowBrawl";
    libCore_gv_mapDataTotalMapCount = lv_mapIndex;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_MapDataInitialize_Init () {
    libCore_gt_MapDataInitialize = TriggerCreate("libCore_gt_MapDataInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Mount Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeMountData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mountInstance;

    // Automatic Variable Declarations
    string auto6008447A_userType;
    int auto6008447A_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6008447A_userType = "Mount";
    auto6008447A_i = 1;
    for ( ; auto6008447A_i <= UserDataInstanceCount(auto6008447A_userType) ; auto6008447A_i += 1 ) {
        lv_mountInstance = UserDataInstance(auto6008447A_userType, auto6008447A_i);
        libCore_gf_DataMountsAddMountPlusVariationsToMountList(lv_mountInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeMountData_Init () {
    libCore_gt_DataInitializeMountData = TriggerCreate("libCore_gt_DataInitializeMountData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Skin Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeSkinData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_skinInstance;

    // Automatic Variable Declarations
    string auto1B11A511_userType;
    int auto1B11A511_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B11A511_userType = "Skin";
    auto1B11A511_i = 1;
    for ( ; auto1B11A511_i <= UserDataInstanceCount(auto1B11A511_userType) ; auto1B11A511_i += 1 ) {
        lv_skinInstance = UserDataInstance(auto1B11A511_userType, auto1B11A511_i);
        libCore_gf_DataSkinsAddSkinPlusVariationsToSkinList(lv_skinInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeSkinData_Init () {
    libCore_gt_DataInitializeSkinData = TriggerCreate("libCore_gt_DataInitializeSkinData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Talent Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeTalentData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;

    // Automatic Variable Declarations
    string autoA64728EF_userType;
    int autoA64728EF_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA64728EF_userType = "Talent";
    autoA64728EF_i = 1;
    for ( ; autoA64728EF_i <= UserDataInstanceCount(autoA64728EF_userType) ; autoA64728EF_i += 1 ) {
        lv_itInstance = UserDataInstance(autoA64728EF_userType, autoA64728EF_i);
        libCore_gf_DataInitializeTalent(lv_itInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeTalentData_Init () {
    libCore_gt_DataInitializeTalentData = TriggerCreate("libCore_gt_DataInitializeTalentData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Token - Initialize Token Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TokenInitializeTokenData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itTokenInstance;

    // Automatic Variable Declarations
    string auto97E87ABB_userType;
    int auto97E87ABB_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto97E87ABB_userType = "TokenCounter";
    auto97E87ABB_i = 1;
    for ( ; auto97E87ABB_i <= UserDataInstanceCount(auto97E87ABB_userType) ; auto97E87ABB_i += 1 ) {
        lv_itTokenInstance = UserDataInstance(auto97E87ABB_userType, auto97E87ABB_i);
        libCore_gf_TokenInitializeToken(lv_itTokenInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TokenInitializeTokenData_Init () {
    libCore_gt_TokenInitializeTokenData = TriggerCreate("libCore_gt_TokenInitializeTokenData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Unit History Data Initialize
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataUnitHistoryDataInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itEntry;
    int lv_itEntryIndex;
    int lv_type;

    // Automatic Variable Declarations
    int autoE9266EA6_ae;
    const int autoE9266EA6_ai = 1;
    int auto9D061804_ae;
    const int auto9D061804_ai = 1;
    int autoF2D2BB4E_ae;
    const int autoF2D2BB4E_ai = 1;
    int auto76E78A61_ae;
    const int auto76E78A61_ai = 1;
    int auto1BB71FD4_ae;
    const int auto1BB71FD4_ai = 1;

    // Variable Initialization
    lv_itEntryIndex = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_dataUnitHistoryDataAbilitiesTotalCountInEDITOR = CatalogEntryCount(c_gameCatalogAbil);
    lv_type = libCore_ge_DataUnitHistoryDataType_Ability;
    autoE9266EA6_ae = libCore_gv_dataUnitHistoryDataAbilitiesTotalCountInEDITOR;
    lv_itEntryIndex = 1;
    for ( ; ( (autoE9266EA6_ai >= 0 && lv_itEntryIndex <= autoE9266EA6_ae) || (autoE9266EA6_ai < 0 && lv_itEntryIndex >= autoE9266EA6_ae) ) ; lv_itEntryIndex += autoE9266EA6_ai ) {
        lv_itEntry = (CatalogEntryGet(c_gameCatalogAbil, lv_itEntryIndex));
        if (true) {
            libCore_gf_DataUnitHistoryAddHistoryData(lv_itEntry, lv_type);
        }

    }

    libCore_gv_dataUnitHistoryDataBehaviorsTotalCountInEDITOR = CatalogEntryCount(c_gameCatalogBehavior);
    lv_type = libCore_ge_DataUnitHistoryDataType_Behavior;
    auto9D061804_ae = libCore_gv_dataUnitHistoryDataBehaviorsTotalCountInEDITOR;
    lv_itEntryIndex = 1;
    for ( ; ( (auto9D061804_ai >= 0 && lv_itEntryIndex <= auto9D061804_ae) || (auto9D061804_ai < 0 && lv_itEntryIndex >= auto9D061804_ae) ) ; lv_itEntryIndex += auto9D061804_ai ) {
        lv_itEntry = (CatalogEntryGet(c_gameCatalogBehavior, lv_itEntryIndex));
        if (true) {
            libCore_gf_DataUnitHistoryAddHistoryData(lv_itEntry, lv_type);
        }

    }

    libCore_gv_dataUnitHistoryDataButtonsTotalCountInEDITOR = CatalogEntryCount(c_gameCatalogButton);
    lv_type = libCore_ge_DataUnitHistoryDataType_Button;
    autoF2D2BB4E_ae = libCore_gv_dataUnitHistoryDataButtonsTotalCountInEDITOR;
    lv_itEntryIndex = 1;
    for ( ; ( (autoF2D2BB4E_ai >= 0 && lv_itEntryIndex <= autoF2D2BB4E_ae) || (autoF2D2BB4E_ai < 0 && lv_itEntryIndex >= autoF2D2BB4E_ae) ) ; lv_itEntryIndex += autoF2D2BB4E_ai ) {
        lv_itEntry = (CatalogEntryGet(c_gameCatalogButton, lv_itEntryIndex));
        if (true) {
            libCore_gf_DataUnitHistoryAddHistoryData(lv_itEntry, lv_type);
        }

    }

    libCore_gv_dataUnitHistoryDataEffectsTotalCountInEDITOR = CatalogEntryCount(c_gameCatalogEffect);
    lv_type = libCore_ge_DataUnitHistoryDataType_Effect;
    auto76E78A61_ae = libCore_gv_dataUnitHistoryDataEffectsTotalCountInEDITOR;
    lv_itEntryIndex = 1;
    for ( ; ( (auto76E78A61_ai >= 0 && lv_itEntryIndex <= auto76E78A61_ae) || (auto76E78A61_ai < 0 && lv_itEntryIndex >= auto76E78A61_ae) ) ; lv_itEntryIndex += auto76E78A61_ai ) {
        lv_itEntry = (CatalogEntryGet(c_gameCatalogEffect, lv_itEntryIndex));
        if (((CatalogEntryScope(c_gameCatalogEffect, lv_itEntry) == "CEffectDamage") || (CatalogEntryScope(c_gameCatalogEffect, lv_itEntry) == "CEffectModifyUnit")) && (libCore_gf_TechAliasExist(c_gameCatalogEffect, lv_itEntry, "StormFlag IgnoredByEffectHistory") == false)) {
            libCore_gf_DataUnitHistoryAddHistoryData(lv_itEntry, lv_type);
        }

    }

    libCore_gv_dataUnitHistoryDataUnitsTotalCountInEDITOR = CatalogEntryCount(c_gameCatalogUnit);
    lv_type = libCore_ge_DataUnitHistoryDataType_Unit;
    auto1BB71FD4_ae = libCore_gv_dataUnitHistoryDataUnitsTotalCountInEDITOR;
    lv_itEntryIndex = 1;
    for ( ; ( (auto1BB71FD4_ai >= 0 && lv_itEntryIndex <= auto1BB71FD4_ae) || (auto1BB71FD4_ai < 0 && lv_itEntryIndex >= auto1BB71FD4_ae) ) ; lv_itEntryIndex += auto1BB71FD4_ai ) {
        lv_itEntry = (CatalogEntryGet(c_gameCatalogUnit, lv_itEntryIndex));
        if ((libCore_gf_TechAliasExist(c_gameCatalogUnit, lv_itEntry, "StormFlag IgnoredByEffectHistory") == false) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_itEntry, "FlagArray[Worker]", c_playerAny) == "0") && (CatalogFieldValueGet(c_gameCatalogUnit, lv_itEntry, "FlagArray[Missile]", c_playerAny) == "0")) {
            libCore_gf_DataUnitHistoryAddHistoryData(lv_itEntry, lv_type);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataUnitHistoryDataInitialize_Init () {
    libCore_gt_DataUnitHistoryDataInitialize = TriggerCreate("libCore_gt_DataUnitHistoryDataInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize User Data Effects Specific Effects
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeUserDataEffectsSpecificEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    string lv_itEffect;
    string lv_string;
    string lv_parentEntry;

    // Automatic Variable Declarations
    const int auto1ABB7AD4_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1ABB7AD4_ai = 1;
    int autoA5FFE98E_catalog;
    int autoA5FFE98E_i;

    // Variable Initialization
    lv_string = "";
    lv_parentEntry = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (auto1ABB7AD4_ai >= 0 && lv_itPlayer <= auto1ABB7AD4_ae) || (auto1ABB7AD4_ai < 0 && lv_itPlayer >= auto1ABB7AD4_ae) ) ; lv_itPlayer += auto1ABB7AD4_ai ) {
        autoA5FFE98E_catalog = c_gameCatalogEffect;
        autoA5FFE98E_i = 1;
        for ( ; autoA5FFE98E_i <= CatalogEntryCount(c_gameCatalogEffect) ; autoA5FFE98E_i += 1 ) {
            lv_itEffect = CatalogEntryGet(autoA5FFE98E_catalog, autoA5FFE98E_i);
            lv_parentEntry = (CatalogEntryParent(c_gameCatalogEffect, lv_itEffect));
            if (((lv_parentEntry == "StormCriticalStatusIncrementer") || (lv_parentEntry == "StormCriticalStatusIncrementerCaster"))) {
                libCore_gf_TriggerAddEventEffectUsed(c_playerAny, lv_itEffect, libGame_gt_UnitStatsCritUserData);
            }

            if ((lv_parentEntry == "StormModifyTokenCount")) {
                libCore_gf_TriggerAddEventEffectUsed(c_playerAny, lv_itEffect, libGame_gt_TokenCounterModify);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeUserDataEffectsSpecificEffects_Init () {
    libCore_gt_InitializeUserDataEffectsSpecificEffects = TriggerCreate("libCore_gt_InitializeUserDataEffectsSpecificEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - XP - Initialize Level XP Values
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataXPInitializeLevelXPValues_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLevel;
    fixed lv_totalXP;

    // Automatic Variable Declarations
    const int autoF66120F4_ae = libCore_gv_bALMaxLevel;
    const int autoF66120F4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itLevel = 1;
    for ( ; ( (autoF66120F4_ai >= 0 && lv_itLevel <= autoF66120F4_ae) || (autoF66120F4_ai < 0 && lv_itLevel >= autoF66120F4_ae) ) ; lv_itLevel += autoF66120F4_ai ) {
        lv_totalXP += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroGenericHeroDummyVeterancy"), "VeterancyLevelArray[" + IntToString((lv_itLevel-1)) + "].MinVeterancyXP", c_playerAny);
        libCore_gv_dataXPLevelXPValues[lv_itLevel] = lv_totalXP;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataXPInitializeLevelXPValues_Init () {
    libCore_gt_DataXPInitializeLevelXPValues = TriggerCreate("libCore_gt_DataXPInitializeLevelXPValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Alias - Initialize
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TechAliasInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parent;
    string lv_itAbility;
    string lv_itEffect;
    string lv_itBehavior;
    int lv_itTechAlias;
    int lv_techAliasMax;
    string lv_techAlias;
    string lv_nAME;
    int lv_catalogType;

    // Automatic Variable Declarations
    int auto53D1E71B_catalog;
    int auto53D1E71B_i;
    int autoE3E101D6_ae;
    const int autoE3E101D6_ai = 1;
    int auto8B155A40_catalog;
    int auto8B155A40_i;
    int auto3BAC84C1_ae;
    const int auto3BAC84C1_ai = 1;
    int auto6D9A412E_ae;
    const int auto6D9A412E_ai = 1;
    int autoD26056BC_ae;
    const int autoD26056BC_ai = 1;
    int auto669B05BC_catalog;
    int auto669B05BC_i;
    int autoA34A6516_ae;
    const int autoA34A6516_ai = 1;

    // Variable Initialization
    lv_parent = "";
    lv_techAlias = "";
    lv_nAME = "";
    lv_catalogType = c_gameCatalogUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_catalogType = c_gameCatalogAbil;
    auto53D1E71B_catalog = lv_catalogType;
    auto53D1E71B_i = 1;
    for ( ; auto53D1E71B_i <= CatalogEntryCount(lv_catalogType) ; auto53D1E71B_i += 1 ) {
        lv_itAbility = CatalogEntryGet(auto53D1E71B_catalog, auto53D1E71B_i);
        lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogAbil, lv_itAbility, "TechAliasArray", c_playerAny);
        if ((lv_techAliasMax > 0)) {
            autoE3E101D6_ae = (lv_techAliasMax-1);
            lv_itTechAlias = 0;
            for ( ; ( (autoE3E101D6_ai >= 0 && lv_itTechAlias <= autoE3E101D6_ae) || (autoE3E101D6_ai < 0 && lv_itTechAlias >= autoE3E101D6_ae) ) ; lv_itTechAlias += autoE3E101D6_ai ) {
                lv_techAlias = CatalogFieldValueGet(lv_catalogType, lv_itAbility, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
                lv_nAME = (IntToString((lv_catalogType)) + "_" + (lv_itAbility) + "_" + lv_techAlias);
                UnitBehaviorEffectTreeSetUserData(libCore_gv_mAPUserRecordUnit, "HeroGenericUserRecord", lv_nAME, 1.0);
            }
        }

    }
    lv_catalogType = c_gameCatalogEffect;
    auto8B155A40_catalog = lv_catalogType;
    auto8B155A40_i = 1;
    for ( ; auto8B155A40_i <= CatalogEntryCount(lv_catalogType) ; auto8B155A40_i += 1 ) {
        lv_itEffect = CatalogEntryGet(auto8B155A40_catalog, auto8B155A40_i);
        if (((CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyUnit") || (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectDamage"))) {
            lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "TechAliasArray", c_playerAny);
            if ((lv_techAliasMax > 0)) {
                auto3BAC84C1_ae = (lv_techAliasMax-1);
                lv_itTechAlias = 0;
                for ( ; ( (auto3BAC84C1_ai >= 0 && lv_itTechAlias <= auto3BAC84C1_ae) || (auto3BAC84C1_ai < 0 && lv_itTechAlias >= auto3BAC84C1_ae) ) ; lv_itTechAlias += auto3BAC84C1_ai ) {
                    lv_techAlias = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
                    lv_nAME = (IntToString((lv_catalogType)) + "_" + (lv_itEffect) + "_" + lv_techAlias);
                    UnitBehaviorEffectTreeSetUserData(libCore_gv_mAPUserRecordUnit, "HeroGenericUserRecord", lv_nAME, 1.0);
                    if ((lv_techAlias == libCore_gf_TechAliasToString("StormFlag IgnoredByCallForHelp"))) {
                        libCore_gf_TechAliasIgnoreCallForHelpBehaviorOverride(lv_itEffect);
                    }

                }
            }

        }

        if ((CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectSet")) {
            lv_parent = (CatalogEntryParent(c_gameCatalogEffect, lv_itEffect));
            if (((lv_parent == "StormHealSetCaster") || (lv_parent == "StormHealSetCasterNoCrit") || (lv_parent == "StormHealSetTarget") || (lv_parent == "StormHealSetTargetNoCrit"))) {
                lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "TechAliasArray", c_playerAny);
                if ((lv_techAliasMax > 0)) {
                    auto6D9A412E_ae = (lv_techAliasMax-1);
                    lv_itTechAlias = 0;
                    for ( ; ( (auto6D9A412E_ai >= 0 && lv_itTechAlias <= auto6D9A412E_ae) || (auto6D9A412E_ai < 0 && lv_itTechAlias >= auto6D9A412E_ae) ) ; lv_itTechAlias += auto6D9A412E_ai ) {
                        lv_techAlias = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
                        lv_nAME = (IntToString((lv_catalogType)) + "_" + (lv_itEffect) + "_" + lv_techAlias);
                        UnitBehaviorEffectTreeSetUserData(libCore_gv_mAPUserRecordUnit, "HeroGenericUserRecord", lv_nAME, 1.0);
                        if ((lv_techAlias == libCore_gf_TechAliasToString("StormFlag SuppressHealResponse"))) {
                            libCore_gf_TechAliasSuppressHealResponseEffectOverride(lv_itEffect);
                        }

                    }
                }

            }

        }

        if ((CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectUserData")) {
            lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "TechAliasArray", c_playerAny);
            if ((lv_techAliasMax > 0)) {
                autoD26056BC_ae = (lv_techAliasMax-1);
                lv_itTechAlias = 0;
                for ( ; ( (autoD26056BC_ai >= 0 && lv_itTechAlias <= autoD26056BC_ae) || (autoD26056BC_ai < 0 && lv_itTechAlias >= autoD26056BC_ae) ) ; lv_itTechAlias += autoD26056BC_ai ) {
                    lv_techAlias = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
                    if ((lv_techAlias == libCore_gf_TechAliasToString("StormFlag OverridePlayerIndex"))) {
                        libCore_gf_TechAliasPlayerIndexOverride(lv_itEffect);
                    }

                }
            }

        }

    }
    lv_catalogType = c_gameCatalogBehavior;
    auto669B05BC_catalog = lv_catalogType;
    auto669B05BC_i = 1;
    for ( ; auto669B05BC_i <= CatalogEntryCount(lv_catalogType) ; auto669B05BC_i += 1 ) {
        lv_itBehavior = CatalogEntryGet(auto669B05BC_catalog, auto669B05BC_i);
        if ((CatalogEntryScope(c_gameCatalogBehavior, lv_itBehavior) == "CBehaviorBuff")) {
            lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogBehavior, lv_itBehavior, "TechAliasArray", c_playerAny);
            if ((lv_techAliasMax > 0)) {
                autoA34A6516_ae = (lv_techAliasMax-1);
                lv_itTechAlias = 0;
                for ( ; ( (autoA34A6516_ai >= 0 && lv_itTechAlias <= autoA34A6516_ae) || (autoA34A6516_ai < 0 && lv_itTechAlias >= autoA34A6516_ae) ) ; lv_itTechAlias += autoA34A6516_ai ) {
                    lv_techAlias = CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
                    lv_nAME = (IntToString((lv_catalogType)) + "_" + (lv_itBehavior) + "_" + lv_techAlias);
                    UnitBehaviorEffectTreeSetUserData(libCore_gv_mAPUserRecordUnit, "HeroGenericUserRecord", lv_nAME, 1.0);
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TechAliasInitialize_Init () {
    libCore_gt_TechAliasInitialize = TriggerCreate("libCore_gt_TechAliasInitialize_Func");
}

void libCore_InitTriggers () {
    libCore_gt_IncludeCore_Init();
    libCore_gt_InitializeGameMod_Init();
    libCore_gt_InitializeData_Init();
    libCore_gt_InitializeMiscStuff_Init();
    libCore_gt_InitializeDataMiningAndDebugOutput_Init();
    libCore_gt_InitializeMAPSystemFlags_Init();
    libCore_gt_DataInitializeAbilities_Init();
    libCore_gt_DataAnnouncerVOMapDataFields_Init();
    libCore_gt_DataInitializeAnnouncerVOData_Init();
    libCore_gt_DataEffectsSourceButtonDataInitialize_Init();
    libCore_gt_DataInitializeHeroes_Init();
    libCore_gt_DataDeathTimes_Init();
    libCore_gt_DataHeroVOMapDataFields_Init();
    libCore_gt_DataHeroVOInitializeHeroVOData_Init();
    libCore_gt_MapDataInitialize_Init();
    libCore_gt_DataInitializeMountData_Init();
    libCore_gt_DataInitializeSkinData_Init();
    libCore_gt_DataInitializeTalentData_Init();
    libCore_gt_TokenInitializeTokenData_Init();
    libCore_gt_DataUnitHistoryDataInitialize_Init();
    libCore_gt_InitializeUserDataEffectsSpecificEffects_Init();
    libCore_gt_DataXPInitializeLevelXPValues_Init();
    libCore_gt_TechAliasInitialize_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_InitLib_completed = false;

void libCore_InitLib () {
    if (libCore_InitLib_completed) {
        return;
    }

    libCore_InitLib_completed = true;

    libCore_InitLibraries();
    libCore_InitVariables();
    libCore_InitTriggers();
}

include "LibGame"
include "LibSprt"
include "LibMapM"
include "LibUIUI"

