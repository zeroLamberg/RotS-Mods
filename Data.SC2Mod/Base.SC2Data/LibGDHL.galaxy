include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibGame_h"
include "LibMapM_h"
include "LibSond_h"
include "LibUIUI_h"

include "LibGDHL_h"

//--------------------------------------------------------------------------------------------------
// Library: Game Data Helper
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGDHL_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libGDHL_InitVariables_completed = false;

void libGDHL_InitVariables () {
    int init_i;
    int init_j;

    if (libGDHL_InitVariables_completed) {
        return;
    }

    libGDHL_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_visionReductionBackupVisionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAbathurDeepTunnelPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAbathurDeepTunnelPingTextLockoutTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_heroAbathurSpikeBurstSplatScalar = 1.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAbathurMonstrosityDeepTunnelPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAbathurMonstrosityDeepTunnelPingTextLockoutTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_heroArtanisPrismaticAlignmentConditionalEvent1 = UserDataGetInt("TokenCounter", "ArtanisPrismaticAlignment", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroArthasFrostPresenceConditinalEvent1 = UserDataGetInt("TokenCounter", "ArthasFrostPresence", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroArthasFrostPresenceConditinalEvent2 = UserDataGetInt("TokenCounter", "ArthasFrostPresence", "ConditionalEvents_CompareValue", 2);
    libGDHL_gv_heroArthasFrostPresenceConditinalEvent3 = UserDataGetInt("TokenCounter", "ArthasFrostPresence", "ConditionalEvents_CompareValue", 3);
    libGDHL_gv_heroAurielRayofHeavenReservoirofHopeHealingPerStack = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("HeroAurielReservoirOfHope@QuestIncreaseModification"), "EffectArray[" + IntToString(0) + "].Value", c_playerAny);
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAurielResurrectRevivingNotification[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAurielResurrectCastingTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAurielResurrectRevivingDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAurielResurrectFrameRecords[init_i].lv_heroAurielResurrectProgressTimer = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_aurielUI.lv_traitPanel = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_traitLabel = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetStatus = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetDisplayName = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetPortrait = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_traitImageBar = c_invalidDialogControlId;
    libGDHL_gv_aurielUI.lv_traitImageMaxBar = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGDHL_gv_brightwingPhaseShiftPingTextLockoutTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_heroDeltaInfiltrationMissionConditionalEvent1 = UserDataGetInt("TokenCounter", "DeltaInfiltrationMission", "ConditionalEvents_CompareValue", 1);
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= libCore_gv_bALMaxTeams; init_j += 1) {
            libGDHL_gv_heroDeltaNuclearStrikeChannelingPing[init_i][init_j] = c_invalidPingId;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= libCore_gv_bALMaxTeams; init_j += 1) {
            libGDHL_gv_heroDeltaNuclearStrikeWarningPing[init_i][init_j] = c_invalidPingId;
        }
    }
    libGDHL_gv_heroFalstadAroundTheWorldConditinalEvent1 = UserDataGetInt("TokenCounter", "FalstadAroundTheWorld", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroFalstadAroundTheWorldConditinalEvent2 = UserDataGetInt("TokenCounter", "FalstadAroundTheWorld", "ConditionalEvents_CompareValue", 2);
    libGDHL_gv_heroFalstadDishonorableDischargeConditinalEvent1 = UserDataGetInt("TokenCounter", "FalstadDishonorableDischarge", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroFalstadDishonorableDischargeConditinalEvent2 = UserDataGetInt("TokenCounter", "FalstadDishonorableDischarge", "ConditionalEvents_CompareValue", 2);
    libGDHL_gv_heroJohannaLawsOfHopeDeltaEvent1 = UserDataGetInt("TokenCounter", "JohannaLawsOfHope", "DeltaEvents_Delta", 1);
    libGDHL_gv_heroKharazimInsightConditionalEvent1 = UserDataGetInt("TokenCounter", "KharazimInsight", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroMalfurionRejuvenation = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionRegrowth@MaxDurationRejuvenation"), "Amount", c_playerAny);
    libGDHL_gv_heroMalfurionWildGrowth = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionWildGrowth@RemainingRegrowthDurationArithmetic"), "MaxAccumulation", c_playerAny);
    libGDHL_gv_heroMuradinHaymakerLaunchDistance = -12.6;
    libGDHL_gv_heroMuradinHaymakerCutoffDistance = -1.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroRagnarosUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_bigRagUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_heroRagnarosSulfurasHungersConditionalEvent1 = UserDataGetInt("TokenCounter", "RagnarosSulfurasHungers", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroSelendisZealousRushStandardCooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroSelendisZealousRush@TargetCooldown"), "Duration", c_playerAny);
    libGDHL_gv_heroSelendisJusticeIsDueQuestValue1 = UserDataGetInt("TokenCounter", "SelendisJusticeIsDue", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_heroSelendisJusticeIsDueQuestValue2 = UserDataGetInt("TokenCounter", "SelendisJusticeIsDue", "ConditionalEvents_CompareValue", 2);
    libGDHL_gv_heroTalandarSelfRepairDeltaEvent1 = UserDataGetInt("TokenCounter", "TalandarSelfRepair", "DeltaEvents_Delta", 1);
    libGDHL_gv_heroTalandarCauterizingBlastConditionalEvent1 = UserDataGetInt("TokenCounter", "TalandarCauterizingBlast", "ConditionalEvents_CompareValue", 1);
    libGDHL_gv_talentBribeRequiredStackCount = UserDataGetInt("TokenCounter", "TalentBribe", "DeltaEvents_Delta", 1);
}

// Presets
// Functions
void libGDHL_gf_IncrementDecrementHeroCount (bool lp_incrementDecrement, int lp_heroIndex) {
    // Variable Declarations
    string lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = "";

    // Implementation
    if ((lp_incrementDecrement == true)) {
        lv_trigger = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_func_HeroIncrement;
    }
    else {
        lv_trigger = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_func_HeroDecrement;
    }
    if (((lv_trigger == "") || (lv_trigger == null))) {
        return ;
    }

    libCore_gf_RunTriggerByNameStorm(lv_trigger, true, false);
}

point libGDHL_gf_TargetCalculation (point lp_targetPoint, point lp_casterPoint, region lp_bFGRegion) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    point lv_abilityTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = lp_casterPoint;
    lv_targetPoint = lp_targetPoint;

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(lp_bFGRegion)) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(lp_bFGRegion)) - PointGetY(lv_targetPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        if ((Cos(lv_targetAngle) == 0.0)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(lp_bFGRegion)));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            if ((Cos(lv_targetAngle) == 0.0)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(lp_bFGRegion)), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(lp_bFGRegion)) - PointGetY(lv_targetPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        if ((Cos(lv_targetAngle) == 0.0)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(lp_bFGRegion)), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            if ((Cos(lv_targetAngle) == 0.0)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(lp_bFGRegion)));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        if ((Cos(lv_targetAngle) == 0.0)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(lp_bFGRegion)));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            if ((Cos(lv_targetAngle) == 0.0)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(lp_bFGRegion)), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(lp_bFGRegion)) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        if ((Cos(lv_targetAngle) == 0.0)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(lp_bFGRegion)), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            if ((Cos(lv_targetAngle) == 0.0)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(lp_bFGRegion)));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

void libGDHL_gf_AbathurSymbiote (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGDHL_gv_eventID_AbathurSymbiote_C);
}

void libGDHL_gf_SendEventAbathurSymbiote (int lp_abathurPlayer, unit lp_symbioteUnit, unit lp_symbioteTarget) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C), lp_abathurPlayer);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C), lp_symbioteUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C), lp_symbioteTarget);
    TriggerSendEvent(libGDHL_gv_eventID_AbathurSymbiote_C);
}

int libGDHL_gf_AbathurSymbioteAbathurPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C));
}

unit libGDHL_gf_AbathurSymbioteUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C));
}

unit libGDHL_gf_AbathurSymbioteTarget () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C));
}

void libGDHL_gf_HeroAbathurReturnControlledUnittoLaneAI (unit lp_unit) {
    // Variable Declarations
    unit lv_lanerUnit;
    int lv_ownerPlayer;
    int lv_teamNumberofOwner;
    point lv_positionOfUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lanerUnit = lp_unit;
    lv_positionOfUnit = UnitGetPosition(lp_unit);
    lv_ownerPlayer = UnitGetOwner(lp_unit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
    libAIAI_gf_MinionAIStartMinionAI(-1, lv_lanerUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, 0, false);
}

void libGDHL_gf_HeroArtanisPurifierBeamAI (unit lp_purifierBeam, int lp_owner) {
    // Variable Declarations
    unit lv_artanis;
    int lv_purifierBeamState;

    // Automatic Variable Declarations
    int auto5A5EDB41_val;

    // Variable Initialization

    // Implementation
    lv_artanis = libGame_gv_players[lp_owner].lv_heroUnit;
    lv_purifierBeamState = libGDHL_ge_HeroArtanisPurifierBeamState_Priming;
    while ((UnitIsAlive(lp_purifierBeam) == true)) {
        auto5A5EDB41_val = lv_purifierBeamState;
        if (auto5A5EDB41_val == libGDHL_ge_HeroArtanisPurifierBeamState_Priming) {
            if (((UnitIsAlive(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == false) || (UnitHasBehavior2(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner], "Dead") == true) || (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == true))) {
                UnitKill(lp_purifierBeam);
                UnitModifyCooldown(libGame_gv_players[lp_owner].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("HeroArtanisPurifierBeam"), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny), 10.0, c_cooldownOperationSet);
                break;
            }

            if ((UnitBehaviorCount(lp_purifierBeam, "HeroArtanisPurifierBeam@Primed") == 0)) {
                lv_purifierBeamState = libGDHL_ge_HeroArtanisPurifierBeamState_Active;
            }
            else {
                UnitSetPosition(lp_purifierBeam, UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]), false);
                libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner] = UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]);
            }
        }
        else if (auto5A5EDB41_val == libGDHL_ge_HeroArtanisPurifierBeamState_Active) {
            if ((UnitIsAlive(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == true) && (UnitHasBehavior2(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner], "Dead") == false) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == false)) {
                if ((libGDHL_gv_heroArtanisPurifierBeamPointOverride[lp_owner] == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lp_purifierBeam), libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner]) <= 6.0)) {
                        UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner])), c_orderQueueReplace);
                        libGDHL_gv_heroArtanisPurifierBeamPointOverride[lp_owner] = false;
                    }
                    else {
                        UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                    }
                }
                else {
                    UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner])), c_orderQueueReplace);
                    libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner] = UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]);
                }
            }
            else {
                if ((PlayerHasTalent(lp_owner, "HeroArtanisTargetPurified") == false)) {
                    UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                    lv_purifierBeamState = libGDHL_ge_HeroArtanisPurifierBeamState_Idle;
                }
                else {
                    UnitKill(lp_purifierBeam);
                }
            }
        }
        else if (auto5A5EDB41_val == libGDHL_ge_HeroArtanisPurifierBeamState_Idle) {
            if ((UnitIsAlive(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == true) && (UnitHasBehavior2(libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner], "Dead") == false) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGDHL_gv_heroArtanisPurifierBeamTarget[lp_owner]) == false)) {
                lv_purifierBeamState = libGDHL_ge_HeroArtanisPurifierBeamState_Active;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_purifierBeam), libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner]) >= 1.5)) {
                    UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                }

            }
        }
        else {
        }
        Wait(0.0625, c_timeGame);
    }
}

void libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_deadPlayerTeam;
    int lv_aurielPlayer;
    int lv_additionalPlayer;

    // Automatic Variable Declarations
    const int auto04ACEE97_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto04ACEE97_ai = 1;
    string auto365C2B32_val;

    // Variable Initialization

    // Implementation
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lp_deadPlayer);
    lv_aurielPlayer = 1;
    for ( ; ( (auto04ACEE97_ai >= 0 && lv_aurielPlayer <= auto04ACEE97_ae) || (auto04ACEE97_ai < 0 && lv_aurielPlayer >= auto04ACEE97_ae) ) ; lv_aurielPlayer += auto04ACEE97_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_aurielPlayer].lv_heroUnit) == "HeroAuriel") && (libGame_gf_TeamNumberOfPlayer(lv_aurielPlayer) == lv_deadPlayerTeam) && (UnitBehaviorCount(libGame_gv_players[lv_aurielPlayer].lv_heroUnit, "Ultimate1Unlocked") > 0) && (lv_aurielPlayer != lp_deadPlayer)) {
            ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), libNtve_gf_Signal(("Auriel" + IntToString(lv_aurielPlayer))));
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), libNtve_gf_Signal(("Auriel" + IntToString(lp_deadPlayer))));
    auto365C2B32_val = UnitGetType(lp_deadHero);
    if (auto365C2B32_val == "HeroAlexstraszaDragon") {
        ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), libNtve_gf_ModelSwap(libCore_gf_GetModelLinkForUnitType("HeroAlexstrasza"), 0));
    }
    else if (auto365C2B32_val == "HeroSelendis") {
        ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), ("AttachModel {} HeroSelendis@HitTestSphere {Origin 0} SOpMoveUpBy1Dot5"));
    }
    else {
    }
    ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), libNtve_gf_ModelSwap(libCore_gf_GetModelLinkForUnitType(UnitGetType(lp_deadHero)), 0));
    ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), libNtve_gf_Signal("Taunt"));
    libGDHL_gv_heroAurielResurrectShowSpiritTimer[lp_deadPlayer] = true;
}

void libGDHL_gf_HeroAurielResurrectCheckActiveSpirits (bool lp_targetHeroDead) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetHeroDead == true)) {
        libGDHL_gv_heroAurielResurrectActiveSpirits += 1;
    }
    else {
        libGDHL_gv_heroAurielResurrectActiveSpirits -= 1;
    }
    if ((libGDHL_gv_heroAurielResurrectActiveSpirits < 0)) {
        libGDHL_gv_heroAurielResurrectActiveSpirits = 0;
    }

    if ((libGDHL_gv_heroAurielResurrectActiveSpirits == 0)) {
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectSpiritTimerController, false);
    }
    else {
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectSpiritTimerController, true);
    }
}

int libGDHL_gf_HeroAurielResurrectCreateDeadPlayerSpiritTimer (int lp_aurielPlayer, int lp_deadPlayer, int lp_vikingNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(libGame_gv_players[lp_aurielPlayer].lv_heroUnit) == true)) {
        if ((libCore_gf_IsAbilityOnCooldown(libGame_gv_players[lp_aurielPlayer].lv_heroUnit, "HeroAurielResurrect") == true)) {
            TextExpressionSetToken("Param/Expression/lib_GDHL_0A33357F", "A", FixedToText(UnitGetCooldown(libGame_gv_players[lp_aurielPlayer].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("HeroAurielResurrect"), "Cost[" + IntToString(0) + "].Cooldown.Link", lp_aurielPlayer)), 0));
            TextExpressionSetToken("Param/Expression/lib_GDHL_0A33357F", "B", FixedToText(TimerGetRemaining(libGame_gv_players[lp_deadPlayer].lv_respawnTimer), 0));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_0A33357F"), 36, UnitGetPosition(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), 4.0, true, false, PlayerGroupSingle(lp_deadPlayer));
            return TextTagLastCreated();
        }
        else {
            TextTagCreate((StringExternal("Param/Value/lib_GDHL_9C3215FA") + FixedToText(TimerGetRemaining(libGame_gv_players[lp_deadPlayer].lv_respawnTimer), 0)), 36, UnitGetPosition(libGDHL_gv_heroAurielResurrectSpirit[lp_deadPlayer]), 4.0, true, false, PlayerGroupSingle(lp_deadPlayer));
            return TextTagLastCreated();
        }
    }
    else {
        return c_textTagNone;
    }
}

string libGDHL_gf_BestowHopeGetPortraitPathForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    string auto708ADFA6_val;

    // Implementation
    auto708ADFA6_val = UnitGetType(lp_unit);
    if (auto708ADFA6_val == "HeroChenStorm") {
        return "Assets\\Textures\\storm_ui_ingame_targetinfopanel_unit_chen_storm.dds";
    }
    else if (auto708ADFA6_val == "HeroChenEarth") {
        return "Assets\\Textures\\storm_ui_ingame_targetinfopanel_unit_chen_earth.dds";
    }
    else if (auto708ADFA6_val == "HeroChenFire") {
        return "assets\\Textures\\Storm_UI_Ingame_TargetinfoPanel_Unit_Chen_Fire.dds";
    }
    else {
        return libUIUI_gf_KillLogGetPortraitPathForUnit(lp_unit);
    }
}

void libGDHL_gf_AurielUIBestowHope (int lp_aurielPlayer, unit lp_bestowHopeTarget) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetStatus, lp_bestowHopeTarget, libCore_gv_playerGroupFromPlayer[lp_aurielPlayer]);
    DialogControlSetVisible(libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetStatus, libCore_gv_playerGroupFromPlayer[lp_aurielPlayer], true);
    libNtve_gf_SetDialogItemText(libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetDisplayName, libGDHL_gf_AurielUIUnitDisplayName(lp_bestowHopeTarget), PlayerGroupSingle(lp_aurielPlayer));
    libNtve_gf_SetDialogItemImage(libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetPortrait, libGDHL_gf_BestowHopeGetPortraitPathForUnit(lp_bestowHopeTarget), PlayerGroupSingle(lp_aurielPlayer));
}

text libGDHL_gf_AurielUIUnitDisplayName (unit lp_unit) {
    // Variable Declarations
    int lv_unitOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitOwner = UnitGetOwner(lp_unit);

    // Implementation
    if ((UnitGetType(lp_unit) == "HeroCho")) {
        return StringExternal("Param/Value/lib_GDHL_864BBDAD");
    }
    else {
        return UnitGetName(lp_unit);
    }
}

void libGDHL_gf_HeroKerriganHeroCountTurnTriggersOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libGDHL_gt_HeroKerriganAssimilation, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskSummonUltralisk, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganSiphoningImpact, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganAssimilationMastery, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganBoundlessFury, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganChrysalisUnitStatus, lp_onOff);
    TriggerEnable(libGDHL_gt_HeroKerriganOmegastorm, lp_onOff);
}

void libGDHL_gf_HeroKerriganAssimilationShieldToAdd (unit lp_kerrigan, fixed lp_shieldToAdd, bool lp_isCrit) {
    // Variable Declarations
    fixed lv_shieldAmountCurrent;
    fixed lv_shieldAmountNew;
    fixed lv_shieldAmountMax;
    fixed lv_shieldToAdd_Local;
    int lv_owner;
    string lv_style;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(lp_kerrigan);
    lv_shieldAmountCurrent = UnitBehaviorDamageModifyRemaining(lp_kerrigan, "KerriganAssimilation@Shield");
    lv_shieldAmountMax = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("KerriganAssimilation@ShieldUI"), "DamageResponse.ModifyLimit", lv_owner);
    if ((lv_shieldAmountCurrent < lv_shieldAmountMax)) {
        lv_shieldToAdd_Local = MinF(lp_shieldToAdd, (lv_shieldAmountMax - lv_shieldAmountCurrent));
        lv_shieldAmountNew = (lv_shieldAmountCurrent + lv_shieldToAdd_Local);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("KerriganAssimilation@Shield"), "DamageResponse.ModifyLimit", lv_owner, lv_shieldAmountNew);
    }

    if ((lp_shieldToAdd > 0.0)) {
        UnitBehaviorAdd(lp_kerrigan, "KerriganAssimilation@Shield", lp_kerrigan, 1);
    }

    if ((lv_shieldToAdd_Local > 0.0)) {
        if ((lp_isCrit == true)) {
            lv_style = "FCT_Shield_Crit";
        }
        else {
            lv_style = "FCT_Shield_Normal";
        }
        libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(lp_kerrigan, FixedToText(lv_shieldToAdd_Local, 0), libCore_gv_playerGroupFromPlayer[lv_owner], lv_style, libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset(lp_kerrigan, lp_kerrigan));
    }

}

void libGDHL_gf_HeroKerriganUltraliskLogicController (int lp_owningPlayer, unit lp_ultraliskUnit) {
    // Variable Declarations
    point lv_lastKnownLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastKnownLocation = UnitGetPosition(lp_ultraliskUnit);

    // Implementation
    while ((UnitIsAlive(lp_ultraliskUnit) == true)) {
        if ((UnitOrderCount(lp_ultraliskUnit) == 0)) {
            UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_ultraliskUnit)), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
            if ((UnitOrderCount(lp_ultraliskUnit) == 0)) {
                if ((UnitIsAlive(lp_ultraliskUnit) == false)) {
                    return ;
                }

                UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lp_ultraliskUnit), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                Wait(1.75, c_timeGame);
            }

        }
        else {
            if ((OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0)) != null)) {
                if ((OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0)) != libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer])) {
                    libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer] = OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0));
                }

                if ((UnitFilterMatch(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer], lp_owningPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true) && (libNtve_gf_UnitIsVisibleToPlayer(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer], lp_owningPlayer) == true)) {
                    if ((lv_lastKnownLocation != UnitGetPosition(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer]))) {
                        lv_lastKnownLocation = UnitGetPosition(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lp_owningPlayer]);
                    }

                }
                else {
                    UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(lv_lastKnownLocation, 2.0, UnitGetFacing(lp_ultraliskUnit))), c_orderQueueReplace);
                    lv_lastKnownLocation = PointWithOffsetPolar(lv_lastKnownLocation, 2.0, UnitGetFacing(lp_ultraliskUnit));
                    Wait(1.5, c_timeGame);
                }
            }

        }
        Wait(0.125, c_timeGame);
    }
}

void libGDHL_gf_HeroRagnarosMoltenCoreUpdateHeroicCooldownsForPlayer (int lp_player, unit lp_originalUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    return ;
    if ((PlayerHasTalent(lp_player, "HeroRagnarosSulfurasSmash") == true)) {
        if ((UnitGetCooldown(lp_originalUnit, "Abil/HeroRagnarosSulfurasSmash") > 0.0)) {
            UnitAbilitySpendExplicit(lp_targetUnit, AbilityCommand("HeroRagnarosSulfurasSmash@MoltenCore", 0), c_spendLocationUnit, 0.0, 0.0, 1.0, 1.0);
            UnitAbilitySpendExplicit(lp_targetUnit, AbilityCommand("HeroRagnarosSulfurasSmash", 0), c_spendLocationUnit, 0.0, 0.0, 1.0, 1.0);
            UnitModifyCooldown(lp_targetUnit, "Abil/HeroRagnarosSulfurasSmash", UnitGetCooldown(lp_originalUnit, "Abil/HeroRagnarosSulfurasSmash"), c_cooldownOperationSet);
        }

    }
    else if ((PlayerHasTalent(lp_player, "HeroRagnarosLavaWave") == true)) {
        libNtve_gf_UnitRemoveChargeUsed(lp_targetUnit, "Abil/HeroRagnarosLavaWave");
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "HeroRagnarosLavaWave@SetCooldown", "Cost[" + IntToString(0) + "].ChargeCountUse", lp_player, UnitGetChargeUsed(lp_originalUnit, "Abil/HeroRagnarosLavaWave"));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "HeroRagnarosLavaWave@SetCooldown", "Cost[" + IntToString(0) + "].ChargeTimeUse", lp_player, UnitGetChargeRegen(lp_originalUnit, "Abil/HeroRagnarosLavaWave"));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "HeroRagnarosLavaWave@SetCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", lp_player, UnitGetCooldown(lp_originalUnit, "Abil/HeroRagnarosLavaWave"));
        UnitCreateEffectUnit(lp_targetUnit, "HeroRagnarosLavaWave@SetCooldown", lp_targetUnit);
    }
}

trigger auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_Trigger = null;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_player;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_team;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_directionInt;
unit auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_laneUnit;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lane;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_nextWaypoint;
int auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lastWaypoint;

void libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI (int lp_player, int lp_team, int lp_directionInt, unit lp_laneUnit, int lp_lane, int lp_nextWaypoint, int lp_lastWaypoint) {
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_player = lp_player;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_team = lp_team;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_directionInt = lp_directionInt;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_laneUnit = lp_laneUnit;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lane = lp_lane;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_nextWaypoint = lp_nextWaypoint;
    auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lastWaypoint = lp_lastWaypoint;

    if (auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_Trigger == null) {
        auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_Trigger = TriggerCreate("auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_Trigger, false, false);
}

bool auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_player;
    int lp_team = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_team;
    int lp_directionInt = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_directionInt;
    unit lp_laneUnit = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_laneUnit;
    int lp_lane = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lane;
    int lp_nextWaypoint = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_nextWaypoint;
    int lp_lastWaypoint = auto_libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI_lp_lastWaypoint;

    // Variable Declarations
    int lv_waypoint;
    int lv_waypointIndex;
    int lv_pathDisplayAlly;
    int lv_pathDisplayEnemy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waypoint = lp_nextWaypoint;
    lv_waypointIndex = 1;

    // Implementation
    UnitIssueOrder(lp_laneUnit, OrderTargetingPoint(AbilityCommand("move", 0), libGame_gv_laneData[lp_lane].lv_waypoints[lv_waypoint]), c_orderQueueReplace);
    libGDHL_gf_HeroRagnarosLavaWaveMinimapPathSetup(lp_laneUnit, lp_lane, lv_waypoint, lp_lastWaypoint, lp_directionInt, lp_player, lp_team);
    while ((UnitIsAlive(lp_laneUnit) == true)) {
        if ((UnitHasBehavior2(lp_laneUnit, "HallOfStormsKnockbackDebuff") == true)) {
            UnitKill(lp_laneUnit);
            libGDHL_gf_HeroRagnarosLavaWaveMinimapPathCleanup(lp_laneUnit);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_laneUnit), libGame_gv_laneData[lp_lane].lv_waypoints[lv_waypoint]) < 2.0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_laneUnit), libGame_gv_laneData[lp_lane].lv_waypoints[lp_lastWaypoint]) < 2.0)) {
                UnitKill(lp_laneUnit);
                libGDHL_gf_HeroRagnarosLavaWaveMinimapPathCleanup(lp_laneUnit);
            }
            else {
                lv_waypoint = (lv_waypoint + lp_directionInt);
                libGDHL_gf_HeroRagnarosLavaWaveMinimapPathSetup(lp_laneUnit, lp_lane, lv_waypoint, lp_lastWaypoint, lp_directionInt, lp_player, lp_team);
                UnitIssueOrder(lp_laneUnit, OrderTargetingPoint(AbilityCommand("move", 0), libGame_gv_laneData[lp_lane].lv_waypoints[lv_waypoint]), c_orderQueueReplace);
                lv_waypointIndex = (lv_waypointIndex + 1);
            }
        }

        if ((libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathAlly", lp_laneUnit) != 0)) {
            lv_pathDisplayAlly = libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathAlly", lp_laneUnit);
        }

        if ((libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathEnemy", lp_laneUnit) != 0)) {
            lv_pathDisplayEnemy = libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathEnemy", lp_laneUnit);
        }

        Wait(0.0625, c_timeGame);
    }
    PathDestroy(lv_pathDisplayAlly);
    PathDestroy(lv_pathDisplayEnemy);
    return true;
}

void libGDHL_gf_HeroRagnarosLavaWaveMinimapPathSetup (unit lp_lavaWaveUnit, int lp_currentLane, int lp_startingWaypoint, int lp_endingWaypoint, int lp_waypointDelta, int lp_player, int lp_team) {
    // Variable Declarations
    int lv_currentWaypoint;
    int lv_pathDisplayAlly;
    int lv_pathDisplayEnemy;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentWaypoint = lp_startingWaypoint;
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    libGDHL_gf_HeroRagnarosLavaWaveMinimapPathCleanup(lp_lavaWaveUnit);
    lv_playerGroup = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        PathCreateForUnit(libNtve_gf_UnionOfPlayerGroups(lv_playerGroup, libCore_gv_observerPlayers), lp_lavaWaveUnit);
    }
    else {
        PathCreateForUnit(lv_playerGroup, lp_lavaWaveUnit);
    }
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\Storm_UI_Minimap_LavaWave_Waypointline.dds");
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetColor(PathLastCreated(), c_pathLocationMinimap, libCore_gv_cOLORAllyColor);
    lv_pathDisplayAlly = PathLastCreated();
    libCore_gf_SaveUserRecordValuePathDisplay("LavaWavePathAlly", lv_pathDisplayAlly, lp_lavaWaveUnit);

    lv_playerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfTeam(lp_team), false);
    if ((lp_team == libGame_gv_teamChaosIndex_C)) {
        PathCreateForUnit(libNtve_gf_UnionOfPlayerGroups(lv_playerGroup, libCore_gv_observerPlayers), lp_lavaWaveUnit);
    }
    else {
        PathCreateForUnit(lv_playerGroup, lp_lavaWaveUnit);
    }
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\Storm_UI_Minimap_LavaWave_Waypointline.dds");
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetColor(PathLastCreated(), c_pathLocationMinimap, libCore_gv_cOLOREnemyColor);
    lv_pathDisplayEnemy = PathLastCreated();
    libCore_gf_SaveUserRecordValuePathDisplay("LavaWavePathEnemy", lv_pathDisplayEnemy, lp_lavaWaveUnit);

    while ((lp_endingWaypoint > 0) && (lv_currentWaypoint != lp_endingWaypoint)) {
        lv_currentWaypoint = (lv_currentWaypoint + lp_waypointDelta);
        PathAddWayPoint(lv_pathDisplayAlly, libGame_gv_laneData[lp_currentLane].lv_waypoints[lv_currentWaypoint]);
        PathAddWayPoint(lv_pathDisplayEnemy, libGame_gv_laneData[lp_currentLane].lv_waypoints[lv_currentWaypoint]);
    }
    PathSetDestinationPoint(lv_pathDisplayAlly, libGame_gv_laneData[lp_currentLane].lv_waypoints[lv_currentWaypoint]);
    PathSetDestinationPoint(lv_pathDisplayEnemy, libGame_gv_laneData[lp_currentLane].lv_waypoints[lv_currentWaypoint]);
}

void libGDHL_gf_HeroRagnarosLavaWaveMinimapPathCleanup (unit lp_lavaWaveUnit) {
    // Variable Declarations
    int lv_pathDisplayAlly;
    int lv_pathDisplayEnemy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pathDisplayAlly = libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathAlly", lp_lavaWaveUnit);
    if ((lv_pathDisplayAlly != 0)) {
        PathClearWayPoints(lv_pathDisplayAlly);
        PathDestroy(lv_pathDisplayAlly);
    }

    lv_pathDisplayEnemy = libCore_gf_ValueFromUserRecordPathDisplay("LavaWavePathEnemy", lp_lavaWaveUnit);
    if ((lv_pathDisplayEnemy != 0)) {
        PathClearWayPoints(lv_pathDisplayEnemy);
        PathDestroy(lv_pathDisplayEnemy);
    }

}

void libGDHL_gf_HeroRagnarosShiftingMeteorInitialization () {
    // Variable Declarations
    int lv_itPlayer;
    string lv_string;

    // Automatic Variable Declarations
    const int auto8A7F0382_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto8A7F0382_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((libGDHL_gv_heroRagnarosShiftingMeteorInitialized == true)) {
        return ;
    }
    else {
        libGDHL_gv_heroRagnarosShiftingMeteorInitialized = true;
    }
    lv_string = CatalogFieldValueGet(c_gameCatalogEffect, ("HeroRagnarosShiftingMeteor@IncreaseDamageModifier"), "Key", c_playerAny);
    lv_itPlayer = 0;
    for ( ; ( (auto8A7F0382_ai >= 0 && lv_itPlayer <= auto8A7F0382_ae) || (auto8A7F0382_ai < 0 && lv_itPlayer >= auto8A7F0382_ae) ) ; lv_itPlayer += auto8A7F0382_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, ("HeroRagnarosShiftingMeteor@IncreaseDamageModifier"), "Key", lv_itPlayer, (lv_string + "Player" + IntToString(lv_itPlayer)));
        CatalogFieldValueSet(c_gameCatalogEffect, ("HeroRagnarosShiftingMeteor@IncreaseDamageModifier"), "SourceKey", lv_itPlayer, (lv_string + "Player" + IntToString(lv_itPlayer)));
        CatalogFieldValueSet(c_gameCatalogEffect, ("HeroRagnarosShiftingMeteor@ResetDamageModifier"), "Key", lv_itPlayer, (lv_string + "Player" + IntToString(lv_itPlayer)));
        CatalogFieldValueSet(c_gameCatalogEffect, ("HeroRagnarosShiftingMeteor@ResetDamageModifier"), "SourceKey", lv_itPlayer, (lv_string + "Player" + IntToString(lv_itPlayer)));
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game Data Helper
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_IncludeGameDataHelper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_IncludeGameDataHelper_Init () {
    libGDHL_gt_IncludeGameDataHelper = TriggerCreate("libGDHL_gt_IncludeGameDataHelper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vision Reduction - Multi-Hero Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_VisionReductionMultiHeroController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto8421C0E8_g;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPlayer = UnitGetOwner(EventUnit());
    UnitGroupRemove(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], EventUnit());
    if ((UnitGroupCount(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], c_unitCountAlive) > 0)) {
        libGame_gf_ShareUnshareVisionOfAlliesForPlayer(false, lv_targetPlayer);
        lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
        auto8421C0E8_g = lv_allyPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto8421C0E8_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            PlayerSetAlliance(lv_itPlayer, c_allianceIdSeekHelp, lv_targetPlayer, false);
            PlayerSetAlliance(lv_itPlayer, c_allianceIdGiveHelp, lv_targetPlayer, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_VisionReductionMultiHeroController_Init () {
    libGDHL_gt_VisionReductionMultiHeroController = TriggerCreate("libGDHL_gt_VisionReductionMultiHeroController_Func");
    TriggerAddEventUnitDied(libGDHL_gt_VisionReductionMultiHeroController, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vision Reduction - Apply Ally Vision Supression
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_VisionReductionApplyAllyVisionSupression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_targetHero;
    int lv_targetPlayer;
    unitgroup lv_targetPlayerVisionGroup;
    playergroup lv_allyPlayerGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup autoACCB46E8_g;
    int autoACCB46E8_u;
    unit autoACCB46E8_var;
    playergroup autoC6B5FDB8_g;

    // Variable Initialization
    lv_casterPlayer = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerSource, 0);
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_targetPlayerVisionGroup = UnitGroupEmpty();
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_casterPlayer) == true))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayer) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetHero), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((libGame_gf_StormBehaviorHasCategory(EventUnitBehavior(), libGame_ge_StormBehaviorCategories_SuppressVisibility) == true))) {
            return false;
        }

        if (!(((lv_targetHero == libGame_gv_players[lv_targetPlayer].lv_heroUnit) || (lv_targetHero == libGame_gv_players[lv_targetPlayer].lv_activeVehicle)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer] = UnitGroupEmpty();
    UnitGroupAdd(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], lv_targetHero);
    autoACCB46E8_g = UnitGroup(null, lv_targetPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoACCB46E8_u = UnitGroupCount(autoACCB46E8_g, c_unitCountAll);
    for (;; autoACCB46E8_u -= 1) {
        autoACCB46E8_var = UnitGroupUnitFromEnd(autoACCB46E8_g, autoACCB46E8_u);
        if (autoACCB46E8_var == null) { break; }
        if ((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SuppressVisibility, autoACCB46E8_var) == true)) {
            UnitGroupAdd(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], autoACCB46E8_var);
        }

    }
    if ((UnitGroupCount(libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer], c_unitCountAlive) > 0)) {
        libGame_gf_ShareUnshareVisionOfAlliesForPlayer(false, lv_targetPlayer);
        autoC6B5FDB8_g = lv_allyPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoC6B5FDB8_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            PlayerSetAlliance(lv_itPlayer, c_allianceIdSeekHelp, lv_targetPlayer, false);
            PlayerSetAlliance(lv_itPlayer, c_allianceIdGiveHelp, lv_targetPlayer, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_VisionReductionApplyAllyVisionSupression_Init () {
    libGDHL_gt_VisionReductionApplyAllyVisionSupression = TriggerCreate("libGDHL_gt_VisionReductionApplyAllyVisionSupression_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_VisionReductionApplyAllyVisionSupression, null, null, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vision Reduction - Remove Ally Vision Supression
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_VisionReductionRemoveAllyVisionSupression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetHero;
    int lv_targetPlayer;
    unitgroup lv_targetPlayerVisionGroup;
    playergroup lv_allyPlayerGroup;
    int lv_itPlayer;
    bool lv_hasSuppressedVisibility;

    // Automatic Variable Declarations
    unitgroup auto164667DE_g;
    int auto164667DE_u;
    unit auto164667DE_var;
    playergroup autoCC6489D9_g;

    // Variable Initialization
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_targetPlayerVisionGroup = UnitGroupEmpty();
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_StormBehaviorHasCategory(EventUnitBehavior(), libGame_ge_StormBehaviorCategories_SuppressVisibility) == true))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayer) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetHero), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto164667DE_g = libGDHL_gv_visionReductionBackupVisionGroup[lv_targetPlayer];
    auto164667DE_u = UnitGroupCount(auto164667DE_g, c_unitCountAll);
    for (;; auto164667DE_u -= 1) {
        auto164667DE_var = UnitGroupUnitFromEnd(auto164667DE_g, auto164667DE_u);
        if (auto164667DE_var == null) { break; }
        if ((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SuppressVisibility, auto164667DE_var) == true)) {
            lv_hasSuppressedVisibility = true;
            break;
        }

    }
    if ((lv_hasSuppressedVisibility == false)) {
        libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
        autoCC6489D9_g = lv_allyPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoCC6489D9_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            PlayerSetAlliance(lv_itPlayer, c_allianceIdSeekHelp, lv_targetPlayer, true);
            PlayerSetAlliance(lv_itPlayer, c_allianceIdGiveHelp, lv_targetPlayer, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_VisionReductionRemoveAllyVisionSupression_Init () {
    libGDHL_gt_VisionReductionRemoveAllyVisionSupression = TriggerCreate("libGDHL_gt_VisionReductionRemoveAllyVisionSupression_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_VisionReductionRemoveAllyVisionSupression, null, null, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Super Stealth Activate/Deactivate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericSuperStealthActivateDeactivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_player, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_OverlaySuperCloak.SC2Cutscene", "HeroGenericStationaryExtraStealthActive");
    }
    else {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_player, "Cutscenes\\GameUI_OverlaySuperCloak.SC2Cutscene", "HeroGenericStationaryExtraStealthActive");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericSuperStealthActivateDeactivate_Init () {
    libGDHL_gt_HeroGenericSuperStealthActivateDeactivate = TriggerCreate("libGDHL_gt_HeroGenericSuperStealthActivateDeactivate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericSuperStealthActivateDeactivate, null, "HeroGenericStationaryExtraStealthActive", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericSuperStealthActivateDeactivate, null, "HeroGenericStationaryExtraStealthActive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Light", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightTarget, c_playerAny, "CameraShakeLightTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Medium", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumTarget, c_playerAny, "CameraShakeMediumTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyTarget, c_playerAny, "CameraShakeHeavyTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightCaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Light", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightCaster, c_playerAny, "CameraShakeLightCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Medium", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumCaster, c_playerAny, "CameraShakeMediumCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyCaster, c_playerAny, "CameraShakeHeavyCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitSetPosition(lv_hero, libGame_gv_players[EventPlayer()].lv_spawnPoint, false);
    UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libGame_gv_players[EventPlayer()].lv_spawnPoint, 1.0, 0.0)), c_orderQueueAddToFront);
    if ((UnitAbilityCheck(lv_hero, "HeroGenericMount", true) == true)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_hero);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBase_Init () {
    libGDHL_gt_HeroPortBackToBase = TriggerCreate("libGDHL_gt_HeroPortBackToBase_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroPortBackToBase, c_playerAny, "HeroGenericHearthstone@TeleportSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hearthstone - Channeling Buff - On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HearthstoneChannelingBuffOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingPlayerStartsHearthStonePing(EventPlayer(), UnitGetPosition(EventUnit()));
    libSond_gf_HeroVOHeroBeginsHearthing(EventPlayer());
    libUIUI_gf_UIPartyFrameHeroHearthstoneStart(EventPlayer(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HearthstoneChannelingBuffOn_Init () {
    libGDHL_gt_HearthstoneChannelingBuffOn = TriggerCreate("libGDHL_gt_HearthstoneChannelingBuffOn_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HearthstoneChannelingBuffOn, null, "HeroGenericHearthstone@ChannelingBuff", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hearthstone - Channeling Buff - Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HearthstoneChannelingBuffOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCancelPlayersHearthStonePing(EventPlayer());
    libUIUI_gf_UIPartyFrameHeroHearthstoneFizzle(EventPlayer(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HearthstoneChannelingBuffOff_Init () {
    libGDHL_gt_HearthstoneChannelingBuffOff = TriggerCreate("libGDHL_gt_HearthstoneChannelingBuffOff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HearthstoneChannelingBuffOff, null, "HeroGenericHearthstone@ChannelingBuff", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hearthstone - Channeling Buff - Canceled
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HearthstoneChannelingBuffCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hearthstoneUnit;
    int lv_hearthstonePlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hearthstoneUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_hearthstonePlayer = UnitGetOwner(lv_hearthstoneUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libUIUI_gv_pingPlayerHearthstonePing[lv_hearthstonePlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HearthstoneChannelingBuffCanceled_Init () {
    libGDHL_gt_HearthstoneChannelingBuffCanceled = TriggerCreate("libGDHL_gt_HearthstoneChannelingBuffCanceled_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HearthstoneChannelingBuffCanceled, c_playerAny, "HeroGenericHearthstone@ChannelingBuffCancelDummyModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAbathurHeroCountIncrementer += 1;
    if ((libGDHL_gv_heroAbathurHeroCountIncrementer == 1)) {
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHealing, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, true);
        TriggerEnable(libGDHL_gt_HeroAbathurDeepTunnelPing, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustMasterCast, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityCreated, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, true);
        TriggerEnable(libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset, true);
        TriggerEnable(libGDHL_gt_HeroAbathurToxicNestRevealer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurHeroCountIncrement_Init () {
    libGDHL_gt_HeroAbathurHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroAbathurHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAbathurHeroCountIncrementer -= 1;
    if ((libGDHL_gv_heroAbathurHeroCountIncrementer < 0)) {
        libGDHL_gv_heroAbathurHeroCountIncrementer = 0;
    }

    if ((libGDHL_gv_heroAbathurHeroCountIncrementer == 0)) {
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHealing, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, false);
        TriggerEnable(libGDHL_gt_HeroAbathurDeepTunnelPing, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustMasterCast, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityCreated, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, false);
        TriggerEnable(libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset, false);
        TriggerEnable(libGDHL_gt_HeroAbathurToxicNestRevealer, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurHeroCountDecrement_Init () {
    libGDHL_gt_HeroAbathurHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroAbathurHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Toxic Nest Revealer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurToxicNestRevealer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroAbathurToxicNest@ApplyRevealerFromEnemy", EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurToxicNestRevealer_Init () {
    libGDHL_gt_HeroAbathurToxicNestRevealer = TriggerCreate("libGDHL_gt_HeroAbathurToxicNestRevealer_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurToxicNestRevealer, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurToxicNestRevealer, c_playerAny, "HeroAbathurToxicNest@TriggerSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Deep Tunnel Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurDeepTunnelPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    playergroup lv_alliedPlayers;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abathurPlayer = UnitGetOwner(EventUnit());
    lv_alliedPlayers = PlayerGroupEmpty();
    lv_location = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_abathurPlayer]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_abathurPlayer]) > 0.0)) {
        return true;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_abathurPlayer);
    lv_alliedPlayers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_abathurPlayer), false);
    libCore_gf_CreatePingFacingAngleWithType(lv_alliedPlayers, "HeroAbathurDeepTunnel@ModelMiniMap", lv_location, Color(0.0, 5.49, 73.33), 3.0, 270.0, -1);
    PingSetScale(PingLastCreated(), 0.2);
    libGDHL_gv_heroAbathurDeepTunnelPings[lv_abathurPlayer] = PingLastCreated();
    if ((libGame_gv_players[lv_abathurPlayer].lv_activeVehicle != null)) {
        UnitCreateEffectPoint(libGame_gv_players[lv_abathurPlayer].lv_activeVehicle, "HeroAbathurDeepTunnel@DummyPing", lv_location);
    }
    else {
        UnitCreateEffectPoint(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, "HeroAbathurDeepTunnel@DummyPing", lv_location);
    }
    TextExpressionSetToken("Param/Expression/lib_GDHL_5A5140FD", "A", UnitTypeGetName(UnitGetType(EventUnit())));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_5A5140FD"), 24, lv_location, 2.0, true, false, lv_alliedPlayers);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    if ((TimerGetRemaining(libGDHL_gv_heroAbathurDeepTunnelPingTextLockoutTimer[lv_abathurPlayer]) > 0.0)) {
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_GDHL_B57DC3F6", "A", StringExternal("Param/Value/lib_GDHL_578A8545"));
        UIDisplayMessage(lv_alliedPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_B57DC3F6"));
        TimerStart(libGDHL_gv_heroAbathurDeepTunnelPingTextLockoutTimer[lv_abathurPlayer], 10.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurDeepTunnelPing_Init () {
    libGDHL_gt_HeroAbathurDeepTunnelPing = TriggerCreate("libGDHL_gt_HeroAbathurDeepTunnelPing_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurDeepTunnelPing, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAbathurDeepTunnelPing, null, AbilityCommand("HeroAbathurDeepTunnel", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Screen Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.5, 0.0);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.5, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init () {
    libGDHL_gt_HeroAbathurSymbioteScreenEffect = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurSymbioteScreenEffect, null, "HeroAbathurAssumingDirectControl", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurSymbioteScreenEffect, null, "HeroAbathurAssumingDirectControl", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbiote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;
    unit lv_symbiote;
    unit lv_symbioteHost;
    int lv_symbioteHostPlayer;
    string lv_cooldownLink;
    fixed lv_spikeBurstRange;
    fixed lv_symbioteFacing;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathur = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_abathurPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    UnitSetFacing(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 315.0, 0.0);
    lv_symbioteHost = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_symbioteHostPlayer = UnitGetOwner(lv_symbioteHost);
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "HeroAbathurSymbiote", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_abathurPlayer);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroAbathurSymbiote", 0, lv_abathurPlayer, UnitGetPosition(lv_symbioteHost));
    lv_symbiote = UnitLastCreated();
    UnitCreateEffectUnit(lv_abathur, "Summon@CreationSwitch", lv_symbiote);
    UnitCreateEffectUnit(lv_symbioteHost, "HeroAbathurSymbiote@ActorLink", lv_symbiote);
    UnitCreateEffectUnit(lv_symbioteHost, "HeroAbathurSymbiote@ApplySuperStealthController", lv_symbiote);
    UnitCreateEffectUnit(lv_symbioteHost, "HeroAbathurSymbiote@ApplyStealthController", lv_symbiote);
    UnitCreateEffectUnit(lv_symbiote, "HeroAbathurSymbiote@PropertyLink", lv_symbioteHost);
    SoundPlayForPlayer(SoundLink("HeroAbathurSymbiote@Screen_Launch", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("HeroAbathurSymbiote@Screen_Loop", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
    libGDHL_gv_heroAbathurSymbioteScreenSound[lv_abathurPlayer] = SoundLastPlayed();
    libGDHL_gf_SendEventAbathurSymbiote(lv_abathurPlayer, lv_symbiote, lv_symbioteHost);
    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "PressurizedGlandsCarryBehavior") == 1)) {
        lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SpikeBurstPressurizedGlandsDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
        CatalogFieldValueSet(c_gameCatalogActor, "SymbioteSpikeBurstRangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
    }
    else {
        lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, ("HeroAbathurSpikeBurst@DamageSearch"), "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAbathurSpikeBurst@RangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
    }
    SoundPlayForPlayer(SoundLink("AbathurVO@Symbiote", -1), lv_abathurPlayer, PlayerGroupSingle(UnitGetOwner(lv_symbioteHost)), 100.0, 0.0);
    UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, false);
    UnitSelect(lv_symbiote, lv_abathurPlayer, true);
    UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, true);
    libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = true;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_symbiote);
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libNtve_gf_MakeUnitFacePoint(lv_symbiote, PointWithOffsetPolar(UnitGetPosition(lv_symbioteHost), 1.0, -90.0), 2.0);
    while ((UnitIsAlive(lv_symbioteHost) == true) && (UnitBehaviorCount(lv_symbioteHost, "HeroAbathurSymbiote@HostBehavior") >= 1) && (UnitGetOwner(lv_symbioteHost) == lv_symbioteHostPlayer)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_symbiote), UnitGetPosition(lv_symbioteHost)) >= 4.0)) {
            UnitSetPosition(lv_symbiote, UnitGetPosition(lv_symbioteHost), false);
        }
        else {
            UnitSetPosition(lv_symbiote, UnitGetPosition(lv_symbioteHost), true);
        }
        if ((UnitFilterMatch(lv_symbioteHost, lv_abathurPlayer, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true)) {
            if ((UnitHasBehavior2(lv_symbiote, "HeroAbathurSymbiote@AbilityDisabler") == false)) {
                UnitBehaviorAdd(lv_symbiote, "HeroAbathurSymbiote@AbilityDisabler", lv_symbiote, 1);
            }

        }
        else {
            if ((UnitHasBehavior2(lv_symbiote, "HeroAbathurSymbiote@AbilityDisabler") == true)) {
                UnitCreateEffectUnit(lv_abathur, "HeroAbathurSymbiote@RemoveAbilityDisabler", lv_symbiote);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    UnitModifyCooldown(lv_abathur, lv_cooldownLink, 4.0, c_cooldownOperationSet);
    libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = false;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_abathurPlayer].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    UnitKill(lv_symbiote);
    UnitBehaviorRemove(lv_abathur, "HeroAbathurAssumingDirectControl", 1);
    UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, true);
    libGDHL_gv_heroAbathurSymbioteActive[EventPlayer()] = false;
    SoundStop(libGDHL_gv_heroAbathurSymbioteScreenSound[lv_abathurPlayer], false);
    SoundPlayForPlayer(SoundLink("HeroAbathurSymbiote@Screen_End", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbiote_Init () {
    libGDHL_gt_HeroAbathurSymbiote = TriggerCreate("libGDHL_gt_HeroAbathurSymbiote_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurSymbiote, c_playerAny, "HeroAbathurSymbiote@ApplyHostBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Healing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_abathur = libGame_gv_players[lv_abathurPlayer].lv_heroUnit;
    UnitCreateEffectUnit(lv_abathur, "HeroAbathurCarapace@HealingApplyBehavior", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteHealing_Init () {
    libGDHL_gt_HeroAbathurSymbioteHealing = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteHealing_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHealing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurSymbioteHealing, c_playerAny, "HeroAbathurCarapace@ApplyShield");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurSymbioteHealing, c_playerAny, "HeroAbathurHivemind@ApplyCarapaceShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Nest Set Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustNestSetFacing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventUnitCreatedUnit(), UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(EventUnitCreatedUnit()))].lv_core), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustNestSetFacing_Init () {
    libGDHL_gt_HeroAbathurLocustNestSetFacing = TriggerCreate("libGDHL_gt_HeroAbathurLocustNestSetFacing_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAbathurLocustNestSetFacing, null, "HeroAbathurLocustNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_locustUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_locustUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    UnitSetFacing(lv_locustUnit, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitSource)), 0.0);
    UnitIssueOrder(lv_locustUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), 1.5, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitSource)))), c_orderQueueAddToFront);
    Wait(0.5, c_timeGame);
    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(lv_locustUnit)) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_locustUnit, libGame_gv_players[UnitGetOwner(lv_locustUnit)].lv_heroUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustSpawned_Init () {
    libGDHL_gt_HeroAbathurLocustSpawned = TriggerCreate("libGDHL_gt_HeroAbathurLocustSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurLocustSpawned, c_playerAny, "HeroAbathurLocustStrain@LanerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Master Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustMasterCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto670DCB5A_g;
    int auto670DCB5A_u;
    unit auto670DCB5A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto670DCB5A_g = UnitGroup("HeroAbathurLocustNest", UnitGetOwner(EventUnitCreatedUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto670DCB5A_u = UnitGroupCount(auto670DCB5A_g, c_unitCountAll);
    for (;; auto670DCB5A_u -= 1) {
        auto670DCB5A_var = UnitGroupUnitFromEnd(auto670DCB5A_g, auto670DCB5A_u);
        if (auto670DCB5A_var == null) { break; }
        if ((auto670DCB5A_var != EventUnitCreatedUnit())) {
            UnitKill(auto670DCB5A_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustMasterCast_Init () {
    libGDHL_gt_HeroAbathurLocustMasterCast = TriggerCreate("libGDHL_gt_HeroAbathurLocustMasterCast_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustMasterCast, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAbathurLocustMasterCast, null, "HeroAbathurLocustNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Hivemind (Single Target)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_possibleSymbioteHivemindHosts;
    int lv_numSymbioteHivemindHosts;
    libGDHL_gs_SymbioteHivemind lv_symbioteHivemind;
    unit lv_symbioteHivemindHost;
    unit lv_itSymbioteHivemindHost;
    unit lv_mainSymbioteHost;
    unit lv_mainSymbiote;
    int lv_abathurPlayer;
    int lv_hivemindSymbioteHostCounter;

    // Automatic Variable Declarations
    unitgroup autoFA35C41A_g;
    int autoFA35C41A_u;

    // Variable Initialization
    lv_possibleSymbioteHivemindHosts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = libGDHL_gf_AbathurSymbioteAbathurPlayer();
    lv_mainSymbioteHost = libGDHL_gf_AbathurSymbioteTarget();
    lv_mainSymbiote = libGDHL_gf_AbathurSymbioteUnit();
    while ((UnitIsAlive(lv_mainSymbiote) == true) && (UnitIsAlive(lv_mainSymbioteHost) == true)) {
        if ((PlayerHasTalent(libGDHL_gf_AbathurSymbioteAbathurPlayer(), "HeroAbathurHivemind") == true)) {
            lv_possibleSymbioteHivemindHosts = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_abathurPlayer, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lv_mainSymbioteHost), libGDHL_gv_abathurSymbioteHivemindCastRange_C), libCore_gv_filtersHeroicAllyandnotImmuneToFriendlyAbilitiesorBenign, (libGDHL_gv_abathurSymbioteHivemindMaxHosts_C + 1));
            autoFA35C41A_g = lv_possibleSymbioteHivemindHosts;
            autoFA35C41A_u = UnitGroupCount(autoFA35C41A_g, c_unitCountAll);
            for (;; autoFA35C41A_u -= 1) {
                lv_itSymbioteHivemindHost = UnitGroupUnitFromEnd(autoFA35C41A_g, autoFA35C41A_u);
                if (lv_itSymbioteHivemindHost == null) { break; }
                if (((lv_itSymbioteHivemindHost == lv_mainSymbioteHost) || (UnitHasBehavior2(lv_itSymbioteHivemindHost, "Dead") == true) || (UnitHasBehavior2(lv_itSymbioteHivemindHost, "HeroAbathurSymbiote@HostBehavior") == true))) {
                    UnitGroupRemove(lv_possibleSymbioteHivemindHosts, lv_itSymbioteHivemindHost);
                    break;
                }

            }
            if ((UnitGroupCount(lv_possibleSymbioteHivemindHosts, c_unitCountAlive) <= 0)) {
                Wait(0.0625, c_timeGame);
                continue;
            }

            lv_symbioteHivemindHost = UnitGroupClosestToPoint(lv_possibleSymbioteHivemindHosts, UnitGetPosition(lv_mainSymbioteHost));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroAbathurSymbiote", 0, lv_abathurPlayer, UnitGetPosition(lv_symbioteHivemindHost));
            lv_symbioteHivemind.lv_symbioteUnit = UnitLastCreated();
            lv_symbioteHivemind.lv_hostUnit = lv_symbioteHivemindHost;
            UnitCreateEffectUnit(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurSymbiote@ActorLink", lv_symbioteHivemind.lv_symbioteUnit);
            UnitCreateEffectUnit(lv_symbioteHivemind.lv_symbioteUnit, "HeroAbathurSymbiote@PropertyLink", lv_symbioteHivemindHost);
            UnitCreateEffectUnit(lv_mainSymbiote, "HeroAbathurHivemind@CreateUnitLinkDummyA", lv_symbioteHivemind.lv_hostUnit);
            ActorSend(libNtve_gf_MainActorofUnit(lv_symbioteHivemind.lv_symbioteUnit), "Signal HivemindScale");
            ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal HivemindActive");
            UnitBehaviorAdd(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurSymbiote@HostBehavior", lv_symbioteHivemind.lv_symbioteUnit, 1);
            UnitBehaviorAdd(lv_symbioteHivemind.lv_symbioteUnit, "HeroAbathurHivemind", lv_symbioteHivemind.lv_symbioteUnit, 1);
            UnitBehaviorAdd(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurHivemind", lv_symbioteHivemind.lv_hostUnit, 1);
            SoundPlayForPlayer(SoundLink("AbathurVO@Symbiote", -1), lv_abathurPlayer, PlayerGroupSingle(UnitGetOwner(lv_itSymbioteHivemindHost)), 100.0, 0.0);
            while ((UnitIsAlive(lv_symbioteHivemind.lv_hostUnit) == true) && (UnitHasBehavior2(lv_symbioteHivemind.lv_hostUnit, "Dead") == false) && (UnitIsAlive(lv_symbioteHivemind.lv_symbioteUnit) == true) && (UnitFilterMatch(lv_symbioteHivemind.lv_hostUnit, lv_abathurPlayer, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)))) == true)) {
                if ((UnitIsAlive(lv_mainSymbiote) == true) && (UnitIsAlive(lv_mainSymbioteHost) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_mainSymbioteHost), UnitGetPosition(lv_symbioteHivemind.lv_hostUnit)) >= libGDHL_gv_abathurSymbioteHivemindMaxRange_C)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal RemoveStabCursors");
                        UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurSymbiote@HostBehavior", 1);
                        UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurHivemind", 1);
                        UnitBehaviorRemove(lv_symbioteHivemind.lv_symbioteUnit, "HeroAbathurHivemind", 1);
                        UnitKill(lv_symbioteHivemind.lv_symbioteUnit);
                        lv_symbioteHivemind.lv_symbioteUnit = null;
                        lv_symbioteHivemind.lv_hostUnit = null;
                        Wait(0.0625, c_timeGame);
                        continue;
                    }

                    if ((DistanceBetweenPoints(UnitGetPosition(lv_symbioteHivemind.lv_symbioteUnit), UnitGetPosition(lv_symbioteHivemind.lv_hostUnit)) >= 4.0)) {
                        UnitSetPosition(lv_symbioteHivemind.lv_symbioteUnit, UnitGetPosition(lv_symbioteHivemind.lv_hostUnit), false);
                    }
                    else {
                        UnitSetPosition(lv_symbioteHivemind.lv_symbioteUnit, UnitGetPosition(lv_symbioteHivemind.lv_hostUnit), true);
                    }
                    Wait(0.0625, c_timeGame);
                }
                else {
                    UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurSymbiote@HostBehavior", 1);
                    UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurHivemind", 1);
                    UnitBehaviorRemove(lv_symbioteHivemind.lv_symbioteUnit, "HeroAbathurHivemind", 1);
                    UnitKill(lv_symbioteHivemind.lv_symbioteUnit);
                    lv_symbioteHivemind.lv_symbioteUnit = null;
                    lv_symbioteHivemind.lv_hostUnit = null;
                }
            }
            if ((UnitIsAlive(lv_symbioteHivemind.lv_symbioteUnit) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal HivemindInActive");
                UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurSymbiote@HostBehavior", 1);
                UnitBehaviorRemove(lv_symbioteHivemind.lv_hostUnit, "HeroAbathurHivemind", 1);
                UnitBehaviorRemove(lv_symbioteHivemind.lv_symbioteUnit, "HeroAbathurHivemind", 1);
                UnitKill(lv_symbioteHivemind.lv_symbioteUnit);
                lv_symbioteHivemind.lv_symbioteUnit = null;
                lv_symbioteHivemind.lv_hostUnit = null;
            }

        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Init () {
    libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, false);
    libGDHL_gf_AbathurSymbiote(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Hivemind Stab
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteHivemindStab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_symbioteHivemindHats;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_symbioteHivemindHats = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(UnitGetOwner(EventUnit()), "HeroAbathurHivemind") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_symbioteHivemindHats = UnitGroup("HeroAbathurSymbiote", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), libGDHL_gv_abathurSymbioteHivemindMaxRange_C), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (libGDHL_gv_abathurSymbioteHivemindMaxHosts_C + 1));
    UnitGroupIssueOrder(lv_symbioteHivemindHats, OrderTargetingPoint(AbilityCommand("HeroAbathurStab", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteHivemindStab_Init () {
    libGDHL_gt_HeroAbathurSymbioteHivemindStab = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteHivemindStab_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAbathurSymbioteHivemindStab, null, AbilityCommand("HeroAbathurStab", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Deep Tunnel Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_monstrosity;
    int lv_abathurPlayer;
    playergroup lv_alliedPlayers;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_monstrosity = EventUnit();
    lv_abathurPlayer = UnitGetOwner(EventUnit());
    lv_alliedPlayers = PlayerGroupEmpty();
    lv_location = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_abathurPlayer]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_abathurPlayer]) > 0.0)) {
        return true;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_abathurPlayer);
    lv_alliedPlayers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_abathurPlayer), false);
    libCore_gf_CreatePingFacingAngleWithType(lv_alliedPlayers, "HeroAbathurDeepTunnel@ModelMiniMap", lv_location, Color(0.0, 5.49, 73.33), 3.0, 270.0, -1);
    PingSetScale(PingLastCreated(), 0.2);
    UnitCreateEffectPoint(lv_monstrosity, "HeroAbathurDeepTunnel@DummyPing", lv_location);
    TextExpressionSetToken("Param/Expression/lib_GDHL_E421591F", "A", UnitTypeGetName(UnitGetType(EventUnit())));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_E421591F"), 24, lv_location, 2.0, true, false, lv_alliedPlayers);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    libGDHL_gv_heroAbathurMonstrosityDeepTunnelPings[lv_abathurPlayer] = PingLastCreated();
    if ((TimerGetRemaining(libGDHL_gv_heroAbathurMonstrosityDeepTunnelPingTextLockoutTimer[lv_abathurPlayer]) > 0.0)) {
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_GDHL_8FE2DE0F", "A", UnitTypeGetName(UnitGetType(lv_monstrosity)));
        UIDisplayMessage(lv_alliedPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_8FE2DE0F"));
        TimerStart(libGDHL_gv_heroAbathurMonstrosityDeepTunnelPingTextLockoutTimer[lv_abathurPlayer], 10.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing_Init () {
    libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing, null, AbilityCommand("HeroAbathurDeepTunnelMonstrosity", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Add Minion Kill Stacks
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_symbiote;
    int lv_evolutionCompleteStacks;
    unit lv_minionUnit;
    int lv_abathurPlayer;
    unit lv_monstrosity;

    // Automatic Variable Declarations
    unitgroup auto91B9A133_g;
    int auto91B9A133_u;

    // Variable Initialization
    lv_minionUnit = libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion();
    lv_abathurPlayer = libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_abathurPlayer].lv_heroUnit) == "HeroAbathur"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_abathurPlayer, "HeroAbathurEvolveMonstrosity") == true))) {
            return false;
        }

        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", lv_minionUnit, lv_minionUnit) == true))) {
            return false;
        }

        if (!((libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("HeroAbathurEvolveMonstrosityStacks@TokenCounter", lv_abathurPlayer) < libGame_gf_TokenCounterGetMaximumTokenCount("HeroAbathurEvolveMonstrosityStacks@TokenCounter")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91B9A133_g = UnitGroupSearch("HeroAbathurEvolveMonstrosity", lv_abathurPlayer, UnitGetPosition(lv_minionUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91B9A133_u = UnitGroupCount(auto91B9A133_g, c_unitCountAll);
    for (;; auto91B9A133_u -= 1) {
        lv_monstrosity = UnitGroupUnitFromEnd(auto91B9A133_g, auto91B9A133_u);
        if (lv_monstrosity == null) { break; }
        UnitBehaviorAdd(lv_monstrosity, "HeroAbathurEvolveMonstrosityStacks@Stack", lv_monstrosity, 1);
        UnitCreateEffectUnit(lv_monstrosity, "HeroAbathurEvolveMonstrosityStacks@HealthStackHealer", lv_monstrosity);
        UnitCreateEffectUnit(lv_monstrosity, "HeroAbathurEvolveMonstrosityStacks@ModifyToken", lv_monstrosity);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Init () {
    libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, false);
    libGame_gf_SpecialCaseParticipatedInNPCTakedown(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Initial Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libAIAI_gf_SummonedAIInitialAttackLogic(false, EventPlayerEffectUsedUnit(c_effectUnitTarget), libGame_gv_players[lv_player].lv_heroUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, c_playerAny, "HeroAbathurEvolveMonstrosity@SpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Symbiote End - Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    UnitSelect(libGDHL_gv_heroAbathurMonstrosity[lv_player], lv_player, false);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(libGame_gv_players[lv_player].lv_heroUnit) == false)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI, c_playerAny, "HeroAbathurEvolveMonstrosity@SymbioteFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Deselected - Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == lv_player) && (libGame_gf_PlayerIsHeroPlayer(lv_player) == true) && (libGDHL_gv_heroAbathurMonstrosity[lv_player] == EventUnit())) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, libGDHL_gv_heroAbathurMonstrosity[lv_player], libGame_gv_players[lv_player].lv_heroUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, false);
    TriggerAddEventUnitSelected(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Unhook AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_owner = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv_target, lv_owner, true);
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lv_target);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_target, lv_owner);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_target, lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityUnhookAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, c_playerAny, "HeroAbathurEvolveMonstrosity@SymbioteInitialDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Kill Initial Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "Suicide", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Init () {
    libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, null, "HeroAbathurEvolveMonstrosity@TargetCollisionSuppresser", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Symbioted Monstrosity Symbioted
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGDHL_gf_AbathurSymbioteTarget()) == "HeroAbathurEvolveMonstrosity"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAbathurMonstrosity[libGDHL_gf_AbathurSymbioteAbathurPlayer()] = libGDHL_gf_AbathurSymbioteTarget();
    UnitBehaviorRemove(libGDHL_gf_AbathurSymbioteUnit(), "HeroAbathurSymbiote@SuppressAttack", 1);
    UnitBehaviorAdd(libGDHL_gf_AbathurSymbioteUnit(), "HeroAbathurDeepTunnelMonstrosity@Carry", libGDHL_gf_AbathurSymbioteUnit(), 1);
    UnitBehaviorAdd(libGDHL_gf_AbathurSymbioteTarget(), "HeroAbathurDeepTunnelMonstrosity@Carry", libGDHL_gf_AbathurSymbioteTarget(), 1);
    if ((PlayerHasTalent(libGDHL_gf_AbathurSymbioteAbathurPlayer(), "HeroAbathurBoltOfTheSwarm") == true)) {
        UnitInventoryCreate(libGDHL_gf_AbathurSymbioteUnit(), "HeroAbathurBoltOfTheSwarm");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted_Init () {
    libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted = TriggerCreate("libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted, false);
    libGDHL_gf_AbathurSymbiote(libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroAbathurVolatileMutation", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityCreated_Init () {
    libGDHL_gt_HeroAbathurMonstrosityCreated = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityCreated_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityCreated, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrosityCreated, c_playerAny, "HeroAbathurEvolveMonstrosity@SpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Volatile Mutation Leech
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "HeroAbathurVolatileMutation@Damage"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "HeroAbathurEvolveMonstrosity"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + libCore_gf_CombatCalculateDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech_Init () {
    libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAbathurVolatileMutation@Damage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Start Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_typeofCopiedUnit;
    unit lv_abathur;
    int lv_abathurPlayer;
    int lv_abathurLevel;
    unit lv_ultimateEvolutionUnit;
    unit lv_target;
    int lv_targetPlayer;
    int lv_targetHeroIndex;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int autoA1A850FA_n;
    int autoA1A850FA_i;

    // Variable Initialization
    lv_abathur = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_abathurPlayer = UnitGetOwner(lv_abathur);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, 0, UnitFilter((1 << c_targetFilterHover), 0, 0, 0)) == true)) {
        UnitCreateEffectUnit(lv_abathur, "AbathurUltimateEvolutionInterruptModifyCooldown", lv_abathur);
        UnitBehaviorRemove(lv_abathur, "HeroAbathurUltimateEvolution@VehicleCasterBehavior", 1);
        UnitBehaviorRemove(lv_abathur, "HeroAbathurAssumingDirectControl", 1);
        return true;
    }

    if ((UnitIsAlive(lv_abathur) == false)) {
        UnitBehaviorRemove(lv_abathur, "HeroAbathurAssumingDirectControl", 1);
        return true;
    }

    lv_typeofCopiedUnit = UnitGetType(lv_target);
    lv_targetHeroIndex = libCore_gf_HeroIndexOfUnit(lv_target);
    lv_abathurLevel = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, lv_abathur);
    PlayerApplySkin(lv_abathurPlayer, libCore_gv_dataSkinsSkinData[libGame_gf_LoadoutGetPlayerSkin(lv_targetPlayer)].lv_skinLink, true);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayer) == true) && (libGame_gv_players[lv_targetPlayer].lv_activeVehicle != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(libGame_gv_players[lv_targetPlayer].lv_activeVehicle), 35.0));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(lv_target), 35.0));
    }
    lv_ultimateEvolutionUnit = UnitLastCreated();
    libUIUI_gf_InitPathingLines(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    UnitSetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLife, UnitGetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "HeroAbathurEvolutionaryLink@UnitTracker", lv_ultimateEvolutionUnit, 1);
    UnitCreateEffectUnit(lv_ultimateEvolutionUnit, "HeroAbathurEvolutionaryLink@AddTrackedUnit", lv_target);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "HeroAbathurUltimateEvolution@Build", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "HeroAbathurUltimateEvolution@Buff", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeath", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeathRagdoll", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "HeroAbathurUltimateEvolution@ControlBehavior", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "EarnsXP", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "CapturePointAllowed", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "HeroAbathurVolatileMutation", lv_ultimateEvolutionUnit, 1);
    SoundPlayForPlayer(SoundLink("Abathur_UltimateEvolution_Screen_Loop", c_soundIndexAny), lv_abathurPlayer, libCore_gv_playerGroupFromPlayer[lv_abathurPlayer], 100.0, 0.0);
    libGDHL_gv_heroAbathurSymbioteScreenSound[lv_abathurPlayer] = SoundLastPlayed();
    CatalogFieldValueSet(c_gameCatalogAbil, "HeroGenericMount", "CastIntroTime[" + IntToString(0) + "]", UnitGetOwner(lv_abathur), CatalogFieldValueGet(c_gameCatalogAbil, "HeroGenericMount", "CastIntroTime[" + IntToString(0) + "]", 0));
    libGame_gv_players[lv_abathurPlayer].lv_activeVehicle = lv_ultimateEvolutionUnit;
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    UnitStatusBarOverride(lv_ultimateEvolutionUnit, c_unitStatusGroupAll);
    libGame_gf_LevelUpResetHeroStats(lv_ultimateEvolutionUnit);
    autoA1A850FA_n = lv_abathurLevel;
    for (autoA1A850FA_i = 1; autoA1A850FA_i <= autoA1A850FA_n; autoA1A850FA_i += 1) {
        libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel(lv_ultimateEvolutionUnit);
    }
    UnitXPAddXP(lv_ultimateEvolutionUnit, null, libCore_gf_GetTotalXPForLevel(lv_abathurLevel));
    libGame_gf_HeroAddInventoryAbilities(lv_ultimateEvolutionUnit);
    libGame_gf_HeroAddMapMechanicAbilities(lv_ultimateEvolutionUnit);
    if ((PlayerHasTalent(lv_abathurPlayer, "HeroAbathurBoltOfTheSwarm") == true)) {
        UnitInventoryCreate(lv_ultimateEvolutionUnit, "HeroAbathurBoltOfTheSwarm");
    }

    UnitClearSelection(lv_abathurPlayer);
    UnitSelect(lv_ultimateEvolutionUnit, lv_abathurPlayer, true);
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_ultimateEvolutionUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGame_gf_SendEventAbathurUltimateEvolutionHeroCopied(lv_abathurPlayer, lv_targetPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, c_playerAny, "HeroAbathurUltimateEvolution@CastDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Stop Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ultimateEvolutionUnit;
    int lv_ownerPlayer;
    int lv_itPlayer;
    int lv_teamNumberofOwner;
    bool lv_vehicleTransferCase;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_cooldownValue;

    // Automatic Variable Declarations
    playergroup autoBE5C7562_g;
    playergroup autoA61D15C5_g;

    // Variable Initialization
    lv_vehicleTransferCase = true;
    lv_cooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ultimateEvolutionUnit = EventUnit();
    lv_ownerPlayer = UnitGetOwner(lv_ultimateEvolutionUnit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    autoBE5C7562_g = libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBE5C7562_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_activeVehicle == lv_ultimateEvolutionUnit)) {
            libGame_gf_SendEventAbathurUltimateEvolutionEnded(lv_ownerPlayer, lv_ultimateEvolutionUnit);
            UnitBehaviorRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroAbathurUltimateEvolution@VehicleCasterBehavior", 1);
            libGame_gv_players[lv_itPlayer].lv_activeVehicle = null;
            lv_vehicleTransferCase = false;
            break;
        }

    }
    if ((lv_vehicleTransferCase == true)) {
        UnitBehaviorRemove(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "HeroAbathurAssumingDirectControl", 1);
        return true;
    }

    autoA61D15C5_g = libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA61D15C5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroAbathur")) {
            UnitSelect(lv_ultimateEvolutionUnit, lv_itPlayer, false);
            UnitSelect(libGame_gv_players[lv_itPlayer].lv_heroUnit, lv_itPlayer, true);
            Wait(0.5, c_timeGame);
            UnitBehaviorRemove(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "HeroAbathurAssumingDirectControl", 1);
            libGame_gv_players[lv_itPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
            libGame_gf_CameraUpdateCameraForPlayer(lv_itPlayer);
            libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_itPlayer].lv_heroUnit, lv_itPlayer);
            libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_itPlayer].lv_heroUnit, lv_itPlayer);
            lv_abilLink = "HeroAbathurUltimateEvolution";
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_itPlayer);
            lv_cooldownValue = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_itPlayer);
            UnitModifyCooldown(libGame_gv_players[lv_itPlayer].lv_heroUnit, lv_cooldownLink, lv_cooldownValue, c_cooldownOperationSet);
            SoundStop(libGDHL_gv_heroAbathurUltimateEvolutionScreenSound[lv_itPlayer], true);
            if (true) {
            }

            break;
        }

    }
    libGame_gv_players[lv_ownerPlayer].lv_heroUsesAnnouncementAlias = false;
    libGame_gv_players[lv_ownerPlayer].lv_heroAnnouncementAliasText = null;
    libGame_gv_players[lv_ownerPlayer].lv_heroAnnouncementAliasIcon = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, null, "HeroAbathurUltimateEvolution@ControlBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Unit Dead
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoF0AD6297_g;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(lv_unit, "HeroAbathurUltimateEvolution@Buff") == true) || (UnitHasBehavior2(lv_unit, "HeroAbathurUltimateEvolution@Build") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(lv_unit, true);
    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoF0AD6297_g = lv_allyPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoF0AD6297_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerSetAlliance(lv_itPlayer, c_allianceIdSeekHelp, lv_targetPlayer, true);
        PlayerSetAlliance(lv_itPlayer, c_allianceIdGiveHelp, lv_targetPlayer, true);
    }
    UnitBehaviorRemove(EventUnit(), "HeroAbathurUltimateEvolution@Buff", 1);
    Wait(30.0, c_timeGame);
    UnitRemove(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Carapace Shield (Talents Reset)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(libGame_gf_PlayerTalentsResetPlayer()) == "Abathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("HeroAbathurCarapace@Shield"), "DamageResponse.ModifyLimit", libGame_gf_PlayerTalentsResetPlayer(), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroAbathurCarapace@ShieldTooltipDummy"), "DamageResponse.ModifyLimit", libGame_gf_PlayerTalentsResetPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset_Init () {
    libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset = TriggerCreate("libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset, false);
    libGame_gf_PlayerTalentsReset(libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anduin - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnduinHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAnduinHeroCount += 1;
    if ((libGDHL_gv_heroAnduinHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroAnduinLeapofFaithCameraLock, true);
        TriggerEnable(libGDHL_gt_HeroAnduinEvenhandedBlessings, true);
        TriggerEnable(libGDHL_gt_HeroAnduinBlessedRecovery, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnduinHeroCountIncrement_Init () {
    libGDHL_gt_HeroAnduinHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroAnduinHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anduin - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnduinHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAnduinHeroCount -= 1;
    if ((libGDHL_gv_heroAnduinHeroCount < 0)) {
        libGDHL_gv_heroAnduinHeroCount = 0;
    }

    if ((libGDHL_gv_heroAnduinHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroAnduinLeapofFaithCameraLock, false);
        TriggerEnable(libGDHL_gt_HeroAnduinEvenhandedBlessings, false);
        TriggerEnable(libGDHL_gt_HeroAnduinBlessedRecovery, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnduinHeroCountDecrement_Init () {
    libGDHL_gt_HeroAnduinHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroAnduinHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anduin - Leap of Faith Camera Lock
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnduinLeapofFaithCameraLock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PlayerHeroDisplacementCameraLock(EventUnit(), EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnduinLeapofFaithCameraLock_Init () {
    libGDHL_gt_HeroAnduinLeapofFaithCameraLock = TriggerCreate("libGDHL_gt_HeroAnduinLeapofFaithCameraLock_Func");
    TriggerEnable(libGDHL_gt_HeroAnduinLeapofFaithCameraLock, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnduinLeapofFaithCameraLock, null, "AnduinLeapOfFaith@Unstoppable", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anduin - Evenhanded Blessings
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnduinEvenhandedBlessings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/AnduinStacksFrameContainer", lv_target);
    if (((EventPlayerEffectUsed() == "AnduinEvenhandedBlessings@UITargetBehaviorInitialDummySet") || (EventPlayerEffectUsed() == "AnduinEvenhandedBlessings@UITargetBehaviorRefreshDummySet"))) {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnduinEvenhandedBlessings_Init () {
    libGDHL_gt_HeroAnduinEvenhandedBlessings = TriggerCreate("libGDHL_gt_HeroAnduinEvenhandedBlessings_Func");
    TriggerEnable(libGDHL_gt_HeroAnduinEvenhandedBlessings, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnduinEvenhandedBlessings, c_playerAny, "AnduinEvenhandedBlessings@UITargetBehaviorInitialDummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnduinEvenhandedBlessings, c_playerAny, "AnduinEvenhandedBlessings@UITargetBehaviorRefreshDummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnduinEvenhandedBlessings, c_playerAny, "AnduinEvenhandedBlessings@UITargetBehaviorFinalDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anduin - Blessed Recovery
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnduinBlessedRecovery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_anduin;
    int lv_owner;
    fixed lv_damageTaken;
    fixed lv_totalHealth;
    fixed lv_percentDamageTaken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anduin = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_anduin) == "AnduinHero"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_owner, "AnduinBlessedRecovery") == true))) {
            return false;
        }

        if (!((UnitGetCooldown(lv_anduin, "Abil/AnduinBlessedRecovery") == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAmount();
    lv_totalHealth = UnitGetPropertyFixed(lv_anduin, c_unitPropLifeMax, c_unitPropCurrent);
    lv_percentDamageTaken = (lv_damageTaken / lv_totalHealth);
    if ((lv_percentDamageTaken > libGDHL_gv_heroAnduinBlessedRecoveryThreshold)) {
        UnitBehaviorAdd(lv_anduin, "AnduinBlessedRecovery@HoT", lv_anduin, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnduinBlessedRecovery_Init () {
    libGDHL_gt_HeroAnduinBlessedRecovery = TriggerCreate("libGDHL_gt_HeroAnduinBlessedRecovery_Func");
    TriggerEnable(libGDHL_gt_HeroAnduinBlessedRecovery, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAnduinBlessedRecovery, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAnubarakHeroCount += 1;
    if ((libGDHL_gv_heroAnubarakHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleAI, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitHit, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSpawned, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitStatus, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakHeroCountIncrement_Init () {
    libGDHL_gt_HeroAnubarakHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroAnubarakHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAnubarakHeroCount -= 1;
    if ((libGDHL_gv_heroAnubarakHeroCount < 0)) {
        libGDHL_gv_heroAnubarakHeroCount = 0;
    }

    if ((libGDHL_gv_heroAnubarakHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleAI, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitHit, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSpawned, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitStatus, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakHeroCountDecrement_Init () {
    libGDHL_gt_HeroAnubarakHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroAnubarakHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Max Range
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromAnubarakToTargetPoint;
    fixed lv_anubarakRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    lv_anubarakRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_unit), "Radius", lv_player);
    lv_abilityRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogActor, ("AnubarakBurrowCharge@Guide"), "Height", lv_player);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromAnubarakToTargetPoint = DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_playerTargetPoint);
    if ((lv_distanceFromAnubarakToTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_abilityRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = (lv_abilityRange + 0.125);
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_actualTargetPoint) <= (lv_anubarakRadius + 0.125))) {
            UnitBehaviorRemove(lv_unit, "AnubarakBurrowCharge@Caster", 1);
        }

    }
    if ((UnitIsAlive(lv_unit) == true)) {
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_actualTargetPoint), c_orderQueueAddToFront);
    }

    UnitCreateEffectPoint(lv_unit, "AnubarakBurrowChargeFinishRangeCheckCreatePersistent", lv_actualTargetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeMaxRange = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, c_playerAny, "AnubarakBurrowCharge@OffsetPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Restore Height
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight, c_playerAny, "AnubarakBurrowCharge@FinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Beetle AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBeetleAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beetleUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beetleUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(lv_beetleUnit)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_beetleUnit, EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBeetleAI_Init () {
    libGDHL_gt_HeroAnubarakBeetleAI = TriggerCreate("libGDHL_gt_HeroAnubarakBeetleAI_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBeetleAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakBeetleAI, c_playerAny, "AnubarakScarabHost@CreateUnitSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Unit Hit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonUnitHit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAnubarakCocoonTargets[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonUnitHit_Init () {
    libGDHL_gt_HeroAnubarakCocoonUnitHit = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonUnitHit_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitHit, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakCocoonUnitHit, c_playerAny, "AnubarakCocoon@ApplyWebbedBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_anubarak;
    unit lv_cocoonUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anubarak = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cocoonUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    UnitSetPosition(libGDHL_gv_heroAnubarakCocoonTargets[UnitGetOwner(lv_anubarak)], UnitGetPosition(lv_cocoonUnit), false);
    while ((UnitIsValid(lv_anubarak) == true) && (UnitIsValid(lv_cocoonUnit) == true) && (UnitIsValid(libGDHL_gv_heroAnubarakCocoonTargets[UnitGetOwner(lv_anubarak)]) == true)) {
        Wait(0.0625, c_timeGame);
    }
    UnitCreateEffectUnit(lv_cocoonUnit, "TimedLifeFate", lv_cocoonUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonSpawned_Init () {
    libGDHL_gt_HeroAnubarakCocoonSpawned = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakCocoonSpawned, c_playerAny, "AnubarakCocoon@UnitSpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Sound Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonSoundEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_webbedPlayer;

    // Automatic Variable Declarations
    int auto55C9A125_val;

    // Variable Initialization
    lv_webbedPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    auto55C9A125_val = EventUnitBehaviorChange();
    if (auto55C9A125_val == c_unitBehaviorChangeActivate) {
        libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer(true, lv_webbedPlayer, "Heroes_Lowpass_Cocoon_Cocoon");
    }
    else if (auto55C9A125_val == c_unitBehaviorChangeDeactivate) {
        libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer(false, lv_webbedPlayer, "Heroes_Lowpass_Cocoon_Cocoon");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonSoundEffect_Init () {
    libGDHL_gt_HeroAnubarakCocoonSoundEffect = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonSoundEffect_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonSoundEffect, null, "AnubarakCocoon@Webbed", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Unit Status
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonUnitStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoonUnit;
    unit lv_targetHeroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cocoonUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cocoonUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatus, "TrackingCenteringFrame/UnitTrackingElement/TrackedUnitStatusFrame0", lv_cocoonUnit);
    lv_targetHeroUnit = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_cocoonUnit, "AnubarakCocoon@UnitTracker"), 1);
    libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), lv_targetHeroUnit, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonUnitStatus_Init () {
    libGDHL_gt_HeroAnubarakCocoonUnitStatus = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonUnitStatus_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonUnitStatus, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakCocoonUnitStatus, c_playerAny, "AnubarakCocoon@UnitSpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_webbedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_webbedUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_webbedUnit, "HeroGenericIgnoreFullscreenOverlay") == false))) {
            return false;
        }

        if (!((UnitIsAlive(lv_webbedUnit) == true))) {
            return false;
        }

        if (!((UnitTestState(lv_webbedUnit, c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_webbedUnit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI\\OverlayAnubarakWebBlast.SC2Cutscene", EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonOn_Init () {
    libGDHL_gt_HeroAnubarakCocoonOn = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonOn_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonOn, null, "AnubarakCocoon@Webbed", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_webbedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_webbedUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_webbedUnit, "HeroGenericIgnoreFullscreenOverlay") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(lv_webbedUnit), "Cutscenes\\GameUI\\OverlayAnubarakWebBlast.SC2Cutscene", EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonOff_Init () {
    libGDHL_gt_HeroAnubarakCocoonOff = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonOff_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonOff, null, "AnubarakCocoon@Webbed", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Increment Hero Count
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisIncrementHeroCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArtanisHeroCount += 1;
    if ((libGDHL_gv_heroArtanisHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroArtanisShieldOverloadFatalDamage, true);
        TriggerEnable(libGDHL_gt_ArtanisBladeDashPhasePrismCast, true);
        TriggerEnable(libGDHL_gt_ArtanisTwinBladesChargeTargeting, true);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamSetTarget, true);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamUnitCreated, true);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2, true);
        TriggerEnable(libGDHL_gt_HeroArtanisProtectorofAiurTakedown, true);
        TriggerEnable(libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisIncrementHeroCount_Init () {
    libGDHL_gt_HeroArtanisIncrementHeroCount = TriggerCreate("libGDHL_gt_HeroArtanisIncrementHeroCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Decrement Hero Count
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisDecrementHeroCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArtanisHeroCount -= 1;
    if ((libGDHL_gv_heroArtanisHeroCount < 0)) {
        libGDHL_gv_heroArtanisHeroCount = 0;
    }

    if ((libGDHL_gv_heroArtanisHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroArtanisShieldOverloadFatalDamage, false);
        TriggerEnable(libGDHL_gt_ArtanisBladeDashPhasePrismCast, false);
        TriggerEnable(libGDHL_gt_ArtanisTwinBladesChargeTargeting, false);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamSetTarget, false);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamUnitCreated, false);
        TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2, false);
        TriggerEnable(libGDHL_gt_HeroArtanisProtectorofAiurTakedown, false);
        TriggerEnable(libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisDecrementHeroCount_Init () {
    libGDHL_gt_HeroArtanisDecrementHeroCount = TriggerCreate("libGDHL_gt_HeroArtanisDecrementHeroCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Prismatic Alignment (Takedown)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_owner) == "Artanis"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_owner].lv_heroUnit, "HeroArtanisPrismaticAlignment@IncrementToken", libGame_gf_HeroParticipatedInTakedownKilledHero());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown_Init () {
    libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown = TriggerCreate("libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Shield Overload Fatal Damage
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisShieldOverloadFatalDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = EventUnitDamageAbsorbed();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(EventUnitDamageSourceUnit(), "HeroArtanisShieldOverload@DealAbsorbedDamage", EventUnit(), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisShieldOverloadFatalDamage_Init () {
    libGDHL_gt_HeroArtanisShieldOverloadFatalDamage = TriggerCreate("libGDHL_gt_HeroArtanisShieldOverloadFatalDamage_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisShieldOverloadFatalDamage, false);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroArtanisShieldOverloadFatalDamage, null, "HeroArtanisShieldOverload@CarryBehaviorProcFatal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis - Blade Dash Phase Prism Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ArtanisBladeDashPhasePrismCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_artanisPhasePrismBoolean[lv_player] == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_player) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, lv_player, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSilenced - 32)))) == true))) {
            return false;
        }

        if (!(((UnitBehaviorCount(lv_unit, "HeroArtanisBladeDash@FirstCaster") == 1) || (UnitBehaviorCount(lv_unit, "HeroArtanisBladeDash@BetweenStrikes") == 1) || (UnitBehaviorCount(lv_unit, "HeroArtanisBladeDash@SecondCaster") == 1) || (UnitBehaviorCount(lv_unit, "HeroArtanisBladeDash@Validity") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_artanisPhasePrismBoolean[lv_player] = true;
    UnitCreateEffectPoint(lv_unit, "HeroArtanisPhasePrism@InitialSet", OrderGetTargetPoint(EventUnitOrder()));
    UnitCreateEffectUnit(lv_unit, "HeroArtanisPhasePrism@CancelOrder", lv_unit);
    UnitAbilitySpendExplicit(lv_unit, AbilityCommand("HeroArtanisPhasePrism", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    Wait(0.125, c_timeGame);
    libGDHL_gv_artanisPhasePrismBoolean[lv_player] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ArtanisBladeDashPhasePrismCast_Init () {
    libGDHL_gt_ArtanisBladeDashPhasePrismCast = TriggerCreate("libGDHL_gt_ArtanisBladeDashPhasePrismCast_Func");
    TriggerEnable(libGDHL_gt_ArtanisBladeDashPhasePrismCast, false);
    TriggerAddEventUnitOrder(libGDHL_gt_ArtanisBladeDashPhasePrismCast, null, AbilityCommand("HeroArtanisPhasePrism", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis - Twin Blades Charge Targeting
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ArtanisTwinBladesChargeTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(OrderGetTargetUnit(UnitOrder(lv_unit, 0)), "HeroArtanisTwinBlades@ChargeTarget", lv_unit, 1);
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimBaselineStop");
    while ((UnitHasBehavior2(lv_unit, "HeroArtanisTwinBlades@ChargeCaster") == true)) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimBaselineStart");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ArtanisTwinBladesChargeTargeting_Init () {
    libGDHL_gt_ArtanisTwinBladesChargeTargeting = TriggerCreate("libGDHL_gt_ArtanisTwinBladesChargeTargeting_Func");
    TriggerEnable(libGDHL_gt_ArtanisTwinBladesChargeTargeting, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_ArtanisTwinBladesChargeTargeting, null, "HeroArtanisTwinBlades@ChargeCaster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Purifier Beam Set Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisPurifierBeamSetTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beamTargetUnit;
    int lv_beamPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beamTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_beamPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libGDHL_gv_heroArtanisPurifierBeamTarget[lv_beamPlayer] = lv_beamTargetUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisPurifierBeamSetTarget_Init () {
    libGDHL_gt_HeroArtanisPurifierBeamSetTarget = TriggerCreate("libGDHL_gt_HeroArtanisPurifierBeamSetTarget_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamSetTarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroArtanisPurifierBeamSetTarget, c_playerAny, "HeroArtanisPurifierBeam@ApplyTargetingBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Purifier Beam Unit Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisPurifierBeamUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroArtanisPurifierBeam@InvisibleTrackingUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArtanisPurifierBeamUnit[UnitGetOwner(lv_unit)] = lv_unit;
    libGDHL_gf_HeroArtanisPurifierBeamAI(lv_unit, UnitGetOwner(lv_unit));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisPurifierBeamUnitCreated_Init () {
    libGDHL_gt_HeroArtanisPurifierBeamUnitCreated = TriggerCreate("libGDHL_gt_HeroArtanisPurifierBeamUnitCreated_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamUnitCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroArtanisPurifierBeamUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Purifier Beam Redirect Target 2
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_unit;
    fixed lv_timeRemaining;
    unit lv_purifierBeamUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "HeroArtanisPurifierBeam@Targeting") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitBehaviorEffectPlayer(lv_unit, "HeroArtanisPurifierBeam@Targeting", c_effectPlayerCaster, 0);
    lv_timeRemaining = UnitBehaviorDurationTotal(lv_unit, "HeroArtanisPurifierBeam@Targeting");
    if ((libGame_gf_CheckUnitForAbilityRedirectBoolean() == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_heroArtanisPurifierBeamUnit[lv_owner]), UnitGetPosition(lv_unit)) <= 6.0) && (UnitBehaviorEffectUnit(lv_unit, "HeroArtanisPurifierBeam@Targeting", c_effectUnitSource, 0) == libGame_gv_players[lv_owner].lv_heroUnit)) {
            libGDHL_gv_heroArtanisPurifierBeamTarget[lv_owner] = lv_target;
        }
        else {
            libGDHL_gv_heroArtanisPurifierBeamPointOverride[lv_owner] = true;
            libGDHL_gv_heroArtanisPurifierBeamLastKnownPoint[lv_owner] = libGame_gf_CheckUnitForAbilityRedirectPoint();
        }
    }
    else {
        UnitBehaviorRemove(libGDHL_gv_heroArtanisPurifierBeamTarget[lv_owner], "HeroArtanisPurifierBeam@Targeting", 1);
        libGDHL_gv_heroArtanisPurifierBeamTarget[lv_owner] = lv_target;
        UnitBehaviorAdd(lv_target, "HeroArtanisPurifierBeam@Targeting", libGame_gv_players[lv_owner].lv_heroUnit, 1);
        UnitBehaviorAdd(lv_target, "HeroArtanisPurifierBeam@Revealer", libGame_gv_players[lv_owner].lv_heroUnit, 1);
        UnitBehaviorSetDurationRemaining(lv_target, "HeroArtanisPurifierBeam@Targeting", lv_timeRemaining);
        UnitBehaviorSetDurationRemaining(lv_target, "HeroArtanisPurifierBeam@Revealer", lv_timeRemaining);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2_Init () {
    libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2 = TriggerCreate("libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2, false);
    libGame_gf_CheckUnitForAbilityRedirect(libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Protector of Aiur Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisProtectorofAiurTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_localPlayer].lv_heroUnit) == "HeroArtanis"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "HeroArtanisProtectorOfAiur") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroArtanisProtectorOfAiur@IncreaseTokenTakedown", libGame_gv_players[lv_localPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisProtectorofAiurTakedown_Init () {
    libGDHL_gt_HeroArtanisProtectorofAiurTakedown = TriggerCreate("libGDHL_gt_HeroArtanisProtectorofAiurTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisProtectorofAiurTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroArtanisProtectorofAiurTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArthasHeroCount += 1;
    if ((libGDHL_gv_heroArthasHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown, true);
        TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown, true);
        TriggerEnable(libGDHL_gt_HeroArthasRime, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasHeroCountIncrement_Init () {
    libGDHL_gt_HeroArthasHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroArthasHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArthasHeroCount -= 1;
    if ((libGDHL_gv_heroArthasHeroCount < 0)) {
        libGDHL_gv_heroArthasHeroCount = 0;
    }

    if ((libGDHL_gv_heroArthasHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown, false);
        TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown, false);
        TriggerEnable(libGDHL_gt_HeroArthasRime, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasHeroCountDecrement_Init () {
    libGDHL_gt_HeroArthasHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroArthasHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Frostmourne Hungers (Hero Takedown)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_localPlayer].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "HeroArthasObliterate") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroArthasObliterate@HeroTakedownReduceCooldown", libGame_gv_players[lv_localPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown_Init () {
    libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown = TriggerCreate("libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Frostmourne Hungers (Minion Takedown)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_localPlayer].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "HeroArthasObliterate") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroArthasObliterate@NPCTakedownReduceCooldown", libGame_gv_players[lv_localPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown_Init () {
    libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown = TriggerCreate("libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Rime
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasRime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatusUpdate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasRime_Init () {
    libGDHL_gt_HeroArthasRime = TriggerCreate("libGDHL_gt_HeroArthasRime_Func");
    TriggerEnable(libGDHL_gt_HeroArthasRime, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroArthasRime, null, "HeroArthasRime@CarryBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroArthasRime, null, "HeroArthasRime@CarryBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Shield of Hope - Set Shield Strength
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_casterPlayer;
    unit lv_target;
    fixed lv_targetMissingHealth;
    const fixed lv_shieldFraction = 0.5;
    fixed lv_shieldValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterPlayer = UnitGetOwner(lv_caster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetMissingHealth = (UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent));
    lv_shieldValue = (lv_targetMissingHealth * lv_shieldFraction);

    // Conditions
    if (testConds) {
        if (!((lv_targetMissingHealth > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, ("HeroAurielShieldOfHope@ShieldBehavior"), "DamageResponse.ModifyLimit", lv_casterPlayer, FixedToString(lv_shieldValue, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_caster, "HeroAurielShieldOfHope@ApplyShieldBehavior", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength_Init () {
    libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength = TriggerCreate("libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength_Func");
    TriggerEnable(libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength, c_playerAny, "HeroAurielShieldOfHope@ImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Bestow Hope Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeBestowHopeCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    int lv_proxyOwner;
    unit lv_proxy;
    int lv_iPlayer;
    unit lv_previousProxy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iPlayer = 1;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_auriel = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    lv_proxy = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_proxyOwner = UnitGetOwner(lv_proxy);
    lv_previousProxy = libGDHL_gv_heroAurielBestowHopeProxy[lv_aurielPlayer];
    if ((UnitIsValid(lv_previousProxy) == true)) {
        UnitCreateEffectUnit(lv_auriel, "HeroAurielBestowHope@RemovalSet", lv_previousProxy);
        lv_previousProxy = null;
        Wait(0.125, c_timeGame);
    }

    if ((UnitIsValid(lv_auriel) == true) && (UnitIsValid(lv_proxy) == true)) {
        UnitCreateEffectUnit(lv_auriel, "HeroAurielBestowHope@ApplicationSet", lv_proxy);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeBestowHopeCast_Init () {
    libGDHL_gt_HeroAurielBestowHopeBestowHopeCast = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeBestowHopeCast_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeBestowHopeCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielBestowHopeBestowHopeCast, c_playerAny, "HeroAurielBestowHope@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Set Proxy
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeSetProxy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    unit lv_proxy;
    int lv_proxyOwner;
    int lv_iPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_proxy = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_proxyOwner = UnitGetOwner(lv_proxy);
    lv_iPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_auriel = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    if ((UnitIsValid(lv_auriel) == true) && (UnitIsValid(lv_proxy) == true) && (libGame_gf_PlayerIsHeroPlayer(lv_aurielPlayer) == true) && (libGame_gf_PlayerIsHeroPlayer(lv_proxyOwner) == true)) {
        libGDHL_gv_heroAurielBestowHopeProxy[lv_aurielPlayer] = lv_proxy;
        libGDHL_gv_heroAurielBestowHopeProxyOwner[lv_proxyOwner] = lv_aurielPlayer;
        libGDHL_gv_heroAurielBestowHopeNumberofActiveProxies += 1;
        libGDHL_gf_AurielUIBestowHope(lv_aurielPlayer, lv_proxy);
    }

    TriggerExecute(libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeSetProxy_Init () {
    libGDHL_gt_HeroAurielBestowHopeSetProxy = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeSetProxy_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeSetProxy, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielBestowHopeSetProxy, c_playerAny, "HeroAurielBestowHope@ApplyCasterBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Remove Proxy
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeRemoveProxy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iPlayer = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "HeroGall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAurielBestowHopeNumberofActiveProxies -= 1;
    TriggerExecute(libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeRemoveProxy_Init () {
    libGDHL_gt_HeroAurielBestowHopeRemoveProxy = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeRemoveProxy_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeRemoveProxy, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielBestowHopeRemoveProxy, null, "HeroAurielBestowHope@ProxyBehavior", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Toggle Bestow Hope Proxy Damage Dealt Trigger
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroAurielBestowHopeNumberofActiveProxies > 0)) {
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, true);
    }
    else {
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger_Init () {
    libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Healing Stored From Proxy Damage Dealt
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDealt;
    unit lv_auriel;
    unit lv_proxy;
    int lv_proxyPlayer;
    int lv_aurielPlayer;
    unit lv_target;
    int lv_bestowHopeStacks;
    int lv_bestowHopeStackIteration;

    // Automatic Variable Declarations
    int auto03A0C37B_ae;
    const int auto03A0C37B_ai = 1;

    // Variable Initialization
    lv_damageDealt = libCore_gf_CombatCalculateDamageAmount();
    lv_proxy = EventUnitDamageSourceUnit();
    lv_proxyPlayer = UnitGetOwner(lv_proxy);
    lv_target = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_damageDealt > 0.0))) {
            return false;
        }

        if (!((lv_target != lv_proxy))) {
            return false;
        }

        if (!((UnitGetOwner(lv_target) != UnitGetOwner(lv_proxy)))) {
            return false;
        }

        if (!((UnitIsValid(lv_proxy) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(lv_proxy, "HeroAurielBestowHope@ProxyBehavior") == true) || (UnitHasBehavior2(libGame_gv_players[lv_proxyPlayer].lv_heroUnit, "HeroAurielBestowHope@ProxyBehavior") == true)))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BribeKillEffect"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_proxy, "HeroAurielBestowHope@ProxyBehavior") == false) && (UnitHasBehavior2(libGame_gv_players[lv_proxyPlayer].lv_heroUnit, "HeroAurielBestowHope@ProxyBehavior") == true)) {
        lv_proxy = libGame_gv_players[lv_proxyPlayer].lv_heroUnit;
    }

    lv_bestowHopeStacks = UnitBehaviorCount(lv_proxy, "HeroAurielBestowHope@ProxyBehavior");
    auto03A0C37B_ae = lv_bestowHopeStacks;
    lv_bestowHopeStackIteration = 0;
    for ( ; ( (auto03A0C37B_ai >= 0 && lv_bestowHopeStackIteration <= auto03A0C37B_ae) || (auto03A0C37B_ai < 0 && lv_bestowHopeStackIteration >= auto03A0C37B_ae) ) ; lv_bestowHopeStackIteration += auto03A0C37B_ai ) {
        lv_auriel = UnitBehaviorEffectUnit(lv_proxy, "HeroAurielBestowHope@ProxyBehavior", c_effectUnitCaster, lv_bestowHopeStackIteration);
        lv_aurielPlayer = UnitGetOwner(lv_auriel);
        if ((UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeHeroic) == true)) {
            UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, (UnitGetPropertyFixed(lv_auriel, c_unitPropEnergy, c_unitPropCurrent) + (lv_damageDealt * libGDHL_gv_heroAurielBestowHopeHeroicDamageStoredPercentage)));
        }
        else {
            UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, (UnitGetPropertyFixed(lv_auriel, c_unitPropEnergy, c_unitPropCurrent) + (lv_damageDealt * libGDHL_gv_heroAurielBestowHopeNonHeroicDamageStoredPercentage)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt_Init () {
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Healing Stored From Proxy Damage Taken
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageTaken;
    unit lv_aurielProxy;
    unit lv_auriel;
    int lv_proxyPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aurielProxy = EventUnit();
    lv_proxyPlayer = UnitGetOwner(lv_aurielProxy);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_aurielProxy, "HeroAurielBestowHope@ProxyBehavior") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(libGDHL_gv_heroAurielBestowHopeProxyOwner[lv_proxyPlayer], "HeroAurielEmpathicLink") == true)) {
        lv_auriel = libGame_gv_players[libGDHL_gv_heroAurielBestowHopeProxyOwner[lv_proxyPlayer]].lv_heroUnit;
        lv_damageTaken = libCore_gf_CombatCalculateDamageAmount();
        UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, (UnitGetPropertyFixed(lv_auriel, c_unitPropEnergy, c_unitPropCurrent) + (lv_damageTaken * libGDHL_gv_heroAurielBestowHopeEmpathicLinkStoredPercentage)));
    }

    if ((UnitIsAlive(EventUnit()) == false)) {
        UnitBehaviorRemove(EventUnit(), "HeroAurielBestowHope@ProxyBehavior", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken_Init () {
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[3]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[4]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[5]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[6]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[8]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[9]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[10]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[13]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[14]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[1]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[2]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[3]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[4]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[5]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[6]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[7]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[8]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[9]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[10]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[13]"), null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, UnitRefFromVariable("libGDHL_gv_heroAurielBestowHopeProxy[14]"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Healing Stored From Damage Dealt
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    fixed lv_multiplier;
    fixed lv_damage;
    fixed lv_energyToAdd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_auriel = EventUnitDamageSourceUnit();
    lv_damage = libCore_gf_CombatCalculateDamageAmount();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "HeroAuriel"))) {
            return false;
        }

        if (!((lv_damage > 0.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_auriel, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_multiplier = libGDHL_gv_heroAurielHeroicDamageStoredFraction;
        if ((EventUnitDamageEffect() == "HeroAurielWeapon@Damage") && (PlayerHasTalent(UnitGetOwner(lv_auriel), "HeroAurielEnergizedCord") == true)) {
            lv_multiplier = libGDHL_gv_heroAurielHeroicDamageStoredFractionEnergizedCord;
        }

    }
    else {
        lv_multiplier = libGDHL_gv_heroAurielNonHeroicDamageStoredFraction;
        if ((EventUnitDamageEffect() == "HeroAurielWeapon@Damage") && (PlayerHasTalent(UnitGetOwner(lv_auriel), "HeroAurielEnergizedCord") == true)) {
            lv_multiplier = libGDHL_gv_heroAurielNonHeroicDamageStoredFractionEnergizedCord;
        }

    }
    lv_energyToAdd = (lv_multiplier * lv_damage);
    UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, (UnitGetPropertyFixed(lv_auriel, c_unitPropEnergy, c_unitPropCurrent) + lv_energyToAdd));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt_Init () {
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielSacredSweep@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielSacredSweep@CenterDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielSearingLight@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielDetainmentStrike@InitialDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielDetainmentStrike@StunDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielCrystalAegis@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroAurielWeapon@Damage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Proxy Unit Swapped
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_oldUnit;
    unit lv_newUnit;
    unit lv_aurielUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto2A308FC4_g;

    // Variable Initialization
    lv_oldUnit = libGame_gf_HeroUnitSwappedForPlayerOldUnit();
    lv_newUnit = libGame_gf_HeroUnitSwappedForPlayerNewUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A308FC4_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto2A308FC4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGDHL_gv_heroAurielBestowHopeProxy[lv_itPlayer] == lv_oldUnit) && (UnitHasBehavior2(lv_newUnit, "MinionAIAttackableStructure") == false)) {
            lv_aurielUnit = libGame_gv_players[lv_itPlayer].lv_heroUnit;
            UnitCreateEffectUnit(lv_aurielUnit, "HeroAurielBestowHope@RemovalSet", lv_oldUnit);
            UnitCreateEffectUnit(lv_aurielUnit, "HeroAurielBestowHope@ApplicationSet", lv_newUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped_Init () {
    libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped, false);
    libGame_gf_HeroUnitSwappedForPlayer(libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Glimmer of Hope (Regen Globe)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroAurielGlimmerOfHope@ApplyPrimedBehavior", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe_Init () {
    libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Bestow Hope - Will of Heaven
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielBestowHopeWillofHeaven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto8956D19F_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8956D19F_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8956D19F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventUnit() == libGDHL_gv_heroAurielBestowHopeProxy[lv_itPlayer])) {
            if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
                UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroAurielWillOfHeaven@AddSet", EventUnit());
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroAurielWillOfHeaven@RemoveSet", EventUnit());
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielBestowHopeWillofHeaven_Init () {
    libGDHL_gt_HeroAurielBestowHopeWillofHeaven = TriggerCreate("libGDHL_gt_HeroAurielBestowHopeWillofHeaven_Func");
    TriggerEnable(libGDHL_gt_HeroAurielBestowHopeWillofHeaven, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielBestowHopeWillofHeaven, null, "HeroAurielWillOfHeaven@ProxyBuff", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielBestowHopeWillofHeaven, null, "HeroAurielWillOfHeaven@ProxyBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Ray of Heaven - Ability Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielRayofHeavenAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    fixed lv_aurielCurrentEnergyRaw;
    fixed lv_aurielCurrentEnergyPercent;
    fixed lv_aurielBaseEnergyCap;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_auriel = EventUnit();
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    lv_aurielCurrentEnergyRaw = UnitGetPropertyFixed(lv_auriel, c_unitPropEnergy, c_unitPropCurrent);
    lv_aurielCurrentEnergyPercent = UnitGetPropertyFixed(lv_auriel, c_unitPropEnergyPercent, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_aurielCurrentEnergyPercent == 100.0)) {
        if ((PlayerHasTalent(lv_aurielPlayer, "HeroAurielReservoirOfHope") == true)) {
            UnitCreateEffectUnit(lv_auriel, "HeroAurielReservoirOfHope@Add1TokenCount", lv_auriel);
        }

        if ((PlayerHasTalent(lv_aurielPlayer, "HeroAurielBurstingLight") == true)) {
            UnitCreateEffectUnit(lv_auriel, "HeroAurielBurstingLight@ModifyCooldown", lv_auriel);
        }

    }

    if ((UnitHasBehavior2(lv_auriel, "HeroAurielGlimmerOfHope@Primed") == true)) {
        UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, (lv_aurielCurrentEnergyRaw * libGDHL_gv_heroAurielRayofHeavenGlimmerofHopeStoredPercentage));
        UnitBehaviorRemove(lv_auriel, "HeroAurielGlimmerOfHope@Primed", 1);
    }
    else {
        UnitSetPropertyFixed(lv_auriel, c_unitPropEnergy, 0.0);
    }
    lv_aurielBaseEnergyCap = (UnitGetPropertyFixed(lv_auriel, c_unitPropEnergyMax, c_unitPropCurrent) - (libGDHL_gv_heroAurielRayofHeavenReservoirofHopeHealingPerStack * libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("HeroAurielReservoirOfHope@TokenCounter", lv_aurielPlayer)));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("HeroAurielRayOfHeaven@HealModfyUnit"), "VitalArray[" + IntToString(0) + "].Change", lv_aurielPlayer, lv_aurielCurrentEnergyRaw);
    if ((PlayerHasTalent(lv_aurielPlayer, "HeroAurielSearingLight") == true)) {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("HeroAurielSearingLight@Damage"), "Amount", lv_aurielPlayer, (lv_aurielCurrentEnergyRaw * libGDHL_gv_heroAurielRayofHeavenSearingLightFractionOfEnergyConvertedToDamage));
    }

    if ((lv_aurielCurrentEnergyRaw < (lv_aurielBaseEnergyCap * 0.5))) {
        UnitCreateEffectPoint(lv_auriel, "HeroAurielRayOfHeaven@LowHealingStoredInitialSet", EventUnitTargetPoint());
    }
    else {
        if ((lv_aurielCurrentEnergyRaw >= lv_aurielBaseEnergyCap)) {
            UnitCreateEffectPoint(lv_auriel, "HeroAurielRayOfHeaven@MaxHealingStoredInitialSet", EventUnitTargetPoint());
        }
        else {
            UnitCreateEffectPoint(lv_auriel, "HeroAurielRayOfHeaven@HighHealingStoredInitialSet", EventUnitTargetPoint());
        }
    }
    Wait(0.125, c_timeGame);
    if ((PlayerHasTalent(lv_aurielPlayer, "HeroAurielInnerPeace") == true)) {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("HeroAurielInnerPeace@HealModifyUnit"), "VitalArray[Life].Change", lv_aurielPlayer, libGDHL_gv_heroAurielInnerPeaceStoredHealing[lv_aurielPlayer]);
        UnitCreateEffectUnit(lv_auriel, "HeroAurielInnerPeace@HealSet", lv_auriel);
    }

    libGDHL_gv_heroAurielInnerPeaceStoredHealing[lv_aurielPlayer] = 0.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielRayofHeavenAbilityUsed_Init () {
    libGDHL_gt_HeroAurielRayofHeavenAbilityUsed = TriggerCreate("libGDHL_gt_HeroAurielRayofHeavenAbilityUsed_Func");
    TriggerEnable(libGDHL_gt_HeroAurielRayofHeavenAbilityUsed, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAurielRayofHeavenAbilityUsed, null, AbilityCommand("HeroAurielRayOfHeaven", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Inner Peace - Store Heal
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielInnerPeaceStoreHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(UnitGetOwner(EventUnitHealLaunchUnit()), "HeroAurielInnerPeace") == true))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAurielInnerPeaceStoredHealing[UnitGetOwner(EventUnitHealLaunchUnit())] += EventUnitHealAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielInnerPeaceStoreHeal_Init () {
    libGDHL_gt_HeroAurielInnerPeaceStoreHeal = TriggerCreate("libGDHL_gt_HeroAurielInnerPeaceStoreHeal_Func");
    TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreHeal, false);
    TriggerAddEventUnitHealed(libGDHL_gt_HeroAurielInnerPeaceStoreHeal, null, c_unitVitalAny, "HeroAurielRayOfHeaven@HealModfyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Inner Peace - Store Energy
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielInnerPeaceStoreEnergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energyToAdd;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroAuriel"))) {
            return false;
        }

        if (!((PlayerHasTalent(UnitGetOwner(EventUnit()), "HeroAurielInnerPeace") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_energyToAdd = (libGDHL_gv_heroAurielInnerPeaceStoreEnergyModifier * libCore_gf_CombatCalculateDamageAmount());
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_energyToAdd));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielInnerPeaceStoreEnergy_Init () {
    libGDHL_gt_HeroAurielInnerPeaceStoreEnergy = TriggerCreate("libGDHL_gt_HeroAurielInnerPeaceStoreEnergy_Func");
    TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreEnergy, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroAurielInnerPeaceStoreEnergy, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroAurielInnerPeaceStoreEnergy, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Crystal Aegis - Overlay Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielCrystalAegisOverlayController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (libCore_gf_StormUnitIsHallucination(EventUnit()) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false) && (UnitHasBehavior2(EventUnit(), "HeroAurielCrystalAegis@StasisBehavior") == true)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }
    else {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielCrystalAegisOverlayController_Init () {
    libGDHL_gt_HeroAurielCrystalAegisOverlayController = TriggerCreate("libGDHL_gt_HeroAurielCrystalAegisOverlayController_Func");
    TriggerEnable(libGDHL_gt_HeroAurielCrystalAegisOverlayController, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielCrystalAegisOverlayController, null, "HeroAurielCrystalAegis@StasisBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielCrystalAegisOverlayController, null, "HeroAurielCrystalAegis@StasisBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Player Unlocks Resurrect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    int lv_aurielTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_auriel = EventUnit();
    lv_aurielPlayer = UnitGetOwner(lv_auriel);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_auriel) == "HeroAuriel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_aurielTeam = libGame_gf_TeamNumberOfPlayer(lv_aurielPlayer);
    if ((UnitBehaviorCount(lv_auriel, "Ultimate1Unlocked") > 0)) {
        libGDHL_gv_heroAurielResurrectRezzersOnTeam[lv_aurielTeam] += 1;
    }
    else {
        libGDHL_gv_heroAurielResurrectRezzersOnTeam[lv_aurielTeam] -= 1;
    }
    if (((libGDHL_gv_heroAurielResurrectRezzersOnTeam[libGame_gv_teamOrderIndex_C] >= 1) || (libGDHL_gv_heroAurielResurrectRezzersOnTeam[libGame_gv_teamChaosIndex_C] >= 1))) {
        TriggerEnable(libGDHL_gt_HeroAurielResurrectCreateSpirit, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectRevivePlayer, true);
    }
    else {
        TriggerEnable(libGDHL_gt_HeroAurielResurrectCreateSpirit, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectRevivePlayer, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectSpiritTimerController, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect_Init () {
    libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect = TriggerCreate("libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect, null, "Ultimate1Unlocked", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect, null, "Ultimate1Unlocked", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Create Spirit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectCreateSpirit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadHero;
    int lv_deadPlayer;
    int lv_deadPlayersTeam;
    int lv_iPlayer;
    point lv_lastKnownPosition;

    // Automatic Variable Declarations
    string autoA1189721_val;

    // Variable Initialization
    lv_deadHero = EventUnit();
    lv_deadPlayer = UnitGetOwner(lv_deadHero);
    lv_deadPlayersTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_iPlayer = 1;
    lv_lastKnownPosition = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroAurielResurrectRezzersOnTeam[lv_deadPlayersTeam] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA1189721_val = UnitGetType(lv_deadHero);
    if (autoA1189721_val == "HeroDiablo") {
        Wait(0.125, c_timeGame);
        if ((TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) <= libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime)) {
        }
        else {
            CatalogFieldValueSet(c_gameCatalogUnit, "HeroAurielResurrect@Spirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, UnitGetPosition(lv_deadHero), 270.0);
            libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
            libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
        }
    }
    else if (autoA1189721_val == "ETCHero") {
        if ((UnitHasBehavior2(lv_deadHero, "ETCDeathMetal@CarryBehavior") == false)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "AurielResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, UnitGetPosition(lv_deadHero), 270.0);
            libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
            libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
        }
        else {
            UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, UnitGetPosition(lv_deadHero), 270.0);
            libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
            Wait(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "ETCDeathMetal@TimedLife", "Duration", lv_deadPlayer), c_timeGame);
            libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
        }
    }
    else if (autoA1189721_val == "HeroFalstad") {
        CatalogFieldValueSet(c_gameCatalogUnit, "HeroAurielResurrect@Spirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, UnitGetPosition(lv_deadHero), 270.0);
        libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitSetHeight(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 2.0, 0.0);
        UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
        libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
    }
    else if (autoA1189721_val == "HeroTalandar") {
        lv_lastKnownPosition = UnitGetPosition(lv_deadHero);
        while ((UnitHasBehavior2(lv_deadHero, "HeroTalandarCybrossVengeance@ActiveBehavior") == true)) {
            lv_lastKnownPosition = UnitGetPosition(lv_deadHero);
            Wait(0.0625, c_timeGame);
        }
        if ((TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) <= libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime)) {
        }
        else {
            CatalogFieldValueSet(c_gameCatalogUnit, "HeroAurielResurrect@Spirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, lv_lastKnownPosition, 270.0);
            libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
            libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
        }
    }
    else {
        CatalogFieldValueSet(c_gameCatalogUnit, "HeroAurielResurrect@Spirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "HeroAurielResurrect@Spirit", 0, lv_deadPlayer, UnitGetPosition(lv_deadHero), 270.0);
        libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitBehaviorAdd(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@Rezzable", (TimerGetDuration(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) - libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime));
        libGDHL_gf_HeroAurielResurrectRevealSpirittoAurielandDeadPlayer(lv_deadPlayer, lv_deadHero);
    }
    libGDHL_gf_HeroAurielResurrectCheckActiveSpirits(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectCreateSpirit_Init () {
    libGDHL_gt_HeroAurielResurrectCreateSpirit = TriggerCreate("libGDHL_gt_HeroAurielResurrectCreateSpirit_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectCreateSpirit, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAurielResurrectCreateSpirit, null, "Dead", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Revive Player
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectRevivePlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resurrectingTimer;
    int lv_timerTextTag;
    unit lv_auriel;
    unit lv_target;
    int lv_aurielPlayer;
    int lv_targetPlayer;
    unit lv_targetHero;
    point lv_targetPosition;
    int lv_additionalPlayer;
    playergroup lv_vOGroup;
    unit lv_deadHero;
    int lv_itViking;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resurrectingTimer = FixedToInt(libGDHL_gv_heroAurielResurrectResurrectTime);
    lv_timerTextTag = c_textTagNone;
    lv_auriel = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPosition = UnitGetPosition(lv_target);
    lv_vOGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "HeroAurielResurrect@InitialDummy")) {
        lv_targetHero = libGame_gv_players[lv_targetPlayer].lv_heroUnit;
    }
    else {
        lv_targetHero = libGame_gv_players[lv_aurielPlayer].lv_heroUnit;
        lv_target = EventPlayerEffectUsedUnit(c_effectUnitCaster);
        lv_targetPosition = UnitGetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_aurielPlayer]);
        UnitCreateEffectUnit(lv_target, "HeroAurielResurrect@ApplyActivelyResurrecting", libGDHL_gv_heroAurielResurrectSpirit[lv_aurielPlayer]);
        UnitCreateEffectUnit(lv_target, "HeroAurielResurrect@ApplySelfMarkerBehavior", libGDHL_gv_heroAurielResurrectSpirit[lv_aurielPlayer]);
    }
    libGame_gf_HeroDeathUpdateRespawnTimer(lv_targetPlayer, lv_resurrectingTimer);
    DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_targetPlayer][0]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_targetPlayer][1]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_targetPlayer][2]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_targetPlayer][3]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_targetPlayer][0]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_targetPlayer][1]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_targetPlayer][2]);
    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_targetPlayer][3]);
    TextExpressionSetToken("Param/Expression/lib_GDHL_9C3F308D", "A", StringExternal("Param/Value/lib_GDHL_37D65BD2"));
    TextExpressionSetToken("Param/Expression/lib_GDHL_9C3F308D", "B", IntToText(lv_resurrectingTimer));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_9C3F308D"), 24, lv_targetPosition, 3.0, true, true, PlayerGroupAll());
    lv_timerTextTag = TextTagLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer]), libNtve_gf_Signal("Taunt"));
    while ((lv_resurrectingTimer > 0)) {
        TextExpressionSetToken("Param/Expression/lib_GDHL_EF534B0C", "A", StringExternal("Param/Value/lib_GDHL_A4279E6F"));
        TextExpressionSetToken("Param/Expression/lib_GDHL_EF534B0C", "B", IntToText(lv_resurrectingTimer));
        TextTagSetText(lv_timerTextTag, TextExpressionAssemble("Param/Expression/lib_GDHL_EF534B0C"));
        lv_resurrectingTimer -= 1;
        Wait(1.0, c_timeGame);
    }
    TextTagDestroy(lv_timerTextTag);
    if ((libGame_gv_players[lv_targetPlayer].lv_heroRequiresCustomRespawn == true)) {
        libGame_gf_SendEventRequestCustomRespawn(lv_targetPlayer, false, lv_targetPosition, libGDHL_gv_heroAurielResurrectVitalScale);
        UnitRemove(libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer]);
        libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer] = null;
    }
    else {
        if ((UnitGetType(libGame_gv_players[lv_targetPlayer].lv_heroUnit) == "HeroLostVikingsController")) {
        }
        else {
            libGame_gf_HeroDeathRespawnHeroForPlayer(lv_targetPlayer, false, lv_targetPosition, libGDHL_gv_heroAurielResurrectVitalScale);
            UnitRemove(libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer]);
            libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer] = null;
        }
    }
    UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "HeroAurielResurrect@PendingResurrect", 1);
    if ((PlayerHasTalent(lv_aurielPlayer, "HeroAurielLightSpeed") == true)) {
        UnitCreateEffectUnit(lv_auriel, "HeroAurielLightSpeed@ApplyControllerBehavior", lv_targetHero);
        UnitCreateEffectUnit(lv_auriel, "HeroAurielLightSpeed@ApplySpeedBehavior", lv_targetHero);
        UnitCreateEffectUnit(lv_auriel, "HeroAurielLightSpeed@ApplyCooldownController", lv_targetHero);
    }

    libNtve_gf_StopTimer(libGame_gv_players[lv_targetPlayer].lv_respawnSoundCueTimer);
    libNtve_gf_StopTimer(libGame_gv_players[lv_targetPlayer].lv_respawnTimer);
    UnitCreateEffectUnit(lv_auriel, "HeroAurielResurrect@WingsDummy", lv_targetHero);
    UnitBehaviorRemove(lv_targetHero, "HallOfStormsHealBuff", 1);
    UnitBehaviorRemove(lv_targetHero, "HallOfStormsProtectionBuff", 1);
    ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lv_targetHero), "HallOfStormsHealBuffFX"), "Destroy Immediate");
    libGDHL_gv_heroAurielResurrectShowSpiritTimer[lv_targetPlayer] = false;
    libGDHL_gv_heroAurielResurrectTotalActiveResurrectActions -= 1;
    if ((libGDHL_gv_heroAurielResurrectTotalActiveResurrectActions <= 0)) {
    }

    libGDHL_gv_heroAurielResurrectFrameRecords[lv_aurielPlayer].lv_heroAurielResurrectTargetTeam = 0;
    libGDHL_gv_heroAurielResurrectFrameRecords[lv_aurielPlayer].lv_heroAurielResurrectTargetFrameIndex = 0;
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_targetPlayer);
    PlayerGroupAdd(lv_vOGroup, lv_aurielPlayer);
    PlayerGroupAdd(lv_vOGroup, lv_targetPlayer);
    libSond_gf_HeroVOPlayResurrected(lv_targetPlayer, lv_vOGroup);
    libGDHL_gf_HeroAurielResurrectCheckActiveSpirits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectRevivePlayer_Init () {
    libGDHL_gt_HeroAurielResurrectRevivePlayer = TriggerCreate("libGDHL_gt_HeroAurielResurrectRevivePlayer_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectRevivePlayer, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielResurrectRevivePlayer, c_playerAny, "HeroAurielResurrect@InitialDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielResurrectRevivePlayer, c_playerAny, "HeroAurielResurrect@SelfDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Player Respawns
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectPlayerRespawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPlayer;

    // Automatic Variable Declarations
    const int autoED62600C_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoED62600C_ai = 1;

    // Variable Initialization
    lv_iPlayer = 1;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iPlayer = 1;
    for ( ; ( (autoED62600C_ai >= 0 && lv_iPlayer <= autoED62600C_ae) || (autoED62600C_ai < 0 && lv_iPlayer >= autoED62600C_ae) ) ; lv_iPlayer += autoED62600C_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_iPlayer].lv_respawnTimer) && (libGDHL_gv_heroAurielResurrectSpirit[lv_iPlayer] != null)) {
            UnitRemove(libGDHL_gv_heroAurielResurrectSpirit[lv_iPlayer]);
            DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_iPlayer]);
            libGDHL_gv_heroAurielResurrectShowSpiritTimer[lv_iPlayer] = false;
            libGDHL_gf_HeroAurielResurrectCheckActiveSpirits(false);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_iPlayer][0]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_iPlayer][1]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_iPlayer][2]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_iPlayer][3]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_iPlayer][0]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_iPlayer][1]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_iPlayer][2]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_iPlayer][3]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectPlayerRespawns_Init () {
    libGDHL_gt_HeroAurielResurrectPlayerRespawns = TriggerCreate("libGDHL_gt_HeroAurielResurrectPlayerRespawns_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, false);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[10].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[11].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[12].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[13].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[14].lv_respawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectPlayerRespawns, libGame_gv_players[15].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Notify Target Player Revive Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    unit lv_target;
    int lv_targetPlayer;
    point lv_targetPoint;
    unit lv_spiritUnit;
    int lv_additionalPlayer;
    int lv_itPlayer;
    int lv_itViking;

    // Automatic Variable Declarations
    const int autoA4B544CB_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoA4B544CB_ai = 1;

    // Variable Initialization
    lv_itPlayer = 1;
    lv_itViking = 1;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted, true);
    lv_auriel = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPoint = UnitGetPosition(lv_target);
    CameraPan(lv_targetPlayer, lv_targetPoint, 1.0, -1, 10.0, false);
    UnitBehaviorAdd(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "HeroAurielResurrect@PendingResurrect", lv_auriel, 1);
    DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer]);
    DialogCreate(1920, 150, c_anchorCenter, 0, 0, true);
    libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer] = DialogLastCreated();
    DialogSetImageVisible(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], false);
    DialogSetVisible(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], PlayerGroupSingle(lv_targetPlayer), true);
    DialogControlCreateFromTemplate(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], c_triggerControlTypeLabel, "Auriel/AurielResurrectionNotificationTemplate");
    TextExpressionSetToken("Param/Expression/lib_GDHL_42A2E053", "AurielUnit", libGDHL_gf_AurielUIUnitDisplayName(lv_auriel));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_GDHL_42A2E053"), PlayerGroupAll());
    lv_spiritUnit = libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer];
    lv_itPlayer = 1;
    for ( ; ( (autoA4B544CB_ai >= 0 && lv_itPlayer <= autoA4B544CB_ae) || (autoA4B544CB_ai < 0 && lv_itPlayer >= autoA4B544CB_ae) ) ; lv_itPlayer += autoA4B544CB_ai ) {
        if ((lv_itPlayer != lv_aurielPlayer) && (lv_itPlayer != lv_targetPlayer)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_spiritUnit), libNtve_gf_Signal(("Auriel" + IntToString(lv_itPlayer))));
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_spiritUnit), libNtve_gf_Signal("Cheer"));
    TimerPause(libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_targetPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart_Init () {
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart = TriggerCreate("libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, c_playerAny, "HeroAurielResurrect@PrepareSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Notify Target Player Revive Interrupted
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_auriel;
    int lv_aurielPlayer;
    unit lv_target;
    int lv_targetPlayer;
    point lv_targetPoint;
    int lv_additionalPlayer;
    unit lv_spiritUnit;
    int lv_itPlayer;
    int lv_itViking;

    // Automatic Variable Declarations
    const int auto3CF4C366_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto3CF4C366_ai = 1;

    // Variable Initialization
    lv_itPlayer = 1;
    lv_itViking = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_auriel = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_aurielPlayer = UnitGetOwner(lv_auriel);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPoint = UnitGetPosition(lv_target);
    lv_spiritUnit = libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer];
    lv_itPlayer = 1;
    for ( ; ( (auto3CF4C366_ai >= 0 && lv_itPlayer <= auto3CF4C366_ae) || (auto3CF4C366_ai < 0 && lv_itPlayer >= auto3CF4C366_ae) ) ; lv_itPlayer += auto3CF4C366_ai ) {
        if ((lv_itPlayer != lv_aurielPlayer) && (lv_itPlayer != lv_targetPlayer)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_spiritUnit), libNtve_gf_Signal(("Auriel" + IntToString(lv_itPlayer))));
        }

    }
    CameraPan(lv_targetPlayer, lv_targetPoint, 1.0, -1, 10.0, false);
    DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer]);
    DialogCreate(1920, 150, c_anchorCenter, 0, 0, true);
    libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer] = DialogLastCreated();
    DialogSetImageVisible(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], false);
    DialogSetVisible(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], PlayerGroupSingle(lv_targetPlayer), true);
    DialogControlCreateFromTemplate(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_targetPlayer], c_triggerControlTypeLabel, "Auriel/AurielResurrectionNotificationTemplate");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_GDHL_A59609AE"), PlayerGroupAll());
    TimerStart(libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_targetPlayer], 2.0, false, c_timeGame);
    UnitBehaviorRemove(libGDHL_gv_heroAurielResurrectSpirit[lv_targetPlayer], "HeroAurielResurrect@MarkerBehavior", 1);
    UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "HeroAurielResurrect@PendingResurrect", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted_Init () {
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted = TriggerCreate("libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted, null, AbilityCommand("HeroAurielResurrect", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Notify Target Player Revive Interrupted Timer Expired
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoC5F3B954_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoC5F3B954_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoC5F3B954_ai >= 0 && lv_itPlayer <= autoC5F3B954_ae) || (autoC5F3B954_ai < 0 && lv_itPlayer >= autoC5F3B954_ae) ) ; lv_itPlayer += autoC5F3B954_ai ) {
        if ((libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_itPlayer] == EventTimer())) {
            DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[lv_itPlayer]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Init () {
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired = TriggerCreate("libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, false);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[1]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[2]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[3]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[4]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[5]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[6]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[7]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[8]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[9]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[10]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[11]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[12]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[13]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[14]);
    TriggerAddEventTimer(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libGDHL_gv_heroAurielResurrectNotifyTargetPlayerReviveInterruptedTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Spirit Timer Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectSpiritTimerController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aurielPlayer;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;

    // Automatic Variable Declarations
    const int auto01D277D9_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto01D277D9_ai = 1;
    const int autoAA034DB9_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAA034DB9_ai = 1;
    string auto40AB84DB_val;

    // Variable Initialization
    lv_deadPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = 1;
    for ( ; ( (auto01D277D9_ai >= 0 && lv_deadPlayer <= auto01D277D9_ae) || (auto01D277D9_ai < 0 && lv_deadPlayer >= auto01D277D9_ae) ) ; lv_deadPlayer += auto01D277D9_ai ) {
        if (((TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) != 0.0))) {
            lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
            lv_aurielPlayer = 1;
            for ( ; ( (autoAA034DB9_ai >= 0 && lv_aurielPlayer <= autoAA034DB9_ae) || (autoAA034DB9_ai < 0 && lv_aurielPlayer >= autoAA034DB9_ae) ) ; lv_aurielPlayer += autoAA034DB9_ai ) {
                if ((UnitGetType(libGame_gv_players[lv_aurielPlayer].lv_heroUnit) == "HeroAuriel") && (libGame_gf_TeamNumberOfPlayer(lv_deadPlayer) == libGame_gf_TeamNumberOfPlayer(lv_aurielPlayer)) && (libGDHL_gv_heroAurielResurrectShowSpiritTimer[lv_deadPlayer] == true) && (UnitBehaviorCount(libGame_gv_players[lv_aurielPlayer].lv_heroUnit, "Ultimate1Unlocked") > 0)) {
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_deadPlayer][0]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_deadPlayer][1]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_deadPlayer][2]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_deadPlayer][3]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_deadPlayer][0]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_deadPlayer][1]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_deadPlayer][2]);
                    TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_deadPlayer][3]);
                    auto40AB84DB_val = UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit);
                    {
                        if ((TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) > libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime)) {
                            TextTagCreate(FixedToText(TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer), 0), 36, UnitGetPosition(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer]), 4.0, true, false, PlayerGroupSingle(lv_aurielPlayer));
                            libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_deadPlayer][0] = TextTagLastCreated();
                            libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_deadPlayer][0] = libGDHL_gf_HeroAurielResurrectCreateDeadPlayerSpiritTimer(lv_aurielPlayer, lv_deadPlayer, 0);
                        }

                    }
                    if ((TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) > 4.0) && (TimerGetRemaining(libGame_gv_players[lv_deadPlayer].lv_respawnTimer) < libGDHL_gv_heroAurielResurrectTargetUnresurrectableTime) && (UnitBehaviorCount(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "HeroAurielResurrect@ActivelyResurrecting") == 0)) {
                        if (((UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit) == "HeroLeoric"))) {
                        }
                        else {
                            libNtve_gf_SendActorMessageToUnit(libGDHL_gv_heroAurielResurrectSpirit[lv_deadPlayer], "Signal Fade");
                        }
                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectSpiritTimerController_Init () {
    libGDHL_gt_HeroAurielResurrectSpiritTimerController = TriggerCreate("libGDHL_gt_HeroAurielResurrectSpiritTimerController_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectSpiritTimerController, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroAurielResurrectSpiritTimerController, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - End of Game Hide Reviving Dialog
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto668E9206_g;
    int auto668E9206_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto668E9206_g = libCore_gv_allHeroPlayers;
    auto668E9206_var = -1;
    while (true) {
        auto668E9206_var = PlayerGroupNextPlayer(auto668E9206_g, auto668E9206_var);
        if (auto668E9206_var < 0) { break; }
        if ((libGDHL_gv_heroAurielResurrectRevivingDialog[auto668E9206_var] != c_invalidDialogId)) {
            DialogDestroy(libGDHL_gv_heroAurielResurrectRevivingDialog[auto668E9206_var]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog_Init () {
    libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog = TriggerCreate("libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog, false);
    libGame_gf_GameOverEvent(libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Resurrect - Player Talents Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielResurrectPlayerTalentsReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_team;

    // Automatic Variable Declarations
    playergroup auto2D47EC4B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_PlayerTalentsResetPlayer()].lv_heroUnit) == "HeroAuriel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(libGame_gf_PlayerTalentsResetPlayer());
    if ((libGDHL_gv_heroAurielResurrectRezzersOnTeam[lv_team] == 0)) {
        auto2D47EC4B_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto2D47EC4B_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGDHL_gv_heroAurielResurrectSpirit[lv_itPlayer] != null)) {
                UnitRemove(libGDHL_gv_heroAurielResurrectSpirit[lv_itPlayer]);
                libGDHL_gv_heroAurielResurrectSpirit[lv_itPlayer] = null;
            }

            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_itPlayer][0]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_itPlayer][1]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_itPlayer][2]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectDeadPlayerSpiritTimerTextTag[lv_itPlayer][3]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_itPlayer][0]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_itPlayer][1]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_itPlayer][2]);
            TextTagDestroy(libGDHL_gv_heroAurielResurrectAurielSpiritTimerTextTag[lv_itPlayer][3]);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielResurrectPlayerTalentsReset_Init () {
    libGDHL_gt_HeroAurielResurrectPlayerTalentsReset = TriggerCreate("libGDHL_gt_HeroAurielResurrectPlayerTalentsReset_Func");
    TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerTalentsReset, false);
    libGame_gf_PlayerTalentsReset(libGDHL_gt_HeroAurielResurrectPlayerTalentsReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auriel - UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_AurielUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_heroSpecificStatusContainer, c_triggerControlTypeImage, "AurielFrame/TargetStatus/HeroPortraitContainer/HeroPortrait");
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetPortrait = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_heroSpecificStatusContainer, c_triggerControlTypeLabel, "AurielFrame/TargetStatus/UnitDisplayName");
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetDisplayName = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_heroSpecificStatusContainer, c_triggerControlTypeUnitStatus, "AurielFrame/TargetStatus");
    libGDHL_gv_aurielUI.lv_aurielBestowHopeTargetStatus = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_AurielUIInitialize_Init () {
    libGDHL_gt_AurielUIInitialize = TriggerCreate("libGDHL_gt_AurielUIInitialize_Func");
    libGame_gf_IncludeModeInitialization(libGDHL_gt_AurielUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Increment Hero Count
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielIncrementHeroCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAurielTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroAurielTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeWillofHeaven, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeBestowHopeCast, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeSetProxy, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeRemoveProxy, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger, true);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped, true);
        TriggerEnable(libGDHL_gt_HeroAurielRayofHeavenAbilityUsed, true);
        TriggerEnable(libGDHL_gt_HeroAurielCrystalAegisOverlayController, true);
        TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreHeal, true);
        TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreEnergy, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerTalentsReset, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, true);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielIncrementHeroCount_Init () {
    libGDHL_gt_HeroAurielIncrementHeroCount = TriggerCreate("libGDHL_gt_HeroAurielIncrementHeroCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Auriel - Decrement Hero Count
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAurielDecrementHeroCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAurielTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroAurielTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroAurielTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroAurielTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeWillofHeaven, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeBestowHopeCast, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeSetProxy, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeRemoveProxy, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken, false);
        TriggerEnable(libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped, false);
        TriggerEnable(libGDHL_gt_HeroAurielRayofHeavenAbilityUsed, false);
        TriggerEnable(libGDHL_gt_HeroAurielCrystalAegisOverlayController, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectCreateSpirit, false);
        TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreHeal, false);
        TriggerEnable(libGDHL_gt_HeroAurielInnerPeaceStoreEnergy, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectRevivePlayer, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerRespawns, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectSpiritTimerController, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectPlayerTalentsReset, false);
        TriggerEnable(libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAurielDecrementHeroCount_Init () {
    libGDHL_gt_HeroAurielDecrementHeroCount = TriggerCreate("libGDHL_gt_HeroAurielDecrementHeroCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAzmodanHeroCount += 1;
    if ((libGDHL_gv_heroAzmodanHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenant, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanHeroCountIncrement_Init () {
    libGDHL_gt_HeroAzmodanHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroAzmodanHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroAzmodanHeroCount -= 1;
    if ((libGDHL_gv_heroAzmodanHeroCount < 0)) {
        libGDHL_gv_heroAzmodanHeroCount = 0;
    }

    if ((libGDHL_gv_heroAzmodanHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenant, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanHeroCountDecrement_Init () {
    libGDHL_gt_HeroAzmodanHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroAzmodanHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon Create
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_azmodan;
    fixed lv_newFacing;
    unit lv_demon;
    point lv_targetPoint;
    point lv_casterPoint;
    point lv_offsetPoint;
    fixed lv_offset;
    fixed lv_facing;
    point lv_target;
    fixed lv_targetOffset;
    fixed lv_wait;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_azmodan = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_offset = 4.0;
    lv_target = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_targetOffset = 12.0;
    lv_wait = 3.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    if ((EventPlayerEffectUsed() == "AzmodanSummonDemonWarrior@DummySet")) {
        lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
        lv_facing = UnitGetFacing(lv_azmodan);
        lv_offsetPoint = PointWithOffsetPolar(libCore_gf_PointFromPositionAndAngle(lv_casterPoint, UnitGetFacing(lv_azmodan)), lv_offset, UnitGetFacing(lv_azmodan));
    }
    else if ((EventPlayerEffectUsed() == "AzmodanArmyOfHell@SummonDemonWarriorDummySet1")) {
        lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
        lv_facing = UnitGetFacing(lv_azmodan);
        lv_facing = (UnitGetFacing(lv_azmodan) + 17.5);
        lv_offsetPoint = PointWithOffsetPolar(libCore_gf_PointFromPositionAndAngle(lv_casterPoint, UnitGetFacing(lv_azmodan)), lv_offset, (UnitGetFacing(lv_azmodan) + 17.5));
    }
    else if ((EventPlayerEffectUsed() == "AzmodanArmyOfHell@SummonDemonWarriorDummySet2")) {
        lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
        lv_facing = UnitGetFacing(lv_azmodan);
        lv_facing = (UnitGetFacing(lv_azmodan) - 17.5);
        lv_offsetPoint = PointWithOffsetPolar(libCore_gf_PointFromPositionAndAngle(lv_casterPoint, UnitGetFacing(lv_azmodan)), lv_offset, (UnitGetFacing(lv_azmodan) - 17.5));
    }
    else if ((EventPlayerEffectUsed() == "AzmodanHellRift@SummonDemonWarriorDummySet")) {
        lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
        lv_offset = 0.0;
        lv_wait = 0.0;
        lv_target = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        lv_facing = UnitGetFacing(lv_azmodan);
        lv_offsetPoint = PointWithOffsetPolar(libCore_gf_PointFromPositionAndAngle(lv_casterPoint, UnitGetFacing(lv_azmodan)), lv_offset, UnitGetFacing(lv_azmodan));
    }
    libNtve_gf_UnitCreateFacingPoint(1, "AzmodanDemonWarrior", 0, UnitGetOwner(lv_azmodan), lv_offsetPoint, PointWithOffsetPolar(libCore_gf_PointFromPositionAndAngle(lv_casterPoint, UnitGetFacing(lv_azmodan)), 4.5, lv_facing));
    lv_demon = UnitLastCreated();
    if ((EventPlayerEffectUsed() == "AzmodanHellRift@SummonDemonWarriorDummySet")) {
        UnitCreateEffectUnit(lv_azmodan, "AzmodanSummonDemonWarrior@SpawnSetTalented", lv_demon);
    }
    else {
        UnitCreateEffectUnit(lv_azmodan, "AzmodanSummonDemonWarrior@SpawnSet", lv_demon);
    }
    if ((UnitGetFacing(lv_demon) < 180.0) && (UnitGetFacing(lv_demon) > 0.0)) {
        lv_newFacing = UnitGetFacing(lv_demon);
        lv_newFacing += 180.0;
        UnitSetFacing(lv_demon, lv_newFacing, 0.0);
    }

    if ((PlayerHasTalent(UnitGetOwner(lv_demon), "AzmodanHellforgedArmor") == true)) {
    }

    if ((UnitIsAlive(lv_demon) == true)) {
        Wait(1.5, c_timeGame);
        if ((UnitIsAlive(lv_demon) == true)) {
            UnitIssueOrder(lv_demon, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_demon), lv_targetOffset, lv_target)), c_orderQueueReplace);
        }

    }

    Wait(lv_wait, c_timeGame);
    if ((UnitIsAlive(lv_demon) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_demon, lv_azmodan, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonCreate_Init () {
    libGDHL_gt_HeroAzmodanDemonCreate = TriggerCreate("libGDHL_gt_HeroAzmodanDemonCreate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonCreate, c_playerAny, "AzmodanSummonDemonWarrior@DummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonCreate, c_playerAny, "AzmodanArmyOfHell@SummonDemonWarriorDummySet1");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonCreate, c_playerAny, "AzmodanArmyOfHell@SummonDemonWarriorDummySet2");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonCreate, c_playerAny, "AzmodanHellRift@SummonDemonWarriorDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon Lieutenant
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonLieutenant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_azmodanUnit;
    unit lv_demonUnit;

    // Automatic Variable Declarations
    fixed autoB1D33B6E_at;

    // Variable Initialization
    lv_azmodanUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_demonUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    autoB1D33B6E_at = 0;
    while (!((UnitHasBehavior2(lv_demonUnit, "AzmodanDemonWarrior@Spawn") == false)) && autoB1D33B6E_at <= 2.0) {
        Wait(0.125, c_timeGame);
        autoB1D33B6E_at = autoB1D33B6E_at + 0.125;
    }
    if ((UnitIsAlive(lv_demonUnit) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_demonUnit, lv_azmodanUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonLieutenant_Init () {
    libGDHL_gt_HeroAzmodanDemonLieutenant = TriggerCreate("libGDHL_gt_HeroAzmodanDemonLieutenant_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenant, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonLieutenant, c_playerAny, "AzmodanSummonDemonLieutenant@SpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon General Birth Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget), -90.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Init () {
    libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing = TriggerCreate("libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, c_playerAny, "AzmodanSummonDemonLieutenant@SpawnSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, c_playerAny, "AzmodanSummonDemonWarrior@SpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Wrath (Marker Update)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanWrathMarkerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_targetUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/AzmodanStacksFrameContainer/AzmodanWrathStacksFrame/StacksFull", lv_targetUnit);
    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((EventPlayerEffectUsed() == "AzmodanWrath@UITargetBehaviorFinalDummySet")) {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lv_owner], false);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lv_owner], true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanWrathMarkerUpdate_Init () {
    libGDHL_gt_HeroAzmodanWrathMarkerUpdate = TriggerCreate("libGDHL_gt_HeroAzmodanWrathMarkerUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, c_playerAny, "AzmodanWrath@UITargetBehaviorInitialDummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, c_playerAny, "AzmodanWrath@UITargetBehaviorFinalDummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanWrathMarkerUpdate, c_playerAny, "AzmodanWrath@UITargetBehaviorRefreshDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demonic Invasion - Unpathable Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_newPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_newPoint = UnitTypePlacementFromPoint("AzmodanDemonGrunt", lv_owner, null, 10.0);
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AzmodanDemonicInvasion@StaggerPersistent", lv_newPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Init () {
    libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation = TriggerCreate("libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, c_playerAny, "AzmodanDemonicInvasion@UnpathableDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Tier 1 Globe Talent Choose
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;
    fixed lv_changeValue;
    string lv_behavior;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    string auto5F3DC376_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5F3DC376_val = libGame_gf_PlayerChooseTalentTalentUserDataInstance();
    if (auto5F3DC376_val == "AzmodanGreed") {
        lv_behavior = "AzmodanGreed@TokenCounter";
    }
    else if (auto5F3DC376_val == "AzmodanGluttony") {
        lv_behavior = "AzmodanGluttony@TokenCounter";
    }
    else {
        return true;
    }
    lv_player = libGame_gf_PlayerChooseTalentPlayer();
    lv_index = libCore_gf_TokenTokenCounterIndex(lv_behavior);
    lv_changeValue = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("AzmodanGlobeOfAnnihilation@TokenCounter", lv_player);
    lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
    libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, lv_changeValue, lv_behavior, lv_index, lv_player, lv_heroUnit, lv_heroUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose_Init () {
    libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose = TriggerCreate("libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose, false);
    libGame_gf_PlayerChooseTalent(libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Tier 1 Globe Talent Quest Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    string lv_behavior;
    int lv_tokenCounterIndex;
    fixed lv_changeValue;
    unit lv_azmodanUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    Wait(0.125, c_timeGame);
    if ((PlayerHasTalent(lv_owner, "AzmodanGreed") == true)) {
        lv_behavior = "AzmodanGreed@TokenCounter";
    }
    else if ((PlayerHasTalent(lv_owner, "AzmodanGluttony") == true)) {
        lv_behavior = "AzmodanGluttony@TokenCounter";
    }
    else if ((PlayerHasTalent(lv_owner, "AzmodanWrath") == true)) {
        lv_behavior = "AzmodanWrath@TokenCounter";
    }
    else if (true) {
        return true;
    }
    lv_tokenCounterIndex = libCore_gf_TokenTokenCounterIndex(lv_behavior);
    lv_changeValue = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("AzmodanGlobeOfAnnihilation@TokenCounter", lv_owner);
    lv_azmodanUnit = libGame_gv_players[lv_owner].lv_heroUnit;
    libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, lv_changeValue, lv_behavior, lv_tokenCounterIndex, lv_owner, lv_azmodanUnit, lv_azmodanUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate_Init () {
    libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate = TriggerCreate("libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterHeroHit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterHeroHitGluttony");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterMinionDeath");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterWrath");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterArtOfChaos");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterBombardment");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate, c_playerAny, "AzmodanGlobeOfAnnihilation@IncrementTokenCounterMasterOfDestruction");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroBrightwingHeroCount += 1;
    if ((libGDHL_gv_heroBrightwingHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftPing, true);
        TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftCamera, true);
        TriggerEnable(libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset, true);
        TriggerEnable(libGDHL_gt_HeroBrightwingNPCTakedown, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingHeroCountIncrement_Init () {
    libGDHL_gt_HeroBrightwingHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroBrightwingHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroBrightwingHeroCount -= 1;
    if ((libGDHL_gv_heroBrightwingHeroCount < 0)) {
        libGDHL_gv_heroBrightwingHeroCount = 0;
    }

    if ((libGDHL_gv_heroBrightwingHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftPing, false);
        TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftCamera, false);
        TriggerEnable(libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset, false);
        TriggerEnable(libGDHL_gt_HeroBrightwingNPCTakedown, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingHeroCountDecrement_Init () {
    libGDHL_gt_HeroBrightwingHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroBrightwingHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - Phase Shift Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingPhaseShiftPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_brightwingPlayer;
    playergroup lv_alliedPlayers;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_brightwingPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_alliedPlayers = PlayerGroupEmpty();
    lv_location = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_brightwingPlayer]) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_brightwingPlayer);
    lv_alliedPlayers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_brightwingPlayer), false);
    if ((TimerGetRemaining(libGDHL_gv_brightwingPhaseShiftPingTextLockoutTimer[lv_brightwingPlayer]) <= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_GDHL_8667C88E", "A", StringExternal("Param/Value/lib_GDHL_92FC70ED"));
        TextExpressionSetToken("Param/Expression/lib_GDHL_8667C88E", "B", UnitTypeGetName(UnitGetType(lv_targetUnit)));
        UIDisplayMessage(lv_alliedPlayers, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_GDHL_8667C88E"));
        TimerStart(libGDHL_gv_brightwingPhaseShiftPingTextLockoutTimer[lv_brightwingPlayer], 10.0, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingPhaseShiftPing_Init () {
    libGDHL_gt_HeroBrightwingPhaseShiftPing = TriggerCreate("libGDHL_gt_HeroBrightwingPhaseShiftPing_Func");
    TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftPing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBrightwingPhaseShiftPing, c_playerAny, "BrightwingPhaseShift@PrepPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - Phase Shift - Camera
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingPhaseShiftCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_owner, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingPhaseShiftCamera_Init () {
    libGDHL_gt_HeroBrightwingPhaseShiftCamera = TriggerCreate("libGDHL_gt_HeroBrightwingPhaseShiftCamera_Func");
    TriggerEnable(libGDHL_gt_HeroBrightwingPhaseShiftCamera, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBrightwingPhaseShiftCamera, c_playerAny, "BrightwingPhaseShift@Teleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - Pixie Charm - Add Stacks on Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_brightwing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_SpecialCaseTalentCooldownResetPlayer();
    lv_brightwing = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_brightwing, "BrightwingPixieCharm") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_brightwing, "BrightwingPixieCharm@TokenCounterIncrement100", lv_brightwing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset_Init () {
    libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset = TriggerCreate("libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset_Func");
    TriggerEnable(libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset, false);
    libGame_gf_SpecialCaseTalentCooldownReset(libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Brightwing - NPC Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBrightwingNPCTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_minion;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    lv_hero = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_player) == "Brightwing"))) {
            return false;
        }

        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", lv_minion, lv_minion) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_player, "BrightwingHyperShift") == true)) {
        UnitCreateEffectUnit(lv_hero, "BrightwingHyperShift@MUCDR", lv_hero);
    }

    if ((PlayerHasTalent(lv_player, "BrightwingPixieCharm") == true)) {
        UnitCreateEffectUnit(lv_hero, "BrightwingPixieCharm@TokenCounterIncrementMinion", lv_minion);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBrightwingNPCTakedown_Init () {
    libGDHL_gt_HeroBrightwingNPCTakedown = TriggerCreate("libGDHL_gt_HeroBrightwingNPCTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroBrightwingNPCTakedown, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroBrightwingNPCTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDeltaHeroCount += 1;
    if ((libGDHL_gv_heroDeltaHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroDeltaFlashbangOverlay, true);
        TriggerEnable(libGDHL_gt_HeroDeltaExclusionZone, true);
        TriggerEnable(libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured, true);
        TriggerEnable(libGDHL_gt_HeroDeltaEmpathicBond, true);
        TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikeInterrupted, true);
        TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikePing, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaHeroCountIncrement_Init () {
    libGDHL_gt_HeroDeltaHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroDeltaHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDeltaHeroCount -= 1;
    if ((libGDHL_gv_heroDeltaHeroCount < 0)) {
        libGDHL_gv_heroDeltaHeroCount = 0;
    }

    if ((libGDHL_gv_heroDeltaHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroDeltaFlashbangOverlay, false);
        TriggerEnable(libGDHL_gt_HeroDeltaExclusionZone, false);
        TriggerEnable(libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured, false);
        TriggerEnable(libGDHL_gt_HeroDeltaEmpathicBond, false);
        TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikeInterrupted, false);
        TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikePing, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaHeroCountDecrement_Init () {
    libGDHL_gt_HeroDeltaHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroDeltaHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Flashbang - Overlay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaFlashbangOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, libCore_gv_playerGroupFromPlayer[lv_targetPlayer], 0.0, 80.0);
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, libCore_gv_playerGroupFromPlayer[lv_targetPlayer], UnitBehaviorDuration(EventUnit(), "DeltaFlashbang@VisionReduction"), 100.0);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, libCore_gv_playerGroupFromPlayer[lv_targetPlayer], 0.0, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaFlashbangOverlay_Init () {
    libGDHL_gt_HeroDeltaFlashbangOverlay = TriggerCreate("libGDHL_gt_HeroDeltaFlashbangOverlay_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaFlashbangOverlay, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDeltaFlashbangOverlay, null, "DeltaFlashbang@VisionReduction", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDeltaFlashbangOverlay, null, "DeltaFlashbang@VisionReduction", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Exclusion Zone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaExclusionZone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit[4] lv_tower;
    point lv_targetPoint;
    point[4] lv_towerPoint;
    int lv_enemyNPC;
    point lv_pathingBlockerPoint;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup autoF28E4F6F_g;
    int autoF28E4F6F_u;
    unit autoF28E4F6F_var;
    unitgroup auto5E1A1E80_g;
    int auto5E1A1E80_u;
    unit auto5E1A1E80_var;
    unitgroup auto47292F6E_g;
    int auto47292F6E_u;
    unit auto47292F6E_var;
    int auto7F7801A2_n;
    int auto7F7801A2_i;
    int auto19B0A316_n;
    int auto19B0A316_i;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_distance = 0.25;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    autoF28E4F6F_g = UnitGroup("DeltaExclusionZone@Tower1", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF28E4F6F_u = UnitGroupCount(autoF28E4F6F_g, c_unitCountAll);
    for (;; autoF28E4F6F_u -= 1) {
        autoF28E4F6F_var = UnitGroupUnitFromEnd(autoF28E4F6F_g, autoF28E4F6F_u);
        if (autoF28E4F6F_var == null) { break; }
        lv_tower[1] = autoF28E4F6F_var;
    }
    auto5E1A1E80_g = UnitGroup("DeltaExclusionZone@Tower2", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E1A1E80_u = UnitGroupCount(auto5E1A1E80_g, c_unitCountAll);
    for (;; auto5E1A1E80_u -= 1) {
        auto5E1A1E80_var = UnitGroupUnitFromEnd(auto5E1A1E80_g, auto5E1A1E80_u);
        if (auto5E1A1E80_var == null) { break; }
        lv_tower[2] = auto5E1A1E80_var;
    }
    auto47292F6E_g = UnitGroup("DeltaExclusionZone@Tower3", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto47292F6E_u = UnitGroupCount(auto47292F6E_g, c_unitCountAll);
    for (;; auto47292F6E_u -= 1) {
        auto47292F6E_var = UnitGroupUnitFromEnd(auto47292F6E_g, auto47292F6E_u);
        if (auto47292F6E_var == null) { break; }
        lv_tower[3] = auto47292F6E_var;
    }
    UnitCreateEffectUnit(lv_tower[1], "DeltaExclusionZone@LaserBeamSearchPersistent", lv_tower[2]);
    UnitCreateEffectUnit(lv_tower[2], "DeltaExclusionZone@LaserBeamSearchPersistent", lv_tower[3]);
    lv_pathingBlockerPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_tower[1]), lv_distance, UnitGetPosition(lv_tower[2]));
    auto7F7801A2_n = FixedToInt((DistanceBetweenPoints(UnitGetPosition(lv_tower[1]), UnitGetPosition(lv_tower[2])) / lv_distance));
    for (auto7F7801A2_i = 1; auto7F7801A2_i <= auto7F7801A2_n; auto7F7801A2_i += 1) {
        lv_pathingBlockerPoint = libNtve_gf_PointOffsetTowardsPoint(lv_pathingBlockerPoint, lv_distance, UnitGetPosition(lv_tower[2]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeltaExclusionZone@PathingBlockerUnit", c_unitCreateIgnorePlacement, lv_player, lv_pathingBlockerPoint);
    }
    lv_pathingBlockerPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_tower[2]), lv_distance, UnitGetPosition(lv_tower[3]));
    auto19B0A316_n = FixedToInt((DistanceBetweenPoints(UnitGetPosition(lv_tower[2]), UnitGetPosition(lv_tower[3])) / lv_distance));
    for (auto19B0A316_i = 1; auto19B0A316_i <= auto19B0A316_n; auto19B0A316_i += 1) {
        lv_pathingBlockerPoint = libNtve_gf_PointOffsetTowardsPoint(lv_pathingBlockerPoint, lv_distance, UnitGetPosition(lv_tower[3]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeltaExclusionZone@PathingBlockerUnit", c_unitCreateIgnorePlacement, lv_player, lv_pathingBlockerPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaExclusionZone_Init () {
    libGDHL_gt_HeroDeltaExclusionZone = TriggerCreate("libGDHL_gt_HeroDeltaExclusionZone_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaExclusionZone, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDeltaExclusionZone, c_playerAny, "DeltaExclusionZone@ActivationSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Infiltration Mission (Camp Captured)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_playerGroup;
    bool lv_droneHasBeenCreated;

    // Automatic Variable Declarations
    playergroup auto7CDE9A54_g;

    // Variable Initialization
    lv_playerGroup = libGame_gf_MercCampCapturedCapturingPlayers();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CDE9A54_g = lv_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7CDE9A54_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerHero(lv_itPlayer) == "Delta") && (PlayerHasTalent(lv_itPlayer, "DeltaInfiltrationMission") == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "DeltaInfiltrationMission@IncrementTokenCounter", libGame_gv_players[lv_itPlayer].lv_heroUnit);
            if ((lv_droneHasBeenCreated == false)) {
                UnitCreateEffectPoint(libGame_gv_players[lv_itPlayer].lv_heroUnit, "DeltaInfiltrationMission@CreateUnitPassive", libMapM_gv_jungleCreepCamps[libGame_gf_MercCampCapturedIndex()].lv_mapDataCampCaptainSpawnPoint);
                lv_droneHasBeenCreated = true;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured_Init () {
    libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured = TriggerCreate("libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured, false);
    libGame_gf_MercCampCaptured(libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Empathic Bond
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaEmpathicBond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_damage;
    int lv_enemyTeam;
    playergroup lv_deltaPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoF8FCBC74_g;

    // Variable Initialization
    lv_deltaPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "DeltaPriorityTarget@ArmorDebuff") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = libCore_gf_CombatCalculateDamageAmount();
    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == false)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(libCore_gv_allHeroPlayers, lv_deltaPlayerGroup);
    }
    else {
        lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(EventUnit()));
        libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), lv_deltaPlayerGroup);
    }
    autoF8FCBC74_g = lv_deltaPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoF8FCBC74_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerHero(lv_itPlayer) == "Delta") && (PlayerHasTalent(lv_itPlayer, "DeltaEmpathicBond") == true)) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("DeltaEmpathicBond@HealMU"), "VitalArray[" + IntToString(0) + "].Change", lv_itPlayer, lv_damage);
            UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "DeltaEmpathicBond@HealSet", EventUnit());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaEmpathicBond_Init () {
    libGDHL_gt_HeroDeltaEmpathicBond = TriggerCreate("libGDHL_gt_HeroDeltaEmpathicBond_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaEmpathicBond, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroDeltaEmpathicBond, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroDeltaEmpathicBond, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Nuclear Strike Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaNuclearStrikePing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_calldownPlayer;
    int lv_team;
    int lv_enemyTeam;
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_calldownPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_calldownPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_team);
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_team, false), "DeltaNuclearStrike", lv_target, libCore_gv_cOLORAllyColor, 4.0);
    libGDHL_gv_heroDeltaNuclearStrikeChannelingPing[lv_calldownPlayer][lv_team] = PingLastCreated();
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "DeltaNuclearStrike", lv_target, libCore_gv_cOLOREnemyColor, 4.0);
    libGDHL_gv_heroDeltaNuclearStrikeChannelingPing[lv_calldownPlayer][lv_enemyTeam] = PingLastCreated();
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_team, false), "StormWarning", lv_target, libCore_gv_cOLORAllyColor, 2.5);
    libGDHL_gv_heroDeltaNuclearStrikeWarningPing[lv_calldownPlayer][lv_team] = PingLastCreated();
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "StormWarning", lv_target, libCore_gv_cOLOREnemyColor, 4.0);
    libGDHL_gv_heroDeltaNuclearStrikeWarningPing[lv_calldownPlayer][lv_enemyTeam] = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaNuclearStrikePing_Init () {
    libGDHL_gt_HeroDeltaNuclearStrikePing = TriggerCreate("libGDHL_gt_HeroDeltaNuclearStrikePing_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikePing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDeltaNuclearStrikePing, c_playerAny, "DeltaNuclearStrike@ChannelPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Delta - Nuclear Strike Interrupted
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDeltaNuclearStrikeInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto53EF78CC_ae = libCore_gv_bALMaxTeams;
    const int auto53EF78CC_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DeltaNuclearStrike@SucessBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto53EF78CC_ai >= 0 && lv_itTeam <= auto53EF78CC_ae) || (auto53EF78CC_ai < 0 && lv_itTeam >= auto53EF78CC_ae) ) ; lv_itTeam += auto53EF78CC_ai ) {
        PingDestroy(libGDHL_gv_heroDeltaNuclearStrikeChannelingPing[lv_player][lv_itTeam]);
        PingDestroy(libGDHL_gv_heroDeltaNuclearStrikeWarningPing[lv_player][lv_itTeam]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDeltaNuclearStrikeInterrupted_Init () {
    libGDHL_gt_HeroDeltaNuclearStrikeInterrupted = TriggerCreate("libGDHL_gt_HeroDeltaNuclearStrikeInterrupted_Func");
    TriggerEnable(libGDHL_gt_HeroDeltaNuclearStrikeInterrupted, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDeltaNuclearStrikeInterrupted, c_playerAny, "DeltaNuclearStrike@VFXDestroyPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDiabloHeroCount += 1;
    if ((libGDHL_gv_heroDiabloHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroDiabloDiabloDies, true);
        TriggerEnable(libGDHL_gt_HeroDiabloOverpowerFacing, true);
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathCast, true);
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathEnd, true);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill, true);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill, true);
        TriggerEnable(libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus, true);
        TriggerEnable(libGDHL_gt_HeroDiabloGameEnds, true);
        TriggerEnable(libGDHL_gt_HeroDiabloShadowChargeRestoreHeight, true);
        TriggerEnable(libGDHL_gt_HeroDiabloTerrify, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloHeroCountIncrement_Init () {
    libGDHL_gt_HeroDiabloHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroDiabloHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDiabloHeroCount -= 1;
    if ((libGDHL_gv_heroDiabloHeroCount <= 0)) {
        libGDHL_gv_heroDiabloHeroCount = 0;
        TriggerEnable(libGDHL_gt_HeroDiabloDiabloDies, false);
        TriggerEnable(libGDHL_gt_HeroDiabloOverpowerFacing, false);
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathCast, false);
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathAim, false);
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathEnd, false);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill, false);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill, false);
        TriggerEnable(libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus, false);
        TriggerEnable(libGDHL_gt_HeroDiabloGameEnds, false);
        TriggerEnable(libGDHL_gt_HeroDiabloShadowChargeRestoreHeight, false);
        TriggerEnable(libGDHL_gt_HeroDiabloTerrify, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloHeroCountDecrement_Init () {
    libGDHL_gt_HeroDiabloHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroDiabloHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Diablo Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloDiabloDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;
    int lv_deadPlayer;
    int lv_killingPlayer;
    fixed lv_respawnTime;
    bool lv_soulstoneRes;
    point lv_deadUnitOriginalPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diablo = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_deadPlayer) == true))) {
            return false;
        }

        if (!((lv_diablo == libGame_gv_players[lv_deadPlayer].lv_heroUnit))) {
            return false;
        }

        if (!((UnitGetType(lv_diablo) == "HeroDiablo"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnitOriginalPosition = UnitGetPosition(EventUnit());
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_deadPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_diablo), null, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, lv_deadUnitOriginalPosition);
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    if ((PlayerHasTalent(lv_deadPlayer, "HeroDiabloDyingBreath") == true)) {
        UnitCreateEffectUnit(lv_diablo, "HeroDiabloApocalypse@EnumetateTrackedUnits", lv_diablo);
    }

    if ((libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("HeroDiabloBlackSoulstone", lv_deadPlayer) == 100.0)) {
        lv_soulstoneRes = true;
        PlayerCreateEffectPoint(lv_deadPlayer, "HeroDiabloBlackSoulstone@ResurrectDummyPersistent", libNtve_gf_PointWithZOffset(lv_deadUnitOriginalPosition, 2.0));
        UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@DecreaseQuestTokenRessurect", lv_diablo);
    }

    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_diablo);
    if ((lv_soulstoneRes == true)) {
        lv_respawnTime = libGDHL_gv_heroDiabloResurrectTime;
    }
    else {
        lv_respawnTime = libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit));
    }
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, lv_respawnTime);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloDiabloDies_Init () {
    libGDHL_gt_HeroDiabloDiabloDies = TriggerCreate("libGDHL_gt_HeroDiabloDiabloDies_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloDiabloDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroDiabloDiabloDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Shadow Charge - Restore Height
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloShadowChargeRestoreHeight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloShadowChargeRestoreHeight_Init () {
    libGDHL_gt_HeroDiabloShadowChargeRestoreHeight = TriggerCreate("libGDHL_gt_HeroDiabloShadowChargeRestoreHeight_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloShadowChargeRestoreHeight, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloShadowChargeRestoreHeight, c_playerAny, "HeroDiabloShadowCharge@RushingBehaviorFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Overpower - Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloOverpowerFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diablo = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_diablo, (UnitGetFacing(lv_diablo) + 180.0), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloOverpowerFacing_Init () {
    libGDHL_gt_HeroDiabloOverpowerFacing = TriggerCreate("libGDHL_gt_HeroDiabloOverpowerFacing_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloOverpowerFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloOverpowerFacing, c_playerAny, "HeroDiabloOverpower@MakeCasterLookAtTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Lightning Breath End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloLightningBreathEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    bool lv_infernoBreathAimTriggerEnabled;
    int lv_diabloIndex;
    int lv_triggeringDiabloPlayer;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto07C460EB_g;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", lv_owner, CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
    libGDHL_gv_heroDiabloLightningBreathActive[lv_owner] = false;
    auto07C460EB_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto07C460EB_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGDHL_gv_heroDiabloLightningBreathActive[lv_itPlayer] == true)) {
            lv_infernoBreathAimTriggerEnabled = true;
            break;
        }

    }
    if ((lv_infernoBreathAimTriggerEnabled == false)) {
        TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathAim, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloLightningBreathEnd_Init () {
    libGDHL_gt_HeroDiabloLightningBreathEnd = TriggerCreate("libGDHL_gt_HeroDiabloLightningBreathEnd_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloLightningBreathEnd, null, "HeroDiabloLightningBreath", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Lightning Breath Aim
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloLightningBreathAim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroDiabloLightningBreathActive[lv_itPlayer] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(libGame_gv_players[lv_itPlayer].lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloLightningBreathAim_Init () {
    libGDHL_gt_HeroDiabloLightningBreathAim = TriggerCreate("libGDHL_gt_HeroDiabloLightningBreathAim_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathAim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Lightning Breath Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloLightningBreathCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDiabloLightningBreathActive[lv_itPlayer] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", lv_itPlayer, FixedToString(libGDHL_gv_heroDiabloLightningBreathTurningRate, 0));
    if ((libGDHL_gv_heroDiabloLightningBreathEventAdded[lv_itPlayer] == false)) {
        TriggerAddEventMouseMoved(libGDHL_gt_HeroDiabloLightningBreathAim, lv_itPlayer);
    }

    libGDHL_gv_heroDiabloLightningBreathEventAdded[lv_itPlayer] = true;
    TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathAim, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloLightningBreathCast_Init () {
    libGDHL_gt_HeroDiabloLightningBreathCast = TriggerCreate("libGDHL_gt_HeroDiabloLightningBreathCast_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloLightningBreathCast, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloLightningBreathCast, null, "HeroDiabloLightningBreath", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Black Soulstone Hero Kill
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_localPlayer;
    unit lv_diablo;
    bool lv_questCompleted;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_HeroParticipatedInTakedownKilledHero();
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_diablo = libGame_gv_players[lv_localPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_localPlayer) == "Diablo"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_questCompleted = (libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("HeroDiabloBlackSoulstone@StackAttribute", lv_localPlayer) == libGame_gf_TokenCounterGetMaximumTokenCount("HeroDiabloBlackSoulstone@StackAttribute"));
    if ((lv_questCompleted == false)) {
        UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@HeroTargetLaunchMissile", lv_hero);
        if ((libCore_gf_ExecuteValidatorOnUnit("HeroDiabloSoulDevourer@TargetHasDebuff", lv_diablo, lv_hero) == true)) {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloSoulDevourer@HealSet", lv_hero);
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@IncreaseQuestToken30", lv_hero);
        }
        else {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@IncreaseQuestToken10", lv_hero);
        }
    }
    else {
        if ((libCore_gf_ExecuteValidatorOnUnit("HeroDiabloSoulDevourer@TargetHasDebuff", lv_diablo, lv_hero) == true)) {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloSoulDevourer@HealSet", lv_hero);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill_Init () {
    libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill = TriggerCreate("libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Black Soulstone Minion Kill
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minion;
    int lv_localPlayer;
    unit lv_diablo;
    bool lv_questCompleted;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    lv_localPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_diablo = libGame_gv_players[lv_localPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_localPlayer) == "Diablo"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_questCompleted = (libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("HeroDiabloBlackSoulstone@StackAttribute", lv_localPlayer) == libGame_gf_TokenCounterGetMaximumTokenCount("HeroDiabloBlackSoulstone@StackAttribute"));
    if ((lv_questCompleted == false)) {
        UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@NonHeroTargetLaunchMissile", lv_minion);
        if ((libCore_gf_ExecuteValidatorOnUnit("HeroDiabloSoulDevourer@TargetHasDebuff", lv_diablo, lv_minion) == true)) {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloSoulDevourer@HealSet", lv_minion);
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@IncreaseQuestToken3", lv_minion);
        }
        else {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloBlackSoulstone@IncreaseQuestToken", lv_minion);
        }
    }
    else {
        if ((libCore_gf_ExecuteValidatorOnUnit("HeroDiabloSoulDevourer@TargetHasDebuff", lv_diablo, lv_minion) == true)) {
            UnitCreateEffectUnit(lv_diablo, "HeroDiabloSoulDevourer@HealSet", lv_minion);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill_Init () {
    libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill = TriggerCreate("libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Soul Shield Update Unit Status
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroDiabloSoulShield@SpellArmor") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatusUpdate(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus_Init () {
    libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus = TriggerCreate("libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus, c_playerAny, "HeroDiabloBlackSoulstone@TokenIncreaseModifyPlayer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Terrify
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloTerrify_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PlayerHeroDisplacementCameraLock(EventUnit(), EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloTerrify_Init () {
    libGDHL_gt_HeroDiabloTerrify = TriggerCreate("libGDHL_gt_HeroDiabloTerrify_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloTerrify, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloTerrify, null, "HeroDiabloTerrify@Fear", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Game Ends
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloGameEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto3AF93524_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3AF93524_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto3AF93524_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroDiablo")) {
            UnitBehaviorRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroDiabloLightningBreath", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloGameEnds_Init () {
    libGDHL_gt_HeroDiabloGameEnds = TriggerCreate("libGDHL_gt_HeroDiabloGameEnds_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloGameEnds, false);
    libGame_gf_GameOverEvent(libGDHL_gt_HeroDiabloGameEnds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroETCHeroCount += 1;
    if ((libGDHL_gv_heroETCHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroETCStageDiveFinalSet, true);
        TriggerEnable(libGDHL_gt_HeroETCStageDiveTeleportUnit, true);
        TriggerEnable(libGDHL_gt_HeroETCMoshPitOn, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCHeroCountIncrement_Init () {
    libGDHL_gt_HeroETCHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroETCHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroETCHeroCount -= 1;
    if ((libGDHL_gv_heroETCHeroCount < 0)) {
        libGDHL_gv_heroETCHeroCount = 0;
    }

    if ((libGDHL_gv_heroETCHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroETCStageDiveFinalSet, false);
        TriggerEnable(libGDHL_gt_HeroETCStageDiveTeleportUnit, false);
        TriggerEnable(libGDHL_gt_HeroETCMoshPitOn, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCHeroCountDecrement_Init () {
    libGDHL_gt_HeroETCHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroETCHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Stage Dive - Teleport Unit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCStageDiveTeleportUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_owner, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCStageDiveTeleportUnit_Init () {
    libGDHL_gt_HeroETCStageDiveTeleportUnit = TriggerCreate("libGDHL_gt_HeroETCStageDiveTeleportUnit_Func");
    TriggerEnable(libGDHL_gt_HeroETCStageDiveTeleportUnit, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroETCStageDiveTeleportUnit, c_playerAny, "ETCStageDive@Teleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Stage Dive - Final Set
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCStageDiveFinalSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    UnitSetFacing(libGame_gv_players[lv_owner].lv_heroUnit, 270.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCStageDiveFinalSet_Init () {
    libGDHL_gt_HeroETCStageDiveFinalSet = TriggerCreate("libGDHL_gt_HeroETCStageDiveFinalSet_Func");
    TriggerEnable(libGDHL_gt_HeroETCStageDiveFinalSet, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroETCStageDiveFinalSet, c_playerAny, "ETCStageDive@FinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Mosh Pit - On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCMoshPitOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eTC;
    unit lv_stunnedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eTC = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_stunnedUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_stunnedUnit, "ETCMoshPit@DisplayBehavior") == false)) {
        UnitBehaviorAdd(lv_stunnedUnit, "ETCMoshPit@DisplayBehavior", lv_eTC, 1);
    }

    UnitBehaviorSetDuration(lv_stunnedUnit, "ETCMoshPit@DisplayBehavior", UnitBehaviorDurationTotal(lv_eTC, "ETCMoshPit@Channel"));
    UnitBehaviorSetDurationRemaining(lv_stunnedUnit, "ETCMoshPit@DisplayBehavior", UnitBehaviorDuration(lv_eTC, "ETCMoshPit@Channel"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCMoshPitOn_Init () {
    libGDHL_gt_HeroETCMoshPitOn = TriggerCreate("libGDHL_gt_HeroETCMoshPitOn_Func");
    TriggerEnable(libGDHL_gt_HeroETCMoshPitOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroETCMoshPitOn, null, "ETCMoshPit@Stun", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroETCMoshPitOn, null, "ETCMoshPit@Stun", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroFalstadHeroCount += 1;
    if ((libGDHL_gv_heroFalstadHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior, true);
        TriggerEnable(libGDHL_gt_HeroFalstadFlightPing, true);
        TriggerEnable(libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown, true);
        TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown, true);
        TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown, true);
        TriggerEnable(libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride, true);
        TriggerEnable(libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadHeroCountIncrement_Init () {
    libGDHL_gt_HeroFalstadHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroFalstadHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroFalstadHeroCount -= 1;
    if ((libGDHL_gv_heroFalstadHeroCount < 0)) {
        libGDHL_gv_heroFalstadHeroCount = 0;
    }

    if ((libGDHL_gv_heroFalstadHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior, false);
        TriggerEnable(libGDHL_gt_HeroFalstadFlightPing, false);
        TriggerEnable(libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown, false);
        TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown, false);
        TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown, false);
        TriggerEnable(libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride, false);
        TriggerEnable(libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadHeroCountDecrement_Init () {
    libGDHL_gt_HeroFalstadHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroFalstadHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Lightning Rod - Extend Confirm Behavior
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroFalstadLightningRod@CasterConfirmBehavior", (UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroFalstadLightningRod@CasterConfirmBehavior") + 0.25));
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroFalstadLightningRod@TargetConfirmBehavior", (UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroFalstadLightningRod@TargetConfirmBehavior") + 0.25));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior_Init () {
    libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior = TriggerCreate("libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior, c_playerAny, "HeroFalstadLightningRod@ConfirmSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Flight Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadFlightPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_falstadPlayer;
    playergroup lv_alliedPlayers;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_falstadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_alliedPlayers = PlayerGroupEmpty();
    lv_location = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_alliedPlayers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_falstadPlayer), false);
    TextExpressionSetToken("Param/Expression/lib_GDHL_E77E9693", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[lv_falstadPlayer].lv_heroUnit)));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_E77E9693"), 24, lv_location, 2.0, true, false, lv_alliedPlayers);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadFlightPing_Init () {
    libGDHL_gt_HeroFalstadFlightPing = TriggerCreate("libGDHL_gt_HeroFalstadFlightPing_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadFlightPing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFalstadFlightPing, c_playerAny, "HeroFalstadFlight@LaunchMissile");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFalstadFlightPing, c_playerAny, "HeroFalstadEpicMount@LaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Around The World (Camp Captured)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7EB222F0_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EB222F0_g = libGame_gf_MercCampCapturedCapturingPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7EB222F0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerHero(lv_itPlayer) == "Falstad")) {
            UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroFalstadAroundTheWorld@IncrementTokenCounter", libGame_gv_players[lv_itPlayer].lv_heroUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured_Init () {
    libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured = TriggerCreate("libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured, false);
    libGame_gf_MercCampCaptured(libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Dishonorable Discharge - Hero Kill Refresh Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;
    unit lv_falstad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_falstad = libGame_gv_players[lv_localPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_localPlayer, "HeroFalstadDishonorableDischarge") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_falstad, "HeroFalstadDishonorableDischarge@HeroTakedownCooldownRefresh", lv_falstad);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown_Init () {
    libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown = TriggerCreate("libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Frequent Flyer - Hero Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;
    unit lv_falstad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_falstad = libGame_gv_players[lv_localPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_localPlayer, "HeroFalstadFrequentFlyer") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_falstad, "HeroFalstadFrequentFlyer@HeroKillIncreaseQuestToken", libGame_gf_HeroParticipatedInTakedownKilledHero());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown_Init () {
    libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown = TriggerCreate("libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Frequent Flyer - Minion Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;
    unit lv_falstad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_falstad = libGame_gv_players[lv_localPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", libGame_gf_HeroParticipatedInNPCTakedownMinion(), libGame_gf_HeroParticipatedInNPCTakedownMinion()) == true))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "HeroFalstadFrequentFlyer") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_falstad, "HeroFalstadFrequentFlyer@MinionKillIncreaseQuestToken", libGame_gf_HeroParticipatedInNPCTakedownMinion());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown_Init () {
    libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown = TriggerCreate("libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Call of the Wildhammer (Search Effect Override)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_casterPoint;
    point lv_targetPoint;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionEntireMap());
    lv_distance = DistanceBetweenPoints(lv_casterPoint, lv_targetPoint);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("HeroFalstadHinterlandBlast@Search"), "AreaArray[" + IntToString(0) + "].RectangleHeight", lv_player, lv_distance);
    CatalogFieldValueSet(c_gameCatalogShape, ("HeroFalstadHinterlandBlast@VisibilityQuadUpgraded"), "Quad", lv_player, ("-1,-" + FixedToString(lv_distance, 2) + ",1,1"));
    lv_distance = (lv_distance / 2.0);
    CatalogFieldValueSet(c_gameCatalogEffect, ("HeroFalstadHinterlandBlast@Search"), "AreaRelativeOffset", lv_player, ("0,-" + FixedToString(lv_distance, 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride_Init () {
    libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride = TriggerCreate("libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride, c_playerAny, "HeroFalstadCalloftheWildhammer@DummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroGreymaneHeroCount += 1;
    if ((libGDHL_gv_heroGreymaneHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneInsatiable, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneHeroCountIncrement_Init () {
    libGDHL_gt_HeroGreymaneHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroGreymaneHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroGreymaneHeroCount -= 1;
    if ((libGDHL_gv_heroGreymaneHeroCount < 0)) {
        libGDHL_gv_heroGreymaneHeroCount = 0;
    }

    if ((libGDHL_gv_heroGreymaneHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneInsatiable, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneHeroCountDecrement_Init () {
    libGDHL_gt_HeroGreymaneHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroGreymaneHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Insatiable
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneInsatiable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroGenericFountainDrink@HealingFountainCooldown") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroGenericFountainDrink@HealingFountainCooldown", (UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroGenericFountainDrink@HealingFountainCooldown") - libGDHL_gv_heroGreymaneInsatiableCDR));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneInsatiable_Init () {
    libGDHL_gt_HeroGreymaneInsatiable = TriggerCreate("libGDHL_gt_HeroGreymaneInsatiable_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneInsatiable, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGreymaneInsatiable, c_playerAny, "GreymaneInsatiable@ManaRestoreMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Wizened Duelist - Hero Death
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroKilledUnit;
    int lv_owner;
    fixed lv_wizenedDuelistStacks;
    int lv_index;
    fixed lv_newValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroKilledUnit = libGame_gf_HeroKilledUnit();
    lv_owner = UnitGetOwner(lv_heroKilledUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_heroKilledUnit) == "GreymaneHero"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_owner, "GreymaneWizenedDuelist") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wizenedDuelistStacks = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer("GreymaneWizenedDuelist@QuestTokenCounter", lv_owner);
    lv_index = libCore_gf_TokenTokenCounterIndex("GreymaneWizenedDuelist@QuestTokenCounter");
    lv_newValue = Trunc((lv_wizenedDuelistStacks * (1.0 - libGDHL_gv_heroGreymaneWizenedDuelistLostModifier)));
    libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, lv_newValue, "GreymaneWizenedDuelist@QuestTokenCounter", lv_index, lv_owner, lv_heroKilledUnit, lv_heroKilledUnit, false);
    lv_index = libCore_gf_TokenTokenCounterIndex("GreymaneWizenedDuelist@ProgressTokenCounter");
    libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, 0.0, "GreymaneWizenedDuelist@ProgressTokenCounter", lv_index, lv_owner, lv_heroKilledUnit, lv_heroKilledUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath_Init () {
    libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath = TriggerCreate("libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath, false);
    libGame_gf_HeroKilled(libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Go For The Throat - Free Cast Carry Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GreymaneGoForTheThroat@FreeCastCarry", 0.125);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration_Init () {
    libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration = TriggerCreate("libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration, c_playerAny, "GreymaneGoForTheThroat@FreeCastModifyCarryBehaviorDuration");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Actor Sound Swaps
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneActorSoundSwaps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "GreymaneWorgenForm") == true)) {
        libGame_gv_players[UnitGetOwner(EventUnit())].lv_vOSoundSuffix = "_W";
    }
    else {
        libGame_gv_players[UnitGetOwner(EventUnit())].lv_vOSoundSuffix = "";
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneActorSoundSwaps_Init () {
    libGDHL_gt_HeroGreymaneActorSoundSwaps = TriggerCreate("libGDHL_gt_HeroGreymaneActorSoundSwaps_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGreymaneActorSoundSwaps, null, "GreymaneWorgenForm", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGreymaneActorSoundSwaps, null, "GreymaneWorgenForm", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroJainaHeroCount += 1;
    if ((libGDHL_gv_heroJainaHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroJainaTalentReset, true);
        TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, true);
        TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, true);
        TriggerEnable(libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup, true);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, true);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, true);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction, true);
        TriggerEnable(libGDHL_gt_HeroJainaWintermute, true);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteFrostboltCast, true);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteBlizzardCast, true);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteConeofColdCast, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaHeroCountIncrement_Init () {
    libGDHL_gt_HeroJainaHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroJainaHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroJainaHeroCount -= 1;
    if ((libGDHL_gv_heroJainaHeroCount < 0)) {
        libGDHL_gv_heroJainaHeroCount = 0;
    }

    if ((libGDHL_gv_heroJainaHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroJainaTalentReset, false);
        TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, false);
        TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, false);
        TriggerEnable(libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup, false);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, false);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, false);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction, false);
        TriggerEnable(libGDHL_gt_HeroJainaWintermute, false);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteFrostboltCast, false);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteBlizzardCast, false);
        TriggerEnable(libGDHL_gt_HeroJainaWintermuteConeofColdCast, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaHeroCountDecrement_Init () {
    libGDHL_gt_HeroJainaHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroJainaHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Talent Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaTalentReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7DE1B8A0_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7DE1B8A0_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7DE1B8A0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerHero(lv_itPlayer) == "Jaina")) {
            CatalogLinkReplace(lv_itPlayer, c_gameCatalogModel, ("HeroJainaWaterElemental@Unit"), ("HeroJainaWaterElemental@Unit"));
            CatalogLinkReplace(lv_itPlayer, c_gameCatalogModel, ("HeroJainaWaterElemental@UnitDeath"), ("HeroJainaWaterElemental@UnitDeath"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaTalentReset_Init () {
    libGDHL_gt_HeroJainaTalentReset = TriggerCreate("libGDHL_gt_HeroJainaTalentReset_Func");
    TriggerEnable(libGDHL_gt_HeroJainaTalentReset, false);
    libGame_gf_PlayerTalentsReset(libGDHL_gt_HeroJainaTalentReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Frostbite (Chilled Unit Status Display)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stacksFrame;

    // Automatic Variable Declarations
    string auto9FE7498C_val;

    // Variable Initialization
    lv_stacksFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/JainaStacksFrameContainer/StacksFrame/StacksFull", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    auto9FE7498C_val = EventPlayerEffectUsed();
    if (auto9FE7498C_val == "HeroJainaFrostbite@ChilledDamageBonusInitialSet") {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }
    else if (auto9FE7498C_val == "HeroJainaFrostbite@ChilledDamageBonusRefreshSet") {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }
    else if (auto9FE7498C_val == "HeroJainaFrostbite@ChilledDamageBonusFinalSet") {
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay_Init () {
    libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay = TriggerCreate("libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay_Func");
    TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, c_playerAny, "HeroJainaFrostbite@ChilledDamageBonusInitialSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, c_playerAny, "HeroJainaFrostbite@ChilledDamageBonusRefreshSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay, c_playerAny, "HeroJainaFrostbite@ChilledDamageBonusFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Frostbite (Chilled Damage Response)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageAmount;
    fixed lv_shieldAmount;
    fixed lv_shieldsToAdd;
    unit lv_jaina;
    int lv_jainaOwner;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageAmount = libCore_gf_CombatCalculateDamageAmount();
    lv_targetUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_damageAmount > 0.0))) {
            return false;
        }

        if (!((libGame_gf_PlayerHero(UnitGetOwner(EventUnitDamageSourceUnit())) == "Jaina"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jainaOwner = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_jaina = libGame_gv_players[lv_jainaOwner].lv_heroUnit;
    if ((PlayerHasTalent(lv_jainaOwner, "HeroJainaIceBarrier") == true)) {
        if ((UnitHasBehavior2(lv_jaina, "HeroJainaIceBarrier@Shield") == true)) {
            lv_shieldAmount = UnitBehaviorDamageModifyRemaining(lv_jaina, "HeroJainaIceBarrier@Shield");
        }
        else {
            lv_shieldAmount = 0.0;
        }
        lv_shieldsToAdd = (lv_damageAmount * libGDHL_gv_heroJainaIceBarrierShieldMultiplier);
        lv_shieldAmount = (lv_shieldAmount + lv_shieldsToAdd);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("HeroJainaIceBarrier@Shield"), "DamageResponse.ModifyLimit", lv_jainaOwner, lv_shieldAmount);
        UnitBehaviorAdd(lv_jaina, "HeroJainaIceBarrier@Shield", lv_jaina, 1);
        UnitCreateEffectUnit(lv_jaina, "HeroJainaIceBarrier@DummySet", lv_jaina);
        libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(lv_jaina, FixedToText(lv_shieldsToAdd, 0), libCore_gv_playerGroupFromPlayer[lv_jainaOwner], "FCT_Shield_Normal", libUIUI_gv_floatingCombatTextStandardDuration, libUIUI_gv_floatingCombatTextFadeDuration2, libUIUI_gf_UIFloatingCombatTextCalculateHorizontalOffset(lv_jaina, lv_jaina));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true) && (libGame_gf_TokenCounterCheckTokenEventForPlayer("Maximum", "HeroJainaFrostbite@TokenCounter", lv_jainaOwner) == false)) {
        libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationAdd, lv_damageAmount, "HeroJainaFrostbite@TokenCounter", libCore_gf_TokenTokenCounterIndex("HeroJainaFrostbite@TokenCounter"), lv_jainaOwner, lv_jaina, lv_targetUnit, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse_Init () {
    libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse = TriggerCreate("libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse_Func");
    TriggerEnable(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaFrostbolt@DamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaBlizzard@DamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaConeOfCold@DamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaRingOfFrost@DamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaWaterElementalWeapon@DamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroJainaWaterElementalWeapon@SplashDamageChilled");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Fingers Of Frost (Regen Globe Pickup)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroJaina"))) {
            return false;
        }

        if (!((PlayerHasTalent(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "HeroJainaFingersOfFrost") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroJainaFingersOfFrost@IncrementTokenCount", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup_Init () {
    libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup = TriggerCreate("libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup_Func");
    TriggerEnable(libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental (Created)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_waterElementalUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_waterElementalUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroJainaWaterElemental[lv_player] = lv_waterElementalUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalCreated_Init () {
    libGDHL_gt_HeroJainaWaterElementalCreated = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalCreated_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroJainaWaterElementalCreated, null, "HeroJainaWaterElementalSummon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental (Command)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_waterElemental;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) == null)) {
        UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAttackOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    else {
        UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAttackOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalCommand_Init () {
    libGDHL_gt_HeroJainaWaterElementalCommand = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalCommand_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaWaterElementalCommand, c_playerAny, "HeroJainaWaterElementalCommand@Switch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental (Summoned Unit Special Case Interaction)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_waterElemental;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAttackOverride", lv_waterElemental, 1);
    UnitIssueOrder(lv_waterElemental, OrderTargetingUnit(AbilityCommand("SummonedUnitSpecialCaseInteraction", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction_Init () {
    libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction, c_playerAny, "HeroJainaWaterElementalCommand@SummonedUnitSpecialCaseDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Wintermute
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWintermute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_PlayerChooseTalentPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerChooseTalentTalentLink() == "HeroJainaWintermute"))) {
            return false;
        }

        if (!((libGame_gf_PlayerHero(lv_player) == "Jaina"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogLinkReplace(lv_player, c_gameCatalogModel, ("HeroJainaWaterElemental@Unit"), ("HeroJainaWintermute@WaterElemental"));
    CatalogLinkReplace(lv_player, c_gameCatalogModel, ("HeroJainaWaterElemental@UnitDeath"), ("HeroJainaWintermute@WaterElementalDeath"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWintermute_Init () {
    libGDHL_gt_HeroJainaWintermute = TriggerCreate("libGDHL_gt_HeroJainaWintermute_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWintermute, false);
    libGame_gf_PlayerChooseTalent(libGDHL_gt_HeroJainaWintermute);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Wintermute (Frostbolt Cast)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWintermuteFrostboltCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_waterElemental;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(EventPlayer(), "HeroJainaWintermute") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    if ((UnitIsAlive(lv_waterElemental) == true) && (UnitBehaviorCount(lv_waterElemental, "HeroJainaWaterElemental@StatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAbilityOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("HeroJainaFrostbolt@WaterElemental", 0), EventUnitTargetPoint()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWintermuteFrostboltCast_Init () {
    libGDHL_gt_HeroJainaWintermuteFrostboltCast = TriggerCreate("libGDHL_gt_HeroJainaWintermuteFrostboltCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWintermuteFrostboltCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroJainaWintermuteFrostboltCast, null, AbilityCommand("HeroJainaFrostbolt", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Wintermute (Blizzard Cast)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWintermuteBlizzardCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_waterElemental;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(EventPlayer(), "HeroJainaWintermute") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    if ((UnitIsAlive(lv_waterElemental) == true) && (UnitBehaviorCount(lv_waterElemental, "HeroJainaWaterElemental@StatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAbilityOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("HeroJainaBlizzard@WaterElemental", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWintermuteBlizzardCast_Init () {
    libGDHL_gt_HeroJainaWintermuteBlizzardCast = TriggerCreate("libGDHL_gt_HeroJainaWintermuteBlizzardCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWintermuteBlizzardCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaWintermuteBlizzardCast, c_playerAny, "HeroJainaBlizzard@WaterElementalDummyPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Wintermute (Cone of Cold Cast)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWintermuteConeofColdCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_waterElemental;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(EventPlayer(), "HeroJainaWintermute") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    if ((UnitIsAlive(lv_waterElemental) == true) && (UnitBehaviorCount(lv_waterElemental, "HeroJainaWaterElemental@StatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "HeroJainaWaterElemental@AIAbilityOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("HeroJainaConeOfCold@WaterElemental", 0), EventUnitTargetPoint()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWintermuteConeofColdCast_Init () {
    libGDHL_gt_HeroJainaWintermuteConeofColdCast = TriggerCreate("libGDHL_gt_HeroJainaWintermuteConeofColdCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWintermuteConeofColdCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroJainaWintermuteConeofColdCast, null, AbilityCommand("HeroJainaConeOfCold", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_johannaHeroCount += 1;
    if ((libGDHL_gv_johannaHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_JohannaFallingSwordFinalSet, true);
        TriggerEnable(libGDHL_gt_JohannaFallingSwordSuppressCollision, true);
        TriggerEnable(libGDHL_gt_JohannaFallingSwordTeleport, true);
        TriggerEnable(libGDHL_gt_JohannaIndestructibleFatalDamageAbsord, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaHeroCountIncrement_Init () {
    libGDHL_gt_JohannaHeroCountIncrement = TriggerCreate("libGDHL_gt_JohannaHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_johannaHeroCount -= 1;
    if ((libGDHL_gv_johannaHeroCount < 0)) {
        libGDHL_gv_johannaHeroCount = 0;
    }

    if ((libGDHL_gv_johannaHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_JohannaFallingSwordFinalSet, true);
        TriggerEnable(libGDHL_gt_JohannaFallingSwordSuppressCollision, true);
        TriggerEnable(libGDHL_gt_JohannaFallingSwordTeleport, true);
        TriggerEnable(libGDHL_gt_JohannaIndestructibleFatalDamageAbsord, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaHeroCountDecrement_Init () {
    libGDHL_gt_JohannaHeroCountDecrement = TriggerCreate("libGDHL_gt_JohannaHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Falling Sword - Teleport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaFallingSwordTeleport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = UnitGetOwner(lv_casterUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_owner, UnitGetPosition(lv_casterUnit), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaFallingSwordTeleport_Init () {
    libGDHL_gt_JohannaFallingSwordTeleport = TriggerCreate("libGDHL_gt_JohannaFallingSwordTeleport_Func");
    TriggerEnable(libGDHL_gt_JohannaFallingSwordTeleport, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_JohannaFallingSwordTeleport, c_playerAny, "JohannaFallingSword@Teleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Falling Sword - Final Set
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaFallingSwordFinalSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_casterUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaFallingSwordFinalSet_Init () {
    libGDHL_gt_JohannaFallingSwordFinalSet = TriggerCreate("libGDHL_gt_JohannaFallingSwordFinalSet_Func");
    TriggerEnable(libGDHL_gt_JohannaFallingSwordFinalSet, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_JohannaFallingSwordFinalSet, null, "JohannaFallingSword", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Falling Sword - Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaFallingSwordSuppressCollision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_johanna;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_johanna = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_johanna, "JohannaFallingSword@ChangeCollision", lv_johanna);
    while (!((UnitHasBehavior2(lv_johanna, "JohannaFallingSword") == true))) {
        Wait(0.0625, c_timeGame);
    }
    UnitCreateEffectUnit(lv_johanna, "JohannaFallingSword@ResetCollision", lv_johanna);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaFallingSwordSuppressCollision_Init () {
    libGDHL_gt_JohannaFallingSwordSuppressCollision = TriggerCreate("libGDHL_gt_JohannaFallingSwordSuppressCollision_Func");
    TriggerEnable(libGDHL_gt_JohannaFallingSwordSuppressCollision, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_JohannaFallingSwordSuppressCollision, null, "JohannaFallingSword", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Johanna - Indestructible - Fatal Damage Absord
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_JohannaIndestructibleFatalDamageAbsord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = EventUnitDamageAbsorbed();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(EventUnitDamageSourceUnit(), "JohannaIndestructible@AbsorbedDamage", EventUnit(), lv_amount);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_JohannaIndestructibleFatalDamageAbsord_Init () {
    libGDHL_gt_JohannaIndestructibleFatalDamageAbsord = TriggerCreate("libGDHL_gt_JohannaIndestructibleFatalDamageAbsord_Func");
    TriggerEnable(libGDHL_gt_JohannaIndestructibleFatalDamageAbsord, false);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_JohannaIndestructibleFatalDamageAbsord, null, "JohannaIndestructible@CarryBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKerriganHeroCount += 1;
    if ((libGDHL_gv_heroKerriganHeroCount == 1)) {
        libGDHL_gf_HeroKerriganHeroCountTurnTriggersOnOff(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganHeroCountIncrement_Init () {
    libGDHL_gt_HeroKerriganHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroKerriganHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKerriganHeroCount -= 1;
    if ((libGDHL_gv_heroKerriganHeroCount < 0)) {
        libGDHL_gv_heroKerriganHeroCount = 0;
    }

    if ((libGDHL_gv_heroKerriganHeroCount == 0)) {
        libGDHL_gf_HeroKerriganHeroCountTurnTriggersOnOff(false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganHeroCountDecrement_Init () {
    libGDHL_gt_HeroKerriganHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroKerriganHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Assimilation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganAssimilation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;
    fixed lv_shieldAmountCurrent;
    fixed lv_shieldAmountNew;
    fixed lv_shieldAmountMax;
    fixed lv_shieldToAdd;
    int lv_owner;
    unit lv_kerrigan;
    fixed lv_fraction;
    bool lv_isCrit;

    // Automatic Variable Declarations
    string autoDB8E0EFC_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB8E0EFC_val = UnitGetType(EventUnitDamageSourceUnit());
    if (autoDB8E0EFC_val == "KerriganHero") {
        lv_kerrigan = EventUnitDamageSourceUnit();
    }
    else if (autoDB8E0EFC_val == "KerriganUltralisk") {
        lv_kerrigan = UnitGroupUnit(UnitGetTrackedUnitGroup(EventUnitDamageSourceUnit(), "Summon@SummonedUnitTracker"), 1);
    }
    else {
        return true;
    }
    if ((lv_kerrigan == null)) {
        return true;
    }

    lv_damage = libCore_gf_CombatCalculateDamageAmount();
    lv_owner = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_fraction = libGDHL_gv_heroKerriganAssimilationLeechFraction;
    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_fraction += libGDHL_gv_heroKerriganAssimilationLeechFractionHeroic;
    }

    if ((PlayerHasTalent(lv_owner, "KerriganFuryOfTheSwarm") == true) && ((EventUnitDamageEffect() == "KerriganWeapon@Damage") || (EventUnitDamageEffect() == "KerriganFuryOfTheSwarm@Damage"))) {
        lv_fraction += libGDHL_gv_heroKerriganFuryoftheSwarmLeechFraction;
    }

    if ((PlayerHasTalent(lv_owner, "KerriganVolatilePower") == true)) {
        lv_fraction += libGDHL_gv_heroKerriganVolatilePowerLeechFraction;
    }

    if ((EventUnitDamageEffect() == "KerriganPsionicShift@Damage")) {
        lv_fraction += libGDHL_gv_heroKerriganPsionicShiftLeechFraction;
    }

    lv_shieldToAdd = (lv_damage * lv_fraction);
    lv_isCrit = libCore_gf_CombatCheckCritState(EventUnit(), EventUnitDamageSourcePlayer(), EventUnitDamageEffect());
    libGDHL_gf_HeroKerriganAssimilationShieldToAdd(lv_kerrigan, lv_shieldToAdd, lv_isCrit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganAssimilation_Init () {
    libGDHL_gt_HeroKerriganAssimilation = TriggerCreate("libGDHL_gt_HeroKerriganAssimilation_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganAssimilation, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganWeapon@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganFuryOfTheSwarm@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganRavage@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganImpalingBlades@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganPrimalGrasp@PullDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganPrimalGrasp@ExplosionDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganMaelstrom@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganUltraliskWeapon@SwitchDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganUltraliskWeapon@SplashSwitchDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganPainfulSpikes@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganPsionicShift@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilation, null, c_unitDamageTypeAny, c_unitDamageEither, "KerriganPsionicShift@Damage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroKerriganAssimilation, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Summon Ultralisk
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskSummonUltralisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_kerriganUnit;
    unit lv_targetUnit;
    point lv_lastKnownLocationOfTarget;
    point lv_targetPoint;
    unit lv_ultraliskUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroKerriganUltraliskLogicController(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskSummonUltralisk_Init () {
    libGDHL_gt_HeroKerriganUltraliskSummonUltralisk = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskSummonUltralisk_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskSummonUltralisk, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskSummonUltralisk, c_playerAny, "KerriganSummonUltralisk@ApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Update Orders On Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_lastKnownLocation;
    int lv_ownerPlayer;
    point lv_positionofUnit;
    unit lv_ultralisk;

    // Automatic Variable Declarations
    unitgroup autoD6495BDF_g;
    int autoD6495BDF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_ownerPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    autoD6495BDF_g = UnitGroup("KerriganUltralisk", lv_ownerPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6495BDF_u = UnitGroupCount(autoD6495BDF_g, c_unitCountAll);
    for (;; autoD6495BDF_u -= 1) {
        lv_ultralisk = UnitGroupUnitFromEnd(autoD6495BDF_g, autoD6495BDF_u);
        if (lv_ultralisk == null) { break; }
        UnitIssueOrder(lv_ultralisk, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_ultralisk, OrderTargetingUnit(AbilityCommand("attack", 0), libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Init () {
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, c_playerAny, "KerriganUltraliskIssueOrder@Dummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Update Orders On Issue Order Ability Summoned Unit Special Case Interaction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_lastKnownLocation;
    int lv_ownerPlayer;
    point lv_positionOfUnit;

    // Automatic Variable Declarations
    unitgroup auto507D47E0_g;
    int auto507D47E0_u;
    unit auto507D47E0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_ownerPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    auto507D47E0_g = UnitGroup("KerriganUltralisk", lv_ownerPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto507D47E0_u = UnitGroupCount(auto507D47E0_g, c_unitCountAll);
    for (;; auto507D47E0_u -= 1) {
        auto507D47E0_var = UnitGroupUnitFromEnd(auto507D47E0_g, auto507D47E0_u);
        if (auto507D47E0_var == null) { break; }
        UnitIssueOrder(auto507D47E0_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto507D47E0_var, OrderTargetingUnit(AbilityCommand("SummonedUnitSpecialCaseInteraction", 0), libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction_Init () {
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction, c_playerAny, "KerriganUltraliskIssueOrder@SummonedUnitSpecialCaseInteractionDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Update Orders On Issue Order Ability Point
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD98C4BEF_g;
    int autoD98C4BEF_u;
    unit autoD98C4BEF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD98C4BEF_g = UnitGroup("KerriganUltralisk", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD98C4BEF_u = UnitGroupCount(autoD98C4BEF_g, c_unitCountAll);
    for (;; autoD98C4BEF_u -= 1) {
        autoD98C4BEF_var = UnitGroupUnitFromEnd(autoD98C4BEF_g, autoD98C4BEF_u);
        if (autoD98C4BEF_var == null) { break; }
        UnitIssueOrder(autoD98C4BEF_var, OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Init () {
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, c_playerAny, "KerriganUltraliskIssueOrder@DummyPoint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Siphoning Impact
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganSiphoningImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerrigan;
    fixed lv_shieldToAdd;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerrigan = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = UnitGetOwner(lv_kerrigan);
    lv_shieldToAdd = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "Amount", lv_owner);
    libGDHL_gf_HeroKerriganAssimilationShieldToAdd(lv_kerrigan, lv_shieldToAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganSiphoningImpact_Init () {
    libGDHL_gt_HeroKerriganSiphoningImpact = TriggerCreate("libGDHL_gt_HeroKerriganSiphoningImpact_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganSiphoningImpact, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganSiphoningImpact, c_playerAny, "KerriganSiphoningImpact@DummyShieldHandle");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganSiphoningImpact, c_playerAny, "KerriganSiphoningImpact@DummyShieldHandleHeroic");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Assimilation Mastery
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganAssimilationMastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerrigan;
    fixed lv_shieldToAdd;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerrigan = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = UnitGetOwner(lv_kerrigan);
    lv_shieldToAdd = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "Amount", lv_owner);
    libGDHL_gf_HeroKerriganAssimilationShieldToAdd(lv_kerrigan, lv_shieldToAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganAssimilationMastery_Init () {
    libGDHL_gt_HeroKerriganAssimilationMastery = TriggerCreate("libGDHL_gt_HeroKerriganAssimilationMastery_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganAssimilationMastery, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganAssimilationMastery, c_playerAny, "KerriganAssimilationMastery@DummyShieldHandle");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Boundless Fury
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganBoundlessFury_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    string auto090D8B85_val;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_targetUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/KerriganStacksFrameContainer/KerriganBoundlessFuryStacksFrame/StacksProgressBar", lv_targetUnit);
    auto090D8B85_val = EventPlayerEffectUsed();
    if (auto090D8B85_val == "KerriganBoundlessFury@MarkerDummyInitialSet") {
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if (auto090D8B85_val == "KerriganBoundlessFury@MarkerDummyRefreshSet") {
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 1.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if (auto090D8B85_val == "KerriganBoundlessFury@MarkerDummyFinalSet") {
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganBoundlessFury_Init () {
    libGDHL_gt_HeroKerriganBoundlessFury = TriggerCreate("libGDHL_gt_HeroKerriganBoundlessFury_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganBoundlessFury, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganBoundlessFury, c_playerAny, "KerriganBoundlessFury@MarkerDummyInitialSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganBoundlessFury, c_playerAny, "KerriganBoundlessFury@MarkerDummyRefreshSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganBoundlessFury, c_playerAny, "KerriganBoundlessFury@MarkerDummyFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Chrysalis Unit Status
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganChrysalisUnitStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chrysalisUnit;
    unit lv_kerriganUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chrysalisUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_kerriganUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_chrysalisUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatus, "TrackingCenteringFrame/UnitTrackingElement/TrackedUnitStatusFrame0", lv_chrysalisUnit);
    libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), lv_kerriganUnit, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganChrysalisUnitStatus_Init () {
    libGDHL_gt_HeroKerriganChrysalisUnitStatus = TriggerCreate("libGDHL_gt_HeroKerriganChrysalisUnitStatus_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganChrysalisUnitStatus, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganChrysalisUnitStatus, c_playerAny, "KerriganChrysalis@UnitSpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Omegastorm
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganOmegastorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerrigan;
    fixed lv_durationRemaining;
    fixed lv_maxDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kerrigan = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_durationRemaining = UnitBehaviorDuration(lv_kerrigan, "KerriganMaelstrom");
    lv_durationRemaining += libGDHL_gv_heroKerriganOmegastormDurationIncrease;
    lv_maxDuration = UnitBehaviorDurationTotal(lv_kerrigan, "KerriganMaelstrom");
    lv_durationRemaining = MinF(lv_durationRemaining, lv_maxDuration);
    UnitBehaviorSetDurationRemaining(lv_kerrigan, "KerriganMaelstrom", lv_durationRemaining);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganOmegastorm_Init () {
    libGDHL_gt_HeroKerriganOmegastorm = TriggerCreate("libGDHL_gt_HeroKerriganOmegastorm_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganOmegastorm, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganOmegastorm, c_playerAny, "KerriganOmegastorm@DummyTriggerSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKharazimHeroCount += 1;
    if ((libGDHL_gv_heroKharazimHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone, true);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmReduceHealth, true);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmApplyOverlay, true);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay, true);
        TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing, true);
        TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing, true);
        TriggerEnable(libGDHL_gt_HeroKharazimSixthSenseProc, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimHeroCountIncrement_Init () {
    libGDHL_gt_HeroKharazimHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroKharazimHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKharazimHeroCount -= 1;
    if ((libGDHL_gv_heroKharazimHeroCount < 0)) {
        libGDHL_gv_heroKharazimHeroCount = 0;
    }

    if ((libGDHL_gv_heroKharazimHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone, false);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmReduceHealth, false);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmApplyOverlay, false);
        TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay, false);
        TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing, false);
        TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing, false);
        TriggerEnable(libGDHL_gt_HeroKharazimSixthSenseProc, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimHeroCountDecrement_Init () {
    libGDHL_gt_HeroKharazimHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroKharazimHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Divine Palm Reduce Health
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimDivinePalmReduceHealth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimDivinePalmReduceHealth_Init () {
    libGDHL_gt_HeroKharazimDivinePalmReduceHealth = TriggerCreate("libGDHL_gt_HeroKharazimDivinePalmReduceHealth_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmReduceHealth, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroKharazimDivinePalmReduceHealth, null, "KharazimDivinePalm@StasisBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Divine Palm Apply Overlay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimDivinePalmApplyOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stasisUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stasisUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(lv_stasisUnit) == true) && (libCore_gf_StormUnitIsHallucination(lv_stasisUnit) == false) && (UnitHasBehavior2(lv_stasisUnit, "HeroGenericIgnoreFullscreenOverlay") == false))) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_stasisUnit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimDivinePalmApplyOverlay_Init () {
    libGDHL_gt_HeroKharazimDivinePalmApplyOverlay = TriggerCreate("libGDHL_gt_HeroKharazimDivinePalmApplyOverlay_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmApplyOverlay, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroKharazimDivinePalmApplyOverlay, null, "KharazimDivinePalm@StasisBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Divine Palm Remove Overlay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stasisUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stasisUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_stasisUnit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(EventUnit()), "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay_Init () {
    libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay = TriggerCreate("libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay, null, "KharazimDivinePalm@StasisBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Seven-Sided Strike Store Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kharazim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kharazim = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKharazimSevenSidedStrikeFacing[UnitGetOwner(lv_kharazim)] = UnitGetFacing(lv_kharazim);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing_Init () {
    libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing = TriggerCreate("libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing, null, AbilityCommand("KharazimSevenSidedStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Seven-Sided Strike Restore Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kharazim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kharazim = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_kharazim, "KharazimSevenSidedStrike@IdleSuppressionCollisionController") == true)) {
        UnitSetFacing(lv_kharazim, 270.0, 0.0);
    }
    else {
        UnitSetFacing(lv_kharazim, libGDHL_gv_heroKharazimSevenSidedStrikeFacing[UnitGetOwner(lv_kharazim)], 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing_Init () {
    libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing = TriggerCreate("libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing, c_playerAny, "KharazimSevenSidedStrike@FinalTeleport");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing, c_playerAny, "KharazimSevenSidedStrike@IdleTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Sixth Sense Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimSixthSenseProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kharazim;
    int lv_kharazimPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_kharazim = EventUnit();
    lv_kharazimPlayer = UnitGetOwner(lv_kharazim);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_kharazimPlayer, "KharazimSixthSense") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_kharazim) == "KharazimHero"))) {
            return false;
        }

        if (!((libCore_gf_UnitHasBehaviorWithFlag(lv_kharazim, c_unitBehaviorFlagUser12) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_kharazim, "KharazimSixthSense@ApplyArmor", lv_kharazim);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimSixthSenseProc_Init () {
    libGDHL_gt_HeroKharazimSixthSenseProc = TriggerCreate("libGDHL_gt_HeroKharazimSixthSenseProc_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimSixthSenseProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroKharazimSixthSenseProc, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroKharazimSixthSenseProc, null, c_unitBehaviorFlagUser6, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kharazim - Abathur Ultimate Evolution Clone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofAbathur;
    int lv_ownerofHeroCloned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ownerofAbathur = libGame_gf_AbathurUltimateEvolutionHeroCopiedAbathurOwner();
    lv_ownerofHeroCloned = libGame_gf_AbathurUltimateEvolutionHeroCopiedTargetOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofHeroCloned].lv_heroUnit, "KharazimTranscendence@CarryBehavior") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "KharazimTranscendence@CarryBehavior", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }
    else if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofHeroCloned].lv_heroUnit, "KharazimIronFists@CarryBehavior") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "KharazimIronFists@CarryBehavior", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }
    else if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofHeroCloned].lv_heroUnit, "KharazimInsight") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "KharazimInsight@QuestFinshedMarker", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone_Init () {
    libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone = TriggerCreate("libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone_Func");
    TriggerEnable(libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone, false);
    libGame_gf_AbathurUltimateEvolutionHeroCopied(libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroLiMingHeroCount += 1;
    if ((libGDHL_gv_heroLiMingHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroLiMingCriticalMassCDReduction, true);
        TriggerEnable(libGDHL_gt_HeroLiMingDominance, true);
        TriggerEnable(libGDHL_gt_HeroLiMingIllusionist, true);
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCast, true);
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateEnd, true);
        TriggerEnable(libGDHL_gt_HeroLiMingTemporalFlux, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingHeroCountIncrement_Init () {
    libGDHL_gt_HeroLiMingHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroLiMingHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroLiMingHeroCount -= 1;
    if ((libGDHL_gv_heroLiMingHeroCount < 0)) {
        libGDHL_gv_heroLiMingHeroCount = 0;
    }

    if ((libGDHL_gv_heroLiMingHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroLiMingCriticalMassCDReduction, false);
        TriggerEnable(libGDHL_gt_HeroLiMingDominance, false);
        TriggerEnable(libGDHL_gt_HeroLiMingIllusionist, false);
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCast, false);
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateEnd, false);
        TriggerEnable(libGDHL_gt_HeroLiMingTemporalFlux, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingHeroCountDecrement_Init () {
    libGDHL_gt_HeroLiMingHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroLiMingHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Critical Mass CD Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingCriticalMassCDReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    unit lv_vehicle;
    point lv_deadUnitPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;
    lv_vehicle = libGame_gv_players[lv_player].lv_activeVehicle;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_unit) == true))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "LiMingHero") || (UnitGetType(lv_vehicle) == "LiMingHero")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnitPosition = UnitGetPosition(libGame_gf_HeroParticipatedInTakedownKilledHero());
    if ((UnitGetType(lv_unit) == "LiMingHero")) {
        UnitCreateEffectUnit(lv_unit, "LiMingCriticalMass@MPCooldownRefund", lv_unit);
        UnitCreateEffectUnit(lv_unit, "LiMingCriticalMass@MUCooldownRefund", lv_unit);
        UnitCreateEffectPoint(lv_unit, "LiMingCriticalMass@DummyPersistent", lv_deadUnitPosition);
    }
    else {
        UnitCreateEffectUnit(lv_vehicle, "LiMingCriticalMass@MPCooldownRefund", lv_vehicle);
        UnitCreateEffectUnit(lv_vehicle, "LiMingCriticalMass@MUCooldownRefund", lv_vehicle);
        UnitCreateEffectPoint(lv_vehicle, "LiMingCriticalMass@DummyPersistent", lv_deadUnitPosition);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingCriticalMassCDReduction_Init () {
    libGDHL_gt_HeroLiMingCriticalMassCDReduction = TriggerCreate("libGDHL_gt_HeroLiMingCriticalMassCDReduction_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingCriticalMassCDReduction, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroLiMingCriticalMassCDReduction);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Dominance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingDominance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_player) == "LiMing"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "LiMingDominance") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_player].lv_heroUnit, "LiMingDominance@Set", libGame_gv_players[lv_player].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingDominance_Init () {
    libGDHL_gt_HeroLiMingDominance = TriggerCreate("libGDHL_gt_HeroLiMingDominance_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingDominance, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroLiMingDominance);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Illusionist
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingIllusionist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;
    fixed lv_damageTaken;
    fixed lv_totalHealth;
    fixed lv_percentageDamageTaken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "LiMingHero"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_owner, "LiMingIllusionist") == true))) {
            return false;
        }

        if (!((UnitGetCooldown(lv_unit, "Abil/LiMingIllusionist") <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAmount();
    lv_totalHealth = UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent);
    lv_percentageDamageTaken = (lv_damageTaken / lv_totalHealth);
    if ((lv_percentageDamageTaken > libGDHL_gv_heroLiMingIllusionistThreshold_C)) {
        UnitCreateEffectUnit(lv_unit, "LiMingIllusionist@ProcSet", lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingIllusionist_Init () {
    libGDHL_gt_HeroLiMingIllusionist = TriggerCreate("libGDHL_gt_HeroLiMingIllusionist_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingIllusionist, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroLiMingIllusionist, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Disintegrate Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingDisintegrateCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroLiMingDisintegrateActive[lv_itPlayer] = true;
    if ((libGDHL_gv_heroLiMingDisintegrateEventAdded[lv_itPlayer] == false)) {
        TriggerAddEventMouseMoved(libGDHL_gt_HeroLiMingDisintegrateAim, lv_itPlayer);
        libGDHL_gv_heroLiMingDisintegrateEventAdded[lv_itPlayer] = true;
    }

    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateAim, true);
    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCancelling, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingDisintegrateCast_Init () {
    libGDHL_gt_HeroLiMingDisintegrateCast = TriggerCreate("libGDHL_gt_HeroLiMingDisintegrateCast_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCast, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLiMingDisintegrateCast, null, "LiMingDisintegrate@Controller", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLiMingDisintegrateCast, null, "LiMingArchonPurePowerDisintegrate@ControllerBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Disintegrate Aim
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingDisintegrateAim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroLiMingDisintegrateActive[lv_player] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(libGame_gv_players[lv_player].lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingDisintegrateAim_Init () {
    libGDHL_gt_HeroLiMingDisintegrateAim = TriggerCreate("libGDHL_gt_HeroLiMingDisintegrateAim_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateAim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Disintegrate End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingDisintegrateEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    bool lv_aimTriggerEnabled;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoBEAA8A98_g;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroLiMingDisintegrateActive[lv_owner] = false;
    autoBEAA8A98_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBEAA8A98_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGDHL_gv_heroLiMingDisintegrateActive[lv_itPlayer] == true)) {
            lv_aimTriggerEnabled = true;
            break;
        }

    }
    if ((lv_aimTriggerEnabled == false)) {
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateAim, false);
        TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCancelling, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingDisintegrateEnd_Init () {
    libGDHL_gt_HeroLiMingDisintegrateEnd = TriggerCreate("libGDHL_gt_HeroLiMingDisintegrateEnd_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLiMingDisintegrateEnd, null, "LiMingDisintegrate@Controller", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLiMingDisintegrateEnd, null, "LiMingArchonPurePowerDisintegrate@ControllerBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Disintegrate Cancelling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingDisintegrateCancelling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "LiMingDisintegrate@Controller") == true) || (UnitHasBehavior2(EventUnit(), "LiMingArchonPurePowerDisintegrate@ControllerBehavior") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "LiMingDisintegrate@Controller", 1);
    UnitBehaviorRemove(EventUnit(), "LiMingArchonPurePowerDisintegrate@ControllerBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingDisintegrateCancelling_Init () {
    libGDHL_gt_HeroLiMingDisintegrateCancelling = TriggerCreate("libGDHL_gt_HeroLiMingDisintegrateCancelling_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingDisintegrateCancelling, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroLiMingDisintegrateCancelling, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li-Ming - Temporal Flux
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiMingTemporalFlux_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterUnit;
    int lv_casterUnitOwner;
    unit lv_targetUnit;
    int lv_unitStatus;

    // Automatic Variable Declarations
    fixed auto577A4AE3_at;

    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterUnitOwner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_unitStatus = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_targetUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/LiMingStacksFrameContainer/TemporalFluxStacksFrame", lv_targetUnit);
    lv_unitStatus = DialogControlLastCreated();
    if ((EventPlayerEffectUsed() == "LiMingTemporalFlux@AddTrackedUnit")) {
        DialogControlSetVisible(lv_unitStatus, libCore_gv_playerGroupFromPlayer[lv_casterUnitOwner], true);
    }
    else if ((EventPlayerEffectUsed() == "LiMingTemporalFlux@RemoveTrackedUnit")) {
        DialogControlSetVisible(lv_unitStatus, libCore_gv_playerGroupFromPlayer[lv_casterUnitOwner], false);
        return true;
    }
    auto577A4AE3_at = 0;
    while (!(((UnitIsValid(lv_casterUnit) == false) || (UnitGroupHasUnit(UnitGetTrackedUnitGroup(lv_casterUnit, "LiMingTemporalFlux@UnitTracker"), lv_targetUnit) == false))) && auto577A4AE3_at <= 10.0) {
        Wait(0.125, c_timeGame);
        auto577A4AE3_at = auto577A4AE3_at + 0.125;
    }
    DialogControlSetVisible(lv_unitStatus, libCore_gv_playerGroupFromPlayer[lv_casterUnitOwner], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiMingTemporalFlux_Init () {
    libGDHL_gt_HeroLiMingTemporalFlux = TriggerCreate("libGDHL_gt_HeroLiMingTemporalFlux_Func");
    TriggerEnable(libGDHL_gt_HeroLiMingTemporalFlux, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiMingTemporalFlux, c_playerAny, "LiMingTemporalFlux@AddTrackedUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiMingTemporalFlux, c_playerAny, "LiMingTemporalFlux@RemoveTrackedUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroMalfurionHeroCount -= 1;
    if ((libGDHL_gv_heroMalfurionHeroCount < 0)) {
        libGDHL_gv_heroMalfurionHeroCount = 0;
    }

    if ((libGDHL_gv_heroMalfurionHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroMalfurionInnervate, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionRegrowth, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionRejuvenation, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionWildGrowth, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionTranquilityArmor, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionCelestialAlignment, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionHeroCountDecrement_Init () {
    libGDHL_gt_HeroMalfurionHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroMalfurionHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroMalfurionHeroCount += 1;
    if ((libGDHL_gv_heroMalfurionHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroMalfurionInnervate, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionRegrowth, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionRejuvenation, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionWildGrowth, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionTranquilityArmor, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionCelestialAlignment, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionHeroCountIncrement_Init () {
    libGDHL_gt_HeroMalfurionHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroMalfurionHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Innervate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionInnervate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cDR;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cDR = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroMalfurionInnervate"), "Period", c_playerAny);
    lv_cDR *= libGDHL_gv_heroMalfurionInnervate;
    libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities(EventPlayerEffectUsedUnit(c_effectUnitTarget), (-lv_cDR), false, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionInnervate_Init () {
    libGDHL_gt_HeroMalfurionInnervate = TriggerCreate("libGDHL_gt_HeroMalfurionInnervate_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionInnervate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionInnervate, c_playerAny, "HeroMalfurionInnervate@ModifyUnitDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Regrowth
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionRegrowth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_keyCurrent;
    unit lv_target;
    unit lv_caster;
    int lv_player;
    fixed lv_durationMax;
    fixed lv_durationCurrent;
    int lv_progressBar;
    int lv_visibilityDialogItem;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_keyCurrent = "";
    lv_progressBar = c_invalidDialogControlId;
    lv_visibilityDialogItem = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_caster);
    lv_keyCurrent = ("MalfurionRegrowthCurrent_Player" + IntToString(lv_player));
    lv_durationMax = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionRegrowth@MaxDurationNormal"), "Amount", lv_player);
    if ((EventPlayerEffectUsed() == "HeroMalfurionRegrowth@ApplyBehavior")) {
        lv_durationCurrent = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionRegrowth@MaxDurationNormal"), "Amount", lv_player);
    }
    else if ((EventPlayerEffectUsed() == "HeroMalfurionRejuvenation@ApplyCasterRegrowthBehavior")) {
        lv_durationCurrent = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionRegrowth@MaxDurationRejuvenation"), "Amount", lv_player);
    }
    if ((libGame_gf_UnitStatsGetUserDataFromUnit(lv_keyCurrent, lv_target) > 0.0)) {
        libGame_gf_UnitStatsStoreUserDataToUnit(lv_target, lv_keyCurrent, lv_durationCurrent);
        DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame\\HeroSpecificStackingBuffsPanel\\MalfurionStacksFrameContainer\\RegrowthStatusFrame\\RegrowthStatusBase\\RegrowthStatusCountdownFrame\\CooldownBar", lv_target);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), lv_durationMax, libCore_gv_playerGroupFromPlayer[lv_player]);
        return true;
    }
    else {
        DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame\\HeroSpecificStackingBuffsPanel\\MalfurionStacksFrameContainer", lv_target);
        lv_visibilityDialogItem = DialogControlLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame\\HeroSpecificStackingBuffsPanel\\MalfurionStacksFrameContainer\\RegrowthStatusFrame\\RegrowthStatusBase\\RegrowthStatusCountdownFrame\\CooldownBar", lv_target);
        lv_progressBar = DialogControlLastCreated();
        libNtve_gf_SetDialogItemMaximumValue(lv_progressBar, lv_durationMax, libCore_gv_playerGroupFromPlayer[lv_player]);
        libGame_gf_UnitStatsStoreUserDataToUnit(lv_target, lv_keyCurrent, lv_durationCurrent);
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, lv_durationCurrent, libCore_gv_playerGroupFromPlayer[lv_player]);
        DialogControlSetVisible(lv_visibilityDialogItem, libCore_gv_playerGroupFromPlayer[lv_player], true);
    }
    while ((UnitHasBehavior2(lv_target, "HeroMalfurionRegrowth") == true) && (lv_durationCurrent > 0.0) && (UnitIsValid(lv_target) == true) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, lv_target) == false)) {
        Wait(0.0625, c_timeGame);
        if ((libCore_gf_ExecuteValidatorOnUnit("TargetIsTimeStopped", lv_target, lv_target) == false)) {
            lv_durationCurrent = libGame_gf_UnitStatsGetUserDataFromUnit(lv_keyCurrent, lv_target);
            lv_durationCurrent -= 0.0625;
            libGame_gf_UnitStatsStoreUserDataToUnit(lv_target, lv_keyCurrent, lv_durationCurrent);
            libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, lv_durationCurrent, libCore_gv_playerGroupFromPlayer[lv_player]);
        }

    }
    if ((UnitIsValid(lv_target) == true)) {
        UnitCreateEffectUnit(lv_caster, "HeroMalfurionRegrowth@RemoveBehavior", lv_target);
        DialogControlSetVisible(lv_visibilityDialogItem, libCore_gv_playerGroupFromPlayer[lv_player], false);
        libGame_gf_UnitStatsStoreUserDataToUnit(lv_target, lv_keyCurrent, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionRegrowth_Init () {
    libGDHL_gt_HeroMalfurionRegrowth = TriggerCreate("libGDHL_gt_HeroMalfurionRegrowth_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionRegrowth, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionRegrowth, c_playerAny, "HeroMalfurionRegrowth@ApplyBehavior");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionRegrowth, c_playerAny, "HeroMalfurionRejuvenation@ApplyCasterRegrowthBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Tranquility Armor
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionTranquilityArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), EventUnitBehavior(), UnitBehaviorDuration(lv_caster, "HeroMalfurionTranquility"));
    libGame_gf_UnitStatusUpdate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionTranquilityArmor_Init () {
    libGDHL_gt_HeroMalfurionTranquilityArmor = TriggerCreate("libGDHL_gt_HeroMalfurionTranquilityArmor_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionTranquilityArmor, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTranquilityArmor, null, "HeroMalfurionTranquility@ArmorBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Entangling Roots - Vengeful Roots (Treant Spawned)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_SummonedAIInitialAttackLogic(false, EventUnit(), libGame_gv_players[EventPlayer()].lv_heroUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned_Init () {
    libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned = TriggerCreate("libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned, null, "HeroMalfurionTreant@TimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Rejuvenation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionRejuvenation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_malfurionUnit;
    string lv_keyCurrent;
    int lv_player;
    fixed lv_durationCurrent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_keyCurrent = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_malfurionUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_malfurionUnit);
    lv_keyCurrent = ("MalfurionRegrowthCurrent_Player" + IntToString(lv_player));
    lv_durationCurrent = libGame_gf_UnitStatsGetUserDataFromUnit(lv_keyCurrent, lv_malfurionUnit);
    if ((lv_durationCurrent < libGDHL_gv_heroMalfurionRejuvenation)) {
        UnitCreateEffectUnit(lv_malfurionUnit, "HeroMalfurionRejuvenation@ApplySet", lv_malfurionUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionRejuvenation_Init () {
    libGDHL_gt_HeroMalfurionRejuvenation = TriggerCreate("libGDHL_gt_HeroMalfurionRejuvenation_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionRejuvenation, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionRejuvenation, c_playerAny, "HeroMalfurionRejuvenation@DummyTriggerModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Wild Growth
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionWildGrowth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    string lv_keyCurrent;
    int lv_player;
    fixed lv_durationCurrent;
    fixed lv_durationMax;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_keyCurrent = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_keyCurrent = ("MalfurionRegrowthCurrent_Player" + IntToString(lv_player));
    lv_durationMax = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAccumulator, ("HeroMalfurionRegrowth@MaxDurationNormal"), "Amount", lv_player);
    lv_durationCurrent = libGame_gf_UnitStatsGetUserDataFromUnit(lv_keyCurrent, lv_target);
    lv_durationCurrent += libGDHL_gv_heroMalfurionWildGrowth;
    lv_durationCurrent = libNtve_gf_ArithmeticRealClamp(lv_durationCurrent, 0.0, lv_durationMax);
    libGame_gf_UnitStatsStoreUserDataToUnit(lv_target, lv_keyCurrent, lv_durationCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionWildGrowth_Init () {
    libGDHL_gt_HeroMalfurionWildGrowth = TriggerCreate("libGDHL_gt_HeroMalfurionWildGrowth_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionWildGrowth, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionWildGrowth, c_playerAny, "HeroMalfurionWildGrowth@TriggerSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Celestial Alignment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionCelestialAlignment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoCB346199_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB346199_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCB346199_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerHasTalent(lv_itPlayer, "HeroMalfurionCelestialAlignment") == true)) {
            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "HeroMalfurionCelestialAlignment@CarryBehavior", "Modification.AdditiveAttackSpeedFactor", lv_itPlayer, 0.0, c_upgradeOperationAdd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionCelestialAlignment_Init () {
    libGDHL_gt_HeroMalfurionCelestialAlignment = TriggerCreate("libGDHL_gt_HeroMalfurionCelestialAlignment_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionCelestialAlignment, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroMalfurionCelestialAlignment, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroMuradinHeroCount += 1;
    if ((libGDHL_gv_heroMuradinHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, true);
        TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, true);
        TriggerEnable(libGDHL_gt_HeroMuradinStormBoltLevelUp, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHeroCountIncrement_Init () {
    libGDHL_gt_HeroMuradinHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroMuradinHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroMuradinHeroCount += 1;
    if ((libGDHL_gv_heroMuradinHeroCount < 0)) {
        libGDHL_gv_heroMuradinHeroCount = 0;
    }

    if ((libGDHL_gv_heroMuradinHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, false);
        TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, false);
        TriggerEnable(libGDHL_gt_HeroMuradinStormBoltLevelUp, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHeroCountDecrement_Init () {
    libGDHL_gt_HeroMuradinHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroMuradinHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Dwarf Toss
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinDwarfToss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_actualTargetPoint;
    bool lv_minDistanceChecked;
    fixed lv_modifiedDistance;
    bool lv_maxDistanceChecked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradinRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "Radius", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, ("MuradinDwarfToss@RangeSplat"), "Scale", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) + lv_muradinRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromMuradinToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint);
    if ((lv_distanceFromMuradinToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), (lv_abilityRange + lv_muradinRadius), lv_playerTargetPoint);
        lv_distanceFromMuradinToPlayerTargetPoint = lv_abilityRange;
    }
    else {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), (lv_muradinRadius + lv_distanceFromMuradinToPlayerTargetPoint), lv_playerTargetPoint);
    }
    while ((UnitTypePlacementFromPoint(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayer(), lv_actualTargetPoint, 1.5) == null)) {
        lv_modifiedDistance += 0.125;
        if ((lv_maxDistanceChecked == false)) {
            if (((lv_distanceFromMuradinToPlayerTargetPoint + lv_modifiedDistance) <= lv_abilityRange)) {
                lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), (lv_distanceFromMuradinToPlayerTargetPoint + lv_muradinRadius + lv_modifiedDistance), lv_playerTargetPoint);
            }
            else {
                lv_maxDistanceChecked = true;
            }
        }

        if ((lv_minDistanceChecked == false) && (UnitTypePlacementFromPoint(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayer(), lv_actualTargetPoint, 1.5) == null)) {
            if (((lv_distanceFromMuradinToPlayerTargetPoint - lv_modifiedDistance) > (lv_muradinRadius + 0.125))) {
                lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), ((lv_distanceFromMuradinToPlayerTargetPoint + lv_muradinRadius) - lv_modifiedDistance), lv_playerTargetPoint);
            }
            else {
                lv_minDistanceChecked = true;
            }
        }

        if ((lv_minDistanceChecked == true) && (lv_maxDistanceChecked == true)) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/lib_GDHL_0317EF78"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MuradinDwarfToss", 1);
            UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MuradinDwarfToss", 0), c_spendLocationAll);
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MuradinDwarfToss", "Cost[0].Vital[2]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)))));
            return true;
        }

    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MuradinDwarfToss@DistanceSwitch", lv_actualTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinDwarfToss_Init () {
    libGDHL_gt_HeroMuradinDwarfToss = TriggerCreate("libGDHL_gt_HeroMuradinDwarfToss_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinDwarfToss, c_playerAny, "MuradinDwarfToss@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Haymaker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHaymaker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_muradin;
    fixed lv_abilityRange;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGDHL_gv_heroMuradinHaymakerLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_abilityRange, UnitGetPosition(lv_muradin));
    lv_modifiedDistance = (lv_abilityRange + 0.0);
    lv_actualTargetPoint = lv_targetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance += 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_modifiedDistance, UnitGetPosition(lv_muradin));
        if ((lv_modifiedDistance >= libGDHL_gv_heroMuradinHaymakerCutoffDistance)) {
            return true;
        }

    }
    if ((UnitBehaviorCount(lv_targetUnit, "Dead") == 0)) {
        UnitCreateEffectPoint(lv_targetUnit, "MuradinHaymaker@LaunchTarget", lv_actualTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHaymaker_Init () {
    libGDHL_gt_HeroMuradinHaymaker = TriggerCreate("libGDHL_gt_HeroMuradinHaymaker_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinHaymaker, c_playerAny, "MuradinHaymaker@ImpactDelayPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Storm Bolt (Level Up)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinStormBoltLevelUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(libGame_gf_HeroLevelUpPlayer()) == "Muradin"))) {
            return false;
        }

        if (!((libGame_gf_HeroLevelUpLevel() == libGDHL_gv_heroMuradinStormBoltRequiredLevel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[libGame_gf_HeroLevelUpPlayer()].lv_heroUnit, "MuradinStormbolt@TokenCountIncrement", libGame_gv_players[libGame_gf_HeroLevelUpPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinStormBoltLevelUp_Init () {
    libGDHL_gt_HeroMuradinStormBoltLevelUp = TriggerCreate("libGDHL_gt_HeroMuradinStormBoltLevelUp_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinStormBoltLevelUp, false);
    libGame_gf_HeroLevelUp(libGDHL_gt_HeroMuradinStormBoltLevelUp);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosHeroCount += 1;
    if ((libGDHL_gv_heroRagnarosHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCast, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreEnd, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosSulfurasSmash, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosLavaWavePointTarget, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosRaidTime, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosFlamesofSulfurion, true);
        TriggerEnable(libGDHL_gt_HeroRagnarosFirelordsFury, true);
        libGDHL_gf_HeroRagnarosShiftingMeteorInitialization();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosHeroCountIncrement_Init () {
    libGDHL_gt_HeroRagnarosHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroRagnarosHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosHeroCount -= 1;
    if ((libGDHL_gv_heroRagnarosHeroCount < 0)) {
        libGDHL_gv_heroRagnarosHeroCount = 0;
    }

    if ((libGDHL_gv_heroRagnarosHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCast, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreEnd, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosSulfurasSmash, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosLavaWavePointTarget, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosRaidTime, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosFlamesofSulfurion, false);
        TriggerEnable(libGDHL_gt_HeroRagnarosFirelordsFury, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosHeroCountDecrement_Init () {
    libGDHL_gt_HeroRagnarosHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroRagnarosHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor Dummy First Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = OrderTargetingPoint(AbilityCommand("RagnarosLivingMeteorHawkVector@Drag2", 0), UnitGroupCenterOfGroup(UnitGroupSelected(EventPlayer())));

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosUnitGroup[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[EventPlayer()].lv_heroUnit);
    Wait(0.0, c_timeGame);
    if ((TechTreeUnitCount(EventPlayer(), "RagnarosLivingMeteorHawkVector@StartVectorUnit", c_techCountCompleteOnly) > 0)) {
        UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libGDHL_gv_heroRagnarosUnitGroup[EventPlayer()], lv_order, false);
        libGDHL_gv_heroRagnarosTargeting[EventPlayer()] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast, c_playerAny, "RagnarosLivingMeteorHawkVector@FirstCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor Dummy Second Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosTargeting[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast, c_playerAny, "RagnarosLivingMeteorHawkVector@SecondCastSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast, c_playerAny, "RagnarosLivingMeteorHawkVector@SecondCastSetQueue");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor Target Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorTargetOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroRagnarosTargeting[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    if ((libGDHL_gv_heroRagnarosTargeting[EventPlayer()] == true)) {
        UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "RagnarosLivingMeteorHawkVector@CleanupSet", libGame_gv_players[EventPlayer()].lv_heroUnit);
        libGDHL_gv_heroRagnarosTargeting[EventPlayer()] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorTargetOff_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorTargetOff = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorTargetOff_Func");
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosLivingMeteorTargetOff, c_playerAny, AbilityCommand("RagnarosLivingMeteorHawkVector@Drag2", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor Queue Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorQueueCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitOrder(EventUnit(), 0) != EventUnitOrder()))) {
            return false;
        }

        if (!((UnitOrder(EventUnit(), 0) != null))) {
            return false;
        }

        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "RagnarosLivingMeteorHawkVector@CancelOrder", EventUnit());
    UnitCreateEffectUnit(EventUnit(), "RagnarosLivingMeteorHawkVector@CancelOrder2", EventUnit());
    UnitCreateEffectPoint(EventUnit(), "RagnarosLivingMeteorHawkVector@SwitchQueue", OrderGetTargetPoint(EventUnitOrder()));
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libGDHL_gv_heroRagnarosUnitGroup[EventPlayer()], null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorQueueCast_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorQueueCast = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorQueueCast_Func");
    TriggerAddEventUnitOrder(libGDHL_gt_HeroRagnarosLivingMeteorQueueCast, null, AbilityCommand("RagnarosLivingMeteorHawkVector@Drag2", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Dummy First Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = OrderTargetingPoint(AbilityCommand("RagnarosMoltenCoreMeteorShowerHawkVector@Drag2", 0), UnitGroupCenterOfGroup(UnitGroupSelected(EventPlayer())));

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_bigRagUnitGroup[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(libGDHL_gv_ragnarosMoltenCoreUnit[EventPlayer()]);
    Wait(0.0, c_timeGame);
    if ((TechTreeUnitCount(EventPlayer(), "RagnarosMoltenCoreMeteorShowerHawkVector@StartVectorUnit", c_techCountCompleteOnly) > 0)) {
        UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libGDHL_gv_bigRagUnitGroup[EventPlayer()], lv_order, false);
        libGDHL_gv_bigRagPlayerTargeting[EventPlayer()] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast, c_playerAny, "RagnarosMoltenCoreMeteorShowerHawkVector@FirstCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Dummy Second Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_bigRagPlayerTargeting[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast, c_playerAny, "RagnarosMoltenCoreMeteorShowerHawkVector@SecondCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Target Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_bigRagPlayerTargeting[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    if ((libGDHL_gv_bigRagPlayerTargeting[EventPlayer()] == true)) {
        UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "RagnarosMoltenCoreMeteorShowerHawkVector@CleanupSet", libGame_gv_players[EventPlayer()].lv_heroUnit);
        libGDHL_gv_bigRagPlayerTargeting[EventPlayer()] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff_Func");
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff, c_playerAny, AbilityCommand("RagnarosMoltenCoreMeteorShowerHawkVector@Drag2", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor (Target Mode On)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosLivingMeteorTargetModeIsActive[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn, c_playerAny, AbilityCommand("RagnarosLivingMeteorVector@Drag", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor (Target Mode Off)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosLivingMeteorTargetModeIsActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff, c_playerAny, AbilityCommand("RagnarosLivingMeteorVector@Drag", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Living Meteor (Queue Order Controller)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "RagnarosLivingMeteorVector@CancelOrder", EventUnit());
    UnitCreateEffectPoint(EventUnit(), "RagnarosLivingMeteorVector@InitialSetQueue", OrderGetTargetPosition(EventUnitOrder()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController_Init () {
    libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController = TriggerCreate("libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController, null, AbilityCommand("RagnarosLivingMeteorVector@Drag", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structureRagnarosUnit;
    int lv_ragnarosPlayer;
    unit lv_regularRagnarosUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structureRagnarosUnit = EventUnitCreatedUnit();
    lv_ragnarosPlayer = UnitGetOwner(lv_structureRagnarosUnit);
    lv_regularRagnarosUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerCursorUnit[lv_ragnarosPlayer]);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RagnarosMoltenCoreMeteorShowerVectorNEW@CursorUnit", c_unitCreateIgnorePlacement, lv_ragnarosPlayer, Point(0.0, 0.0));
    libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerCursorUnit[lv_ragnarosPlayer] = UnitLastCreated();
    UnitCreateEffectUnit(lv_structureRagnarosUnit, "RagnarosMoltenCoreMeteorShowerVectorNEW@CreateUnitLinkDummy", libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerCursorUnit[lv_ragnarosPlayer]);
    libGDHL_gv_ragnarosMoltenCoreUnit[lv_ragnarosPlayer] = lv_structureRagnarosUnit;
    UnitSelect(lv_regularRagnarosUnit, lv_ragnarosPlayer, false);
    UnitSelect(lv_structureRagnarosUnit, lv_ragnarosPlayer, true);
    UnitSelect(lv_regularRagnarosUnit, lv_ragnarosPlayer, true);
    libGame_gf_SendEventHeroUnitSwappedForPlayer(lv_regularRagnarosUnit, lv_structureRagnarosUnit, lv_ragnarosPlayer);
    libGame_gv_players[lv_ragnarosPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_structureRagnarosUnit);
    libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle = lv_structureRagnarosUnit;
    libGame_gf_CameraSetCameraDataForPlayer(lv_ragnarosPlayer, libGame_ge_CameraType_Advanced, 0.5);
    libGame_gf_CameraUpdateCameraForPlayer(lv_ragnarosPlayer);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_structureRagnarosUnit, lv_ragnarosPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_structureRagnarosUnit, lv_ragnarosPlayer);
    if ((UnitHasBehavior2(lv_regularRagnarosUnit, "Ultimate1Unlocked") == true)) {
        UnitBehaviorAdd(lv_structureRagnarosUnit, "Ultimate1Unlocked", lv_structureRagnarosUnit, 1);
    }
    else if ((UnitHasBehavior2(lv_regularRagnarosUnit, "Ultimate2Unlocked") == true)) {
        UnitBehaviorAdd(lv_structureRagnarosUnit, "Ultimate2Unlocked", lv_structureRagnarosUnit, 1);
    }
    libGDHL_gf_HeroRagnarosMoltenCoreUpdateHeroicCooldownsForPlayer(lv_ragnarosPlayer, libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit, libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreCast_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreCast = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreCast_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCast, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroRagnarosMoltenCoreCast, null, "HeroRagnarosMoltenCore", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_regularRagnarosUnit;
    int lv_ragnarosPlayer;
    unit lv_structureRagnarosUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_regularRagnarosUnit = EventUnit();
    lv_ragnarosPlayer = UnitGetOwner(lv_regularRagnarosUnit);
    lv_structureRagnarosUnit = libGDHL_gv_ragnarosMoltenCoreUnit[lv_ragnarosPlayer];

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroRagnarosMoltenCoreUpdateHeroicCooldownsForPlayer(lv_ragnarosPlayer, libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle, libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit);
    UnitRemove(libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerCursorUnit[lv_ragnarosPlayer]);
    libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerCursorUnit[lv_ragnarosPlayer] = null;
    UnitCreateEffectUnit(lv_regularRagnarosUnit, "RagnarosMoltenCoreMeteorShowerVectorNEW@FindVectorUnitToRemove", lv_regularRagnarosUnit);
    libGDHL_gv_ragnarosMoltenCoreUnit[lv_ragnarosPlayer] = null;
    UnitSelect(lv_regularRagnarosUnit, lv_ragnarosPlayer, true);
    libGame_gv_players[lv_ragnarosPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_regularRagnarosUnit);
    libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle = null;
    libGame_gf_SendEventHeroUnitSwappedForPlayer(lv_structureRagnarosUnit, lv_regularRagnarosUnit, lv_ragnarosPlayer);
    libGame_gf_CameraSetCameraDataForPlayer(lv_ragnarosPlayer, libGame_ge_CameraType_Default, 0.5);
    libGame_gf_CameraUpdateCameraForPlayer(lv_ragnarosPlayer);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_ragnarosPlayer, UnitGetPosition(lv_regularRagnarosUnit), 0.0, -1, 0.0, false);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_regularRagnarosUnit, lv_ragnarosPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_regularRagnarosUnit, lv_ragnarosPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreEnd_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreEnd = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreEnd_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreEnd, null, "HeroRagnarosMoltenCore@CasterStasis", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Update Duration Bar
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bigRagnarosUnit;
    int lv_ragnarosPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bigRagnarosUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(lv_bigRagnarosUnit, "HeroRagnarosMoltenCore@Duration", (UnitGetPropertyFixed(lv_bigRagnarosUnit, c_unitPropLifeMax, c_unitPropCurrent) / AbsF(UnitGetPropertyFixed(lv_bigRagnarosUnit, c_unitPropLifeRegen, c_unitPropCurrent))));
    while ((UnitIsAlive(lv_bigRagnarosUnit) == true)) {
        UnitBehaviorSetDurationRemaining(lv_bigRagnarosUnit, "HeroRagnarosMoltenCore@Duration", ((UnitGetPropertyFixed(lv_bigRagnarosUnit, c_unitPropLifeMax, c_unitPropCurrent) / AbsF(UnitGetPropertyFixed(lv_bigRagnarosUnit, c_unitPropLifeRegen, c_unitPropCurrent))) * (UnitGetPropertyFixed(lv_bigRagnarosUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0)));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar, null, "HeroRagnarosMoltenCore@Duration", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Fullscreen Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(EventPlayer());
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI\\OverlayRagnarosSummon.SC2Cutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn, null, "HeroRagnarosMoltenCore@CasterStasis", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Fullscreen Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI\\OverlayRagnarosSummon.SC2Cutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff, null, "HeroRagnarosMoltenCore@CasterStasis", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Create Markers
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ragnarosPlayer;
    unit lv_ragnarosUnit;
    int lv_itUnit;
    unit lv_townHall;

    // Automatic Variable Declarations
    int auto26507FB5_ae;
    const int auto26507FB5_ai = 1;

    // Variable Initialization
    lv_ragnarosPlayer = EventPlayer();
    lv_ragnarosUnit = libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    auto26507FB5_ae = libGame_gv_townTownCount;
    lv_itUnit = 1;
    for ( ; ( (auto26507FB5_ai >= 0 && lv_itUnit <= auto26507FB5_ae) || (auto26507FB5_ai < 0 && lv_itUnit >= auto26507FB5_ae) ) ; lv_itUnit += auto26507FB5_ai ) {
        if ((libGame_gv_townTownData[lv_itUnit].lv_townHallIndex != -1)) {
            lv_townHall = libGame_gv_townTownData[lv_itUnit].lv_structureUnits[libGame_gv_townTownData[lv_itUnit].lv_townHallIndex];
            if (((UnitFilterMatch(lv_townHall, lv_ragnarosPlayer, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_townHall, lv_ragnarosPlayer, UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
                UnitCreateEffectUnit(lv_ragnarosUnit, "HeroRagnarosMoltenCore@CreateMarkerTriggerEffect", lv_townHall);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers, c_playerAny, AbilityCommand("HeroRagnarosMoltenCore", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Destroy Markers
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ragnarosPlayer;
    unit lv_ragnarosUnit;
    int lv_itUnit;
    unit lv_townHall;

    // Automatic Variable Declarations
    int auto909A0BB1_ae;
    const int auto909A0BB1_ai = 1;

    // Variable Initialization
    lv_ragnarosPlayer = EventPlayer();
    lv_ragnarosUnit = libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    auto909A0BB1_ae = libGame_gv_townTownCount;
    lv_itUnit = 1;
    for ( ; ( (auto909A0BB1_ai >= 0 && lv_itUnit <= auto909A0BB1_ae) || (auto909A0BB1_ai < 0 && lv_itUnit >= auto909A0BB1_ae) ) ; lv_itUnit += auto909A0BB1_ai ) {
        if ((libGame_gv_townTownData[lv_itUnit].lv_townHallIndex != -1)) {
            lv_townHall = libGame_gv_townTownData[lv_itUnit].lv_structureUnits[libGame_gv_townTownData[lv_itUnit].lv_townHallIndex];
            if (((UnitFilterMatch(lv_townHall, lv_ragnarosPlayer, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_townHall, lv_ragnarosPlayer, UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
                UnitCreateEffectUnit(lv_ragnarosUnit, "HeroRagnarosMoltenCore@DestroyMarkerTriggerEffect", lv_townHall);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers, c_playerAny, AbilityCommand("HeroRagnarosMoltenCore", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Health Globe Redirect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ragnarosPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ragnarosPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroRagnarosMoltenCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit, "RegenGlobeImpactSet", libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core - Gains Heroic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRagnaros"))) {
            return false;
        }

        if (!((libGDHL_gv_ragnarosMoltenCoreUnit[lv_owner] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitBehaviorAdd(libGDHL_gv_ragnarosMoltenCoreUnit[lv_owner], EventUnitBehavior(), libGDHL_gv_ragnarosMoltenCoreUnit[lv_owner], 1);
    }
    else {
        UnitBehaviorRemove(libGDHL_gv_ragnarosMoltenCoreUnit[lv_owner], EventUnitBehavior(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, null, "Ultimate1Unlocked", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, null, "Ultimate1Unlocked", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, null, "Ultimate2Unlocked", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic, null, "Ultimate2Unlocked", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Target Mode On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerTargetModeIsActive[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn, c_playerAny, AbilityCommand("RagnarosMoltenCoreMeteorShowerVectorNEW@Drag", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Target Mode Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRagnarosMoltenCoreMeteorShowerTargetModeIsActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff, c_playerAny, AbilityCommand("RagnarosMoltenCoreMeteorShowerVectorNEW@Drag", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Molten Core (Meteor Shower) Queue Order Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "RagnarosMoltenCoreMeteorShowerVectorNEW@CancelOrder", EventUnit());
    UnitCreateEffectPoint(EventUnit(), "RagnarosMoltenCoreMeteorShowerVectorNEW@InitialSetQueue", OrderGetTargetPosition(EventUnitOrder()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController_Init () {
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController = TriggerCreate("libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController, null, AbilityCommand("RagnarosMoltenCoreMeteorShowerVectorNEW@Drag", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Lava Wave Point Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosLavaWavePointTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_castingUnit;
    int lv_targetLane;
    point lv_targetPoint;
    int lv_unitCounter;
    const int lv_numUnitsPerLane = 1;
    int lv_ragnarosPlayer;
    unit lv_itUnit;
    unit lv_ragnarosUnit;
    int lv_ragnarosPlayer2;
    int lv_itPoint;
    int lv_firstWaypoint_Order;
    int lv_firstWaypoint_Chaos;
    int lv_lastWaypoint_Order;
    int lv_lastWaypoint_Chaos;

    // Automatic Variable Declarations
    const int auto9BE9D413_ae = lv_numUnitsPerLane;
    const int auto9BE9D413_ai = 1;
    int autoA33360B1_val;

    // Variable Initialization
    lv_castingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_ragnarosPlayer = UnitGetOwner(lv_castingUnit);
    lv_ragnarosPlayer2 = UnitGetOwner(lv_castingUnit);
    lv_firstWaypoint_Order = 2;
    lv_lastWaypoint_Chaos = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_castingUnit) == "HeroRagnarosMoltenCore")) {
        libGDHL_gf_HeroRagnarosMoltenCoreUpdateHeroicCooldownsForPlayer(lv_ragnarosPlayer, libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle, libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit);
    }

    lv_targetLane = AILaneWaypointGetClosestLane(lv_targetPoint);
    lv_unitCounter = 1;
    for ( ; ( (auto9BE9D413_ai >= 0 && lv_unitCounter <= auto9BE9D413_ae) || (auto9BE9D413_ai < 0 && lv_unitCounter >= auto9BE9D413_ae) ) ; lv_unitCounter += auto9BE9D413_ai ) {
        autoA33360B1_val = libGame_gf_TeamNumberOfPlayer(lv_ragnarosPlayer);
        if (autoA33360B1_val == libGame_gv_teamOrderIndex_C) {
            lv_lastWaypoint_Order = (libGame_gv_laneData[lv_targetLane].lv_waypointCount - 1);
            libNtve_gf_UnitCreateFacingPoint(1, "HeroRagnarosLavaWave@LaneUnit", 0, lv_ragnarosPlayer, libGame_gv_laneData[lv_targetLane].lv_waypoints[lv_firstWaypoint_Order], libGame_gv_laneData[lv_targetLane].lv_waypoints[(lv_firstWaypoint_Order + 1)]);
            lv_itUnit = UnitLastCreated();
            UnitCreateEffectUnit(lv_castingUnit, "HeroRagnarosLavaWave@ApplyDamageBehavior", lv_itUnit);
            lv_lastWaypoint_Order = (libGame_gv_laneData[lv_targetLane].lv_waypointCount - 1);
            libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI(lv_ragnarosPlayer, libGame_gv_teamOrderIndex_C, 1, lv_itUnit, lv_targetLane, lv_firstWaypoint_Order, lv_lastWaypoint_Order);
        }
        else if (autoA33360B1_val == libGame_gv_teamChaosIndex_C) {
            lv_firstWaypoint_Chaos = (libGame_gv_laneData[lv_targetLane].lv_waypointCount - 1);
            libNtve_gf_UnitCreateFacingPoint(1, "HeroRagnarosLavaWave@LaneUnit", 0, lv_ragnarosPlayer, libGame_gv_laneData[lv_targetLane].lv_waypoints[lv_firstWaypoint_Chaos], libGame_gv_laneData[lv_targetLane].lv_waypoints[(lv_firstWaypoint_Chaos - 1)]);
            lv_itUnit = UnitLastCreated();
            UnitCreateEffectUnit(lv_castingUnit, "HeroRagnarosLavaWave@ApplyDamageBehavior", lv_itUnit);
            lv_firstWaypoint_Chaos = (libGame_gv_laneData[lv_targetLane].lv_waypointCount - 1);
            libGDHL_gf_HeroRagnarosLavaWaveLaneUnitAI(lv_ragnarosPlayer, libGame_gv_teamChaosIndex_C, -1, lv_itUnit, lv_targetLane, lv_firstWaypoint_Chaos, lv_lastWaypoint_Chaos);
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosLavaWavePointTarget_Init () {
    libGDHL_gt_HeroRagnarosLavaWavePointTarget = TriggerCreate("libGDHL_gt_HeroRagnarosLavaWavePointTarget_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosLavaWavePointTarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosLavaWavePointTarget, c_playerAny, "HeroRagnarosLavaWave@TargetPoint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Sulfuras Smash
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosSulfurasSmash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_castingUnit;
    int lv_ragnarosPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_castingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_ragnarosPlayer = UnitGetOwner(lv_castingUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_castingUnit) == "HeroRagnarosMoltenCore")) {
        libGDHL_gf_HeroRagnarosMoltenCoreUpdateHeroicCooldownsForPlayer(lv_ragnarosPlayer, libGame_gv_players[lv_ragnarosPlayer].lv_activeVehicle, libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosSulfurasSmash_Init () {
    libGDHL_gt_HeroRagnarosSulfurasSmash = TriggerCreate("libGDHL_gt_HeroRagnarosSulfurasSmash_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosSulfurasSmash, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosSulfurasSmash, c_playerAny, "HeroRagnarosSulfurasSmash@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Raid Time
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosRaidTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", libGame_gf_HeroParticipatedInNPCTakedownMinion(), libGame_gf_HeroParticipatedInNPCTakedownMinion()) == true))) {
            return false;
        }

        if (!((libGame_gf_PlayerHero(lv_player) == "Ragnaros"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "HeroRagnarosRaidTime") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_player].lv_heroUnit, "HeroRagnarosRaidTime@ModifyUnit", libGame_gv_players[lv_player].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosRaidTime_Init () {
    libGDHL_gt_HeroRagnarosRaidTime = TriggerCreate("libGDHL_gt_HeroRagnarosRaidTime_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosRaidTime, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroRagnarosRaidTime);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Catching Fire - Health Globe Pickup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ragnarosPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroRagnaros"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ragnarosPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitCreateEffectUnit(libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit, "HeroRagnarosCatchingFire@IncreaseToken", libGame_gv_players[lv_ragnarosPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup_Init () {
    libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup = TriggerCreate("libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Blistering Attacks (Cooldown Reduction)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_duration = UnitBehaviorDuration(lv_caster, "HeroRagnarosBlisteringAttacks@Cooldown");
    lv_duration -= libGDHL_gv_heroRagnarosBlisteringAttacksCooldownReduction;
    UnitBehaviorSetDurationRemaining(lv_caster, "HeroRagnarosBlisteringAttacks@Cooldown", lv_duration);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction_Init () {
    libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction = TriggerCreate("libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction, c_playerAny, "HeroRagnarosBlisteringAttacks@CDRTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Cauterize Wounds Trigger
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ragnaros;
    int lv_owner;
    fixed lv_damageAmount;
    fixed lv_healingValue;
    fixed lv_periodCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "HeroRagnarosEmpowerSulfuras@Damage"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ragnaros = EventUnitDamageSourceUnit();
    if ((UnitIsAlive(lv_ragnaros) == false)) {
        return true;
    }

    lv_owner = UnitGetOwner(lv_ragnaros);
    if ((PlayerHasTalent(lv_owner, "HeroRagnarosCauterizeWounds") == false)) {
        return true;
    }

    lv_healingValue = libCore_gf_CombatCalculateDamageAmount();
    lv_periodCount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroRagnarosCauterizeWounds@HoT"), "PeriodCount", lv_owner);
    lv_healingValue *= libGDHL_gv_heroRagnarosCauterizeWoundsHealingCoefficient;
    lv_healingValue /= lv_periodCount;
    CatalogReferenceModify("Effect,HeroRagnarosCauterizeWounds@HealModifyUnit,VitalArray[Life].Change", lv_owner, FixedToString(lv_healingValue, c_fixedPrecisionAny), c_upgradeOperationSet);
    UnitCreateEffectUnit(lv_ragnaros, "HeroRagnarosCauterizeWounds@ApplyBehavior", lv_ragnaros);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger_Init () {
    libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger = TriggerCreate("libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroRagnarosEmpowerSulfuras@Damage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Flames of Sulfurion
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosFlamesofSulfurion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_localPlayer) == "Ragnaros"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "HeroRagnarosFlamesOfSulfuron") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroRagnarosFlamesOfSulfuron@SetCooldown", libGame_gv_players[lv_localPlayer].lv_heroUnit);
    UnitCreateEffectUnit(libGDHL_gv_ragnarosMoltenCoreUnit[lv_localPlayer], "HeroRagnarosFlamesOfSulfuron@SetCooldown", libGDHL_gv_ragnarosMoltenCoreUnit[lv_localPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosFlamesofSulfurion_Init () {
    libGDHL_gt_HeroRagnarosFlamesofSulfurion = TriggerCreate("libGDHL_gt_HeroRagnarosFlamesofSulfurion_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosFlamesofSulfurion, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroRagnarosFlamesofSulfurion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Submerge Fullscreen Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI\\OverlayRagnarosSubmerge.SC2Cutscene", EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn_Init () {
    libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn = TriggerCreate("libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn, null, "HeroRagnarosSubmerge", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Submerge Fullscreen Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI\\OverlayRagnarosSubmerge.SC2Cutscene", EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff_Init () {
    libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff = TriggerCreate("libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff, null, "HeroRagnarosSubmerge", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Ragnaros - Firelord's Fury
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRagnarosFirelordsFury_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_ragnaros;
    int lv_progressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ragnaros = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/RagnarosStacksFrameContainer/FirelordsFuryStacksFrame/StacksProgressBar", lv_targetUnit);
    lv_progressBar = DialogControlLastCreated();
    if ((libCore_gf_ExecuteValidatorOnUnit("HeroRagnarosFirelordsFury@TargetHasMarkers1", lv_ragnaros, lv_targetUnit) == true)) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 1.0, libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_ragnaros)]);
    }
    else if ((libCore_gf_ExecuteValidatorOnUnit("HeroRagnarosFirelordsFury@TargetHasMarkers2", lv_ragnaros, lv_targetUnit) == true)) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 2.0, libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_ragnaros)]);
    }
    else if (true) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 0.0, libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_ragnaros)]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRagnarosFirelordsFury_Init () {
    libGDHL_gt_HeroRagnarosFirelordsFury = TriggerCreate("libGDHL_gt_HeroRagnarosFirelordsFury_Func");
    TriggerEnable(libGDHL_gt_HeroRagnarosFirelordsFury, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosFirelordsFury, c_playerAny, "HeroRagnarosFirelordsFury@InitialSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosFirelordsFury, c_playerAny, "HeroRagnarosFirelordsFury@RefreshSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRagnarosFirelordsFury, c_playerAny, "HeroRagnarosFirelordsFury@FinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroSelendisHeroCount += 1;
    if ((libGDHL_gv_heroSelendisHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, true);
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown, true);
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushRestoreHeight, true);
        TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion, true);
        TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero, true);
        TriggerEnable(libGDHL_gt_HeroSelendisLastStandController, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisHeroCountIncrement_Init () {
    libGDHL_gt_HeroSelendisHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroSelendisHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroSelendisHeroCount -= 1;
    if ((libGDHL_gv_heroSelendisHeroCount < 0)) {
        libGDHL_gv_heroSelendisHeroCount = 0;
    }

    if ((libGDHL_gv_heroSelendisHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, false);
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown, false);
        TriggerEnable(libGDHL_gt_HeroSelendisZealousRushRestoreHeight, false);
        TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion, false);
        TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero, false);
        TriggerEnable(libGDHL_gt_HeroSelendisLastStandController, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisHeroCountDecrement_Init () {
    libGDHL_gt_HeroSelendisHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroSelendisHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Zealous Rush - Restore Height
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisZealousRushRestoreHeight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisZealousRushRestoreHeight_Init () {
    libGDHL_gt_HeroSelendisZealousRushRestoreHeight = TriggerCreate("libGDHL_gt_HeroSelendisZealousRushRestoreHeight_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisZealousRushRestoreHeight, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSelendisZealousRushRestoreHeight, null, "HeroSelendisZealousRush@RushingBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Zealous Rush - UI Controller (Visibility)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_targetUnit;
    int lv_stacksFrameContainer;
    unit lv_selendis;

    // Automatic Variable Declarations
    playergroup autoA9CB2214_g;

    // Variable Initialization
    lv_targetUnit = EventUnit();
    lv_stacksFrameContainer = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_targetUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/SelendisStacksFrameContainer", lv_targetUnit);
    lv_stacksFrameContainer = DialogControlLastCreated();
    autoA9CB2214_g = libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupEnemy, EventPlayer());
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA9CB2214_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroSelendis")) {
            lv_selendis = libGame_gv_players[lv_itPlayer].lv_heroUnit;
        }
        else if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_activeVehicle) == "HeroSelendis")) {
            lv_selendis = libGame_gv_players[lv_itPlayer].lv_activeVehicle;
        }
        else if (true) {
            DialogControlSetAnimationState(lv_stacksFrameContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "Visibility", "Hidden");
            continue;
        }
        if ((libCore_gf_ExecuteValidatorOnUnit("HeroSelendisZealousRush@HasTargetAvailable", lv_selendis, lv_targetUnit) == true)) {
            DialogControlSetAnimationState(lv_stacksFrameContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "Visibility", "ShowAvailability");
        }
        else if ((libCore_gf_ExecuteValidatorOnUnit("HeroSelendisZealousRush@HasTargetCooldown", lv_selendis, lv_targetUnit) == true)) {
            DialogControlSetAnimationState(lv_stacksFrameContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "Visibility", "ShowCooldown");
        }
        else if (true) {
            DialogControlSetAnimationState(lv_stacksFrameContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "Visibility", "Hidden");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility_Init () {
    libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility = TriggerCreate("libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, null, "HeroSelendisZealousRush@TargetAvailable", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, null, "HeroSelendisZealousRush@TargetAvailable", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, null, "HeroSelendisZealousRush@TargetCooldown", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility, null, "HeroSelendisZealousRush@TargetCooldown", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Zealous Rush - UI Controller (Countdown)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_casterUnit;
    int lv_owner;
    int lv_progressBar;
    fixed lv_currentCooldownValue;
    fixed lv_maxCooldownValue;
    string lv_key;
    bool lv_break;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = EventPlayer();
    lv_progressBar = c_invalidDialogControlId;
    lv_key = "";

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_targetUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/SelendisStacksFrameContainer/ZealousRushStatusFrame/ZealousRushStatusBase/ZealousRushStatusCountdownFrame/CooldownBar", lv_targetUnit);
    lv_progressBar = DialogControlLastCreated();
    lv_key = ("HeroSelendisZealousRush_Player" + IntToString(lv_owner));
    lv_maxCooldownValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("HeroSelendisZealousRush@StartCooldown"), "Amount", lv_owner);
    lv_currentCooldownValue = lv_maxCooldownValue;
    libNtve_gf_SetDialogItemMaximumValue(lv_progressBar, lv_maxCooldownValue, libCore_gv_playerGroupFromPlayer[lv_owner]);
    libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, lv_maxCooldownValue, libCore_gv_playerGroupFromPlayer[lv_owner]);
    while ((UnitIsValid(lv_casterUnit) == true) && (UnitIsValid(lv_targetUnit) == true) && (lv_currentCooldownValue > 0.0) && (libCore_gf_ExecuteValidatorOnUnit("HeroSelendisZealousRush@HasTargetCooldown", lv_casterUnit, lv_targetUnit) == true)) {
        Wait(0.0625, c_timeGame);
        lv_currentCooldownValue = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lv_targetUnit);
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, lv_currentCooldownValue, libCore_gv_playerGroupFromPlayer[lv_owner]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown_Init () {
    libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown = TriggerCreate("libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown, c_playerAny, "HeroSelendisZealousRush@ApplyTargetCooldown");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Executor`s Guard - Faith Before Fear (Minion)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_tokenCounter;
    unit lv_minion;
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tokenCounter = "HeroSelendisFaithBeforeFear@TokenCounter";
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    lv_localPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGame_gv_players[lv_localPlayer].lv_heroUnit, lv_tokenCounter) == true))) {
            return false;
        }

        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", lv_minion, lv_minion) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroSelendisFaithBeforeFear@IncreaseToken", lv_minion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion_Init () {
    libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion = TriggerCreate("libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Executor`s Guard - Faith Before Fear (Hero)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_tokenCounter;
    unit lv_hero;
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tokenCounter = "HeroSelendisFaithBeforeFear@TokenCounter";
    lv_hero = libGame_gf_HeroParticipatedInTakedownKilledHero();
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGame_gv_players[lv_localPlayer].lv_heroUnit, lv_tokenCounter) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "HeroSelendisFaithBeforeFear@IncreaseTokenTakedown", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero_Init () {
    libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero = TriggerCreate("libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Selendis - Last Stand - Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSelendisLastStandController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_selendis;
    fixed lv_missingHealthPercent;
    fixed lv_modifier;
    fixed lv_shield;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selendis = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_missingHealthPercent = (100.0 - UnitGetPropertyFixed(lv_selendis, c_unitPropLifePercent, c_unitPropCurrent));
    lv_modifier = (1+(lv_missingHealthPercent*libGDHL_gv_heroSelendisLastStandBonusShieldPercent));
    lv_shield = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("HeroSelendisLastStand@ShieldUIOnly"), "DamageResponse.ModifyLimit", EventPlayer());
    lv_shield = (lv_shield * lv_modifier);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("HeroSelendisLastStand@Shield"), "DamageResponse.ModifyLimit", EventPlayer(), lv_shield);
    UnitBehaviorAdd(lv_selendis, "HeroSelendisLastStand@Shield", lv_selendis, 1);
    lv_cooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, ("HeroSelendisLastStand"), "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer());
    lv_cooldown = (lv_cooldown * lv_modifier);
    UnitModifyCooldown(lv_selendis, "Abil/HeroSelendisLastStand", lv_cooldown, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSelendisLastStandController_Init () {
    libGDHL_gt_HeroSelendisLastStandController = TriggerCreate("libGDHL_gt_HeroSelendisLastStandController_Func");
    TriggerEnable(libGDHL_gt_HeroSelendisLastStandController, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSelendisLastStandController, c_playerAny, "HeroSelendisLastStand@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTalandarHeroCount += 1;
    if ((libGDHL_gv_heroTalandarHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, true);
        TriggerEnable(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, true);
        TriggerEnable(libGDHL_gt_HeroTalandarDeathController, true);
        TriggerEnable(libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup, true);
        TriggerEnable(libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup, true);
        TriggerEnable(libGDHL_gt_HeroTalandarCybrossVengeance, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarHeroCountIncrement_Init () {
    libGDHL_gt_HeroTalandarHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroTalandarHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTalandarHeroCount -= 1;
    if ((libGDHL_gv_heroTalandarHeroCount < 0)) {
        libGDHL_gv_heroTalandarHeroCount = 0;
    }

    if ((libGDHL_gv_heroTalandarHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, false);
        TriggerEnable(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, false);
        TriggerEnable(libGDHL_gt_HeroTalandarDeathController, false);
        TriggerEnable(libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup, false);
        TriggerEnable(libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup, false);
        TriggerEnable(libGDHL_gt_HeroTalandarCybrossVengeance, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarHeroCountDecrement_Init () {
    libGDHL_gt_HeroTalandarHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroTalandarHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Death Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarDeathController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_talandar;
    int lv_talandarPlayer;
    int lv_killingPlayer;
    unit lv_beamUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talandar = EventUnit();
    lv_talandarPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_talandarPlayer) == true))) {
            return false;
        }

        if (!((lv_talandar == libGame_gv_players[lv_talandarPlayer].lv_heroUnit))) {
            return false;
        }

        if (!((libCore_gf_StormUnitIsHallucination(lv_talandar) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_talandar, "HeroTalandarCybrossVengeance@CarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_talandarPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_talandar), null, false);
    libGame_gv_players[lv_talandarPlayer].lv_isDead = true;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_talandar);
    libGame_gf_HeroDeathStartRespawnTimer(lv_talandarPlayer, libCore_gf_HeroDeathTime(lv_talandarPlayer, UnitLevel(lv_talandar)));
    libGame_gf_HeroDeathUpdateUIElementsForDeath(false, false, false, lv_talandarPlayer, lv_killingPlayer);
    UnitBehaviorAdd(lv_talandar, "HeroTalandarCybrossVengeance@ActiveBehavior", lv_talandar, 1);
    UnitBehaviorAdd(lv_talandar, "Dead", lv_talandar, 1);
    UnitBehaviorAdd(lv_talandar, "HeroGenericIgnoreDeathSounds", lv_talandar, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroTalandarCybrossVengeance@BeamUnit", c_unitCreateIgnorePlacement, lv_talandarPlayer, UnitGetPosition(lv_talandar));
    lv_beamUnit = UnitLastCreated();
    UnitBehaviorAdd(lv_beamUnit, "HeroTalandarCybrossVengeance@BeamTimedLife", lv_talandar, 1);
    UnitCreateEffectUnit(lv_talandar, "Summon@CreationSwitch", lv_beamUnit);
    UnitCreateEffectUnit(lv_beamUnit, "HeroTalandarPurification@ApplyWarpInBehavior", lv_beamUnit);
    UnitSelect(lv_beamUnit, lv_talandarPlayer, true);
    UnitSelect(lv_talandar, lv_talandarPlayer, true);
    libGame_gv_players[lv_talandarPlayer].lv_cameraForcedLock = false;
    libGame_gv_players[lv_talandarPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_beamUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_talandarPlayer);
    while ((UnitFilterMatch(lv_talandar, libCore_gv_cOMPUTER_Neutral, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0)) == true) && ((UnitHasBehavior2(lv_beamUnit, "HeroTalandarPurification@CreatingBeamBehavior") == true) || (UnitHasBehavior2(lv_beamUnit, "HeroTalandarPurification") == true))) {
        UnitSetPosition(libGame_gv_players[lv_talandarPlayer].lv_heroUnit, UnitGetPosition(lv_beamUnit), false);
        Wait(0.0625, c_timeGame);
    }
    UnitSelect(lv_beamUnit, lv_talandarPlayer, false);
    UnitBehaviorRemove(lv_talandar, "HeroGenericIgnoreDeathSounds", 1);
    UnitBehaviorRemove(lv_talandar, "HeroTalandarCybrossVengeance@ActiveBehavior", 1);
    UnitBehaviorRemove(lv_beamUnit, "HeroTalandarPurification", 1);
    UnitBehaviorRemove(lv_beamUnit, "HeroTalandarCybrossVengeance@ActiveBehavior", 1);
    UnitBehaviorSetDurationRemaining(lv_beamUnit, "HeroTalandarCybrossVengeance@BeamTimedLife", 1.0);
    UnitIssueOrder(lv_beamUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);

    if ((TimerGetRemaining(libGame_gv_players[lv_talandarPlayer].lv_respawnTimer) <= 0.0)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_talandarPlayer, UnitGetPosition(lv_talandar));
    libGame_gv_players[lv_talandarPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_talandarPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    libGame_gf_CameraUpdateCameraForPlayer(lv_talandarPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_talandarPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_talandarPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_talandarPlayer, libGame_gv_players[lv_talandarPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarDeathController_Init () {
    libGDHL_gt_HeroTalandarDeathController = TriggerCreate("libGDHL_gt_HeroTalandarDeathController_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarDeathController, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroTalandarDeathController, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Cybros's Vengeance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarCybrossVengeance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libGame_gv_players[lv_owner].lv_respawnTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = (libGDHL_gv_heroTalandarCybrossVengeanceTimerReduction * libCore_gf_HeroDeathTime(lv_owner, libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lv_owner].lv_heroUnit)));
    lv_amount *= -1.0;
    libGame_gf_HeroDeathModifyRespawnTimer(lv_owner, lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarCybrossVengeance_Init () {
    libGDHL_gt_HeroTalandarCybrossVengeance = TriggerCreate("libGDHL_gt_HeroTalandarCybrossVengeance_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarCybrossVengeance, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarCybrossVengeance, c_playerAny, "HeroTalandarCybrossVengeance@ReduceDeathTimer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Will of Fenix (Regen Globe Pickup)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroTalandar"))) {
            return false;
        }

        if (!((PlayerHasTalent(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "HeroTalandarWillOfFenix") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroTalandarWillOfFenix@ModifyPlayerCooldown", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup_Init () {
    libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup = TriggerCreate("libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup, c_playerAny, "RegenGlobePickupImpactDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Self Repair (Regen Globe Pickup)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroTalandar"))) {
            return false;
        }

        if (!((PlayerHasTalent(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "HeroTalandarSelfRepair") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroTalandarSelfRepair@IncrementToken", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup_Init () {
    libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup = TriggerCreate("libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup, c_playerAny, "RegenGlobePickupImpactDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - Endless Tempest (Update Marker)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_stacksFrame;

    // Automatic Variable Declarations
    playergroup autoCA475058_g;

    // Variable Initialization
    lv_stacksFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/TalandarStacksFrameContainer/EndlessTempestStacksFrame", EventUnit());
    lv_stacksFrame = DialogControlLastCreated();
    autoCA475058_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCA475058_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        DialogControlSetVisible(lv_stacksFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        if ((libNtve_gf_PlayerIsEnemy(lv_itPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == false)) {
            continue;
        }

        if ((libCore_gf_ExecuteValidatorOnUnit("HeroTalandarEndlessTempest@TargetHasMarkerCasterReq", libGame_gv_players[lv_itPlayer].lv_heroUnit, EventUnit()) == true)) {
            DialogControlSetVisible(lv_stacksFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker_Init () {
    libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker = TriggerCreate("libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, null, "HeroTalandarEndlessTempest@Marker", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, null, "HeroTalandarEndlessTempest@Marker", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker, null, "HeroTalandarEndlessTempest@Marker", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Talandar - The Blade Of Artanis Stack Counter
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_talandar;
    int lv_progressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_talandar = libGame_gv_players[EventPlayer()].lv_heroUnit;
    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "HeroUnitStatusParentFrame/HeroSpecificStackingBuffsPanel/TalandarStacksFrameContainer/TheBladeOfArtanisStacksFrame/StacksProgressBar", lv_targetUnit);
    lv_progressBar = DialogControlLastCreated();
    if ((libCore_gf_ExecuteValidatorOnUnit("HeroTalandarTheBladeOfArtanis@TargetHasTimerCasterReq", lv_talandar, lv_targetUnit) == false)) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 0.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if ((libCore_gf_ExecuteValidatorOnUnit("HeroTalandarTheBladeOfArtanis@TargetHas1StackCasterReq", lv_talandar, lv_targetUnit) == true)) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 1.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else if ((libCore_gf_ExecuteValidatorOnUnit("HeroTalandarTheBladeOfArtanis@TargetHas2StacksCasterReq", lv_talandar, lv_targetUnit) == true)) {
        libNtve_gf_SetDialogItemCurrentValue(lv_progressBar, 2.0, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter_Init () {
    libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter = TriggerCreate("libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter_Func");
    TriggerEnable(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, c_playerAny, "HeroTalandarTheBladeOfArtanis@BehaviorInitialSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, c_playerAny, "HeroTalandarTheBladeOfArtanis@BehaviorRefreshSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter, c_playerAny, "HeroTalandarTheBladeOfArtanis@BehaviorFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTychusHeroCount += 1;
    if ((libGDHL_gv_heroTychusHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroTychusOverkillRetarget, true);
        TriggerEnable(libGDHL_gt_HeroTychusLaserDrillIssueOrder, true);
        TriggerEnable(libGDHL_gt_HeroTychusMasterAssassin, true);
        TriggerEnable(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, true);
        TriggerEnable(libGDHL_gt_HeroTychusHeavensDevilCampCaptured, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusHeroCountIncrement_Init () {
    libGDHL_gt_HeroTychusHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroTychusHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTychusHeroCount -= 1;
    if ((libGDHL_gv_heroTychusHeroCount < 0)) {
        libGDHL_gv_heroTychusHeroCount = 0;
    }

    if ((libGDHL_gv_heroTychusHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroTychusOverkillRetarget, false);
        TriggerEnable(libGDHL_gt_HeroTychusLaserDrillIssueOrder, false);
        TriggerEnable(libGDHL_gt_HeroTychusMasterAssassin, false);
        TriggerEnable(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, false);
        TriggerEnable(libGDHL_gt_HeroTychusHeavensDevilCampCaptured, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusHeroCountDecrement_Init () {
    libGDHL_gt_HeroTychusHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroTychusHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Overkill Retarget
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOverkillRetarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gf_ExecuteValidatorOnUnit("TargetNotDeadAndNoSpecialDeathState", EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusOverkill@RetargetInitialPersistent", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOverkillRetarget_Init () {
    libGDHL_gt_HeroTychusOverkillRetarget = TriggerCreate("libGDHL_gt_HeroTychusOverkillRetarget_Func");
    TriggerEnable(libGDHL_gt_HeroTychusOverkillRetarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusOverkillRetarget, c_playerAny, "TychusOverkill@RetargetDestroyPersistentSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Laser Drill Issue Order
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusLaserDrillIssueOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5DA6D08A_g;
    int auto5DA6D08A_u;
    unit auto5DA6D08A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DA6D08A_g = UnitGroup("TychusLaserDrill", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5DA6D08A_u = UnitGroupCount(auto5DA6D08A_g, c_unitCountAll);
    for (;; auto5DA6D08A_u -= 1) {
        auto5DA6D08A_var = UnitGroupUnitFromEnd(auto5DA6D08A_g, auto5DA6D08A_u);
        if (auto5DA6D08A_var == null) { break; }
        UnitIssueOrder(auto5DA6D08A_var, OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusLaserDrillIssueOrder_Init () {
    libGDHL_gt_HeroTychusLaserDrillIssueOrder = TriggerCreate("libGDHL_gt_HeroTychusLaserDrillIssueOrder_Func");
    TriggerEnable(libGDHL_gt_HeroTychusLaserDrillIssueOrder, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusLaserDrillIssueOrder, c_playerAny, "TychusLaserDrill@AttackOrderCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Master Assassin
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusMasterAssassin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHero(lv_localPlayer) == "Tychus"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_localPlayer, "TychusMasterAssassin") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_localPlayer].lv_heroUnit, "TychusMasterAssassin@IncrementTokenCounter", libGame_gv_players[lv_localPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusMasterAssassin_Init () {
    libGDHL_gt_HeroTychusMasterAssassin = TriggerCreate("libGDHL_gt_HeroTychusMasterAssassin_Func");
    TriggerEnable(libGDHL_gt_HeroTychusMasterAssassin, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroTychusMasterAssassin);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - That's the Stuff (Healing Update)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusThatstheStuffHealingUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnitDamageSourceUnit());

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_owner, "TychusThatsTheStuff") == true))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() == "TychusMinigun@Damage") || (EventUnitDamageEffect() == "TychusTheBiggerTheyAre@MinigunDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = libCore_gf_CombatCalculateDamageAmount();
    CatalogFieldValueModify(c_gameCatalogEffect, ("TychusThatsTheStuff@HealModifyUnit"), "VitalArray[Life].Change", lv_owner, FixedToString(lv_amount, 2), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, ("TychusThatsTheStuff@InstantHealModifyUnit"), "VitalArray[Life].Change", lv_owner, FixedToString(lv_amount, 2), c_upgradeOperationSet);
    UnitCreateEffectUnit(libGame_gv_players[lv_owner].lv_heroUnit, "TychusThatsTheStuff@InstantHealModifyUnit", libGame_gv_players[lv_owner].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusThatstheStuffHealingUpdate_Init () {
    libGDHL_gt_HeroTychusThatstheStuffHealingUpdate = TriggerCreate("libGDHL_gt_HeroTychusThatstheStuffHealingUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusMinigun@Damage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusTheBiggerTheyAre@MinigunDamage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroTychusThatstheStuffHealingUpdate, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Heaven's Devil (Camp Captured)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusHeavensDevilCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto01AE0BE4_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto01AE0BE4_g = libGame_gf_MercCampCapturedCapturingPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto01AE0BE4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerHero(lv_itPlayer) == "Tychus")) {
            UnitCreateEffectUnit(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TychusHeavensDevils@IncrementToken", libGame_gv_players[lv_itPlayer].lv_heroUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusHeavensDevilCampCaptured_Init () {
    libGDHL_gt_HeroTychusHeavensDevilCampCaptured = TriggerCreate("libGDHL_gt_HeroTychusHeavensDevilCampCaptured_Func");
    TriggerEnable(libGDHL_gt_HeroTychusHeavensDevilCampCaptured, false);
    libGame_gf_MercCampCaptured(libGDHL_gt_HeroTychusHeavensDevilCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Hero Count Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeHeroCountIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTyrandeHeroCount += 1;
    if ((libGDHL_gv_heroTyrandeHeroCount == 1)) {
        TriggerEnable(libGDHL_gt_HeroTyrandeSentinel, true);
        TriggerEnable(libGDHL_gt_HeroTyrandeElunesChosen, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeHeroCountIncrement_Init () {
    libGDHL_gt_HeroTyrandeHeroCountIncrement = TriggerCreate("libGDHL_gt_HeroTyrandeHeroCountIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Hero Count Decrement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeHeroCountDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTyrandeHeroCount -= 1;
    if ((libGDHL_gv_heroTyrandeHeroCount < 0)) {
        libGDHL_gv_heroTyrandeHeroCount = 0;
    }

    if ((libGDHL_gv_heroTyrandeHeroCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroTyrandeSentinel, false);
        TriggerEnable(libGDHL_gt_HeroTyrandeElunesChosen, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeHeroCountDecrement_Init () {
    libGDHL_gt_HeroTyrandeHeroCountDecrement = TriggerCreate("libGDHL_gt_HeroTyrandeHeroCountDecrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Sentinel
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeSentinel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_calculatedPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_calculatedPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionEntireMap());
    UnitCreateEffectPoint(EventUnit(), "TyrandeSentinel@LaunchMissile", lv_calculatedPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeSentinel_Init () {
    libGDHL_gt_HeroTyrandeSentinel = TriggerCreate("libGDHL_gt_HeroTyrandeSentinel_Func");
    TriggerEnable(libGDHL_gt_HeroTyrandeSentinel, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTyrandeSentinel, null, AbilityCommand("TyrandeSentinel", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Elune's Chosen
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeElunesChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_tyrandeUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "TyrandeWeapon@Damage"))) {
            return false;
        }

        if (!((PlayerHasTalent(EventUnitDamageSourcePlayer(), "TyrandeElunesChosen") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("TyrandeElunesChosen@HealMU"), "VitalArray[Life].Change", EventUnitDamageSourcePlayer(), libCore_gf_CombatCalculateDamageAmount());
    lv_tyrandeUnit = EventUnitDamageSourceUnit();
    lv_targetUnit = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_tyrandeUnit, "TyrandeElunesChosen@UnitTracker"), 1);
    if ((lv_targetUnit != null)) {
        UnitCreateEffectUnit(lv_tyrandeUnit, "TyrandeElunesChosen@HealSet", lv_targetUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeElunesChosen_Init () {
    libGDHL_gt_HeroTyrandeElunesChosen = TriggerCreate("libGDHL_gt_HeroTyrandeElunesChosen_Func");
    TriggerEnable(libGDHL_gt_HeroTyrandeElunesChosen, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroTyrandeElunesChosen, null, c_unitDamageTypeAny, c_unitDamageEither, "TyrandeWeapon@Damage");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroTyrandeElunesChosen, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Shield Breaker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentShieldBreaker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    fixed lv_damageAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventUnitDamageSourcePlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_owner, "TalentShieldBreaker") == true))) {
            return false;
        }

        if (!((libCore_gf_CombatDamageKindFromEffect(EventUnitDamageEffect()) == libCore_ge_StormDamagingEffectKind_Physical))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageAmount = libCore_gf_CombatCalculateDamageAmount();
    if ((lv_damageAmount < 1)) {
        return true;
    }

    lv_damageAmount *= libGDHL_gv_talentShieldBreakerDamageModifier;
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("TalentShieldBreaker@Damage"), "Amount", lv_owner, lv_damageAmount);
    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "TalentShieldBreaker@Damage", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentShieldBreaker_Init () {
    libGDHL_gt_TalentShieldBreaker = TriggerCreate("libGDHL_gt_TalentShieldBreaker_Func");
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_TalentShieldBreaker, null, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentShieldBreaker, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Hardened Focus
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentHardenedFocus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_period;
    fixed lv_cDRValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_period = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "TalentHardenedFocus@Controller", "Period", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    lv_cDRValue = (lv_period * libGDHL_gv_talentHardenedFocusCDRValue);
    libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_cDRValue, false, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentHardenedFocus_Init () {
    libGDHL_gt_TalentHardenedFocus = TriggerCreate("libGDHL_gt_TalentHardenedFocus_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentHardenedFocus, c_playerAny, "TalentHardenedFocus@CDRProcSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Battle Momentum
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBattleMomentum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities(EventPlayerEffectUsedUnit(c_effectUnitCaster), libGDHL_gv_talentBattleMomentumCDRValue, false, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBattleMomentum_Init () {
    libGDHL_gt_TalentBattleMomentum = TriggerCreate("libGDHL_gt_TalentBattleMomentum_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentBattleMomentum, c_playerAny, "TalentBattleMomentum@DummyProcSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Bribe - Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBribeProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    lv_heroUnit = libGame_gv_players[lv_killingPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((libCore_gf_ExecuteValidatorOnUnit("StormTargetIsLaneMinion", lv_minion, lv_minion) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_heroUnit, "TalentBribe@TokenCounter") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_heroUnit, "TalentBribe@TokenCounterAdd1", lv_minion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBribeProc_Init () {
    libGDHL_gt_TalentBribeProc = TriggerCreate("libGDHL_gt_TalentBribeProc_Func");
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_TalentBribeProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Bribe - Add Stacks on Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBribeAddStacksonCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_playerHero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_SpecialCaseTalentCooldownResetPlayer();
    lv_playerHero = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_playerHero, "TalentBribe@TokenCounter") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_playerHero, "TalentBribe@TokenCounterAdd100", lv_playerHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBribeAddStacksonCooldownReset_Init () {
    libGDHL_gt_TalentBribeAddStacksonCooldownReset = TriggerCreate("libGDHL_gt_TalentBribeAddStacksonCooldownReset_Func");
    libGame_gf_SpecialCaseTalentCooldownReset(libGDHL_gt_TalentBribeAddStacksonCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Bribe - Camp Respawn Timer Modification
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBribeCampRespawnTimerModification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_campIndex = libMapM_gf_JungleGetJungleCampForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_jungleCreepCamps[lv_campIndex].lv_defenderDefendersBribedCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBribeCampRespawnTimerModification_Init () {
    libGDHL_gt_TalentBribeCampRespawnTimerModification = TriggerCreate("libGDHL_gt_TalentBribeCampRespawnTimerModification_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentBribeCampRespawnTimerModification, c_playerAny, "TalentBribe@TimeReductionDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Rewind Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentRewindActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities(lv_hero, -180.0, false, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentRewindActivate_Init () {
    libGDHL_gt_TalentRewindActivate = TriggerCreate("libGDHL_gt_TalentRewindActivate_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentRewindActivate, c_playerAny, "TalentRewind@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Scouting Drone Self Revealer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentScoutingDroneSelfRevealer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TalentScoutingDrone@ApplySelfRevealer", EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentScoutingDroneSelfRevealer_Init () {
    libGDHL_gt_TalentScoutingDroneSelfRevealer = TriggerCreate("libGDHL_gt_TalentScoutingDroneSelfRevealer_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentScoutingDroneSelfRevealer, c_playerAny, "TalentScoutingDrone@DummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Gathering Power (Quest Increment)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGatheringPowerQuestIncrement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_killingPlayer, "TalentGatheringPower") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroUnit = libGame_gv_players[lv_killingPlayer].lv_heroUnit;
    UnitCreateEffectUnit(lv_heroUnit, "TalentGatheringPower@TokenCounterIncrement", lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGatheringPowerQuestIncrement_Init () {
    libGDHL_gt_TalentGatheringPowerQuestIncrement = TriggerCreate("libGDHL_gt_TalentGatheringPowerQuestIncrement_Func");
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_TalentGatheringPowerQuestIncrement);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Gathering Power (Quest Reset)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGatheringPowerQuestReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_deadPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = libGame_gf_HeroKilledPlayer();
    if ((PlayerHasTalent(lv_deadPlayer, "TalentGatheringPower") == true)) {
        lv_heroUnit = libGame_gv_players[lv_deadPlayer].lv_heroUnit;
        UnitCreateEffectUnit(lv_heroUnit, "TalentGatheringPower@TokenCounterReset", lv_heroUnit);
        UnitCreateEffectUnit(lv_heroUnit, "TalentGatheringPower@TokenCounterResetModifyPlayer", lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGatheringPowerQuestReset_Init () {
    libGDHL_gt_TalentGatheringPowerQuestReset = TriggerCreate("libGDHL_gt_TalentGatheringPowerQuestReset_Func");
    libGame_gf_HeroKilled(libGDHL_gt_TalentGatheringPowerQuestReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Ice Block (Overlay Controller)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentIceBlockOverlayController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (libCore_gf_StormUnitIsHallucination(EventUnit()) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false) && (UnitHasBehavior2(EventUnit(), "TalentIceBlock") == true)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }
    else {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_OverlayStasis.SC2Cutscene", EventUnitBehavior());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentIceBlockOverlayController_Init () {
    libGDHL_gt_TalentIceBlockOverlayController = TriggerCreate("libGDHL_gt_TalentIceBlockOverlayController_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentIceBlockOverlayController, null, "TalentIceBlock", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentIceBlockOverlayController, null, "TalentIceBlock", c_unitBehaviorChangeDestroy);
}

void libGDHL_InitTriggers () {
    libGDHL_gt_IncludeGameDataHelper_Init();
    libGDHL_gt_VisionReductionMultiHeroController_Init();
    libGDHL_gt_VisionReductionApplyAllyVisionSupression_Init();
    libGDHL_gt_VisionReductionRemoveAllyVisionSupression_Init();
    libGDHL_gt_HeroGenericSuperStealthActivateDeactivate_Init();
    libGDHL_gt_HeroGenericCameraShakeLightTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeLightCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init();
    libGDHL_gt_HeroPortBackToBase_Init();
    libGDHL_gt_HearthstoneChannelingBuffOn_Init();
    libGDHL_gt_HearthstoneChannelingBuffOff_Init();
    libGDHL_gt_HearthstoneChannelingBuffCanceled_Init();
    libGDHL_gt_HeroAbathurHeroCountIncrement_Init();
    libGDHL_gt_HeroAbathurHeroCountDecrement_Init();
    libGDHL_gt_HeroAbathurToxicNestRevealer_Init();
    libGDHL_gt_HeroAbathurDeepTunnelPing_Init();
    libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init();
    libGDHL_gt_HeroAbathurSymbiote_Init();
    libGDHL_gt_HeroAbathurSymbioteHealing_Init();
    libGDHL_gt_HeroAbathurLocustNestSetFacing_Init();
    libGDHL_gt_HeroAbathurLocustSpawned_Init();
    libGDHL_gt_HeroAbathurLocustMasterCast_Init();
    libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Init();
    libGDHL_gt_HeroAbathurSymbioteHivemindStab_Init();
    libGDHL_gt_HeroAbathurMonstrosityDeepTunnelPing_Init();
    libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Init();
    libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrositySymbioteEndHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Init();
    libGDHL_gt_HeroAbathurMonstrositySymbiotedMonstrositySymbioted_Init();
    libGDHL_gt_HeroAbathurMonstrosityCreated_Init();
    libGDHL_gt_HeroAbathurMonstrosityVolatileMutationLeech_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init();
    libGDHL_gt_HeroAbathurCarapaceShieldTalentsReset_Init();
    libGDHL_gt_HeroAnduinHeroCountIncrement_Init();
    libGDHL_gt_HeroAnduinHeroCountDecrement_Init();
    libGDHL_gt_HeroAnduinLeapofFaithCameraLock_Init();
    libGDHL_gt_HeroAnduinEvenhandedBlessings_Init();
    libGDHL_gt_HeroAnduinBlessedRecovery_Init();
    libGDHL_gt_HeroAnubarakHeroCountIncrement_Init();
    libGDHL_gt_HeroAnubarakHeroCountDecrement_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeRestoreHeight_Init();
    libGDHL_gt_HeroAnubarakBeetleAI_Init();
    libGDHL_gt_HeroAnubarakCocoonUnitHit_Init();
    libGDHL_gt_HeroAnubarakCocoonSpawned_Init();
    libGDHL_gt_HeroAnubarakCocoonSoundEffect_Init();
    libGDHL_gt_HeroAnubarakCocoonUnitStatus_Init();
    libGDHL_gt_HeroAnubarakCocoonOn_Init();
    libGDHL_gt_HeroAnubarakCocoonOff_Init();
    libGDHL_gt_HeroArtanisIncrementHeroCount_Init();
    libGDHL_gt_HeroArtanisDecrementHeroCount_Init();
    libGDHL_gt_HeroArtanisPrismaticAlignmentTakedown_Init();
    libGDHL_gt_HeroArtanisShieldOverloadFatalDamage_Init();
    libGDHL_gt_ArtanisBladeDashPhasePrismCast_Init();
    libGDHL_gt_ArtanisTwinBladesChargeTargeting_Init();
    libGDHL_gt_HeroArtanisPurifierBeamSetTarget_Init();
    libGDHL_gt_HeroArtanisPurifierBeamUnitCreated_Init();
    libGDHL_gt_HeroArtanisPurifierBeamRedirectTarget2_Init();
    libGDHL_gt_HeroArtanisProtectorofAiurTakedown_Init();
    libGDHL_gt_HeroArthasHeroCountIncrement_Init();
    libGDHL_gt_HeroArthasHeroCountDecrement_Init();
    libGDHL_gt_HeroArthasFrostmourneHungersHeroTakedown_Init();
    libGDHL_gt_HeroArthasFrostmourneHungersMinionTakedown_Init();
    libGDHL_gt_HeroArthasRime_Init();
    libGDHL_gt_HeroAurielShieldofHopeSetShieldStrength_Init();
    libGDHL_gt_HeroAurielBestowHopeBestowHopeCast_Init();
    libGDHL_gt_HeroAurielBestowHopeSetProxy_Init();
    libGDHL_gt_HeroAurielBestowHopeRemoveProxy_Init();
    libGDHL_gt_HeroAurielBestowHopeToggleBestowHopeProxyDamageDealtTrigger_Init();
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageDealt_Init();
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromProxyDamageTaken_Init();
    libGDHL_gt_HeroAurielBestowHopeHealingStoredFromDamageDealt_Init();
    libGDHL_gt_HeroAurielBestowHopeProxyUnitSwapped_Init();
    libGDHL_gt_HeroAurielBestowHopeGlimmerofHopeRegenGlobe_Init();
    libGDHL_gt_HeroAurielBestowHopeWillofHeaven_Init();
    libGDHL_gt_HeroAurielRayofHeavenAbilityUsed_Init();
    libGDHL_gt_HeroAurielInnerPeaceStoreHeal_Init();
    libGDHL_gt_HeroAurielInnerPeaceStoreEnergy_Init();
    libGDHL_gt_HeroAurielCrystalAegisOverlayController_Init();
    libGDHL_gt_HeroAurielResurrectPlayerUnlocksResurrect_Init();
    libGDHL_gt_HeroAurielResurrectCreateSpirit_Init();
    libGDHL_gt_HeroAurielResurrectRevivePlayer_Init();
    libGDHL_gt_HeroAurielResurrectPlayerRespawns_Init();
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveStart_Init();
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterrupted_Init();
    libGDHL_gt_HeroAurielResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Init();
    libGDHL_gt_HeroAurielResurrectSpiritTimerController_Init();
    libGDHL_gt_HeroAurielResurrectEndofGameHideRevivingDialog_Init();
    libGDHL_gt_HeroAurielResurrectPlayerTalentsReset_Init();
    libGDHL_gt_AurielUIInitialize_Init();
    libGDHL_gt_HeroAurielIncrementHeroCount_Init();
    libGDHL_gt_HeroAurielDecrementHeroCount_Init();
    libGDHL_gt_HeroAzmodanHeroCountIncrement_Init();
    libGDHL_gt_HeroAzmodanHeroCountDecrement_Init();
    libGDHL_gt_HeroAzmodanDemonCreate_Init();
    libGDHL_gt_HeroAzmodanDemonLieutenant_Init();
    libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Init();
    libGDHL_gt_HeroAzmodanWrathMarkerUpdate_Init();
    libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Init();
    libGDHL_gt_HeroAzmodanTier1GlobeTalentChoose_Init();
    libGDHL_gt_HeroAzmodanTier1GlobeTalentQuestUpdate_Init();
    libGDHL_gt_HeroBrightwingHeroCountIncrement_Init();
    libGDHL_gt_HeroBrightwingHeroCountDecrement_Init();
    libGDHL_gt_HeroBrightwingPhaseShiftPing_Init();
    libGDHL_gt_HeroBrightwingPhaseShiftCamera_Init();
    libGDHL_gt_HeroBrightwingPixieCharmAddStacksonCooldownReset_Init();
    libGDHL_gt_HeroBrightwingNPCTakedown_Init();
    libGDHL_gt_HeroDeltaHeroCountIncrement_Init();
    libGDHL_gt_HeroDeltaHeroCountDecrement_Init();
    libGDHL_gt_HeroDeltaFlashbangOverlay_Init();
    libGDHL_gt_HeroDeltaExclusionZone_Init();
    libGDHL_gt_HeroDeltaInfiltrationMissionCampCaptured_Init();
    libGDHL_gt_HeroDeltaEmpathicBond_Init();
    libGDHL_gt_HeroDeltaNuclearStrikePing_Init();
    libGDHL_gt_HeroDeltaNuclearStrikeInterrupted_Init();
    libGDHL_gt_HeroDiabloHeroCountIncrement_Init();
    libGDHL_gt_HeroDiabloHeroCountDecrement_Init();
    libGDHL_gt_HeroDiabloDiabloDies_Init();
    libGDHL_gt_HeroDiabloShadowChargeRestoreHeight_Init();
    libGDHL_gt_HeroDiabloOverpowerFacing_Init();
    libGDHL_gt_HeroDiabloLightningBreathEnd_Init();
    libGDHL_gt_HeroDiabloLightningBreathAim_Init();
    libGDHL_gt_HeroDiabloLightningBreathCast_Init();
    libGDHL_gt_HeroDiabloBlackSoulstoneHeroKill_Init();
    libGDHL_gt_HeroDiabloBlackSoulstoneMinionKill_Init();
    libGDHL_gt_HeroDiabloSoulShieldUpdateUnitStatus_Init();
    libGDHL_gt_HeroDiabloTerrify_Init();
    libGDHL_gt_HeroDiabloGameEnds_Init();
    libGDHL_gt_HeroETCHeroCountIncrement_Init();
    libGDHL_gt_HeroETCHeroCountDecrement_Init();
    libGDHL_gt_HeroETCStageDiveTeleportUnit_Init();
    libGDHL_gt_HeroETCStageDiveFinalSet_Init();
    libGDHL_gt_HeroETCMoshPitOn_Init();
    libGDHL_gt_HeroFalstadHeroCountIncrement_Init();
    libGDHL_gt_HeroFalstadHeroCountDecrement_Init();
    libGDHL_gt_HeroFalstadLightningRodExtendConfirmBehavior_Init();
    libGDHL_gt_HeroFalstadFlightPing_Init();
    libGDHL_gt_HeroFalstadAroundTheWorldCampCaptured_Init();
    libGDHL_gt_HeroFalstadDishonorableDischargeHeroKillRefreshCooldown_Init();
    libGDHL_gt_HeroFalstadFrequentFlyerHeroTakedown_Init();
    libGDHL_gt_HeroFalstadFrequentFlyerMinionTakedown_Init();
    libGDHL_gt_HeroFalstadCalloftheWildhammerSearchEffectOverride_Init();
    libGDHL_gt_HeroGreymaneHeroCountIncrement_Init();
    libGDHL_gt_HeroGreymaneHeroCountDecrement_Init();
    libGDHL_gt_HeroGreymaneInsatiable_Init();
    libGDHL_gt_HeroGreymaneWizenedDuelistHeroDeath_Init();
    libGDHL_gt_HeroGreymaneGoForTheThroatFreeCastCarryDuration_Init();
    libGDHL_gt_HeroGreymaneActorSoundSwaps_Init();
    libGDHL_gt_HeroJainaHeroCountIncrement_Init();
    libGDHL_gt_HeroJainaHeroCountDecrement_Init();
    libGDHL_gt_HeroJainaTalentReset_Init();
    libGDHL_gt_HeroJainaFrostbiteChilledUnitStatusDisplay_Init();
    libGDHL_gt_HeroJainaFrostbiteChilledDamageResponse_Init();
    libGDHL_gt_HeroJainaFingersOfFrostRegenGlobePickup_Init();
    libGDHL_gt_HeroJainaWaterElementalCreated_Init();
    libGDHL_gt_HeroJainaWaterElementalCommand_Init();
    libGDHL_gt_HeroJainaWaterElementalSummonedUnitSpecialCaseInteraction_Init();
    libGDHL_gt_HeroJainaWintermute_Init();
    libGDHL_gt_HeroJainaWintermuteFrostboltCast_Init();
    libGDHL_gt_HeroJainaWintermuteBlizzardCast_Init();
    libGDHL_gt_HeroJainaWintermuteConeofColdCast_Init();
    libGDHL_gt_JohannaHeroCountIncrement_Init();
    libGDHL_gt_JohannaHeroCountDecrement_Init();
    libGDHL_gt_JohannaFallingSwordTeleport_Init();
    libGDHL_gt_JohannaFallingSwordFinalSet_Init();
    libGDHL_gt_JohannaFallingSwordSuppressCollision_Init();
    libGDHL_gt_JohannaIndestructibleFatalDamageAbsord_Init();
    libGDHL_gt_HeroKerriganHeroCountIncrement_Init();
    libGDHL_gt_HeroKerriganHeroCountDecrement_Init();
    libGDHL_gt_HeroKerriganAssimilation_Init();
    libGDHL_gt_HeroKerriganUltraliskSummonUltralisk_Init();
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Init();
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilitySummonedUnitSpecialCaseInteraction_Init();
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Init();
    libGDHL_gt_HeroKerriganSiphoningImpact_Init();
    libGDHL_gt_HeroKerriganAssimilationMastery_Init();
    libGDHL_gt_HeroKerriganBoundlessFury_Init();
    libGDHL_gt_HeroKerriganChrysalisUnitStatus_Init();
    libGDHL_gt_HeroKerriganOmegastorm_Init();
    libGDHL_gt_HeroKharazimHeroCountIncrement_Init();
    libGDHL_gt_HeroKharazimHeroCountDecrement_Init();
    libGDHL_gt_HeroKharazimDivinePalmReduceHealth_Init();
    libGDHL_gt_HeroKharazimDivinePalmApplyOverlay_Init();
    libGDHL_gt_HeroKharazimDivinePalmRemoveOverlay_Init();
    libGDHL_gt_HeroKharazimSevenSidedStrikeStoreFacing_Init();
    libGDHL_gt_HeroKharazimSevenSidedStrikeRestoreFacing_Init();
    libGDHL_gt_HeroKharazimSixthSenseProc_Init();
    libGDHL_gt_HeroKharazimAbathurUltimateEvolutionClone_Init();
    libGDHL_gt_HeroLiMingHeroCountIncrement_Init();
    libGDHL_gt_HeroLiMingHeroCountDecrement_Init();
    libGDHL_gt_HeroLiMingCriticalMassCDReduction_Init();
    libGDHL_gt_HeroLiMingDominance_Init();
    libGDHL_gt_HeroLiMingIllusionist_Init();
    libGDHL_gt_HeroLiMingDisintegrateCast_Init();
    libGDHL_gt_HeroLiMingDisintegrateAim_Init();
    libGDHL_gt_HeroLiMingDisintegrateEnd_Init();
    libGDHL_gt_HeroLiMingDisintegrateCancelling_Init();
    libGDHL_gt_HeroLiMingTemporalFlux_Init();
    libGDHL_gt_HeroMalfurionHeroCountDecrement_Init();
    libGDHL_gt_HeroMalfurionHeroCountIncrement_Init();
    libGDHL_gt_HeroMalfurionInnervate_Init();
    libGDHL_gt_HeroMalfurionRegrowth_Init();
    libGDHL_gt_HeroMalfurionTranquilityArmor_Init();
    libGDHL_gt_HeroMalfurionEntanglingRootsVengefulRootsTreantSpawned_Init();
    libGDHL_gt_HeroMalfurionRejuvenation_Init();
    libGDHL_gt_HeroMalfurionWildGrowth_Init();
    libGDHL_gt_HeroMalfurionCelestialAlignment_Init();
    libGDHL_gt_HeroMuradinHeroCountIncrement_Init();
    libGDHL_gt_HeroMuradinHeroCountDecrement_Init();
    libGDHL_gt_HeroMuradinDwarfToss_Init();
    libGDHL_gt_HeroMuradinHaymaker_Init();
    libGDHL_gt_HeroMuradinStormBoltLevelUp_Init();
    libGDHL_gt_HeroRagnarosHeroCountIncrement_Init();
    libGDHL_gt_HeroRagnarosHeroCountDecrement_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorDummyFirstCast_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorDummySecondCast_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorTargetOff_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorQueueCast_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummyFirstCast_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerDummySecondCast_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetOff_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOn_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorTargetModeOff_Init();
    libGDHL_gt_HeroRagnarosLivingMeteorQueueOrderController_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreCast_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreEnd_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreUpdateDurationBar_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOn_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreFullscreenOverlayOff_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreCreateMarkers_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreDestroyMarkers_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreHealthGlobeRedirect_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreGainsHeroic_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOn_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerTargetModeOff_Init();
    libGDHL_gt_HeroRagnarosMoltenCoreMeteorShowerQueueOrderController_Init();
    libGDHL_gt_HeroRagnarosLavaWavePointTarget_Init();
    libGDHL_gt_HeroRagnarosSulfurasSmash_Init();
    libGDHL_gt_HeroRagnarosRaidTime_Init();
    libGDHL_gt_HeroRagnarosCatchingFireHealthGlobePickup_Init();
    libGDHL_gt_HeroRagnarosBlisteringAttacksCooldownReduction_Init();
    libGDHL_gt_HeroRagnarosCauterizeWoundsTrigger_Init();
    libGDHL_gt_HeroRagnarosFlamesofSulfurion_Init();
    libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOn_Init();
    libGDHL_gt_HeroRagnarosSubmergeFullscreenOverlayOff_Init();
    libGDHL_gt_HeroRagnarosFirelordsFury_Init();
    libGDHL_gt_HeroSelendisHeroCountIncrement_Init();
    libGDHL_gt_HeroSelendisHeroCountDecrement_Init();
    libGDHL_gt_HeroSelendisZealousRushRestoreHeight_Init();
    libGDHL_gt_HeroSelendisZealousRushUIControllerVisibility_Init();
    libGDHL_gt_HeroSelendisZealousRushUIControllerCountdown_Init();
    libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearMinion_Init();
    libGDHL_gt_HeroSelendisExecutorsGuardFaithBeforeFearHero_Init();
    libGDHL_gt_HeroSelendisLastStandController_Init();
    libGDHL_gt_HeroTalandarHeroCountIncrement_Init();
    libGDHL_gt_HeroTalandarHeroCountDecrement_Init();
    libGDHL_gt_HeroTalandarDeathController_Init();
    libGDHL_gt_HeroTalandarCybrossVengeance_Init();
    libGDHL_gt_HeroTalandarWillofFenixRegenGlobePickup_Init();
    libGDHL_gt_HeroTalandarSelfRepairRegenGlobePickup_Init();
    libGDHL_gt_HeroTalandarEndlessTempestUpdateMarker_Init();
    libGDHL_gt_HeroTalandarTheBladeOfArtanisStackCounter_Init();
    libGDHL_gt_HeroTychusHeroCountIncrement_Init();
    libGDHL_gt_HeroTychusHeroCountDecrement_Init();
    libGDHL_gt_HeroTychusOverkillRetarget_Init();
    libGDHL_gt_HeroTychusLaserDrillIssueOrder_Init();
    libGDHL_gt_HeroTychusMasterAssassin_Init();
    libGDHL_gt_HeroTychusThatstheStuffHealingUpdate_Init();
    libGDHL_gt_HeroTychusHeavensDevilCampCaptured_Init();
    libGDHL_gt_HeroTyrandeHeroCountIncrement_Init();
    libGDHL_gt_HeroTyrandeHeroCountDecrement_Init();
    libGDHL_gt_HeroTyrandeSentinel_Init();
    libGDHL_gt_HeroTyrandeElunesChosen_Init();
    libGDHL_gt_TalentShieldBreaker_Init();
    libGDHL_gt_TalentHardenedFocus_Init();
    libGDHL_gt_TalentBattleMomentum_Init();
    libGDHL_gt_TalentBribeProc_Init();
    libGDHL_gt_TalentBribeAddStacksonCooldownReset_Init();
    libGDHL_gt_TalentBribeCampRespawnTimerModification_Init();
    libGDHL_gt_TalentRewindActivate_Init();
    libGDHL_gt_TalentScoutingDroneSelfRevealer_Init();
    libGDHL_gt_TalentGatheringPowerQuestIncrement_Init();
    libGDHL_gt_TalentGatheringPowerQuestReset_Init();
    libGDHL_gt_TalentIceBlockOverlayController_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGDHL_InitLib_completed = false;

void libGDHL_InitLib () {
    if (libGDHL_InitLib_completed) {
        return;
    }

    libGDHL_InitLib_completed = true;

    libGDHL_InitLibraries();
    libGDHL_InitVariables();
    libGDHL_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibGame"
include "LibMapM"
include "LibSond"
include "LibUIUI"

