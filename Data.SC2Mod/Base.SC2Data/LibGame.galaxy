include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibGDHL_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibSond_h"
include "LibUIUI_h"
include "LibGlue_h"

include "LibGame_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGame_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
    libUIUI_InitVariables();
    libGlue_InitVariables();
}

// Variable Initialization
bool libGame_InitVariables_completed = false;

void libGame_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libGame_InitVariables_completed) {
        return;
    }

    libGame_InitVariables_completed = true;

    libGame_gv_xPTrickleStartTimer = TimerCreate();
    libGame_gv_gAMEFirstBloodAvailable = true;
    libGame_gv_aFK_UseAFKSystem = true;
    libGame_gv_gameDataMatchID = "";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_cameraFollowForced[init_i] = true;
    }
    libGame_gv_announcement_SystemEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_announcementQueue[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_animName[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libGame_gv_capturePointMaxCount_C; init_i += 1) {
        libGame_gv_capturePoints[init_i].lv_captureProgressBar = c_invalidDialogControlId;
        libGame_gv_capturePoints[init_i].lv_captureProgressBarDimmingFrame = c_invalidDialogControlId;
    }
    libGame_gv_capturePointLastCreatedCapturePointIndex_C = "CapturePointLastCreatedCapturePointIndex";
    libGame_gv_towerMapPlaysCoreWarning = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertCooldownTimer[init_i] = TimerCreate();
    }
    libGame_gv_towerMainCoreAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
            libGame_gv_deathRecapDeathData[init_i].lv_effectBars[init_i1].lv_debugString = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_encouragement_TimeSpentAliveTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatDurationTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatTimeoutTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedHeroesNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedHeroesNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedMinionsNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedMinionsNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentHeroKillTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentStructureDamageTimer = TimerCreate();
    }
    libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C = "AlliedPlayer";
    libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C = "DeadUnit";
    libGame_gv_jungleWatchTowerStartTimer = TimerCreate();
    libGame_gv_gameTimer = TimerCreate();
    libGame_gv_openTheGatesTimer = TimerCreate();
    libGame_gv_minionSpawnStartTimer = TimerCreate();
    libGame_gv_heroDeathRespawnSetting = libGame_ge_HeroDeathRespawnOption_NormalRespawn;
    libGame_gv_heroDeathRunDeathUIUpdates = true;
    libGame_gv_heroDeath_UpdateStats = true;
    libGame_gv_heroDeath_RespawnMounted = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_killStingerTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_nextPlayIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
                libGame_gv_heroDeathKillStingerQueue[init_i].lv_soundQueue[init_i1][init_j1] = SoundLink("EditorDefaultSound", -1);
            }
        }
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        libGame_gv_laneData[init_i].lv_minionSpawningEnabled = true;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_stormMapHeroDeathOverlay[init_i] = c_invalidDialogControlId;
    }
    libGame_gv_mTMLGameSetupData.lv_gameOptionString = "";
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libGame_gv_mTMLGameSetupData.lv_teamPlayers[init_i1] = PlayerGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libGame_gv_mTMLGameSetupData.lv_teamPlayerHandles[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libGame_gv_mTMLGameSetupData.lv_teamPlayerBNet[init_i1] = "";
    }
    libGame_gv_mTMLGameSetupData.lv_hostPlayer = -1;
    libGame_gv_mTMLGameSetupData.lv_hostPlayerHandle = "";
    libGame_gv_mTMLGameSetupData.lv_matchID = "";
    libGame_gv_mTMLGameSetupData.lv_version = "";
    libGame_gv_mTMLGameSetupData.lv_date = "";
    libGame_gv_mTMLGameSetupData.lv_mapDataIndex = -1;
    libGame_gv_minionSpawningEnabled = true;
    libGame_gv_minionScalingEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_moonwellMaxMoonwellCount; init_j += 1) {
            libGame_gv_moonwellTextTags[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_moonwellTextTagsUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGame_gv_mountMovespeedBuff = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "HeroGenericMount@Mounted", "Modification.UnifiedMoveSpeedFactor", c_playerAny);
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_players[init_i].lv_bNet = "";
        libGame_gv_players[init_i].lv_avatarTextureCoords = "";
        libGame_gv_players[init_i].lv_victoryDefeat = c_gameOverVictory;
        libGame_gv_players[init_i].lv_playerName = StringExternal("Param/Value/lib_Game_D42BD148");
        libGame_gv_players[init_i].lv_heroName = StringExternal("Param/Value/lib_Game_C690062E");
        libGame_gv_players[init_i].lv_pingCooldownTimer = TimerCreate();
        libGame_gv_players[init_i].lv_mutedPlayerGroupPing = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_mutedPlayerGroupChat = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_mutedPlayerGroupAnnouncements = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_playerLeftAnnouncementTimer = TimerCreate();
        libGame_gv_players[init_i].lv_heroUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_selectedUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_heroSpawnReady = true;
        libGame_gv_players[init_i].lv_faction = libGame_ge_Faction_Neutral;
        libGame_gv_players[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_players[init_i].lv_cameraPlayerUnitGroupToFocusOn = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraCurrentTargetGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraPlayerHasControl = true;
        libGame_gv_players[init_i].lv_vOSoundSuffix = "";
        libGame_gv_players[init_i].lv_respawnTimer = TimerCreate();
        libGame_gv_players[init_i].lv_respawnSoundCueTimer = TimerCreate();
        libGame_gv_players[init_i].lv_deathToastTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxHeroCount; init_i1 += 1) {
            libGame_gv_players[init_i].lv_bankDataHero[init_i1].lv_prepickedBuild = 1;
        }
        libGame_gv_players[init_i].lv_soundDeathAlertPrefix = "UI_HeroDeath_Gen_";
        libGame_gv_players[init_i].lv_recentDamageResetTimer = TimerCreate();
        libGame_gv_players[init_i].lv_altClickPartyFrameAnnouncementUnitGroup = UnitGroupEmpty();
    }
    libGame_gv_heroes = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_players_Heroes_AllTrackedHeroesForTeam[init_i] = UnitGroupEmpty();
    }
    libGame_gv_avatarGrabberImageEditBox = c_invalidDialogControlId;
    libGame_gv_avatarGrabberTextureCoordsEditBox = c_invalidDialogControlId;
    libGame_gv_bNetGrabberEditBox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libGame_gv_preloadingPortraitCountMax_C; init_i += 1) {
        libGame_gv_preloadingPortrait[init_i] = c_invalidPortraitId;
    }
    for (init_i = 0; init_i <= libGame_gv_regenGlobeGeneratorMaxCount; init_i += 1) {
        libGame_gv_regenGlobeGeneratorTextTag[init_i] = c_textTagNone;
    }
    libGame_gv_scalingTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_teams[init_i].lv_teamPlayerGroup = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_teams[init_i].lv_abandonedTheGame = TimerCreate();
        libGame_gv_teams[init_i].lv_xPMultiplier = 1.0;
        libGame_gv_teams[init_i].lv_respawnTimeMultiplier = 1.0;
    }
    for (init_i = 0; init_i <= libGame_gv_townMaxTownCount; init_i += 1) {
        libGame_gv_townTownData[init_i].lv_townHallIndex = -1;
    }
    libGame_gv_townDestructionRemovesCoreInvulnerable = true;
}

// Presets
string libGame_ge_StormBehaviorCategories_Ident (int lp_val) {
         if (lp_val == libGame_ge_StormBehaviorCategories_AbnormalDeath) { return "AbnormalDeath"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_AbnormalRespawn) { return "AbnormalRespawn"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_DamageReduction) { return "DamageReduction"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_DebuffSpellPower) { return "DebuffSpellPower"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Eaten) { return "Eaten"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Dodge) { return "Dodge"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Flailing) { return "Flailing"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_FlailingBackward) { return "FlailingBackward"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_FlailingForward) { return "FlailingForward"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackIgnoreFX) { return "HallOfStormsKnockbackIgnoreFX"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackImmunity) { return "HallOfStormsKnockbackImmunity"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HealReceivedModifying) { return "HealReceivedModifying"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HealReduction) { return "HealReduction"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HideNameplate) { return "HideNameplate"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_HostileStasisRemoved) { return "HostileStasisRemoved"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_ImmunedToAllyDisplacement) { return "ImmunedToAllyDisplacement"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_ImmunedToEnemyDisplacement) { return "ImmunedToEnemyDisplacement"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_KnockedOut) { return "KnockedOut"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_MindControl) { return "MindControl"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_PermanentMaxHealth) { return "PermanentMaxHealth"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_PhysicalArmor) { return "PhysicalArmor"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Polymorph) { return "Polymorph"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Root) { return "Root"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Protected) { return "Protected"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_PseudoStructure) { return "PseudoStructure"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Shield) { return "Shield"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Silence) { return "Silence"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_SpecialDeathState) { return "SpecialDeathState"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_SpellArmor) { return "SpellArmor"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_StackingComboMarker) { return "StackingComboMarker"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Stasis) { return "Stasis"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_StasisAir) { return "StasisAir"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Stun) { return "Stun"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_SuppressCollision) { return "SuppressCollision"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_SuppressUltimateCharge) { return "SuppressUltimateCharge"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_SuppressVisibility) { return "SuppressVisibility"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Taunt) { return "Taunt"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_TipableKnockback) { return "TipableKnockback"; }
    else if (lp_val == libGame_ge_StormBehaviorCategories_Unreducible) { return "Unreducible"; }
    return null;
}

string libGame_ge_EffectHistoryDamagedOrHealed_Ident (int lp_val) {
         if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Unknown) { return "Unknown"; }
    else if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Damaged) { return "Damaged"; }
    else if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Healed) { return "Healed"; }
    return null;
}

string libGame_ge_EncouragementStatCallouts_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementStatCallouts_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_TimeSpentAlive) { return "TimeSpentAlive"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered) { return "PercentOfTeamsXPGathered"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Takedowns) { return "Takedowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes) { return "DamageDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes) { return "HealingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapTributesCollected) { return "MapTributesCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn) { return "MapDoubloonsTurnedIn"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures) { return "MapDragonShrineCaptures"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapSkullsCollected) { return "MapSkullsCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MercCampsCaptured) { return "MercCampsCaptured"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToTowns) { return "DamageDoneToTowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes) { return "ShieldingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Count) { return "Count"; }
    return null;
}

string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementDeathTipsNames_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Gangups) { return "Gangups"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) { return "FollowMinions"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) { return "MinionsvsTowns"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) { return "UseYourAbilities"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) { return "Moonwell"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Retreat) { return "Retreat"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) { return "TrainTalents"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Mount) { return "Mount"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) { return "EnemyFountainDeath"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Count) { return "Count"; }
    return null;
}

string libGame_ge_LaneNamePreset_Ident (int lp_val) {
         if (lp_val == libGame_ge_LaneNamePreset_Top) { return "Top"; }
    else if (lp_val == libGame_ge_LaneNamePreset_Middle) { return "Middle"; }
    else if (lp_val == libGame_ge_LaneNamePreset_Bottom) { return "Bottom"; }
    return null;
}

string libGame_ge_MatchStatisticStuffType_Ident (int lp_val) {
         if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtHeroicPhysical) { return "DamageDealtHeroicPhysical"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtHeroicSpell) { return "DamageDealtHeroicSpell"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtHeroicPercent) { return "DamageDealtHeroicPercent"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtSiegePhysical) { return "DamageDealtSiegePhysical"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtSiegeSpell) { return "DamageDealtSiegeSpell"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageDealtSiegePercent) { return "DamageDealtSiegePercent"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageTakenPhysical) { return "DamageTakenPhysical"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageTakenSpell) { return "DamageTakenSpell"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageTakenPercent) { return "DamageTakenPercent"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_HealingDealt) { return "HealingDealt"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_HealingTaken) { return "HealingTaken"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_Selfheal) { return "Selfheal"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_XP) { return "XP"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamageMitigatedByArmor) { return "DamageMitigatedByArmor"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_DamagePreventedByShield) { return "DamagePreventedByShield"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWSoloKill) { return "NEWSoloKill"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWAssists) { return "NEWAssists"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWDeaths) { return "NEWDeaths"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWSiegeDamage) { return "NEWSiegeDamage"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWHeroDamage) { return "NEWHeroDamage"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWHealing) { return "NEWHealing"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWSelfHealing) { return "NEWSelfHealing"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWExperience) { return "NEWExperience"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWPhysicalDamageEnhanced) { return "NEWPhysicalDamageEnhanced"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWPhysicalDamageMitigated) { return "NEWPhysicalDamageMitigated"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWSpellDamageEnhanced) { return "NEWSpellDamageEnhanced"; }
    else if (lp_val == libGame_ge_MatchStatisticStuffType_NEWSpellDamageMitigated) { return "NEWSpellDamageMitigated"; }
    return null;
}

string libGame_ge_MatchStatisticCastingType_Ident (int lp_val) {
         if (lp_val == libGame_ge_MatchStatisticCastingType_Weapon) { return "Weapon"; }
    else if (lp_val == libGame_ge_MatchStatisticCastingType_Ability) { return "Ability"; }
    else if (lp_val == libGame_ge_MatchStatisticCastingType_Talent) { return "Talent"; }
    return null;
}

// Functions
int libGame_gf_CustomValueIndex (int lp_customValueIndex) {
    // Automatic Variable Declarations
    // Implementation
    return lp_customValueIndex;
}

int libGame_gf_CustomValueGetAsInteger (int lp_customValueIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, lp_customValueIndex));
}

bool libGame_gf_UnitStatsUnitHasGeneralBehavior (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "HeroGenericUserRecord") == false)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C25C2BA0", "A", StringToText((UnitGetType(lp_unit))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_C25C2BA0"), true);
        TextExpressionSetToken("Param/Expression/lib_Game_55168175", "A", StringToText(TriggerGetFunction(TriggerGetCurrent())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_55168175"), true);
        return false;
    }

    return true;
}

void libGame_gf_UnitStatsStoreUserDataToUnit (unit lp_unit, string lp_iD, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_UnitStatsUnitHasGeneralBehavior(lp_unit) == true)) {
        libCore_gf_SaveUserRecordValue(lp_iD, lp_value, lp_unit);
    }

}

void libGame_gf_UnitStatsStoreUserDataToUnitGeneral (unit lp_unit, string lp_stats, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_UnitStatsUnitHasGeneralBehavior(lp_unit) == true)) {
        libCore_gf_SaveUserRecordValue((lp_stats), lp_value, lp_unit);
    }

}

fixed libGame_gf_UnitStatsGetUserDataFromUnit (string lp_iD, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_UnitStatsUnitHasGeneralBehavior(lp_unit) == false)) {
        return 0.0;
    }
    else {
        return libCore_gf_ValueFromUserRecord(lp_iD, lp_unit);
    }
}

fixed libGame_gf_UnitStatsGetUserDataFromUnitGeneral (unit lp_targetUnit, string lp_stats) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    if ((libGame_gf_UnitStatsUnitHasGeneralBehavior(lp_targetUnit) == false)) {
        return 0.0;
    }
    else {
        return libCore_gf_ValueFromUserRecord((lp_stats), lp_targetUnit);
    }
}

bool libGame_gf_UnitStatsUserDataOnUnitExists (string lp_iD, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_UnitStatsUnitHasGeneralBehavior(lp_unit) == false)) {
        return false;
    }

    return UnitBehaviorEffectTreeUserDataExists(lp_unit, "HeroGenericUserRecord", lp_iD);
}

void libGame_gf_UnitStatusUpdate (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_interactiveUnit, "TargetInfoPanelUpdatePhysicalArmor", lp_unit);
    UnitCreateEffectUnit(libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_interactiveUnit, "TargetInfoPanelUpdateSpellArmor", lp_unit);
    UnitCreateEffectUnit(libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_interactiveUnit, "TargetInfoPanelUpdateHealReceived", lp_unit);
    if ((libUIUI_gf_UIUnitStatusStatsDisplayUnitHasStatsDisplay(lp_unit) == true)) {
        libUIUI_gf_UIUnitStatusStatsDisplayUpdateOnUnit(lp_unit);
    }

}

void libGame_gf_StormUniversalModifyCooldownonUnitCDRforAbilities (unit lp_targetUnit, fixed lp_cooldownChange, bool lp_includeTrait, bool lp_includeHeroic, bool lp_includeMount) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_abilityIndex;
    int lv_itAbility;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    int lv_owner;
    unit lv_itUnit;
    fixed lv_perUnitCooldownCurrent;
    string lv_key;

    // Automatic Variable Declarations
    int auto1B249CDB_ae;
    const int auto1B249CDB_ai = 1;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_key = "";

    // Implementation
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_targetUnit);
    if ((lv_heroIndex <= 0)) {
        return ;
    }

    lv_owner = UnitGetOwner(lp_targetUnit);
    auto1B249CDB_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto1B249CDB_ai >= 0 && lv_itAbility <= auto1B249CDB_ae) || (auto1B249CDB_ai < 0 && lv_itAbility >= auto1B249CDB_ae) ) ; lv_itAbility += auto1B249CDB_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_AffectedByCooldownReduction == false)) {
            continue;
        }

        if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Active")) {
            continue;
        }

        if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Heroic") && (lp_includeHeroic == false)) {
            continue;
        }

        if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Trait") && (lp_includeTrait == false)) {
            continue;
        }

        if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_MountReplacement == true) && (lp_includeMount == false)) {
            continue;
        }

        lv_abilLink = libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink;
        libGame_gf_StormUniversalModifyCooldownPerUnitCDRAbility(lv_owner, lv_abilLink, lp_cooldownChange, lv_abilityIndex);
        lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_owner);
        lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_owner);
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_abilityCooldownLocation == libCore_ge_AbilityCooldownLocation_Unit)) {
            UnitModifyCooldown(lp_targetUnit, lv_cooldownLink, lp_cooldownChange, c_cooldownOperationAdd);
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_UsesCharges == true)) {
                UnitAddChargeRegenRemaining(lp_targetUnit, lv_chargeLink, lp_cooldownChange);
            }

        }
        else {
            PlayerAddCooldown(lv_owner, lv_cooldownLink, lp_cooldownChange);
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_flag_UsesCharges == true)) {
                PlayerAddChargeRegenRemaining(lv_owner, lv_chargeLink, lp_cooldownChange);
            }

        }
    }
}

void libGame_gf_StormUniversalModifyCooldownPerUnitCDRAbility (int lp_ownerOfCasterUnit, string lp_abilityLink, fixed lp_cooldownChange, int lp_abilityIndex) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_abilIndex;
    fixed lv_perUnitCooldownCurrent;
    string lv_key;

    // Automatic Variable Declarations
    unitgroup auto67650299_g;
    int auto67650299_u;

    // Variable Initialization
    lv_key = "";

    // Implementation
    if ((lp_abilityIndex == 0)) {
        lv_abilIndex = libCore_gf_AbilityIndexOfAbility(lp_abilityLink);
    }
    else {
        lv_abilIndex = lp_abilityIndex;
    }
    if ((lv_abilIndex <= 0)) {
        return ;
    }

    if ((libCore_gv_abilityData[lv_abilIndex].lv_flag_CooldownPerUnit == false)) {
        return ;
    }

    lv_key = ((lp_abilityLink) + "_Player" + IntToString(lp_ownerOfCasterUnit));
    auto67650299_g = UnitGetTrackedUnitGroup(null, "AllHeroicUnitsTrackingBehavior");
    auto67650299_u = UnitGroupCount(auto67650299_g, c_unitCountAll);
    for (;; auto67650299_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto67650299_g, auto67650299_u);
        if (lv_itUnit == null) { break; }
        lv_perUnitCooldownCurrent = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lv_itUnit);
        if ((lv_perUnitCooldownCurrent > 0.0)) {
            lv_perUnitCooldownCurrent += lp_cooldownChange;
            libGame_gf_UnitStatsStoreUserDataToUnit(lv_itUnit, lv_key, MaxF(lv_perUnitCooldownCurrent, 0.0));
        }

    }
}

void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart) {
    // Variable Declarations
    int lv_itBound;
    fixed lv_actualDuration;

    // Automatic Variable Declarations
    int auto9561BDB8_ae;
    const int auto9561BDB8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_actualDuration = lp_duration;
    auto9561BDB8_ae = libGame_gv_cameraBound_Count;
    lv_itBound = 1;
    for ( ; ( (auto9561BDB8_ai >= 0 && lv_itBound <= auto9561BDB8_ae) || (auto9561BDB8_ai < 0 && lv_itBound >= auto9561BDB8_ae) ) ; lv_itBound += auto9561BDB8_ai ) {
        if ((RegionContainsPoint(libGame_gv_cameraBound_Regions[lv_itBound], lp_point) == true)) {
            if ((libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] != lv_itBound)) {
                libGame_gf_SetCameraBoundCCIndexForPlayer(lp_player, lv_itBound);
                lv_actualDuration = 0.0;
            }

            break;
        }

    }
    CameraPan(lp_player, lp_point, lv_actualDuration, lp_initialVelocity, lp_decelerate, lp_smart);
    libGame_gf_SendEventCameraPannedFromScript(lp_player, lp_point);
}

void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int autoA329EA21_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoA329EA21_ai = 1;
    int auto78F9AC02_ae;
    const int auto78F9AC02_ai = 1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_Faction_Neutral;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack < libCore_gv_bALMaxEnginePlayerCount)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack + 1);
        for ( ; ( (autoA329EA21_ai >= 0 && lv_i <= autoA329EA21_ae) || (autoA329EA21_ai < 0 && lv_i >= autoA329EA21_ae) ) ; lv_i += autoA329EA21_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lp_player].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto78F9AC02_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = 1;
        for ( ; ( (auto78F9AC02_ai >= 0 && lv_i <= auto78F9AC02_ae) || (auto78F9AC02_ai < 0 && lv_i >= auto78F9AC02_ae) ) ; lv_i += auto78F9AC02_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int auto286D1281_ae = 1;
    const int auto286D1281_ai = -1;
    int auto591788ED_ae;
    const int auto591788ED_ai = -1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_Faction_Neutral;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack == 1)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack - 1);
        for ( ; ( (auto286D1281_ai >= 0 && lv_i <= auto286D1281_ae) || (auto286D1281_ai < 0 && lv_i >= auto286D1281_ae) ) ; lv_i += auto286D1281_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto591788ED_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = libCore_gv_bALMaxEnginePlayerCount;
        for ( ; ( (auto591788ED_ai >= 0 && lv_i <= auto591788ED_ae) || (auto591788ED_ai < 0 && lv_i >= auto591788ED_ae) ) ; lv_i += auto591788ED_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

trigger auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = null;
int auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

void libGame_gf_CameraUpdateCameraForPlayer (int lp_player) {
    auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player = lp_player;

    if (auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger == null) {
        auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = TriggerCreate("auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

    // Variable Declarations
    int lv_playerBeingTracked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playerBeingTracked = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
    if ((libGame_gv_cameraFollowForced[lp_player] == true)) {
        libGame_gv_cameraFollowForced[lp_player] = false;
        CameraForceFollowUnitGroup(lp_player, false);
    }

    PlayerOptionOverride(lp_player, "camerafollow", null);
    if ((libGame_gv_players[lp_player].lv_cameraForcedLock == true) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
        PlayerOptionOverride(lp_player, "camerafollow", "1");
    }
    else {
        if ((lv_playerBeingTracked != 0) && (libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn != null)) {
            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
            if ((libGame_gv_players[lp_player].lv_isDead == false) && (libGame_gv_players[lp_player].lv_cameraPlayerHasControl == false) && (libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt == false) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
                libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
                CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                PlayerOptionOverride(lp_player, "camerafollow", "1");
            }
            else {
                if ((libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn == null)) {
                    libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = null;
                    PlayerOptionOverride(lp_player, "camerafollow", "0");
                    CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                }
                else {
                    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == false) && (libGame_gv_players[lp_player].lv_isDead == true)) {
                        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                    }
                    else {
                        if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == true)) {
                            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_heroUnitGroup;
                        }
                        else {
                            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                            CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), true, false);
                            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                        }
                    }
                }
            }
        }
    }
    if ((libGame_gv_players[lp_player].lv_cameraPlayerHasControl == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    return true;
}

void libGame_gf_CameraSetCameraDataForPlayer (int lp_player, int lp_cameraType, fixed lp_duration) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_pitch;
    fixed lv_heightOffset;
    string lv_camera;

    // Automatic Variable Declarations
    int autoEC49D181_val;

    // Variable Initialization

    // Implementation
    autoEC49D181_val = lp_cameraType;
    if (autoEC49D181_val == libGame_ge_CameraType_Advanced) {
        lv_camera = "BlizzardAllStarsCameraAdvanced";
    }
    else {
        lv_camera = "BlizzardAllStars";
    }
    CameraSetData(libCore_gv_playerGroupFromPlayer[lp_player], lv_camera);
    lv_distance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogCamera, lv_camera, "ZoomTable[0].Param[Distance].Value", c_playerAny);
    lv_pitch = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogCamera, lv_camera, "ZoomTable[0].Param[Pitch].Value", c_playerAny);
    lv_heightOffset = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogCamera, lv_camera, "ZoomTable[0].Param[HeightOffset].Value", c_playerAny);
    CameraSetValue(lp_player, c_cameraValueDistance, lv_distance, lp_duration, 0.0, 0.0);
    CameraSetValue(lp_player, c_cameraValuePitch, lv_pitch, lp_duration, 0.0, 0.0);
    CameraSetValue(lp_player, c_cameraValueHeightOffset, lv_heightOffset, lp_duration, 0.0, 0.0);
}

trigger auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger = null;
unit auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit;
string auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior;

void libGame_gf_PlayerHeroDisplacementCameraLock (unit lp_lockUnit, string lp_displacingBehavior) {
    auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit = lp_lockUnit;
    auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior = lp_displacingBehavior;

    if (auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger == null) {
        auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger = TriggerCreate("auto_libGame_gf_PlayerHeroDisplacementCameraLock_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger, false, false);
}

bool auto_libGame_gf_PlayerHeroDisplacementCameraLock_TriggerFunc (bool testConds, bool runActions) {
    unit lp_lockUnit = auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit;
    string lp_displacingBehavior = auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior;

    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_lockUnit);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_player) == true) && (lp_lockUnit == libGame_gv_players[lv_player].lv_heroUnit) && (libCore_gf_ExecuteValidatorOnUnit("TargetNotDeadAndNoSpecialDeathState", lp_lockUnit, lp_lockUnit) == true)) {
        libGame_gv_players[lv_player].lv_cameraPlayerHasControl = false;
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lp_lockUnit);
        CameraUseHeightDisplacement(lv_player, true);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
        libGame_gf_PlayerHeroDisplacementCameraUnlock(lv_player, lp_displacingBehavior);
    }

    return true;
}

trigger auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = null;
int auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
string auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

void libGame_gf_PlayerHeroDisplacementCameraUnlock (int lp_player, string lp_displacingBehavior) {
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player = lp_player;
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior = lp_displacingBehavior;

    if (auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger == null) {
        auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = TriggerCreate("auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger, false, false);
}

bool auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
    string lp_displacingBehavior = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, lp_displacingBehavior) >= 1) && (libCore_gf_ExecuteValidatorOnUnit("TargetNotDeadAndNoSpecialDeathState", libGame_gv_players[lp_player].lv_heroUnit, libGame_gv_players[lp_player].lv_heroUnit) == true)) {
        Wait(0.0625, c_timeGame);
    }
    libGame_gv_players[lp_player].lv_cameraPlayerHasControl = true;
    CameraUseHeightDisplacement(lp_player, false);
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    return true;
}

int libGame_gf_CameraBoundCCIndex (region lp_bound) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC4AE4220_ae;
    const int autoC4AE4220_ai = 1;

    // Variable Initialization

    // Implementation
    autoC4AE4220_ae = libGame_gv_cameraBound_Count;
    lv_itIndex = 1;
    for ( ; ( (autoC4AE4220_ai >= 0 && lv_itIndex <= autoC4AE4220_ae) || (autoC4AE4220_ai < 0 && lv_itIndex >= autoC4AE4220_ae) ) ; lv_itIndex += autoC4AE4220_ai ) {
        if ((PointGetX(RegionGetBoundsMax(lp_bound)) == PointGetX(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMax(lp_bound)) == PointGetY(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetBoundsMin(lp_bound)) == PointGetX(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMin(lp_bound)) == PointGetY(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetCenter(lp_bound)) == PointGetX(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetCenter(lp_bound)) == PointGetY(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex])))) {
            return lv_itIndex;
        }

    }
    return -1;
}

void libGame_gf_AddCameraBoundsCC (region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_cameraBound_Count >= libGame_gv_cameraBound_MaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_ABC6140D", "A", IntToText(libGame_gv_cameraBound_MaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_ABC6140D"), true);
        return ;
    }

    libGame_gv_cameraBound_Count += 1;
    libGame_gv_cameraBound_Regions[libGame_gv_cameraBound_Count] = lp_bounds;
}

void libGame_gf_SetCameraBoundsCC (int lp_index, region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index > libGame_gv_cameraBound_Count) && (lp_index < 1)) {
        return ;
    }

    libGame_gv_cameraBound_Regions[lp_index] = lp_bounds;
}

void libGame_gf_SetCameraBoundCCIndexForPlayer (int lp_player, int lp_boundsIndex) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lp_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], libGame_gv_cameraBound_Regions[lp_boundsIndex], true);
}

void libGame_gf_SetCameraBoundCCForPlayer (int lp_player, region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundCCIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsCC(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }

    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lv_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], lp_bound, true);
}

void libGame_gf_AnnouncersActivateAnnouncerForPlayer (int lp_player) {
    // Variable Declarations
    int lv_announcer;
    int lv_itAnnouncer;

    // Automatic Variable Declarations
    int autoACBF40AC_ae;
    const int autoACBF40AC_ai = 1;

    // Variable Initialization
    lv_announcer = libGame_gf_LoadoutGetPlayerAnnouncerForHero(lp_player, libGame_gv_players[lp_player].lv_heroIndex);

    // Implementation
    autoACBF40AC_ae = libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks;
    lv_itAnnouncer = 1;
    for ( ; ( (autoACBF40AC_ai >= 0 && lv_itAnnouncer <= autoACBF40AC_ae) || (autoACBF40AC_ai < 0 && lv_itAnnouncer >= autoACBF40AC_ae) ) ; lv_itAnnouncer += autoACBF40AC_ai ) {
        if ((libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_skinEntry != "") && (libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_skinEntry != null)) {
            PlayerApplySkin(lp_player, libCore_gv_dataAnnouncerVOPacks[lv_itAnnouncer].lv_skinEntry, false);
        }

    }
    if ((UserDataInstance("Announcer", lv_announcer) == libCore_gv_cONFIGDefaultAnnouncer)) {
        if ((libGame_gf_TeamNumberOfPlayer(lp_player) == libGame_gv_teamOrderIndex_C)) {
            lv_announcer = libNtve_gf_UserDataInstanceGetIndex("Announcer", libCore_gv_mAPMapAnnouncer[libGame_gv_teamOrderIndex_C]);
        }
        else if ((libGame_gf_TeamNumberOfPlayer(lp_player) == libGame_gv_teamChaosIndex_C)) {
            lv_announcer = libNtve_gf_UserDataInstanceGetIndex("Announcer", libCore_gv_mAPMapAnnouncer[libGame_gv_teamChaosIndex_C]);
        }
    }

    PlayerApplySkin(lp_player, libCore_gv_dataAnnouncerVOPacks[lv_announcer].lv_skinEntry, true);
}

void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, bool lp_isKillAnnouncement) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Automatic Variable Declarations
    playergroup auto494765CB_g;
    int auto28829704_ae;
    const int auto28829704_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_announcement_SystemEnabled == false)) {
        return ;
    }

    auto494765CB_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto494765CB_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true) && (PlayerGroupHasPlayer(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer) == true)) {
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue >= libGame_gv_announcement_QueueMaxCount_C)) {
                TextExpressionSetToken("Param/Expression/lib_Game_DAC2346E", "A", IntToText(lv_itPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_DAC2346E"), true);
                continue;
            }

            lv_priorityInt = lp_priority;
            lv_desiredPosition = 0;
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue == 0)) {
                lv_desiredPosition = 1;
            }
            else {
                auto28829704_ae = libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue;
                lv_itQueuePosition = 1;
                for ( ; ( (auto28829704_ai >= 0 && lv_itQueuePosition <= auto28829704_ae) || (auto28829704_ai < 0 && lv_itQueuePosition >= auto28829704_ae) ) ; lv_itQueuePosition += auto28829704_ai ) {
                    if ((libGame_gv_announcementQueue[lv_itPlayer].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                        lv_desiredPosition = lv_itQueuePosition;
                        break;
                    }

                }
                if ((lv_desiredPosition == 0)) {
                    lv_desiredPosition = (libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue + 1);
                }

            }
            libGame_gf_AnnouncementInsertItemIntoQueueForPlayer(lv_itPlayer, lp_priority, lp_vOEvent, lp_animName, lp_textParam1, lp_textParam2, lp_textParam3, lp_textParam4, lp_icon, lp_duration, lv_desiredPosition, lp_isKillAnnouncement);
            if ((TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) <= 0.0)) {
                libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            }
            else {
                if ((lp_isKillAnnouncement == true) && (TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) > libGame_gv_announcement_KillAnnouncementTimerTreshold_C)) {
                    TimerStart(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer, libGame_gv_announcement_KillAnnouncementTimerTreshold_C, false, c_timeGame);
                }

            }
        }

    }
}

void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue = 0;
}

void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Automatic Variable Declarations
    int autoF18450D7_ae;
    const int autoF18450D7_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_8B00E70C", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_8B00E70C"), true);
        return ;
    }

    if ((lp_desiredInsertPosition > libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue)) {
        if (((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue + 1) >= 0)) {
            libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
            lv_insertPosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_E3E59036", "A", IntToText(lp_player));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E3E59036"), true);
            return ;
        }
    }
    else {
        autoF18450D7_ae = lp_desiredInsertPosition;
        lv_itQueuePosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (autoF18450D7_ai >= 0 && lv_itQueuePosition <= autoF18450D7_ae) || (autoF18450D7_ai < 0 && lv_itQueuePosition >= autoF18450D7_ae) ) ; lv_itQueuePosition += autoF18450D7_ai ) {
            libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_priority[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_animName[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_icon[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_icon[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_duration[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_itQueuePosition];
        }
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libGame_gv_announcementQueue[lp_player].lv_priority[lv_insertPosition] = lp_priority;
    libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_insertPosition] = lp_vOEvent;
    libGame_gv_announcementQueue[lp_player].lv_animName[lv_insertPosition] = lp_animName;
    libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_insertPosition] = lp_textParam1;
    libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_insertPosition] = lp_textParam2;
    libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_insertPosition] = lp_textParam3;
    libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_insertPosition] = lp_textParam4;
    libGame_gv_announcementQueue[lp_player].lv_icon[lv_insertPosition] = lp_icon;
    libGame_gv_announcementQueue[lp_player].lv_duration[lv_insertPosition] = lp_duration;
    libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_insertPosition] = lp_isKillAnnouncement;
}

void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon) {
    // Automatic Variable Declarations
    string autoAB21A62E_val;

    // Implementation
    autoAB21A62E_val = lp_animName;
    if (autoAB21A62E_val == "ShowStandardNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_coreNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowEnemyNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTutorialNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier0") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier1") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier2") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier3") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier4") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowQuestNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3, lp_icon, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
    }
}

void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;
    string lv_animName;

    // Automatic Variable Declarations
    int autoCBDD5345_ae;
    const int autoCBDD5345_ai = 1;

    // Variable Initialization
    lv_animName = "";

    // Implementation
    if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        lv_duration = libGame_gv_announcementQueue[lp_player].lv_duration[1];
        if ((libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[1] == true)) {
            libSond_gf_HeroVOStartHeroTakedownVOTimerForPlayer(lp_player, (lv_duration + libGame_gv_announcement_HeroTakedownVODelay_C));
        }

        lv_animName = libGame_gv_announcementQueue[lp_player].lv_animName[1];
        if ((lv_animName != "")) {
            libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer(lp_player, lv_animName, libGame_gv_announcementQueue[lp_player].lv_textParam1[1], libGame_gv_announcementQueue[lp_player].lv_textParam2[1], libGame_gv_announcementQueue[lp_player].lv_textParam3[1], libGame_gv_announcementQueue[lp_player].lv_textParam4[1], libGame_gv_announcementQueue[lp_player].lv_icon[1]);
            DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lv_animName);
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] != libCore_ge_AnnouncerVOEvents_Null)) {
            if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] == libCore_ge_AnnouncerVOEvents_Victory)) {
            }

            libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1], lp_player);
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 1)) {
            autoCBDD5345_ae = (libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue - 1);
            lv_itAnnouncement = 1;
            for ( ; ( (autoCBDD5345_ai >= 0 && lv_itAnnouncement <= autoCBDD5345_ae) || (autoCBDD5345_ai < 0 && lv_itAnnouncement >= autoCBDD5345_ae) ) ; lv_itAnnouncement += autoCBDD5345_ai ) {
                libGame_gv_announcementQueue[lp_player].lv_priority[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_animName[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_icon[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_icon[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_duration[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itAnnouncement + 1)];
            }
        }

        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        TimerStart(libGame_gv_announcementQueue[lp_player].lv_messageTimer, lv_duration, false, c_timeGame);
    }

}

void libGame_gf_BankInitializePlayerSettingsBankForPlayer (int lp_player) {
    // Variable Declarations
    bank lv_playerBank;
    string lv_buildString;
    int lv_itHero;
    int lv_itBuild;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buildString = "";
    lv_bankSection = "";
    lv_bankKey = "";

    // Implementation
    if ((PlayerType(lp_player) != c_playerTypeUser)) {
        return ;
    }

    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    BankSave(lv_playerBank);
}

void libGame_gf_BankInitializeMetaDataBankForPlayer (int lp_player) {
    // Variable Declarations
    bank lv_playerBank;
    string lv_buildString;
    int lv_itHero;
    int lv_itBuild;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buildString = "";
    lv_bankSection = "";
    lv_bankKey = "";

    // Implementation
    if ((PlayerType(lp_player) != c_playerTypeUser)) {
        return ;
    }

    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_metaDataBank;
    BankSave(lv_playerBank);
}

void libGame_gf_BankInitializeHeroBankForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_itLoadout;

    // Automatic Variable Declarations
    const int autoEA54268D_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int autoEA54268D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itLoadout = 1;
    for ( ; ( (autoEA54268D_ai >= 0 && lv_itLoadout <= autoEA54268D_ae) || (autoEA54268D_ai < 0 && lv_itLoadout >= autoEA54268D_ae) ) ; lv_itLoadout += autoEA54268D_ai ) {
        libGame_gf_LoadoutNameLoadNameForPlayer(lp_heroIndex, lp_player, lv_itLoadout);
    }
    libGame_gf_LoadoutSkinsPreloadSkinsOfHeroForPlayer(lp_heroIndex, lp_player);
    libGame_gf_LoadoutMountsPreloadMountsOfHeroForPlayer(lp_heroIndex, lp_player);
    libGame_gf_LoadoutAnnouncersPreloadAnnouncersOfHeroForPlayer(lp_heroIndex, lp_player);
    libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer(lp_heroIndex, lp_player, true);
    libGame_gf_LoadoutPrepickedTalentBuildPreloadBuildIndexOfHeroForPlayer(lp_heroIndex, lp_player);
    libGame_gf_LoadoutPrepickedTalentsPreloadBuildsForPlayer(lp_heroIndex, lp_player);

}

bool libGame_gf_StormUnitHasBehaviorFromCategory (int lp_category, unit lp_unit) {
    // Variable Declarations
    string lv_validator;

    // Automatic Variable Declarations
    int auto65E882BF_val;

    // Variable Initialization

    // Implementation
    auto65E882BF_val = lp_category;
    if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_AbnormalDeath) {
        lv_validator = "StormCategoryTargetHasAbnormalDeath";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_AbnormalRespawn) {
        lv_validator = "StormCategoryTargetHasAbnormalRespawn";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_DamageReduction) {
        lv_validator = "StormCategoryTargetHasDamageReduction";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_DebuffSpellPower) {
        lv_validator = "StormCategoryTargetHasDebuffSpellPower";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Eaten) {
        lv_validator = "StormCategoryTargetIsEaten";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Dodge) {
        lv_validator = "StormCategoryTargetIsDodging";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Flailing) {
        lv_validator = "StormCategoryTargetIsFlailing";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_FlailingBackward) {
        lv_validator = "StormCategoryTargetIsFlailingBackward";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_FlailingForward) {
        lv_validator = "StormCategoryTargetIsFlailingForward";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackIgnoreFX) {
        lv_validator = "StormCategoryTargetHasHallOfStormsKnockbackIgnoreFX";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackImmunity) {
        lv_validator = "StormCategoryTargetHasHallOfStormsKnockbackImmunity";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HealReceivedModifying) {
        lv_validator = "StormCategoryTargetHasHealReceivedModifying";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HealReduction) {
        lv_validator = "StormCategoryTargetHasHealReduction";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HideNameplate) {
        lv_validator = "StormCategoryTargetHasHideNameplate";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_HostileStasisRemoved) {
        lv_validator = "StormCategoryTargetHasHostileStasisRemoved";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_ImmunedToAllyDisplacement) {
        lv_validator = "StormCategoryTargetIsImmunedToAllyDisplacement";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_ImmunedToEnemyDisplacement) {
        lv_validator = "StormCategoryTargetIsImmunedToEnemyDisplacement";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_KnockedOut) {
        lv_validator = "StormCategoryTargetIsKnockedOut";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_MindControl) {
        lv_validator = "StormCategoryTargetIsMindControlled";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_PermanentMaxHealth) {
        lv_validator = "StormCategoryTargetHasPermanentMaxHealth";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_PhysicalArmor) {
        lv_validator = "StormCategoryTargetHasPhysicalArmor";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Polymorph) {
        lv_validator = "StormCategoryTargetHasPolymorph";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Protected) {
        lv_validator = "StormCategoryTargetHasProtected";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_PseudoStructure) {
        lv_validator = "StormCategoryTargetIsPseudoStructure";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Root) {
        lv_validator = "StormCategoryTargetIsRooted";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Shield) {
        lv_validator = "StormCategoryTargetHasShield";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Silence) {
        lv_validator = "StormCategoryTargetHasSilence";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_SpecialDeathState) {
        lv_validator = "StormCategoryTargetHasSpecialDeathState";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_SpellArmor) {
        lv_validator = "StormCategoryTargetHasSpellArmor";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_StackingComboMarker) {
        lv_validator = "StormCategoryTargetHasStackingComboMarker";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Stasis) {
        lv_validator = "StormCategoryTargetHasStasis";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_StasisAir) {
        lv_validator = "StormCategoryTargetHasStasisAir";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Stun) {
        lv_validator = "StormCategoryTargetHasStun";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_SuppressCollision) {
        lv_validator = "StormCategoryTargetHasSuppressCollision";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_SuppressUltimateCharge) {
        lv_validator = "StormCategoryTargetHasSuppressUltimateCharge";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_SuppressVisibility) {
        lv_validator = "StormCategoryTargetIsSuppressingVisibility";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Taunt) {
        lv_validator = "StormCategoryTargetIsTaunted";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_TipableKnockback) {
        lv_validator = "StormCategoryTargetHasTipableKnockback";
    }
    else if (auto65E882BF_val == libGame_ge_StormBehaviorCategories_Unreducible) {
        lv_validator = "StormCategoryTargetIsUnreducible";
    }
    else {
        return false;
    }
    return libCore_gf_ExecuteValidatorOnUnit(lv_validator, lp_unit, lp_unit);
}

bool libGame_gf_StormBehaviorHasCategory (string lp_behavior, int lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return (libCore_gf_TechAliasExist(c_gameCatalogBehavior, lp_behavior, libGame_gf_StormBehaviorCategoryAsString(lp_category)) == true);
}

string libGame_gf_StormBehaviorCategoryAsString (int lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return ("StormCategory " + libGame_ge_StormBehaviorCategories_Ident(lp_category));
}

void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newAIOwner, int lp_newPlayerOwner, playergroup lp_capturingPlayers) {
    // Variable Declarations
    int lv_currentOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentOwner = UnitGetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit);
    if ((lp_newAIOwner == lv_currentOwner)) {
        return ;
    }

    if ((UnitGetType(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
        if (((lp_newAIOwner == libCore_gv_cOMPUTER_TeamOrder) || (lp_newAIOwner == libCore_gv_cOMPUTER_TeamChaos))) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, "AnimPlay Spell Spell");
        }

    }

    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, lp_newAIOwner, true);
    libGame_gf_SendEventCapturePointChangesOwner(lp_capturePointIndex, lp_newAIOwner, lp_newPlayerOwner, lp_capturingPlayers);
}

void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_ECE525DC"), true);
        return ;
    }

    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_decayToOwner = lp_decayToOwner;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DimmingFrame", lp_beaconUnit);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBarDimmingFrame = DialogControlLastCreated();
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    // libGame_gt_StartGame
    DataTableSetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointCreate2 (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, int lp_contestedPointDecay, int lp_emptyPointDecay, bool lp_decayToOwner, bool lp_rememberLastOwner) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_9CD878D9"), true);
        return ;
    }

    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_contestedPointDecay = lp_contestedPointDecay;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_emptyPointDecay = lp_emptyPointDecay;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DimmingFrame", lp_beaconUnit);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBarDimmingFrame = DialogControlLastCreated();
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    // libGame_gt_StartGame
    DataTableSetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointEnable (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == true))) {
        return ;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = true;
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Show");
    libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter = 0;
}

trigger auto_libGame_gf_CapturePointDisable_Trigger = null;
int auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

void libGame_gf_CapturePointDisable (int lp_capturePointIndex) {
    auto_libGame_gf_CapturePointDisable_lp_capturePointIndex = lp_capturePointIndex;

    if (auto_libGame_gf_CapturePointDisable_Trigger == null) {
        auto_libGame_gf_CapturePointDisable_Trigger = TriggerCreate("auto_libGame_gf_CapturePointDisable_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CapturePointDisable_Trigger, false, false);
}

bool auto_libGame_gf_CapturePointDisable_TriggerFunc (bool testConds, bool runActions) {
    int lp_capturePointIndex = auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == false))) {
        return true;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Hide");
    Wait(1.0, c_timeGame);
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    return true;
}

int libGame_gf_LastCreatedCapturePoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C);
}

bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }

    if (((libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == (libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints * -1)))) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_TowerCreateCoreUnderAttackPing (unit lp_coreUnit, int lp_teamNumber) {
    // Variable Declarations
    playergroup lv_pingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, lv_pingGroup);
    libCore_gf_CreateMinimapPingStorm(lv_pingGroup, "StormWarning", UnitGetPosition(lp_coreUnit), ColorWithAlpha(0.0, 0.0, 0.0, 0.0), 0);
    libGame_gv_towerTeamCoreAlertPing[lp_teamNumber] = PingLastCreated();
    PingSetModel(PingLastCreated(), "StormPingCoreAttack");
    PingSetUnit(PingLastCreated(), lp_coreUnit);
    PingSetRotation(PingLastCreated(), 270.0);
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_CoreUnderAttack_Ally", -1), c_maxPlayers, libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, 100.0, 0.0);
}

void libGame_gf_CCRecognitionCCReduction (unit lp_unit, string lp_behavior) {
    // Variable Declarations
    fixed lv_relentless;
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_relentless = libNtve_gf_ArithmeticRealClamp(UnitBehaviorEffectTreeUserData(lp_unit, "HeroGenericUserRecord", "Relentless"), 0.0, 100.0);
    if ((lv_relentless <= 0.0)) {
        return ;
    }

    if ((libCore_gf_TechAliasExist(c_gameCatalogBehavior, lp_behavior, ("StormCategory " + libGame_ge_StormBehaviorCategories_Ident(libGame_ge_StormBehaviorCategories_Unreducible))) == true)) {
        return ;
    }

    lv_duration = UnitBehaviorDuration(lp_unit, lp_behavior);
    if ((lv_duration > libGame_gv_cCReductionTimeMinimum_C)) {
        lv_relentless *= 0.01;
        lv_duration *= (1.0 - lv_relentless);
        lv_duration = MaxF(libGame_gv_cCReductionTimeMinimum_C, lv_duration);
        UnitBehaviorSetDurationRemaining(lp_unit, lp_behavior, lv_duration);
    }

}

bool libGame_gf_DeathRecapCheckforCombineEvent (int lp_deadPlayer, int lp_currentEffectBarIndex, fixed lp_currentEffectInstanceTime, int lp_effectingPlayer, string lp_effectingUnitType, string lp_effectingSourceButton, bool lp_nPCSource, bool lp_structureSource) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_currentEffectInstanceTime - libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_time) < libGame_gv_deathRecap_MaxEffectCombineTimeElapsed_C) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_combinedNumOfEvents < libGame_gv_deathRecap_MaxEffectCombinePerSlot_C)) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer == lp_effectingPlayer) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_button == lp_effectingSourceButton) && (((libGame_gf_PlayerIsHeroPlayer(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer) == false) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_nPCSource == lp_nPCSource) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_structureSource == lp_structureSource)) || ((libGame_gf_PlayerIsHeroPlayer(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer) == true) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_unitType == lp_effectingUnitType)))) {
            return true;
        }

    }

    return false;
}

void libGame_gf_DeathRecapAddSpecialDamageAbility (string lp_abilityLink) {
    // Variable Declarations
    int lv_itSpecialDamageAbility;

    // Automatic Variable Declarations
    const int autoE59BE54D_ae = libGame_gv_deathRecap_SpecialDamageEffectsCount_C;
    const int autoE59BE54D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itSpecialDamageAbility = 1;
    for ( ; ( (autoE59BE54D_ai >= 0 && lv_itSpecialDamageAbility <= autoE59BE54D_ae) || (autoE59BE54D_ai < 0 && lv_itSpecialDamageAbility >= autoE59BE54D_ae) ) ; lv_itSpecialDamageAbility += autoE59BE54D_ai ) {
        if ((libGame_gv_deathRecapSpecialDamageAbilities[lv_itSpecialDamageAbility].lv_ability == null)) {
            libGame_gv_deathRecapSpecialDamageAbilities[lv_itSpecialDamageAbility].lv_ability = lp_abilityLink;
            return ;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Game_2FA00FB2", "A", StringExternal((lp_abilityLink)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_2FA00FB2"), true);
}

void libGame_gf_DeathRecapSortMaxDamageAbils (int lp_deadPlayer, int lp_maxDamagerIndex, int lp_currentMaxDamagerAbilIndex) {
    // Variable Declarations
    int lv_swapIndex;
    string lv_swapButton;
    int lv_swapAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_currentMaxDamagerAbilIndex <= 1)) {
        return ;
    }

    lv_swapIndex = (lp_currentMaxDamagerAbilIndex - 1);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount < libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount)) {
        lv_swapButton = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_button;
        lv_swapAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_button = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_button;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_button = lv_swapButton;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount = lv_swapAmount;
    }

    if ((lv_swapIndex > 1)) {
        libGame_gf_DeathRecapSortMaxDamageAbils(lp_deadPlayer, lp_maxDamagerIndex, lv_swapIndex);
    }

}

void libGame_gf_DeathRecapSortMaxDamagers (int lp_deadPlayer) {
    // Variable Declarations
    int lv_swapIndex;
    int lv_swapHeroIndex;
    int lv_swapAmount;
    int lv_swapPlayer;
    int lv_swapAbilCount;
    string lv_swapAbil;
    int lv_swapAbilAmount;
    int lv_itAbil;
    int lv_itMaxDamagers;
    bool lv_sortingComplete;

    // Automatic Variable Declarations
    int auto525195AC_ae;
    const int auto525195AC_ai = 1;
    const int autoEE129799_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
    const int autoEE129799_ai = 1;

    // Variable Initialization
    lv_sortingComplete = true;

    // Implementation
    auto525195AC_ae = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount-1);
    lv_itMaxDamagers = 1;
    for ( ; ( (auto525195AC_ai >= 0 && lv_itMaxDamagers <= auto525195AC_ae) || (auto525195AC_ai < 0 && lv_itMaxDamagers >= auto525195AC_ae) ) ; lv_itMaxDamagers += auto525195AC_ai ) {
        lv_swapIndex = (lv_itMaxDamagers+1);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount < libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_amount)) {
            lv_sortingComplete = false;
            lv_swapHeroIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_heroIndex;
            lv_swapAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_amount;
            lv_swapPlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_player;
            lv_swapAbilCount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbilCount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_heroIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_heroIndex;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_player = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_player;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbilCount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_heroIndex = lv_swapHeroIndex;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount = lv_swapAmount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_player = lv_swapPlayer;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount = lv_swapAbilCount;
            lv_itAbil = 1;
            for ( ; ( (autoEE129799_ai >= 0 && lv_itAbil <= autoEE129799_ae) || (autoEE129799_ai < 0 && lv_itAbil >= autoEE129799_ae) ) ; lv_itAbil += autoEE129799_ai ) {
                lv_swapAbil = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_button;
                lv_swapAbilAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_button = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_button;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount = lv_swapAbilAmount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_button = lv_swapAbil;
            }
        }

    }
    if ((lv_sortingComplete == false)) {
        libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount = MinI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount, libGame_gv_deathRecap_MaxMaxDamagers_C);
    }
}

void libGame_gf_DeathRecapAddMaxDamageAbilForPlayer (int lp_deadPlayer, int lp_maxDamagerIndex, string lp_effectingButton, int lp_effectAmount) {
    // Variable Declarations
    int lv_effectingPlayer;
    int lv_itMaxDamagerAbilIndex;

    // Automatic Variable Declarations
    const int auto58B50B68_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
    const int auto58B50B68_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itMaxDamagerAbilIndex = 1;
    for ( ; ( (auto58B50B68_ai >= 0 && lv_itMaxDamagerAbilIndex <= auto58B50B68_ae) || (auto58B50B68_ai < 0 && lv_itMaxDamagerAbilIndex >= auto58B50B68_ae) ) ; lv_itMaxDamagerAbilIndex += auto58B50B68_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button != null)) {
            if ((lp_effectingButton == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button)) {
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_amount += lp_effectAmount;
                break;
            }

        }
        else {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button = lp_effectingButton;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_amount += lp_effectAmount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount += 1;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount = MinI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount, libGame_gv_deathRecap_MaxMaxDamageAbils_C);
            break;
        }
    }
    libGame_gf_DeathRecapSortMaxDamageAbils(lp_deadPlayer, lp_maxDamagerIndex, lv_itMaxDamagerAbilIndex);
}

void libGame_gf_DeathRecapAddEffectInstanceForPlayer (int lp_deadPlayer, int lp_effectingPlayer, string lp_effectingUnitType, int lp_effectAmount, int lp_effectAmountAttempted, int lp_effectAmountAbsorbed, bool lp_isHeal, fixed lp_effectTime, string lp_debugString, string lp_sourceButton) {
    // Variable Declarations
    int lv_effectingPlayer;
    int lv_effectHeroIndex;
    int lv_effectEventTimeIndex;
    bool lv_nPCPlayer;
    bool lv_structureSource;
    int lv_itEffect;
    int lv_itMaxDamagerIndex;

    // Automatic Variable Declarations
    int auto3B54BE42_ae;
    const int auto3B54BE42_ai = 1;
    const int auto70251C7B_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
    const int auto70251C7B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount <= 0) && (lp_isHeal == true)) {
        return ;
    }

    lv_effectingPlayer = lp_effectingPlayer;
    if ((libGame_gf_PlayerIsHeroPlayer(lv_effectingPlayer) == true)) {
        lv_effectHeroIndex = libGame_gv_players[lv_effectingPlayer].lv_heroIndex;
    }
    else {
        lv_nPCPlayer = true;
        lv_structureSource = UnitTypeTestAttribute(lp_effectingUnitType, c_unitAttributeStructure);
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount += 1;
    if ((libGame_gf_DeathRecapCheckforCombineEvent(lp_deadPlayer, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount, lp_effectTime, lv_effectingPlayer, lp_effectingUnitType, lp_sourceButton, lv_nPCPlayer, lv_structureSource) == true)) {
        lv_effectEventTimeIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount += lp_effectAmount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAttempted += lp_effectAmountAttempted;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAbsorbed += lp_effectAmountAbsorbed;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth = 0;
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount += 1;
        lv_effectEventTimeIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer = lv_effectingPlayer;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_heroIndex = lv_effectHeroIndex;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal = lp_isHeal;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_nPCSource = lv_nPCPlayer;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_structureSource = lv_structureSource;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount = lp_effectAmount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAttempted = lp_effectAmountAttempted;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAbsorbed = lp_effectAmountAbsorbed;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountOverkill = (lp_effectAmountAttempted - (lp_effectAmount + lp_effectAmountAbsorbed));
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_button = lp_sourceButton;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_unitType = lp_effectingUnitType;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_time = lp_effectTime;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_debugString = lp_debugString;
    }
    auto3B54BE42_ae = (lv_effectEventTimeIndex-1);
    lv_itEffect = 1;
    for ( ; ( (auto3B54BE42_ai >= 0 && lv_itEffect <= auto3B54BE42_ae) || (auto3B54BE42_ai < 0 && lv_itEffect >= auto3B54BE42_ae) ) ; lv_itEffect += auto3B54BE42_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth -= libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
        else {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth += libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_combinedNumOfEvents += 1;
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal == true)) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth -= lp_effectAmount;
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth += lp_effectAmount;
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth = MaxI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
    if ((lp_isHeal == false)) {
        lv_itMaxDamagerIndex = 1;
        for ( ; ( (auto70251C7B_ai >= 0 && lv_itMaxDamagerIndex <= auto70251C7B_ae) || (auto70251C7B_ai < 0 && lv_itMaxDamagerIndex >= auto70251C7B_ae) ) ; lv_itMaxDamagerIndex += auto70251C7B_ai ) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_player != 0)) {
                if ((lv_effectHeroIndex == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_heroIndex)) {
                    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                    break;
                }

            }
            else {
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_player = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_heroIndex = lv_effectHeroIndex;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount += 1;
                break;
            }
        }
        libGame_gf_DeathRecapAddMaxDamageAbilForPlayer(lp_deadPlayer, lv_itMaxDamagerIndex, lp_sourceButton, lp_effectAmount);
    }

}

void libGame_gf_DeathRecapClearDeathRecapForPlayer (int lp_deadPlayer) {
    // Variable Declarations
    int lv_itTimeIndex;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbil;

    // Automatic Variable Declarations
    const int auto11C61CEE_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int auto11C61CEE_ai = 1;
    const int autoEE652FEF_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
    const int autoEE652FEF_ai = 1;
    const int autoAC36BCFA_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
    const int autoAC36BCFA_ai = 1;

    // Variable Initialization

    // Implementation
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount = 0;
    lv_itTimeIndex = 1;
    for ( ; ( (auto11C61CEE_ai >= 0 && lv_itTimeIndex <= auto11C61CEE_ae) || (auto11C61CEE_ai < 0 && lv_itTimeIndex >= auto11C61CEE_ae) ) ; lv_itTimeIndex += auto11C61CEE_ai ) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effect = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effectPlayer = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_heroIndex = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_isHeal = false;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_nPCSource = false;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amount = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountAttempted = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountAbsorbed = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountOverkill = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_postEffectHealth = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedNumOfEvents = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedTimeDelta = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_abilityLink = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_button = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_unitType = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_time = 0.0;
    }
    lv_itMaxDamager = 1;
    for ( ; ( (autoEE652FEF_ai >= 0 && lv_itMaxDamager <= autoEE652FEF_ae) || (autoEE652FEF_ai < 0 && lv_itMaxDamager >= autoEE652FEF_ae) ) ; lv_itMaxDamager += autoEE652FEF_ai ) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_player = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_heroIndex = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_amount = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbilCount = 0;
        lv_itMaxDamagerAbil = 1;
        for ( ; ( (autoAC36BCFA_ai >= 0 && lv_itMaxDamagerAbil <= autoAC36BCFA_ae) || (autoAC36BCFA_ai < 0 && lv_itMaxDamagerAbil >= autoAC36BCFA_ae) ) ; lv_itMaxDamagerAbil += autoAC36BCFA_ai ) {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_button = null;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_amount = 0;
        }
    }
}

trigger auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger = null;
unit auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero;
int auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer;

void libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer (unit lp_playerHero, int lp_deadPlayer) {
    auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero = lp_playerHero;
    auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer = lp_deadPlayer;

    if (auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger == null) {
        auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger = TriggerCreate("auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_playerHero = auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero;
    int lp_deadPlayer = auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer;

    // Variable Declarations
    unit lv_deadHeroUnit;
    string lv_effectingUnitType;
    int lv_effectingPlayer;
    int lv_itEffectHistoryEntry;
    fixed lv_currentTime;
    fixed lv_effectHistoryEntryTime;
    string lv_effectHistoryEntryAbility222222222222222;
    int lv_effectType;
    int lv_effectAmount;
    int lv_effectAmountAttempted;
    int lv_effectAmountAbsorbed;
    bool lv_isHeal;
    fixed lv_effectTime;
    string lv_debugString;
    string lv_unitTypeAsString;
    int lv_effectTypePreset;
    int lv_effectTypePresetAttempted;
    bool lv_effectKill;
    bool lv_killingBlowFound;
    string lv_sourceButton;
    int lv_specialDamageAbilityCount;
    string lv_specialDamageAbilityLink;
    int lv_itSpecialDamageAbilitytEntry;
    bool lv_foundSpecialDamageAbility;
    int lv_maxUnitEffectsInHistory;
    int lv_minEffectValue;
    int lv_lifeIndex;

    // Automatic Variable Declarations
    int autoAA0E7642_ae;
    const int autoAA0E7642_ai = -1;

    // Variable Initialization
    lv_debugString = "";
    lv_unitTypeAsString = "";
    lv_specialDamageAbilityCount = libGame_gv_deathRecap_SpecialDamageEffectsCount_C;

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return true;
    }

    lv_currentTime = libGame_gf_GameFlowCurrentGameTime();
    lv_deadHeroUnit = lp_playerHero;
    libGame_gf_DeathRecapClearDeathRecapForPlayer(lp_deadPlayer);
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth = FixedToInt(Round(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLifeMax, c_unitPropCurrent)));
    lv_lifeIndex = (libGame_gf_EffectHistoryLifeTotalCount(lp_playerHero) - 1);
    lv_maxUnitEffectsInHistory = libGame_gf_EffectHistoryEntryCount(lp_playerHero, lv_lifeIndex);
    lv_minEffectValue = (lv_maxUnitEffectsInHistory - libGame_gv_deathRecapMaxEffectsInHistory);
    if ((lv_minEffectValue <= 0)) {
        lv_minEffectValue = 1;
    }

    autoAA0E7642_ae = lv_minEffectValue;
    lv_itEffectHistoryEntry = lv_maxUnitEffectsInHistory;
    for ( ; ( (autoAA0E7642_ai >= 0 && lv_itEffectHistoryEntry <= autoAA0E7642_ae) || (autoAA0E7642_ai < 0 && lv_itEffectHistoryEntry >= autoAA0E7642_ae) ) ; lv_itEffectHistoryEntry += autoAA0E7642_ai ) {
        lv_effectHistoryEntryTime = libGame_gf_EffectHistoryGetDataFromUnitTime(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
        lv_effectTime = (lv_currentTime - lv_effectHistoryEntryTime);
        if ((lv_effectTime > libGame_gv_deathRecap_MaxTimeElapsed_C)) {
            break;
        }

        lv_debugString = "";
        lv_effectingPlayer = libGame_gf_EffectHistoryGetDataFromUnitOriginPlayer(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
        lv_foundSpecialDamageAbility = false;
        lv_effectTypePreset = libGame_gf_EffectHistoryGetDataFromUnitType(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
        if ((lv_foundSpecialDamageAbility == true)) {
            lv_effectAmount = FixedToInt(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_specialDamageAbilityLink, "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_effectingPlayer));
        }
        else {
            if ((lv_effectTypePreset == libGame_ge_EffectHistoryDamagedOrHealed_Healed)) {
                lv_isHeal = true;
            }
            else {
                lv_isHeal = false;
            }
            if ((lv_killingBlowFound == false)) {
                lv_killingBlowFound = libGame_gf_EffectHistoryGetDataFromUnitIsKill(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
            }

            lv_effectAmount = FixedToInt(Round(libGame_gf_EffectHistoryGetDataFromUnitAmount(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero)));
            lv_effectAmountAttempted = FixedToInt(Round(libGame_gf_EffectHistoryGetDataFromUnitAmountAttempted(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero)));
            lv_effectAmountAbsorbed = FixedToInt(Round(libGame_gf_EffectHistoryGetDataFromUnitAmountAbsorbed(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero)));
        }
        if ((lv_effectAmount <= 0)) {
            if ((lv_killingBlowFound == false) && (lv_effectAmountAttempted > lv_effectAmountAbsorbed) && (lv_itEffectHistoryEntry == lv_maxUnitEffectsInHistory)) {
                lv_effectAmount = MaxI(FixedToInt(Floor(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLife, c_unitPropCurrent))), PlayerScoreValueGetAsInt(lp_deadPlayer, "DeadHeroLastKnownHealth"));
                lv_effectKill = true;
                if ((lv_effectAmount == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth)) {
                    lv_effectAmount = 1;
                }

            }
            else {
                continue;
            }
        }

        lv_effectingUnitType = libGame_gf_EffectHistoryGetDataFromUnitOriginUnitType(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
        if ((lv_foundSpecialDamageAbility == false)) {
            lv_sourceButton = libGame_gf_EffectHistoryGetDataFromUnitButtonIndex(lv_lifeIndex, lv_itEffectHistoryEntry, lp_playerHero);
        }

        if ((lv_effectingUnitType == null)) {
            lv_sourceButton = "DebugUnknownAbility";
        }
        else {
            lv_unitTypeAsString = (UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit));
            if ((lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) != lv_unitTypeAsString)) || ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)))) {
                lv_effectHistoryEntryAbility222222222222222 = AbilityCommandGetAbility(TechTreeUnitProducedAbilCmd(lv_effectingUnitType, 0));
                if ((lv_sourceButton == null)) {
                    lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility222222222222222, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                }

                lv_effectingUnitType = UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit);
            }
            else {
                if ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)) {
                    lv_effectingUnitType = UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit);
                }

                if ((lv_sourceButton == null)) {
                    lv_sourceButton = "DebugUnknownAbility";
                }

            }
        }
        if ((lv_effectKill == true) && (lv_killingBlowFound == false)) {
            lv_killingBlowFound = true;
        }

        libGame_gf_DeathRecapAddEffectInstanceForPlayer(lp_deadPlayer, lv_effectingPlayer, lv_effectingUnitType, lv_effectAmount, lv_effectAmountAttempted, lv_effectAmountAbsorbed, lv_isHeal, lv_effectTime, lv_debugString, lv_sourceButton);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount >= libGame_gv_deathRecap_MaxEffectsBars_C)) {
            break;
        }

    }
    libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount >= 1)) {
        libUIUI_gf_DeathRecapPopulateHighestDamagersForPlayer(lp_deadPlayer);
        libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel(lp_deadPlayer);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_6213E122"), true);
    }
    return true;
}

void libGame_gf_EffectHistoryAddEffectInHistoryForUnit (unit lp_originUnit, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_damagedOrHealed, string lp_entryLink, string lp_parentEntry, bool lp_isFatal) {
    // Variable Declarations
    fixed lv_currentTime;
    string lv_stringEntry;
    string lv_buttonEntry;
    int lv_existedEffectIndex;
    string lv_dataCollectionEntry;
    string lv_originUnitType;
    int lv_lifeDataIndex;
    int lv_lifeEntryIndex;
    int lv_originUnitIndex;
    int lv_originPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringEntry = "";
    lv_dataCollectionEntry = "";

    // Implementation
    if ((libCore_gv_gameStarted == true) && (libCore_gv_gameOver == false)) {
    }
    else {
        return ;
    }
    lv_currentTime = libGame_gf_GameFlowCurrentGameTime();
    lv_lifeDataIndex = libGame_gf_EffectHistoryLifeCurrentOfUnitGet(lp_targetUnit);
    lv_lifeEntryIndex = libGame_gf_EffectHistoryEntryCountIncrementAndReturnNewIndex(lp_targetUnit, lv_lifeDataIndex);
    lv_originUnitType = UnitGetType(lp_originUnit);
    lv_originUnitIndex = libCore_gf_DataUnitHistoryDataGetIndexOfEntryType(libCore_ge_DataUnitHistoryDataType_Unit, (lv_originUnitType));
    lv_originPlayer = UnitGetOwner(lp_originUnit);
    if ((lv_originUnitIndex == -1)) {
        TextExpressionSetToken("Param/Expression/lib_Game_2F9F64DA", "A", UnitTypeGetName(UnitGetType(lp_targetUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_2F9F64DA", "B", IntToText(UnitGetOwner(lp_targetUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_2F9F64DA"), true);
        return ;
    }

    lv_stringEntry = (lp_entryLink);
    if ((lp_parentEntry != "") && (lp_parentEntry != null)) {
    }

    lv_buttonIndex = libCore_gf_ValueFromUserRecordEffectSourceButtonIndex(lv_stringEntry);
    if ((lv_buttonIndex <= 0)) {
        if (true) {
            if ((StringContains(lv_stringEntry, "@", c_stringAnywhere, c_stringCase) == true)) {
                lv_stringEntry = StringReplaceWord(lv_stringEntry, "@", " ", c_stringReplaceAll, c_stringCase);
                lv_stringEntry = StringWord(lv_stringEntry, 1);
                lv_dataCollectionEntry = lv_stringEntry;
            }

            if ((CatalogEntryIsValid(c_gameCatalogDataCollection, lv_dataCollectionEntry) == true)) {
                lv_buttonEntry = ((CatalogFieldValueGet(c_gameCatalogDataCollection, lv_dataCollectionEntry, "Button", c_playerAny)));
                if ((CatalogEntryIsValid(c_gameCatalogButton, lv_buttonEntry) == false)) {
                    lv_buttonEntry = "DebugUnknownAbility";
                }

            }
            else {
                lv_buttonEntry = "DebugUnknownAbility";
            }
        }
        lv_buttonIndex = libCore_gf_DataUnitHistoryDataGetIndexOfEntryType(libCore_ge_DataUnitHistoryDataType_Button, (lv_buttonEntry));
    }

    libGame_gf_EffectHistoryStoreDataToUnit(lv_lifeDataIndex, lv_lifeEntryIndex, lv_originUnitIndex, lv_originPlayer, lp_targetUnit, lp_amount, lp_amountAttempted, lp_amountAbsorbed, lp_damagedOrHealed, lv_buttonIndex, lp_isFatal, lv_currentTime);
    if ((lp_damagedOrHealed == libGame_ge_EffectHistoryDamagedOrHealed_Damaged) && (lp_isFatal == true)) {
        libGame_gf_EffectHistoryLifeCurrentOfUnitIncrement(lp_targetUnit);
        libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(lp_targetUnit, UnitGetOwner(lp_targetUnit));
    }

}

int libGame_gf_EffectHistoryLifeCurrentOfUnitGet (unit lp_unit) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = "EffectHistory_Life_Current";
    return FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
}

void libGame_gf_EffectHistoryLifeCurrentOfUnitIncrement (unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = "EffectHistory_Life_Current";
    lv_value = (FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit)) + 1);
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_unit, lv_key, IntToFixed(lv_value));
    lv_key = "EffectHistory_Life_TotalCount";
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_unit, lv_key, IntToFixed(lv_value));
}

int libGame_gf_EffectHistoryLifeTotalCount (unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = "EffectHistory_Life_TotalCount";
    lv_value = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
    if ((lv_value == 0)) {
        lv_value = 1;
    }

    return lv_value;
}

string libGame_gf_EffectHistoryFormatDataKey (int lp_lifeIndex, int lp_entryIndex, string lp_dataKey) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = ("EffectHistory Life [" + IntToString(lp_lifeIndex) + "] Entry [" + IntToString(lp_entryIndex) + "] " + (lp_dataKey));
    return lv_key;
}

void libGame_gf_EffectHistoryStoreDataToUnit (int lp_lifeIndex, int lp_entryIndex, int lp_originUnitIndex, int lp_originPlayer, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_type, int lp_buttonIndex, bool lp_isKill, fixed lp_time) {
    // Variable Declarations
    string lv_key;
    int lv_owner;
    string lv_targetType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";
    lv_owner = UnitGetOwner(lp_targetUnit);
    lv_targetType = UnitGetType(lp_targetUnit);

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Type");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, IntToFixed((lp_type)));

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Amount");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, lp_amount);

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "AmountAttempted");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, lp_amountAttempted);

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "AmountAbsorbed");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, lp_amountAbsorbed);

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "IsKill");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, IntToFixed(BoolToInt(lp_isKill)));

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Time");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, lp_time);

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "OriginUnitType");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, IntToFixed(lp_originUnitIndex));

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "OriginPlayer");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, IntToFixed(lp_originPlayer));

    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "ButtonIndex");
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_targetUnit, lv_key, IntToFixed(lp_buttonIndex));

}

int libGame_gf_EffectHistoryEntryCount (unit lp_unit, int lp_lifeIndex) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = ("EffectHistory_Life" + IntToString(lp_lifeIndex) + "_Entry_Count");
    return FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
}

int libGame_gf_EffectHistoryEntryCountIncrementAndReturnNewIndex (unit lp_unit, int lp_lifeIndex) {
    // Variable Declarations
    string lv_key;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = ("EffectHistory_Life" + IntToString(lp_lifeIndex) + "_Entry_Count");
    lv_count = (FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit)) + 1);
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_unit, lv_key, IntToFixed(lv_count));
    return lv_count;
}

int libGame_gf_EffectHistoryGetDataFromUnitType (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Type");
    lv_value = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
    return lv_value;
}

fixed libGame_gf_EffectHistoryGetDataFromUnitAmount (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Amount");
    lv_value = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit);
    return lv_value;
}

fixed libGame_gf_EffectHistoryGetDataFromUnitAmountAbsorbed (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "AmountAbsorbed");
    lv_value = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit);
    return lv_value;
}

fixed libGame_gf_EffectHistoryGetDataFromUnitAmountAttempted (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "AmountAttempted");
    lv_value = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit);
    return lv_value;
}

bool libGame_gf_EffectHistoryGetDataFromUnitIsKill (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    bool lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "IsKill");
    lv_value = (FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit)) == 1);
    return lv_value;
}

fixed libGame_gf_EffectHistoryGetDataFromUnitTime (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "Time");
    lv_value = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit);
    return lv_value;
}

string libGame_gf_EffectHistoryGetDataFromUnitOriginUnitType (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_index;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "OriginUnitType");
    lv_index = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
    lv_value = (libCore_gf_DataUnitHistoryDataGetEntryOfIndexType(libCore_ge_DataUnitHistoryDataType_Unit, lv_index));
    return lv_value;
}

int libGame_gf_EffectHistoryGetDataFromUnitOriginPlayer (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "OriginPlayer");
    lv_value = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
    return lv_value;
}

string libGame_gf_EffectHistoryGetDataFromUnitButtonIndex (int lp_lifeIndex, int lp_entryIndex, unit lp_unit) {
    // Variable Declarations
    string lv_key;
    int lv_index;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_key = "";

    // Implementation
    lv_key = libGame_gf_EffectHistoryFormatDataKey(lp_lifeIndex, lp_entryIndex, "ButtonIndex");
    lv_index = FixedToInt(libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lp_unit));
    lv_value = (libCore_gf_DataUnitHistoryDataGetEntryOfIndexType(libCore_ge_DataUnitHistoryDataType_Button, lv_index));
    return lv_value;
}

text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue) {
    // Variable Declarations
    text lv_formattedText;
    text lv_fontStyle;

    // Automatic Variable Declarations
    int auto5E9E20B8_val;
    int autoAA027A12_val;

    // Variable Initialization

    // Implementation
    auto5E9E20B8_val = lp_calloutStatIndex;
    if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_TimeSpentAlive)) {
        TextExpressionSetToken("Param/Expression/lib_Game_6350DC0D", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(lp_statValue)));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_6350DC0D");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)) {
        TextExpressionSetToken("Param/Expression/lib_Game_BCB8D4D9", "A", FixedToText((lp_statValue * 100.0), 1));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_BCB8D4D9");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_Takedowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C4BCAEF6", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_C4BCAEF6");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_FDD35B27", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FDD35B27");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_AC767B09", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_AC767B09");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapTributesCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_CAE3CE95", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_CAE3CE95");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_D9C82864", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_D9C82864");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_0D0E0150", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_0D0E0150");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_7A26F51D", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_7A26F51D");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_BDE15A67", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_BDE15A67");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_28CCA76C", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_28CCA76C");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapSkullsCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_86E58DF9", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_86E58DF9");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_31924C56", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_31924C56");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MercCampsCaptured)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_34CE69E9", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_34CE69E9");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_8B90578E", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_8B90578E");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A5A1DB3F", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A5A1DB3F");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A0E02851", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A0E02851");
    }
    else {
    }
    autoAA027A12_val = lp_thresholdIndex;
    if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_Display)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_27F49393");
    }
    else if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_GreatJob)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_DB629667");
        TextExpressionSetToken("Param/Expression/lib_Game_79D435FA", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_79D435FA");
    }
    else if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_Amazing)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_69883CA4");
        TextExpressionSetToken("Param/Expression/lib_Game_4AEC64D5", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_4AEC64D5");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_Game_66A312DB", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_Game_66A312DB", "B", lv_formattedText);
    lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_66A312DB");
    return lv_formattedText;
}

int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int) {
    // Automatic Variable Declarations
    int autoCA4EB926_val;

    // Implementation
    autoCA4EB926_val = lp_int;
    if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath)) {
        return libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_FollowMinions)) {
        return libGame_ge_EncouragementDeathTipsNames_FollowMinions;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Gangups)) {
        return libGame_ge_EncouragementDeathTipsNames_Gangups;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Retreat)) {
        return libGame_ge_EncouragementDeathTipsNames_Retreat;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns)) {
        return libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Moonwell)) {
        return libGame_ge_EncouragementDeathTipsNames_Moonwell;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Mount)) {
        return libGame_ge_EncouragementDeathTipsNames_Mount;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_TrainTalents)) {
        return libGame_ge_EncouragementDeathTipsNames_TrainTalents;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_UseYourAbilities)) {
        return libGame_ge_EncouragementDeathTipsNames_UseYourAbilities;
    }
    else {
    }
    return libGame_ge_EncouragementDeathTipsNames_Null;
}

text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip) {
    // Automatic Variable Declarations
    int auto7E511F16_val;

    // Implementation
    auto7E511F16_val = lp_deathTip;
    if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) {
        return StringExternal("Param/Value/lib_Game_2E1B7B18");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) {
        return StringExternal("Param/Value/lib_Game_64E93780");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Gangups) {
        return StringExternal("Param/Value/lib_Game_81596D38");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) {
        return StringExternal("Param/Value/lib_Game_EA446F88");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) {
        return StringExternal("Param/Value/lib_Game_12A6A432");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Mount) {
        return StringExternal("Param/Value/lib_Game_42D3DAB4");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Retreat) {
        return StringExternal("Param/Value/lib_Game_24733279");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) {
        return StringExternal("Param/Value/lib_Game_39E58A85");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) {
        return StringExternal("Param/Value/lib_Game_21FDBD6B");
    }
    else {
    }
    return StringToText("");
}

void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_enemyMinionDamageTaken += lp_damage;
}

void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKills += 1;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKillTimer, libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C, false, c_timeGame);
}

void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTaken = true;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTimer, libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C, false, c_timeGame);
}

void libGame_gf_IncludeModeInitialization (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_IncludeModeInitialization_C);
}

void libGame_gf_SendEventIncludeModeInitialization () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_IncludeModeInitialization_C);
}

void libGame_gf_CameraPannedFromScript (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CameraPannedFromScript_C);
}

void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C), lp_point);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_CameraPannedFromScript_C);
}

point libGame_gf_CameraPannedFromScriptPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C));
}

int libGame_gf_CameraPannedFromScriptPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C));
}

void libGame_gf_CapturePointChangesOwner (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointChangesOwner_C);
}

void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_aIOwner, int lp_playerOwner, playergroup lp_capturingPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C), lp_capturePointIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C), lp_aIOwner);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C), lp_playerOwner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_CapturePointChangesOwner_C);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C));
}

int libGame_gf_CapturePointChangesOwnerAIOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C));
}

int libGame_gf_CapturePointChangesOwnerNewOwnerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C));
}

playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C));
}

void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C), lp_capturePointIndex);
    TriggerSendEvent(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C));
}

void libGame_gf_SendEventDebugHeroSwapped (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventID_DebugHeroSwapped_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_DebugHeroSwapped_C);
}

void libGame_gf_DebugHeroSwapped (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_DebugHeroSwapped_C);
}

int libGame_gf_DebugHeroSwappedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventID_DebugHeroSwapped_Player_C));
}

void libGame_gf_QuestsCompleted (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestsCompleted_C);
}

int libGame_gf_QuestsCompletedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_QuestsCompleted_C, libGame_gv_eventParam_QuestsCompleted_Player_C));
}

void libGame_gf_SendEventQuestsCompleted (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_QuestsCompleted_C, libGame_gv_eventParam_QuestsCompleted_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_QuestsCompleted_C);
}

void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersEndFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefenderKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C), lp_unit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

int libGame_gf_JungleDefenderAIDefenderKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C));
}

int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C));
}

void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C), lp_defenderAIIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

int libGame_gf_JungleDefenderAIAllDefendersKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C));
}

int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C));
}

void libGame_gf_GameOpenTimerStarted (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GameOpenTimerStarted_C);
}

void libGame_gf_SendEventGameOpenTimerStarted () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GameOpenTimerStarted_C);
}

void libGame_gf_TownDataInitialized (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_SendEventTownDataInitialized () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_GameOverEvent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_SendEventGameOverEvent () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_CheckUnitForAbilityRedirect (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CheckUnitForAbilityRedirect_C);
}

void libGame_gf_SendEventCheckUnitForAbilityRedirect (unit lp_unit, unit lp_targetUnit, bool lp_boolean, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Unit_C), lp_unit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Target_C), lp_targetUnit);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Boolean_C), lp_boolean);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Point_C), lp_point);
    TriggerSendEvent(libGame_gv_eventID_CheckUnitForAbilityRedirect_C);
}

unit libGame_gf_CheckUnitForAbilityRedirectUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Unit_C));
}

unit libGame_gf_CheckUnitForAbilityRedirectTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Target_C));
}

bool libGame_gf_CheckUnitForAbilityRedirectBoolean () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Boolean_C));
}

point libGame_gf_CheckUnitForAbilityRedirectPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventID_CheckUnitForAbilityRedirect_Point_C));
}

void libGame_gf_HeroExitedTransport (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroExitedTransport_C);
}

void libGame_gf_SendEventHeroExitedTransport (int lp_player, unit lp_transport) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C), lp_transport);
    TriggerSendEvent(libGame_gv_eventID_HeroExitedTransport_C);
}

int libGame_gf_HeroExitingTransportPlayerExiting () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C));
}

unit libGame_gf_HeroExitingTransportTransport () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C));
}

void libGame_gf_HeroEnteredTransport (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroExitedTransport_C);
}

void libGame_gf_SendEventHeroEnteredTransport (int lp_player, unit lp_transportUnit, unit lp_cargoUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C), lp_transportUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C), lp_cargoUnit);
    TriggerSendEvent(libGame_gv_eventID_HeroEnteredTransport_C);
}

int libGame_gf_HeroEnteredTransportPlayerEntering () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C));
}

unit libGame_gf_HeroEnteredTransportTransport () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C));
}

unit libGame_gf_HeroEnteredTransportCargoUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C));
}

void libGame_gf_HeroEntersSpecialDeathState (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroEntersSpecialDeathState_C);
}

void libGame_gf_SendEventHeroEntersSpecialDeathState (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C), lp_hero);
    TriggerSendEvent(libGame_gv_eventID_HeroEntersSpecialDeathState_C);
}

unit libGame_gf_HeroEntersSpecialDeathStateHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C));
}

void libGame_gf_HeroHealPrevented (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroHealPrevented_C);
}

void libGame_gf_SendEventHeroHealPrevented (fixed lp_amount, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Amount_C), lp_amount);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroHealPrevented_C);
}

fixed libGame_gf_HeroHealPreventedAmount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Amount_C));
}

int libGame_gf_HeroHealPreventedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Player_C));
}

void libGame_gf_HeroDamagePrevented (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroDamagePrevented_C);
}

void libGame_gf_SendEventHeroDamagePrevented (unit lp_targetUnit, fixed lp_amount, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_TargetUnit_C), lp_targetUnit);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_Amount_C), lp_amount);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroDamagePrevented_C);
}

unit libGame_gf_HeroDamagePreventedTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_TargetUnit_C));
}

fixed libGame_gf_HeroDamagePreventedAmount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_Amount_C));
}

int libGame_gf_HeroDamagePreventedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroDamagePrevented_C, libGame_gv_eventID_HeroDamagePrevented_Player_C));
}

void libGame_gf_HeroLevelUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroLevelUp_C);
}

void libGame_gf_SendEventHeroLevelUp (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Level_C), lp_level);
    TriggerSendEvent(libGame_gv_eventID_HeroLevelUp_C);
}

int libGame_gf_HeroLevelUpPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player_C));
}

int libGame_gf_HeroLevelUpLevel () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Level_C));
}

void libGame_gf_HeroParticipatedInNPCTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_HeroParticipatedInNPCTakedownMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroParticipatedInCreepTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInCreepTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInCreepTakedown (int lp_player, unit lp_creep) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInCreepTakedown_C, libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInCreepTakedown_C, libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Creep_C), lp_creep);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInCreepTakedown_C);
}

int libGame_gf_HeroParticipatedInCreepTakedownPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInCreepTakedown_C, libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Player_C));
}

unit libGame_gf_HeroParticipatedInCreepTakedownCreep () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInCreepTakedown_C, libGame_gv_eventParam_HeroParticipatedInCreepTakedown_Creep_C));
}

void libGame_gf_HeroParticipatedInTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_lastHitPlayer, int lp_player, int lp_playerKilled, unit lp_heroKilled, point lp_heroKilledPosition) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C), lp_lastHitPlayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C), lp_playerKilled);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C), lp_heroKilled);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C), lp_heroKilledPosition);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

int libGame_gf_HeroParticipatedInTakedownKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C));
}

int libGame_gf_HeroParticipatedInTakedownLastHitPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C));
}

unit libGame_gf_HeroParticipatedInTakedownKilledHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C));
}

point libGame_gf_HeroParticipatedInTakedownKilledHeroPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C));
}

void libGame_gf_HeroPortedBackToTown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroPortedBackToTown_C);
}

void libGame_gf_SendEventHeroPortedBackToTown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroPortedBackToTown_C);
}

int libGame_gf_HeroPortedBackToTownPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C));
}

unit libGame_gf_HeroPortedBackToTownUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Unit_C));
}

void libGame_gf_HeroUnitSwappedForPlayer (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroUnitSwappedForPlayer_C);
}

void libGame_gf_SendEventHeroUnitSwappedForPlayer (unit lp_oldUnit, unit lp_newUnit, int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_PlayerNumber_C), lp_playerNumber);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_NewUnit_C), lp_newUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_OldUnit_C), lp_oldUnit);
    TriggerSendEvent(libGame_gv_eventID_HeroUnitSwappedForPlayer_C);
}

int libGame_gf_HeroUnitSwappedForPlayerPlayerNumber () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_PlayerNumber_C));
}

unit libGame_gf_HeroUnitSwappedForPlayerOldUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_OldUnit_C));
}

unit libGame_gf_HeroUnitSwappedForPlayerNewUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_NewUnit_C));
}

void libGame_gf_HeroWitnessedAlliedNPCDeath (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

void libGame_gf_SendEventHeroWitnessedAlliedNPCDeath (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

int libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C));
}

unit libGame_gf_HeroWitnessedAlliedNPCDeathMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C));
}

void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroSpecialCaseMounting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

int libGame_gf_HeroSpecialCaseMountingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C));
}

void libGame_gf_HeroKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroKilled_C);
}

void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_playerKilling < 0) || (lp_playerKilling > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_9CB62191", "A", IntToText(lp_playerKilling));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_9CB62191"), true);
        return ;
    }

    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C), lp_playerKilling);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C), lp_killedUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C), UnitGetOwner(lp_killedUnit));
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C), UnitGetPosition(lp_killedUnit));
    TriggerSendEvent(libGame_gv_eventID_HeroKilled_C);
}

int libGame_gf_HeroKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C));
}

int libGame_gf_HeroKilledPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C));
}

unit libGame_gf_HeroKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C));
}

point libGame_gf_HeroKilledLocaiton () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C));
}

void libGame_gf_HeroSpawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpawn_C);
}

void libGame_gf_SendEventHeroSpawn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpawn_C);
}

int libGame_gf_HeroSpawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C));
}

void libGame_gf_HeroRespawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespawn_C);
}

void libGame_gf_SendEventHeroRespawn (int lp_player, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Hero_C), lp_hero);
    TriggerSendEvent(libGame_gv_eventID_HeroRespawn_C);
}

int libGame_gf_HeroRespawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C));
}

unit libGame_gf_HeroRespawnHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Hero_C));
}

void libGame_gf_RequestCustomRespawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_RequestCustomRespawn_C);
}

void libGame_gf_SendEventRequestCustomRespawn (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_Player_C), lp_player);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C), lp_respawnMounted);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C), lp_respawnHealthPercent);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C), lp_respawnLocation);
    TriggerSendEvent(libGame_gv_eventID_RequestCustomRespawn_C);
}

int libGame_gf_RequestCustomRespawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_Player_C));
}

bool libGame_gf_RequestCustomRespawnRespawnMounted () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C));
}

point libGame_gf_RequestCustomRespawnRespawnLocation () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C));
}

fixed libGame_gf_RequestCustomRespawnRespawnHealthPercent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C));
}

void libGame_gf_SpecialCaseTalentCooldownReset (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

void libGame_gf_SendEventSpecialCaseTalentCooldownReset (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

int libGame_gf_SpecialCaseTalentCooldownResetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C));
}

void libGame_gf_AbathurUltimateEvolutionHeroCopied (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C);
}

void libGame_gf_SendEventAbathurUltimateEvolutionHeroCopied (int lp_abathurOwner, int lp_targetOwner) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C, libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_AbathurOwner_C), lp_abathurOwner);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C, libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_TargetOwner_C), lp_targetOwner);
    TriggerSendEvent(libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C);
}

int libGame_gf_AbathurUltimateEvolutionHeroCopiedAbathurOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C, libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_AbathurOwner_C));
}

int libGame_gf_AbathurUltimateEvolutionHeroCopiedTargetOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_C, libGame_gv_eventID_AbathurUltimateEvolutionHeroCopied_TargetOwner_C));
}

void libGame_gf_AbathurUltimateEvolutionEnded (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_AbathurUltimateEvolutionEnded_C);
}

void libGame_gf_SendEventAbathurUltimateEvolutionEnded (int lp_abathurPlayer, unit lp_clonedUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionEnded_C, libGame_gv_eventParam_AbathurUltimateEvolution_AbathurPlayer_C), lp_abathurPlayer);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionEnded_C, libGame_gv_eventParam_AbathurUltimateEvolution_ClonedUnit_C), lp_clonedUnit);
    TriggerSendEvent(libGame_gv_eventID_AbathurUltimateEvolutionEnded_C);
}

int libGame_gf_AbathurUltimateEvolutionAbathurPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionEnded_C, libGame_gv_eventParam_AbathurUltimateEvolution_AbathurPlayer_C));
}

unit libGame_gf_AbathurUltimateEvolutionClonedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_AbathurUltimateEvolutionEnded_C, libGame_gv_eventParam_AbathurUltimateEvolution_ClonedUnit_C));
}

void libGame_gf_JungleCampSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampSpawned_C);
}

void libGame_gf_SendEventJungleCampSpawned (int lp_camp) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C), lp_camp);
    TriggerSendEvent(libGame_gv_eventID_JungleCampSpawned_C);
}

int libGame_gf_JungleCampSpawnedIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C));
}

void libGame_gf_JungleCampDefenderCreated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampDefenderCreated_C);
}

void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampDefenderCreated_C);
}

unit libGame_gf_JungleCampDefenderUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C));
}

void libGame_gf_JungleCampLanerCreated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampLanerCreated_C);
}

void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampLanerCreated_C);
}

unit libGame_gf_JungleCampLanerUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C));
}

void libGame_gf_MercCampCaptured (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MercCampCaptured_C);
}

void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C), lp_camp);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_MercCampCaptured_C);
}

int libGame_gf_MercCampCapturedIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

int libGame_gf_MercCampCapturedOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C));
}

playergroup libGame_gf_MercCampCapturedCapturingPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C));
}

string libGame_gf_MapMechanicInitializationMechanicType () {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventID_MapMechanicInit_Mechanic_C));
    return lv_value;
}

void libGame_gf_SendEventMapMechanicInitialization (string lp_mechanic) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventID_MapMechanicInit_Mechanic_C), lp_mechanic);
    TriggerSendEvent(libGame_gv_eventID_MapMechanicInit_C);
}

void libGame_gf_MapMechanicInitialization (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapMechanicInit_C);
}

void libGame_gf_MapObjectiveCapturedByUnit (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitCapturedMapObjective_C);
}

void libGame_gf_SendEventMapObjectiveCapturedByUnit (unit lp_capturingUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C), lp_capturingUnit);
    TriggerSendEvent(libGame_gv_eventID_UnitCapturedMapObjective_C);
}

unit libGame_gf_MapObjectiveCapturingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C));
}

void libGame_gf_MapCursedHollowTributeWarning (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeWarning_C);
}

void libGame_gf_SendEventMapCursedHollowTributeWarning (point lp_position) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C), lp_position);
    TriggerSendEvent(libGame_gv_eventID_MapTributeWarning_C);
}

point libGame_gf_MapCursedHollowTributeWarningPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C));
}

void libGame_gf_MapCursedHollowTributeSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeSpawned_C);
}

void libGame_gf_SendEventMapCursedHollowTributeSpawned (unit lp_tribute) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C), lp_tribute);
    TriggerSendEvent(libGame_gv_eventID_MapTributeSpawned_C);
}

unit libGame_gf_MapCursedHollowTributeSpawnedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C));
}

void libGame_gf_MapCursedHollowTributePickedUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributePickedup_C);
}

void libGame_gf_SendEventMapCursedHollowTributePickedUp (int lp_player, point lp_positioin) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C), lp_player);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C), lp_positioin);
    TriggerSendEvent(libGame_gv_eventID_MapTributePickedup_C);
}

int libGame_gf_MapCursedHollowTributePickedUpPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C));
}

point libGame_gf_MapCursedHollowTributePickedUpPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C));
}

void libGame_gf_MapCursedHollowCurseStarts (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseStarts_C);
}

void libGame_gf_SendEventMapCursedHollowCurseStarts (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseStarts_C);
}

int libGame_gf_MapCursedHollowCurseActivatedTeam () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C));
}

void libGame_gf_MapCursedHollowCurseEnds (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_SendEventMapCursedHollowCurseEnds () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_PlayerAchievesMultiKill (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

void libGame_gf_SendEventPlayerAchievesMultiKill (int lp_player, int lp_killCount) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C), lp_killCount);
    TriggerSendEvent(libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

int libGame_gf_PlayerAchievesMultiKillPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C));
}

int libGame_gf_PlayerAchievesMultiKillKillCount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C));
}

void libGame_gf_QuestComplete (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestComplete_C);
}

void libGame_gf_SendEventQuestComplete (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_LaunchUnit_C), lp_launchUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_ImpactUnit_C), lp_impactUnit);
    TriggerSendEvent(libGame_gv_eventID_QuestComplete_C);
}

string libGame_gf_QuestCompleteBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_Behavior_C)));
}

unit libGame_gf_QuestCompleteLaunchUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_LaunchUnit_C));
}

unit libGame_gf_QuestCompleteImpactUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestComplete_C, libGame_gv_eventParam_QuestComplete_ImpactUnit_C));
}

void libGame_gf_QuestIncrease (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestIncrease_C);
}

void libGame_gf_SendEventQuestIncrease (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_LaunchUnit_C), lp_launchUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_ImpactUnit_C), lp_impactUnit);
    TriggerSendEvent(libGame_gv_eventID_QuestIncrease_C);
}

string libGame_gf_QuestIncreaseBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_Behavior_C)));
}

unit libGame_gf_QuestIncreaseLaunchUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_LaunchUnit_C));
}

unit libGame_gf_QuestIncreaseImpactUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestIncrease_C, libGame_gv_eventParam_QuestIncrease_ImpactUnit_C));
}

void libGame_gf_QuestDecrease (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestDecrease_C);
}

void libGame_gf_SendEventQuestDecrease (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_LaunchUnit_C), lp_launchUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_ImpactUnit_C), lp_impactUnit);
    TriggerSendEvent(libGame_gv_eventID_QuestDecrease_C);
}

string libGame_gf_QuestDecreaseBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_Behavior_C)));
}

unit libGame_gf_QuestDecreaseLaunchUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_LaunchUnit_C));
}

unit libGame_gf_QuestDecreaseImpactUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestDecrease_C, libGame_gv_eventParam_QuestDecrease_ImpactUnit_C));
}

void libGame_gf_QuestMilestone (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestMilestone_C);
}

void libGame_gf_SendEventQuestMilestone (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_LaunchUnit_C), lp_launchUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_ImpactUnit_C), lp_impactUnit);
    TriggerSendEvent(libGame_gv_eventID_QuestMilestone_C);
}

string libGame_gf_QuestMilestoneBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_Behavior_C)));
}

unit libGame_gf_QuestMilestoneLaunchUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_LaunchUnit_C));
}

unit libGame_gf_QuestMilestoneImpactUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestMilestone_C, libGame_gv_eventParam_QuestMilestone_ImpactUnit_C));
}

void libGame_gf_QuestReset (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestReset_C);
}

void libGame_gf_SendEventQuestReset (string lp_questTokenBehavior, unit lp_launchUnit, unit lp_impactUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_LaunchUnit_C), lp_launchUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_ImpactUnit_C), lp_impactUnit);
    TriggerSendEvent(libGame_gv_eventID_QuestReset_C);
}

string libGame_gf_QuestResetBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_Behavior_C)));
}

unit libGame_gf_QuestResetLaunchUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_LaunchUnit_C));
}

unit libGame_gf_QuestResetImpactUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestReset_C, libGame_gv_eventParam_QuestReset_ImpactUnit_C));
}

void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C), lp_unit);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C), lp_puntPoint);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

unit libGame_gf_UnitEntersSafeZonePuntRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C));
}

point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C));
}

void libGame_gf_UnitEntersSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

unit libGame_gf_UnitEntersSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C));
}

void libGame_gf_UnitExitsSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

unit libGame_gf_UnitExitsSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C));
}

void libGame_gf_ScalingIncremented (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ScalingIncremented_C);
}

void libGame_gf_SendEventScalingIncremented () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_ScalingIncremented_C);
}

void libGame_gf_AnnouncerVOInitiated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_AnnouncerVOInitiated_C);
}

void libGame_gf_SendEventAnnouncerVOInitiated (sound lp_sound, int lp_player, int lp_announcerEvent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Event_C), lp_announcerEvent);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Player_C), lp_player);
    DataTableSetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C), lp_sound);
    TriggerSendEvent(libGame_gv_eventID_AnnouncerVOInitiated_C);
}

int libGame_gf_AnnouncerVOInitiatedAnnouncerEvent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Event_C));
}

int libGame_gf_AnnouncerVOInitiatedAnnouncerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Player_C));
}

sound libGame_gf_AnnouncerVOInitiatedAnnouncerSound () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C));
}

void libGame_gf_PlayerChooseTalent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerChooseTalent_C);
}

int libGame_gf_PlayerChooseTalentPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C));
}

int libGame_gf_PlayerChooseTalentTalentIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C));
}

string libGame_gf_PlayerChooseTalentTalentLink () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C)));
}

string libGame_gf_PlayerChooseTalentTalentUserDataInstance () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstance("Talent", DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C)));
}

void libGame_gf_SendEventPlayerChooseTalent (int lp_player, int lp_talentIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C), lp_talentIndex);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C), (libCore_gv_talentData[lp_talentIndex].lv_talentLink));
    TriggerSendEvent(libGame_gv_eventID_PlayerChooseTalent_C);
}

void libGame_gf_PlayerTalentsReset (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerTalentsReset_C);
}

int libGame_gf_PlayerTalentsResetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerTalentsReset_C, libGame_gv_eventParam_PlayerTalentsReset_Player_C));
}

void libGame_gf_SendEventPlayerTalentsReset (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerTalentsReset_C, libGame_gv_eventParam_PlayerTalentsReset_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_PlayerTalentsReset_C);
}

void libGame_gf_SendEventTeamGetLevelUp (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamLevelUp_C, libGame_gv_eventParam_TeamLevelUp_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_TeamLevelUp_C);
}

int libGame_gf_TeamLevelUpTeam () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamLevelUp_C, libGame_gv_eventParam_TeamLevelUp_Team_C));
}

void libGame_gf_TeamLevelUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TeamLevelUp_C);
}

void libGame_gf_ExperienceGlobeEnableDisableExtendedDurationXPGlobes (bool lp_enableDisable) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto8D6047B9_ae = libCore_gv_cOMPUTER_TeamChaos;
    const int auto8D6047B9_ai = 1;
    const int auto3440FEAF_ae = libCore_gv_cOMPUTER_TeamChaos;
    const int auto3440FEAF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        libGame_gv_experienceGlobeExtenedDurationEnabled = true;
        lv_itPlayer = libCore_gv_cOMPUTER_TeamOrder;
        for ( ; ( (auto3440FEAF_ai >= 0 && lv_itPlayer <= auto3440FEAF_ae) || (auto3440FEAF_ai < 0 && lv_itPlayer >= auto3440FEAF_ae) ) ; lv_itPlayer += auto3440FEAF_ai ) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "ExperienceGlobeTimedLife", "Duration", lv_itPlayer, libGame_gv_experienceGlobeExtendedDuration);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "ExperienceGlobeTimedLife", "Period", lv_itPlayer, (libGame_gv_experienceGlobeExtendedDuration - 2.0));
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "ExperienceGlobeApplyXPReductionCoolup", "Chance", lv_itPlayer, 1.0);
        }
    }
    else {
        libGame_gv_experienceGlobeExtenedDurationEnabled = false;
        lv_itPlayer = libCore_gv_cOMPUTER_TeamOrder;
        for ( ; ( (auto8D6047B9_ai >= 0 && lv_itPlayer <= auto8D6047B9_ae) || (auto8D6047B9_ai < 0 && lv_itPlayer >= auto8D6047B9_ae) ) ; lv_itPlayer += auto8D6047B9_ai ) {
            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "ExperienceGlobeTimedLife", "Duration", lv_itPlayer, 0.0, c_upgradeOperationAdd);
            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "ExperienceGlobeTimedLife", "Period", lv_itPlayer, 0.0, c_upgradeOperationAdd);
            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "ExperienceGlobeApplyXPReductionCoolup", "Chance", lv_itPlayer, 0.0, c_upgradeOperationAdd);
        }
    }
}

fixed libGame_gf_GameFlowCurrentGameTime () {
    // Automatic Variable Declarations
    // Implementation
    return TimerGetElapsed(libGame_gv_gameTimer);
}

trigger auto_libGame_gf_PlayGameOverStinger_Trigger = null;
int auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

void libGame_gf_PlayGameOverStinger (int lp_winningTeam) {
    auto_libGame_gf_PlayGameOverStinger_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayGameOverStinger_Trigger == null) {
        auto_libGame_gf_PlayGameOverStinger_Trigger = TriggerCreate("auto_libGame_gf_PlayGameOverStinger_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayGameOverStinger_Trigger, false, false);
}

bool auto_libGame_gf_PlayGameOverStinger_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

    // Automatic Variable Declarations
    // Implementation
    Wait(2.17, c_timeGame);
    libSond_gf_SoundtrackSetUniqueSoundtrackState(false);
    if ((lp_winningTeam == 0)) {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", PlayerGroupAll());
    }
    else {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false));
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfTeam(lp_winningTeam), false));
    }
    return true;
}

trigger auto_libGame_gf_PlayVictoryDefeatVO_Trigger = null;
int auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

void libGame_gf_PlayVictoryDefeatVO (int lp_winningTeam) {
    auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayVictoryDefeatVO_Trigger == null) {
        auto_libGame_gf_PlayVictoryDefeatVO_Trigger = TriggerCreate("auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayVictoryDefeatVO_Trigger, false, false);
}

bool auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

    // Automatic Variable Declarations
    int autoECF744E0_val;

    // Implementation
    Wait(0.52, c_timeGame);
    libGame_gv_announcement_SystemEnabled = true;
    autoECF744E0_val = lp_winningTeam;
    if (autoECF744E0_val == 0) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoECF744E0_val == libGame_gv_teamOrderIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoECF744E0_val == libGame_gv_teamChaosIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
    }
    libGame_gv_announcement_SystemEnabled = false;
    return true;
}

void libGame_gf_GameOver (int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_losingTeam;
    fixed lv_endGameTimeDelay;

    // Automatic Variable Declarations
    playergroup auto3F77691A_g;
    playergroup autoEC15F49D_g;
    playergroup autoAD9F90DF_g;
    playergroup auto83A1C13B_g;

    // Variable Initialization
    lv_endGameTimeDelay = 7.0;

    // Implementation
    libGame_gf_SendEventGameOverEvent();
    if ((lp_winningTeam == 0)) {
        autoAD9F90DF_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoAD9F90DF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverTie;
            }

        }
    }
    else {
        lv_losingTeam = libGame_gf_EnemyTeamNumberOfTeam(lp_winningTeam);
        auto3F77691A_g = libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto3F77691A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverVictory;
            }

        }
        autoEC15F49D_g = libGame_gf_PlayersOnTeamHeroes(lv_losingTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoEC15F49D_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
            }

        }
    }
    TriggerEnable(libGame_gt_XPTrickle, false);
    TriggerEnable(libGame_gt_XPTrickle, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto83A1C13B_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto83A1C13B_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, lv_itPlayer);
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(lv_itPlayer);
    }
    libUIUI_gf_GameOverSplashDisplayForAllPlayers(lp_winningTeam);
}

playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    unitgroup lv_nearbyUnits;
    playergroup lv_killingGroup;

    // Automatic Variable Declarations
    playergroup auto1A124A3C_g;
    unitgroup auto62AE9A75_g;
    int auto62AE9A75_u;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    auto1A124A3C_g = lp_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1A124A3C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos) && ((lv_itPlayer == lp_killingPlayer) || ((GameGetMissionTime() - libGame_gv_players[lv_deadPlayer].lv_lastTimeHeroWasWithingXPRadius[lv_itPlayer]) <= libCore_gv_bALHeroKillCreditTimeWindow) || (libGame_gv_players[lv_deadPlayer].lv_recentPlayerDamageReceived[lv_itPlayer] > 0.0))) {
            PlayerGroupAdd(lv_killingGroup, lv_itPlayer);
        }

    }
    if ((libGame_gf_PlayerIsHeroPlayer(lp_killingPlayer) == true)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        if ((lv_deadPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lv_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    auto62AE9A75_g = lv_nearbyUnits;
    auto62AE9A75_u = UnitGroupCount(auto62AE9A75_g, c_unitCountAll);
    for (;; auto62AE9A75_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto62AE9A75_g, auto62AE9A75_u);
        if (lv_itUnit == null) { break; }
        if ((libCore_gf_ExecuteValidatorOnUnit("EarnsXP", lv_itUnit, lv_itUnit) == true) && (libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) != libGame_gf_TeamNumberOfPlayer(lv_deadPlayer))) {
            PlayerGroupAdd(lv_killingGroup, UnitGetOwner(lv_itUnit));
        }

    }
    return lv_killingGroup;
}

trigger auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
    int lp_killingFaction = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

    // Variable Declarations
    int lv_deadPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    if ((lp_killingFaction == libGame_ge_Faction_Order)) {
        libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_kills += 1;
        libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
        libUIUI_gf_UITabScreenPanelUpdateTeamKills(libGame_gv_teamOrderIndex_C, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_kills);
    }
    else if ((lp_killingFaction == libGame_ge_Faction_Chaos)) {
        libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_kills += 1;
        libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
        libUIUI_gf_UITabScreenPanelUpdateTeamKills(libGame_gv_teamChaosIndex_C, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_kills);
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup) {
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup = lp_killingTeamGroup;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup = lp_killingGroup;

    if (auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
    playergroup lp_killingTeamGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeamPlayer;
    fixed lv_missionTime;
    int lv_deadPlayer;
    fixed lv_xPGranted;
    int lv_teamLevelGap;

    // Automatic Variable Declarations
    playergroup autoBCFF2F87_g;
    playergroup autoABFCAAD5_g;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_missionTime = GameGetMissionTime();
    if ((PlayerGroupCount(lp_killingGroup) >= 1)) {
        lv_xPGranted = libCore_gf_DataXPXPForHeroNEW(PlayerGroupPlayer(lp_killingGroup, 1), lp_deadHero);
    }
    else {
        if (((lp_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lp_killingPlayer == libCore_gv_cOMPUTER_TeamChaos))) {
        }

        lv_xPGranted = libCore_gf_DataXPXPForHeroNEW(PlayerGroupPlayer(lp_killingTeamGroup, 1), lp_deadHero);
        autoBCFF2F87_g = lp_killingTeamGroup;
        lv_itTeamPlayer = -1;
        while (true) {
            lv_itTeamPlayer = PlayerGroupNextPlayer(autoBCFF2F87_g, lv_itTeamPlayer);
            if (lv_itTeamPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (lv_xPGranted / PlayerGroupCount(lp_killingTeamGroup)), libGame_ge_XPSource_Hero);
        }
    }
    lv_teamLevelGap = (libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel - libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel);
    autoABFCAAD5_g = lp_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoABFCAAD5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(lp_killingGroup, lv_itPlayer) == true)) {
            libGame_gv_players[lv_itPlayer].lv_multikillStreak += 1;
            libGame_gf_HeroDeathStartMultikillTimerForPlayer(lv_itPlayer);
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPGranted / PlayerGroupCount(lp_killingGroup)), libGame_ge_XPSource_Hero);
            if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
                libGame_gv_players[lv_itPlayer].lv_killingSpreeCount += 1;
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "KillStreak", libGame_gv_players[lv_itPlayer].lv_killingSpreeCount);
            }

            libSond_gf_HeroVORegisterHeroTakedownForPlayer(lv_itPlayer, lp_killingGroup, lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount, lv_teamLevelGap);
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, true);
            libGame_gf_HeroDeathCheckForKillingSpree(lv_itPlayer);
        }
        else {
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, false);
        }
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathAwardXP_Trigger = null;
unit auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
int auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
bool auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, int lp_killingPlayer, playergroup lp_awardGroup, playergroup lp_killingGroup, bool lp_takedownScored) {
    auto_libGame_gf_HeroDeathAwardXP_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup = lp_awardGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup = lp_killingGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored = lp_takedownScored;

    if (auto_libGame_gf_HeroDeathAwardXP_Trigger == null) {
        auto_libGame_gf_HeroDeathAwardXP_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathAwardXP_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathAwardXP_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathAwardXP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
    playergroup lp_awardGroup = auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
    bool lp_takedownScored = auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    fixed lv_valueCoefficient;
    int lv_levelGap;
    fixed lv_xPGranted;

    // Automatic Variable Declarations
    playergroup autoB8ECE8B5_g;
    playergroup autoACCCB290_g;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadHero);
    if ((lp_takedownScored == true)) {
        libGame_gv_scoreValues[lv_deadPlayer].lv_deaths += lv_valueCoefficient;
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_deadPlayer, "Deaths", libGame_gv_scoreValues[lv_deadPlayer].lv_deaths);
        autoB8ECE8B5_g = lp_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB8ECE8B5_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((lv_itPlayer == lp_killingPlayer)) {
                libGame_gv_scoreValues[lv_itPlayer].lv_kills += lv_valueCoefficient;
                libGame_gf_ScoreValuesReportRealValueAndLog(lv_itPlayer, "SoloKill", libGame_gv_scoreValues[lv_itPlayer].lv_kills);
            }
            else {
                libGame_gv_scoreValues[lv_itPlayer].lv_assists += lv_valueCoefficient;
                libGame_gf_ScoreValuesReportRealValueAndLog(lv_itPlayer, "Assists", libGame_gv_scoreValues[lv_itPlayer].lv_assists);
            }
        }
    }

    if ((libCore_gv_sYSXPOn == false)) {
        return true;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libSprt_gv_dEBUGXPSourceHero == false)) {
        return true;
    }

    lv_xPGranted = libCore_gf_DataXPXPForHeroNEW(PlayerGroupPlayer(lp_awardGroup, 1), lp_deadHero);
    lv_xPGranted = libGame_gf_AdjustXPForTeam(lv_xPGranted, libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_deadHero)));
    autoACCCB290_g = lp_awardGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoACCCB290_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_GrantXPToPlayer(lv_xPGranted, lv_itPlayer, libGame_ge_XPSource_Hero);
    }
    libUIUI_gf_UICombatFloatingElementsXP(lp_awardGroup, lp_deadHero, FixedToText(lv_xPGranted, 0), "FCT_XP_Crit");
    return true;
}

trigger auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = null;
unit auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
int auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup = lp_deadPlayerTeamGroup;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger == null) {
        auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
    playergroup lp_deadPlayerTeamGroup = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
    int lp_killingFaction = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_deadPlayerTeamGroupMinusDeadPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupEmpty();
    lv_entireTeamDead = true;

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupCopy(lp_deadPlayerTeamGroup);
    PlayerGroupRemove(lv_deadPlayerTeamGroupMinusDeadPlayer, lv_deadPlayer);
    if ((UnitGroupCount(libGame_gv_players[lv_deadPlayer].lv_heroUnitGroup, c_unitCountAlive) < 1)) {
        libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer(lv_deadPlayer);
    }
    else {
        libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer(lv_deadPlayer, lp_deadHero);
    }
    libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup(lv_deadPlayer, lp_deadHero, lv_deadPlayerTeamGroupMinusDeadPlayer);
    libGame_gf_HeroDeathHeroKilledAnnouncementToObserver(lv_deadPlayer, lp_deadHero);
    libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement(lv_deadPlayerTeam);
    libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist(lp_deadHero, lv_deadPlayerTeam, lv_deadPlayerTeamGroupMinusDeadPlayer);
    return true;
}

void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam) {
    // Variable Declarations
    int lv_itPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    playergroup auto8950737C_g;
    playergroup auto4F0040A1_g;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    auto8950737C_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8950737C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGame_gv_players[lv_itPlayer].lv_heroUnit) == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == true)) {
        auto4F0040A1_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4F0040A1_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartTeamKilledVOTimerForPlayer(lv_itPlayer, libGame_gv_heroDeathTeamKilledVODelay);
        }
        lv_enemyTeam = (3 - lp_deadPlayerTeam);
        if ((lv_enemyTeam <= libCore_gv_bALMaxTeams)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_TeamKill, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, true);
            if ((lp_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
            }

        }

    }

}

void libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist (unit lp_deadUnit, int lp_deadPlayerTeamNumber, playergroup lp_deadPlayersTeam) {
    // Variable Declarations
    bool lv_entireTeamDead;
    int lv_itPlayer;
    int lv_numberOfPlayersOnDeadPlayersTeam;
    int lv_speakingPlayer;

    // Automatic Variable Declarations
    playergroup auto58051A45_g;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    auto58051A45_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeamNumber, true);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto58051A45_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGame_gv_players[lv_itPlayer].lv_heroUnit) == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == false)) {
        lv_numberOfPlayersOnDeadPlayersTeam = PlayerGroupCount(lp_deadPlayersTeam);
        lv_speakingPlayer = PlayerGroupPlayer(lp_deadPlayersTeam, RandomInt(1, lv_numberOfPlayersOnDeadPlayersTeam));
        libSond_gf_HeroVOStartAlliedTakedownVOTimerForPlayer(lv_speakingPlayer, 3.5);
    }

}

void libGame_gf_HeroDeathStartRespawnTimer (int lp_player, fixed lp_initialRespawnTime) {
    // Variable Declarations
    unit lv_heroUnit;
    fixed lv_respawnTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    if ((libGame_gv_heroDeathRespawnSetting == libGame_ge_HeroDeathRespawnOption_NoRespawn)) {
        return ;
    }

    lv_respawnTime = (lp_initialRespawnTime * libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_respawnTimeMultiplier);
    lv_respawnTime = MaxF(lv_respawnTime, libCore_gv_bALMinDeathTime);
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, lv_respawnTime, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_player].lv_respawnSoundCueTimer, MaxF((lv_respawnTime - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
}

void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    fixed lv_soundOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, true);
        lv_deathTimeRemaining = TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer);
        lv_soundOffset = (libCore_gv_bALMaxDeathTime-lv_deathTimeRemaining);
        SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, lv_soundOffset);
        libGame_gv_heroDeath_DeathAmbientSound[lp_player] = SoundLastPlayed();
        SoundtrackStopCurrent(libCore_gv_playerGroupFromPlayer[lp_player], c_soundtrackCategoryMusic, true);
        SoundtrackPlay(libCore_gv_playerGroupFromPlayer[lp_player], c_soundtrackCategoryMusic, "MX_Dead", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_player], true);
        libSond_gf_SoundtrackStopDeadSoundtrackforPlayer(lp_player);
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, false);
    }
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath (bool lp_showOverlay, bool lp_registerwithAnnouncementUI, bool lp_showDeathRecapToast, int lp_player, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_heroDeathRunDeathUIUpdates == false)) {
        return ;
    }

    if (((lp_killingPlayer < 0) || (lp_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_CD4A1D19", "A", IntToText(lp_killingPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_CD4A1D19"), true);
        return ;
    }

    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lp_player);
    libUIUI_gf_UIPartyFrameHeroDies(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    if ((lp_registerwithAnnouncementUI == true)) {
    }

    if ((lp_showOverlay == true)) {
        libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lp_player);
    }

    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("Gen_Hero_Death_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_player);
    if ((lp_showDeathRecapToast == true)) {
        libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(true, lp_player);
    }

}

void libGame_gf_HeroDeathUpdateUIElementsForRespawn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
}

void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player, point lp_portLocation) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitBehaviorAdd(lv_heroUnit, "Dead", lv_heroUnit, 1);
    if ((TimerGetDuration(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", 0.0);
    }
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lp_player);
    Wait(0.5, c_timeGame);
    if ((libGame_gv_heroDeathRespawnSetting != libGame_ge_HeroDeathRespawnOption_NoRespawn)) {
        UnitSetPosition(lv_heroUnit, lp_portLocation, false);
        UnitSetFacing(lv_heroUnit, PointGetFacing(libGame_gv_players[lp_player].lv_spawnPoint), 0.0);
    }

}

void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_newRespawnTimer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    lv_newRespawnTimer = (lv_currentRespawnTimer + lp_modificationAmount);
    if ((lv_newRespawnTimer < 0.0)) {
        lv_newRespawnTimer = 0.0;
    }

    libGame_gf_HeroDeathUpdateRespawnTimer(lp_respawningPlayer, lv_newRespawnTimer);
}

void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_soundOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    if ((lv_currentRespawnTimer < lp_newRespawnTimerDuration)) {
        UnitBehaviorSetDuration(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    else {
        UnitBehaviorSetDurationRemaining(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer, lp_newRespawnTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnSoundCueTimer, MaxF((lp_newRespawnTimerDuration - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    if ((UnitHasBehavior2(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "HeroGenericIgnoreDeathSounds") == false)) {
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_respawningPlayer], false);
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_respawningPlayer, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], 100.0, lv_soundOffset);
        }

    }
    else {
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
        }

    }
}

void libGame_gf_HeroDeathRespawnHeroForPlayer (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_AbnormalRespawn, lv_heroUnit) == true)) {
        return ;
    }

    UnitBehaviorRemove(lv_heroUnit, "Dead", 1);
    UnitBehaviorRemove(lv_heroUnit, "DeadMechanics", 1);
    UnitRevive(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, true);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, lp_respawnHealthPercent);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropShieldsPercent, lp_respawnHealthPercent);
    if ((UnitHasBehavior2(lv_heroUnit, "HeroGeneric0EnergyOnRespawn") == true)) {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }
    libGame_gv_players[lp_player].lv_isDead = false;
    UnitCreateEffectUnit(lv_heroUnit, "HallOfStormsAllyApplySet", lv_heroUnit);
    UnitSetPosition(lv_heroUnit, lp_respawnLocation, false);
    libGame_gf_SendEventHeroRespawn(lp_player, lv_heroUnit);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal Respawn");
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lp_player);
    if ((libGame_gv_players[lp_player].lv_suppressReviveVOSound == false)) {
        libSond_gf_HeroVOPlayHeroLine("Revive", lp_player, libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    UnitRemove(libGame_gv_players[lp_player].lv_cameraDeadUnitCameraTarget);
    libGame_gv_players[lp_player].lv_cameraDeadUnitCameraTarget = null;
    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    libGame_gf_HeroDeathUpdateUIElementsForRespawn(lp_player);
    if ((lp_respawnMounted == true) && (UnitHasBehavior2(lv_heroUnit, "HallOfStormsProtectionBuff") == true)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_heroUnit);
        libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    }

}

void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill) {
    // Variable Declarations
    int lv_killingTeam;
    int lv_vOEvent;
    soundlink lv_deathStingerSound;
    string lv_animName;
    text lv_titleText;
    text lv_timerHeaderText;
    fixed lv_duration;

    // Automatic Variable Declarations
    int autoF4D7D771_val;

    // Variable Initialization
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);
    lv_animName = "";

    // Implementation
    lv_killingTeam = libGame_gf_TeamNumberOfPlayer(lp_killingTeamPlayer);
    if ((lp_playerWasInvolvedInKill == true)) {
        lv_titleText = StringExternal("Param/Value/lib_Game_77A9D3F5");
        lv_timerHeaderText = StringExternal("Param/Value/lib_Game_6D0E70A0");
        autoF4D7D771_val = libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak;
        if (autoF4D7D771_val == 1) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("UI_HeroDeath_Gen_Enemy_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("UI_HeroDeath_Gen_Enemy_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier0";
            lv_titleText = StringExternal("Param/Value/lib_Game_52863D33");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_3CC31083"));
        }
        else if (autoF4D7D771_val == 2) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_DoubleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier1";
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_16C27315"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 3) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_TripleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier2";
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_E90D5FDB"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 4) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_QuadraKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier3";
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_CA5C2B45"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 5) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_MegaKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier4";
            lv_duration = libGame_gv_announcement_LongAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_B5E09B14"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_R")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_L")), c_soundIndexAny);
            }
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            if ((libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak > 5)) {
                lv_animName = "ShowTimedNotification_Tier4";
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_DE08654B"));
                libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
            }
            else {
                lv_animName = "ShowStandardNotification";
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, lv_timerHeaderText, StringExternal("Param/Value/lib_Game_BC9DC0FB"));
            }
        }
    }
    else {
        if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
            lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_R")), c_soundIndexAny);
        }
        else {
            lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_L")), c_soundIndexAny);
        }
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Enemy, lp_killingTeamPlayer);
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_AllyFirstBlood;
        lv_titleText = StringExternal("Param/Value/lib_Game_7D5962B6");
    }

    if ((lp_playerWasInvolvedInKill == true) && (libGame_gv_players[lp_deadPlayer].lv_suppressHeroAnnouncements == false)) {
        if ((libGame_gv_players[lp_deadPlayer].lv_heroUsesAnnouncementAlias == true)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, libGame_gv_players[lp_deadPlayer].lv_heroAnnouncementAliasText, null, null, null, lv_duration, true);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, lv_duration, true);
        }
    }

}

void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_killingTeam;
    text lv_killMessage;
    int lv_vOEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_killingTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_deadPlayer);
    if ((lv_killingTeam == 1)) {
        lv_killMessage = StringExternal("Param/Value/lib_Game_C2114111");
    }
    else {
        lv_killMessage = StringExternal("Param/Value/lib_Game_BC66F5AB");
    }
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        if ((lv_killingTeam == 1)) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood;
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood;
        }
    }
    else {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_HeroKilledObserver;
    }
    if ((lv_killingTeam == 1)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, "ShowStandardNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, "ShowEnemyNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
}

void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_teamOfDeadPlayer;
    bool[libCore_gv_bALMaxEnginePlayerCount + 1] lv_playerIsNearDeadPlayer;
    unitgroup lv_nearbyUnits;
    int lv_heroPlayer;
    soundlink lv_deathStingerSound;

    // Automatic Variable Declarations
    unitgroup autoE8B36308_g;
    int autoE8B36308_u;
    playergroup auto9A6B8BFA_g;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_teamOfDeadPlayer = libGame_gf_TeamNumberOfPlayer(lp_deadPlayer);
    lv_nearbyUnits = UnitGroupSearch(null, lp_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8B36308_g = lv_nearbyUnits;
    autoE8B36308_u = UnitGroupCount(autoE8B36308_g, c_unitCountAll);
    for (;; autoE8B36308_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoE8B36308_g, autoE8B36308_u);
        if (lv_itUnit == null) { break; }
        lv_heroPlayer = UnitGetOwner(lv_itUnit);
        if (((lv_itUnit == lp_deadHero) || (lv_itUnit == libGame_gv_players[lv_heroPlayer].lv_activeVehicle) || (libGame_gf_UnitIsHero(lv_itUnit) == true))) {
            lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
            continue;
        }

        if ((libCore_gf_ExecuteValidatorOnUnit("EarnsXP", lv_itUnit, lv_itUnit) == true)) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_heroPlayer) == true)) {
                lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
                continue;
            }

        }

    }
    auto9A6B8BFA_g = lp_alliedPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9A6B8BFA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Game_3CB51814", "A", IntToText(lv_itPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3CB51814"), true);
            continue;
        }

        if ((lv_playerIsNearDeadPlayer[lv_itPlayer] == true)) {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_L")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_R")), c_soundIndexAny);
            }
        }
        else {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_L")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_R")), c_soundIndexAny);
            }
        }
        libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
    }
}

void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_03B94D1B"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DED0D201"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("UI_HeroDeath_Gen_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    text lv_heroDiedText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_114C2DC6"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_EB47F580", "A", UnitTypeGetName(UnitGetType(lp_deadHero)));
        lv_heroDiedText = TextExpressionAssemble("Param/Expression/lib_Game_EB47F580");
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_53FD5D60"), lv_heroDiedText, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("UI_HeroDeath_Gen_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer) {
    // Variable Declarations
    int lv_killingSpreeCount;
    playergroup lv_announcementGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Implementation
    lv_killingSpreeCount = libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount;
    lv_announcementGroup = PlayerGroupCopy(libCore_gv_playerGroupFromPlayer[libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount]);
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][1] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade1_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][2] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade2_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][3] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade3_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][4] = true;
        return ;
    }

}

void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player) {
    // Variable Declarations
    int lv_itThreshold;
    int lv_registeredThreshold;

    // Automatic Variable Declarations
    const int autoF78FDF11_ae = libCore_gv_killingSpree_KillThresholdCount_C;
    const int autoF78FDF11_ai = 1;
    int auto5DF8EA7E_val;

    // Variable Initialization

    // Implementation
    lv_itThreshold = 1;
    for ( ; ( (autoF78FDF11_ai >= 0 && lv_itThreshold <= autoF78FDF11_ae) || (autoF78FDF11_ai < 0 && lv_itThreshold >= autoF78FDF11_ae) ) ; lv_itThreshold += autoF78FDF11_ai ) {
        if ((libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] == true)) {
            libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] = false;
            lv_registeredThreshold = lv_itThreshold;
            break;
        }

    }
    auto5DF8EA7E_val = lv_registeredThreshold;
    if (auto5DF8EA7E_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_Game_26D39FE4", "A", IntToText(libCore_gv_killingSpree_KillThresholdBase_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_FB0DE88C"), TextExpressionAssemble("Param/Expression/lib_Game_26D39FE4"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_Game_4A735C8B", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade1_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_0B813617"), TextExpressionAssemble("Param/Expression/lib_Game_4A735C8B"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_Game_948CDB6D", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade2_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_EC27B19F"), TextExpressionAssemble("Param/Expression/lib_Game_948CDB6D"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 4) {
        TextExpressionSetToken("Param/Expression/lib_Game_F1A276C7", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade3_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_E8FFCDE1"), TextExpressionAssemble("Param/Expression/lib_Game_F1A276C7"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else {
    }
}

void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, true);
}

void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_currentQueueCount;
    int lv_nextPlayIndex;
    int lv_insertIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    lv_currentQueueCount = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt];
    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    if ((lv_currentQueueCount >= libCore_gv_bALMaxPlayersOnATeam)) {
        return ;
    }

    lv_insertIndex = (lv_nextPlayIndex + lv_currentQueueCount);
    if ((lv_insertIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_insertIndex -= libCore_gv_bALMaxPlayersOnATeam;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_insertIndex] = lp_sound;
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] += 1;
    if ((TimerGetRemaining(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt]) <= 0.0)) {
        libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(lp_queueType, lp_player);
    }

}

void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_nextPlayIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    if ((libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] <= 0)) {
        return ;
    }

    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    SoundPlayForPlayer(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_nextPlayIndex], lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] -= 1;
    lv_nextPlayIndex += 1;
    if ((lv_nextPlayIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_nextPlayIndex = 1;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt] = lv_nextPlayIndex;
    TimerStart(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt], libGame_gv_heroDeathKillStingerQueueTimerDuration, false, c_timeGame);
}

void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane) {
    // Automatic Variable Declarations
    // Implementation
    AILaneWaypointCalcClosestDataForLane(lp_curLane, lp_testPoint);
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestIndex = AILaneWaypointGetCalcDataClosestWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_secondaryIndex = AILaneWaypointGetCalcDataSecondWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestPoint = AILaneWaypointGetCalcDataClosestPoint();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestDist = AILaneWaypointGetCalcDataClosestDist();
}

void libGame_gf_CalculateClosestLaneData (point lp_testPoint) {
    // Variable Declarations
    int lv_curLane;
    int lv_curWaypointIndex;
    point lv_curWaypoint;
    fixed lv_curDist;
    fixed lv_tempBestDistance;
    point lv_tempClosestPoint;
    int lv_closestIndex;
    point lv_closestWaypoint;
    int lv_secondaryIndex;
    point lv_secondaryWaypoint;
    point lv_closestPoint;
    fixed lv_finalBestDistanceAnyLane;
    fixed lv_finalBestDistanceMinionLane;

    // Automatic Variable Declarations
    int autoE6AC4987_ae;
    const int autoE6AC4987_ai = 1;

    // Variable Initialization

    // Implementation
    lv_finalBestDistanceAnyLane = 524287.0;
    lv_finalBestDistanceMinionLane = 524287.0;
    libGame_gv_closestLaneData.lv_closestLane = 0;
    libGame_gv_closestLaneData.lv_closestMinionLane = 0;
    autoE6AC4987_ae = libGame_gv_laneCount;
    lv_curLane = 1;
    for ( ; ( (autoE6AC4987_ai >= 0 && lv_curLane <= autoE6AC4987_ae) || (autoE6AC4987_ai < 0 && lv_curLane >= autoE6AC4987_ae) ) ; lv_curLane += autoE6AC4987_ai ) {
        libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lv_curLane);
        if ((libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceAnyLane)) {
            libGame_gv_closestLaneData.lv_closestLane = lv_curLane;
            lv_finalBestDistanceAnyLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

        if ((libGame_gv_laneData[lv_curLane].lv_minionSpawningEnabled == true) && (libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceMinionLane)) {
            libGame_gv_closestLaneData.lv_closestMinionLane = lv_curLane;
            lv_finalBestDistanceMinionLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

    }
}

bool libGame_gf_LaneIndexIsValid (int lp_laneIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_laneIndex > 0) || (lp_laneIndex == libGame_gv_laneCustomLane))) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel (unit lp_heroUnit) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_heroUnit);

    // Implementation
    if ((lv_heroIndex > 0)) {
        UnitCreateEffectUnit(lp_heroUnit, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, lp_heroUnit);
        if ((lp_heroUnit == libGame_gv_players[UnitGetOwner(lp_heroUnit)].lv_heroUnit)) {
            UnitCreateEffectUnit(lp_heroUnit, "StormLevelScalingModification", lp_heroUnit);
        }

    }

}

void libGame_gf_LevelUpResetHeroStats (unit lp_heroUnit) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_reference;
    string lv_tokenCounterIndex;

    // Automatic Variable Declarations
    int autoBABCC342_ae;
    const int autoBABCC342_ai = 1;
    int auto4F76E7BF_ae;
    const int auto4F76E7BF_ai = 1;

    // Variable Initialization
    lv_reference = "";

    // Implementation
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_heroUnit);
    if ((lv_heroIndex > 0)) {
        if ((lp_heroUnit == libGame_gv_players[lv_player].lv_heroUnit) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance) == true)) {
            lv_tokenCounterIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterInstance;
            libGame_gf_TokenCounterResetTokenOnHeroUnit(libCore_gf_TokenGetBehavior(lv_tokenCounterIndex), lp_heroUnit);
            libUIUI_gf_UIQuestsUpdateQuestUIOfPlayer(lv_player);
        }

        if ((lp_heroUnit == libGame_gv_players[lv_player].lv_heroUnit)) {
            lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, "StormLevelScalingModification", "EffectArray", c_playerAny);
            if ((lv_maxArrayValue > 0)) {
                autoBABCC342_ae = (lv_maxArrayValue-1);
                lv_itArray = 0;
                for ( ; ( (autoBABCC342_ai >= 0 && lv_itArray <= autoBABCC342_ae) || (autoBABCC342_ai < 0 && lv_itArray >= autoBABCC342_ae) ) ; lv_itArray += autoBABCC342_ai ) {
                    lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, "StormLevelScalingModification", "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                    libNtve_gf_CatalogReferenceModifyBasedOnDefaultValue(((lv_reference)), lv_player, 0.0, c_upgradeOperationAdd);
                }
            }

        }

        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect != null)) {
            lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, "EffectArray", c_playerAny);
            if ((lv_maxArrayValue > 0)) {
                auto4F76E7BF_ae = (lv_maxArrayValue-1);
                lv_itArray = 0;
                for ( ; ( (auto4F76E7BF_ai >= 0 && lv_itArray <= auto4F76E7BF_ae) || (auto4F76E7BF_ai < 0 && lv_itArray >= auto4F76E7BF_ae) ) ; lv_itArray += auto4F76E7BF_ai ) {
                    lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                    libNtve_gf_CatalogReferenceModifyBasedOnDefaultValue(((lv_reference)), lv_player, 0.0, c_upgradeOperationAdd);
                }
            }

        }

    }

}

void libGame_gf_LevelUpLevelUpHero (unit lp_hero) {
    // Variable Declarations
    int lv_player;
    int lv_newLevel;
    int lv_heroIndex;
    int lv_team;
    int lv_itTalentTier;

    // Automatic Variable Declarations
    int auto1FCE1D1C_val;
    const int autoD740CE1F_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoD740CE1F_ai = 1;

    // Variable Initialization

    // Implementation
    UnitSetCustomValue(lp_hero, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_HeroLevelIndex), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, lp_hero) + 1));
    lv_player = UnitGetOwner(lp_hero);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_player) == false)) {
        return ;
    }

    lv_newLevel = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, lp_hero);
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_player);
    libGame_gv_teams[lv_team].lv_teamLevel = MaxI(libGame_gv_teams[lv_team].lv_teamLevel, lv_newLevel);
    if ((libSond_gf_SoundtrackIsIntroPlaying() == false)) {
        auto1FCE1D1C_val = libGame_gv_teams[lv_team].lv_teamLevel;
        if (auto1FCE1D1C_val == 10) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else if (auto1FCE1D1C_val == 20) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else {
        }
    }

    libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel(lp_hero);
    libUIUI_gf_UIPartyFrameTeamLevelUpdate(lv_team, lv_newLevel);
    libUIUI_gf_UITabScreenPanelUpdateTeamLevel(lv_team, lv_newLevel);
    if ((lv_newLevel > 0) && (libGame_gv_players[lv_player].lv_suppressLevelUpFXAndTeamXPTracking == false)) {
        libNtve_gf_SendActorMessageToUnit(lp_hero, "Signal LevelUp");
        SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Team", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], lp_hero, 8.0, 100.0, 0.0);
        SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Enemy", -1), c_maxPlayers, libGame_gf_AlliesEnemiesOfPlayerStorm(c_playerGroupEnemy, lv_player), lp_hero, 8.0, 100.0, 0.0);
        lv_itTalentTier = 1;
        for ( ; ( (autoD740CE1F_ai >= 0 && lv_itTalentTier <= autoD740CE1F_ae) || (autoD740CE1F_ai < 0 && lv_itTalentTier >= autoD740CE1F_ae) ) ; lv_itTalentTier += autoD740CE1F_ai ) {
            if ((lv_newLevel == libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier])) {
                SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Talent", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], lp_hero, 8.0, 100.0, 0.0);
            }

        }
    }

    libGame_gf_SendEventHeroLevelUp(lv_player, lv_newLevel);
    libGame_gf_TalentChoicesUpdateTalentPointsForPlayer(lv_player);
    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lv_player, libGame_ge_TalentChoicesUpdateChoicePanelEvent_LevelUp);
    libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer(lv_player);
}

void libGame_gf_LevelUpApplyGenericHeroStatsForSingleLevel () {
    // Automatic Variable Declarations
}

void libGame_gf_SetStormMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoBF073263_g;

    // Variable Initialization

    // Implementation
    autoBF073263_g = lp_players;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBF073263_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer) == true)) {
            if ((lp_lighting == libGame_gv_stormMapLightingCurrent[lv_itPlayer])) {
                continue;
            }

            libGame_gv_stormMapLightingCurrent[lv_itPlayer] = lp_lighting;
            PlayerSetLighting(lv_itPlayer, lp_lighting, lp_blendtime);
        }

    }
}

void libGame_gf_UpdateStormMapLighting (playergroup lp_players, fixed lp_blendtime) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto9B86812C_g;

    // Variable Initialization

    // Implementation
    auto9B86812C_g = lp_players;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9B86812C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer) == true)) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != null)) {
                libGame_gf_SetStormMapLighting(libGame_gv_stormMapLightingSpecial[lv_itPlayer], libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_blendtime);
            }
            else {
                libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_blendtime);
            }
        }

    }
}

void libGame_gf_SpecialLightingEventStart (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto5B9FCE3A_g;

    // Variable Initialization

    // Implementation
    auto5B9FCE3A_g = lp_players;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5B9FCE3A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer) == true)) {
            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = lp_lighting;
            libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_itPlayer), lp_blendtime);
        }

    }
}

void libGame_gf_SpecialLightingEventEnd (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto976A2F30_g;

    // Variable Initialization

    // Implementation
    auto976A2F30_g = lp_players;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto976A2F30_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer) == true)) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] == null)) {
                continue;
            }

            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != lp_lighting)) {
                continue;
            }

            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = null;
            libGame_gf_UpdateStormMapLighting(libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_blendtime);
        }

    }
}

void libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_player, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringLength(lp_name) > libGame_gv_loadoutMaximumCharsInName)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(StringSub(lp_name, 1, libGame_gv_loadoutMaximumCharsInName));
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if ((StringLength(lp_name) <= 0)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if (true) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(lp_name);
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
}

void libGame_gf_LoadoutNameLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = ("LoadoutName" + IntToString(lp_loadout));
    lv_name = "";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
        return ;
    }
    else {
        lv_name = libCore_gf_ConvertTextToString(BankValueGetAsText(lv_playerBank, lv_bankSection, lv_bankKey));
    }
    if ((StringLength(lv_name) > libGame_gv_loadoutMaximumCharsInName)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(StringSub(lv_name, 1, libGame_gv_loadoutMaximumCharsInName));
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if ((StringLength(lv_name) <= 0)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if (true) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(lv_name);
    }
}

void libGame_gf_LoadoutNameLoadDefaultNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    text lv_defaultName;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_defaultName = StringExternal("UI/HeroSelectPanel/Loadout/DefaultName");
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = lv_defaultName;
    libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
}

void libGame_gf_LoadoutNameStoreLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    string lv_bankSection;
    text lv_value;
    bank lv_playerBank;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bankSection = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankKey = "";

    // Implementation
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_value = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout];
    lv_bankKey = ("LoadoutName" + IntToString(lp_loadout));
    BankValueSetFromText(lv_playerBank, lv_bankSection, lv_bankKey, lv_value);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer (int lp_heroIndex, int lp_loadoutVariation, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadoutVariation);
    libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer(lp_heroIndex, lp_player, true);
}

void libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, bool lp_displayErrorMessage) {
    // Variable Declarations
    bank lv_playerBank;
    bool lv_invalidVariationFounded;
    string lv_bankSection;
    string lv_bankKey;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = (libCore_gf_HeroIDFromIndex(lp_heroIndex));
    lv_bankKey = "LoadoutSelectedVariation";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer(lp_heroIndex, lp_player);
        return ;
    }
    else {
        lv_variation = BankValueGetAsInt(lv_playerBank, lv_bankSection, lv_bankKey);
    }
    if ((lv_variation > 0) && (lv_variation <= libGame_gv_loadoutMaximumLoadoutsPerHero)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutVariation = lv_variation;
    }
    else {
        lv_invalidVariationFounded = true;
    }
    if ((lv_invalidVariationFounded == true)) {
        libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_defaultVariationIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_defaultVariationIndex = 1;
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutVariation = lv_defaultVariationIndex;
    libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer(lp_heroIndex, lp_player, lv_defaultVariationIndex);
}

void libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_variation) {
    // Variable Declarations
    string lv_bankKey;
    string lv_bankSection;
    bank lv_playerBank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bankKey = "";
    lv_bankSection = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;

    // Implementation
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutSelectedVariation";
    BankValueSetFromInt(lv_playerBank, lv_bankSection, lv_bankKey, lp_variation);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutSkinsPreloadSkinsOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_skinIndex;
    string lv_skinIDPersonal;
    bool lv_loadDefault;
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;
    int lv_itLoadout;

    // Automatic Variable Declarations
    const int auto5E16C6B3_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int auto5E16C6B3_ai = 1;

    // Variable Initialization
    lv_skinIDPersonal = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutSkinArray";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        lv_loadDefault = true;
    }

    lv_itLoadout = 1;
    for ( ; ( (auto5E16C6B3_ai >= 0 && lv_itLoadout <= auto5E16C6B3_ae) || (auto5E16C6B3_ai < 0 && lv_itLoadout >= auto5E16C6B3_ae) ) ; lv_itLoadout += auto5E16C6B3_ai ) {
        if ((lv_loadDefault == true)) {
            lv_skinIndex = 0;
        }
        else {
            lv_skinIDPersonal = StringWord(BankValueGetAsString(lv_playerBank, lv_bankSection, lv_bankKey), lv_itLoadout);
            lv_skinIndex = libCore_gf_DataSkinsFindSkinWithSkinIDPersonal(lv_skinIDPersonal);
        }
        libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer(lp_heroIndex, lv_itLoadout, lv_skinIndex, false, lp_player);
    }
    libGame_gf_LoadoutSkinsUpdateSkinBankOfHeroForPlayer(lp_heroIndex, lp_player);
}

void libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_skinIndex, bool lp_updateBank, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_skinIndex > 0)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lp_loadout] = lp_skinIndex;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lp_loadout] = libCore_gf_DataHeroesDefaultSkinIndexOfHero(lp_heroIndex);
    }
    if ((lp_updateBank == true)) {
        libGame_gf_LoadoutSkinsUpdateSkinBankOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutSkinsUpdateSkinBankOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_bankSection;
    string lv_bankKey;
    bank lv_playerBank;
    int lv_itLoadout;
    int lv_skinIndex;
    string lv_skinIDPersonal;
    string lv_finalString;

    // Automatic Variable Declarations
    const int auto4475CFAD_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int auto4475CFAD_ai = 1;

    // Variable Initialization
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutSkinArray";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_skinIDPersonal = "";
    lv_finalString = "";

    // Implementation
    lv_itLoadout = 1;
    for ( ; ( (auto4475CFAD_ai >= 0 && lv_itLoadout <= auto4475CFAD_ae) || (auto4475CFAD_ai < 0 && lv_itLoadout >= auto4475CFAD_ae) ) ; lv_itLoadout += auto4475CFAD_ai ) {
        lv_skinIndex = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lv_itLoadout];
        lv_skinIDPersonal = libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_skinIDPersonal;
        lv_finalString = (lv_finalString + lv_skinIDPersonal);
        if ((lv_itLoadout < libGame_gv_loadoutMaximumLoadoutsPerHero)) {
            lv_finalString = (lv_finalString + " ");
        }

    }
    BankValueSetFromString(lv_playerBank, lv_bankSection, lv_bankKey, lv_finalString);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutMountsPreloadMountsOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_mountIndex;
    string lv_mountIDPersonal;
    bool lv_loadDefault;
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;
    int lv_itLoadout;

    // Automatic Variable Declarations
    const int auto148EB3AF_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int auto148EB3AF_ai = 1;

    // Variable Initialization
    lv_mountIDPersonal = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutMountArray";

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_usesMount == false)) {
        return ;
    }

    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        lv_loadDefault = true;
    }

    lv_itLoadout = 1;
    for ( ; ( (auto148EB3AF_ai >= 0 && lv_itLoadout <= auto148EB3AF_ae) || (auto148EB3AF_ai < 0 && lv_itLoadout >= auto148EB3AF_ae) ) ; lv_itLoadout += auto148EB3AF_ai ) {
        if ((lv_loadDefault == true)) {
            lv_mountIndex = 0;
        }
        else {
            lv_mountIDPersonal = StringWord(BankValueGetAsString(lv_playerBank, lv_bankSection, lv_bankKey), lv_itLoadout);
            lv_mountIndex = libCore_gf_DataMountsFindMountWithMountIDPersonal(lv_mountIDPersonal);
        }
        libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer(lp_heroIndex, lv_itLoadout, lv_mountIndex, false, lp_player);
    }
    libGame_gf_LoadoutMountsUpdateMountBankOfHeroForPlayer(lp_heroIndex, lp_player);
}

void libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_mountIndex, bool lp_updateBank, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mountIndex > 0)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lp_loadout] = lp_mountIndex;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lp_loadout] = libCore_gf_DataHeroesDefaultMountIndexOfHero(lp_heroIndex);
    }
    if ((lp_updateBank == true)) {
        libGame_gf_LoadoutMountsUpdateMountBankOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutMountsUpdateMountBankOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_bankSection;
    string lv_bankKey;
    bank lv_playerBank;
    int lv_itLoadout;
    int lv_mountIndex;
    string lv_mountIDPersonal;
    string lv_finalString;

    // Automatic Variable Declarations
    const int auto7B7552D2_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int auto7B7552D2_ai = 1;

    // Variable Initialization
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutMountArray";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_mountIDPersonal = "";
    lv_finalString = "";

    // Implementation
    lv_itLoadout = 1;
    for ( ; ( (auto7B7552D2_ai >= 0 && lv_itLoadout <= auto7B7552D2_ae) || (auto7B7552D2_ai < 0 && lv_itLoadout >= auto7B7552D2_ae) ) ; lv_itLoadout += auto7B7552D2_ai ) {
        lv_mountIndex = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lv_itLoadout];
        lv_mountIDPersonal = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountIDPersonal;
        lv_finalString = (lv_finalString + lv_mountIDPersonal);
        if ((lv_itLoadout < libGame_gv_loadoutMaximumLoadoutsPerHero)) {
            lv_finalString = (lv_finalString + " ");
        }

    }
    BankValueSetFromString(lv_playerBank, lv_bankSection, lv_bankKey, lv_finalString);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutAnnouncersPreloadAnnouncersOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_announcerIndex;
    string lv_announcerID;
    bool lv_loadDefault;
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;
    int lv_itLoadout;

    // Automatic Variable Declarations
    const int autoA2676E1A_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int autoA2676E1A_ai = 1;

    // Variable Initialization
    lv_announcerID = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutAnnouncerArray";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        lv_loadDefault = true;
    }

    lv_itLoadout = 1;
    for ( ; ( (autoA2676E1A_ai >= 0 && lv_itLoadout <= autoA2676E1A_ae) || (autoA2676E1A_ai < 0 && lv_itLoadout >= autoA2676E1A_ae) ) ; lv_itLoadout += autoA2676E1A_ai ) {
        if ((lv_loadDefault == true)) {
            lv_announcerIndex = 0;
        }
        else {
            lv_announcerID = StringWord(BankValueGetAsString(lv_playerBank, lv_bankSection, lv_bankKey), lv_itLoadout);
            lv_announcerIndex = libCore_gf_DataAnnouncersFindAnnouncerWithAnnouncerID(lv_announcerID);
        }
        libGame_gf_LoadoutAnnouncersStoreAnnouncerOfHeroForPlayer(lp_heroIndex, lv_itLoadout, lv_announcerIndex, false, lp_player);
    }
    libGame_gf_LoadoutAnnouncersUpdateAnnouncerBankOfHeroForPlayer(lp_heroIndex, lp_player);
}

void libGame_gf_LoadoutAnnouncersStoreAnnouncerOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_announcerIndex, bool lp_updateBank, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_announcerIndex > 0)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutAnnouncerItem[lp_loadout] = lp_announcerIndex;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutAnnouncerItem[lp_loadout] = libCore_gf_CONFIGDefaultAnnouncerIndex();
    }
    if ((lp_updateBank == true)) {
        libGame_gf_LoadoutAnnouncersUpdateAnnouncerBankOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutAnnouncersUpdateAnnouncerBankOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_bankSection;
    string lv_bankKey;
    bank lv_playerBank;
    int lv_itLoadout;
    int lv_announcerIndex;
    string lv_announcerID;
    string lv_finalString;

    // Automatic Variable Declarations
    const int autoCCBE054C_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int autoCCBE054C_ai = 1;

    // Variable Initialization
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "LoadoutAnnouncerArray";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_announcerID = "";
    lv_finalString = "";

    // Implementation
    lv_itLoadout = 1;
    for ( ; ( (autoCCBE054C_ai >= 0 && lv_itLoadout <= autoCCBE054C_ae) || (autoCCBE054C_ai < 0 && lv_itLoadout >= autoCCBE054C_ae) ) ; lv_itLoadout += autoCCBE054C_ai ) {
        lv_announcerIndex = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutAnnouncerItem[lv_itLoadout];
        lv_announcerID = libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_iDPersonal;
        lv_finalString = (lv_finalString + lv_announcerID);
        if ((lv_itLoadout < libGame_gv_loadoutMaximumLoadoutsPerHero)) {
            lv_finalString = (lv_finalString + " ");
        }

    }
    BankValueSetFromString(lv_playerBank, lv_bankSection, lv_bankKey, lv_finalString);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutPrepickedTalentBuildPreloadBuildIndexOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_buildIndex;
    bool lv_loadDefault;
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "TalentBuildSelected";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        lv_loadDefault = true;
    }

    if ((lv_loadDefault == true)) {
        lv_buildIndex = 1;
    }
    else {
        lv_buildIndex = BankValueGetAsInt(lv_playerBank, lv_bankSection, lv_bankKey);
    }
    libGame_gf_LoadoutPrepickedTalentBuildStoreBuildIndexOfHeroForPlayer(lp_heroIndex, lv_buildIndex, false, lp_player);
    libGame_gf_LoadoutPrepickedTalentBuildUpdateBuildIndexBankOfHeroForPlayer(lp_heroIndex, lp_player);
}

void libGame_gf_LoadoutPrepickedTalentBuildStoreBuildIndexOfHeroForPlayer (int lp_heroIndex, int lp_build, bool lp_updateBank, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_build > 0) && (lp_build <= libCore_gv_talents_MaxPrepickedTalentProfiles_C)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedBuild = lp_build;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedBuild = 1;
    }
    if ((lp_updateBank == true)) {
        libGame_gf_LoadoutPrepickedTalentBuildUpdateBuildIndexBankOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutPrepickedTalentBuildUpdateBuildIndexBankOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_bankSection;
    string lv_bankKey;
    bank lv_playerBank;
    int lv_build;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "TalentBuildSelected";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;

    // Implementation
    lv_build = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedBuild;
    BankValueSetFromInt(lv_playerBank, lv_bankSection, lv_bankKey, lv_build);
    BankSave(lv_playerBank);
}

void libGame_gf_LoadoutPrepickedTalentsPreloadBuildsForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_itBuild;
    int lv_skinIndex;
    string lv_skinIDPersonal;
    bool lv_loadDefault;
    bank lv_playerBank;
    string lv_bankSection;
    string lv_bankKey;
    int lv_itLoadout;
    int lv_itTier;
    int lv_talentColumn;
    string lv_buildArrayString;
    string lv_buildString;

    // Automatic Variable Declarations
    const int autoBA15F215_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoBA15F215_ai = 1;
    const int auto1CF7D670_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto1CF7D670_ai = 1;

    // Variable Initialization
    lv_skinIDPersonal = "";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "TalentBuildArray";
    lv_buildArrayString = "";
    lv_buildString = "";

    // Implementation
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == false)) {
        lv_loadDefault = true;
    }
    else {
        lv_buildArrayString = BankValueGetAsString(lv_playerBank, lv_bankSection, lv_bankKey);
    }
    lv_itBuild = 1;
    for ( ; ( (autoBA15F215_ai >= 0 && lv_itBuild <= autoBA15F215_ae) || (autoBA15F215_ai < 0 && lv_itBuild >= autoBA15F215_ae) ) ; lv_itBuild += autoBA15F215_ai ) {
        if ((lv_loadDefault == false)) {
            lv_buildString = StringWord(lv_buildArrayString, lv_itBuild);
        }

        lv_itTier = 1;
        for ( ; ( (auto1CF7D670_ai >= 0 && lv_itTier <= auto1CF7D670_ae) || (auto1CF7D670_ai < 0 && lv_itTier >= auto1CF7D670_ae) ) ; lv_itTier += auto1CF7D670_ai ) {
            if ((lv_loadDefault == false)) {
                lv_talentColumn = StringToInt(StringSub(lv_buildString, lv_itTier, lv_itTier));
            }
            else {
                lv_talentColumn = 0;
            }
            libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer(lp_heroIndex, lv_itBuild, lv_itTier, lv_talentColumn, false, lp_player);
        }
    }
    libGame_gf_LoadoutPrepickedTalentsUpdateBuildsBankOfHeroForPlayer(lp_heroIndex, lp_player);
}

void libGame_gf_LoadoutPrepickedTalentsStoreBuildOfHeroForPlayer (int lp_heroIndex, int lp_build, int lp_talentTier, int lp_talentColumn, bool lp_updateBank, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_talentColumn > 0) && (lp_talentColumn <= libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCountPerTier[lp_talentTier])) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentColumn[lp_build][lp_talentTier] = lp_talentColumn;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentColumn[lp_build][lp_talentTier] = 0;
    }
    if ((lp_updateBank == true)) {
        libGame_gf_LoadoutPrepickedTalentsUpdateBuildsBankOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutPrepickedTalentsUpdateBuildsBankOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    string lv_bankSection;
    string lv_bankKey;
    bank lv_playerBank;
    int lv_itBuild;
    int lv_itTier;
    int lv_talentColumn;
    string lv_announcerID;
    string lv_finalString;

    // Automatic Variable Declarations
    const int autoC3AFB3AB_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoC3AFB3AB_ai = 1;
    const int autoE7432A0D_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoE7432A0D_ai = 1;

    // Variable Initialization
    lv_bankSection = libCore_gf_HeroIDFromIndex(lp_heroIndex);
    lv_bankKey = "TalentBuildArray";
    lv_playerBank = libGame_gv_players[lp_player].lv_bankData.lv_playerSettingsBank;
    lv_announcerID = "";
    lv_finalString = "";

    // Implementation
    lv_itBuild = 1;
    for ( ; ( (autoC3AFB3AB_ai >= 0 && lv_itBuild <= autoC3AFB3AB_ae) || (autoC3AFB3AB_ai < 0 && lv_itBuild >= autoC3AFB3AB_ae) ) ; lv_itBuild += autoC3AFB3AB_ai ) {
        lv_itTier = 1;
        for ( ; ( (autoE7432A0D_ai >= 0 && lv_itTier <= autoE7432A0D_ae) || (autoE7432A0D_ai < 0 && lv_itTier >= autoE7432A0D_ae) ) ; lv_itTier += autoE7432A0D_ai ) {
            lv_talentColumn = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentColumn[lv_itBuild][lv_itTier];
            if (((lv_talentColumn < 0) || (lv_talentColumn > libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCountPerTier[lv_itTier]))) {
                lv_talentColumn = 0;
            }

            lv_finalString = (lv_finalString + IntToString(lv_talentColumn));
        }
        if ((lv_itBuild < libCore_gv_talents_MaxPrepickedTalentProfiles_C)) {
            lv_finalString = (lv_finalString + " ");
        }

    }
    BankValueSetFromString(lv_playerBank, lv_bankSection, lv_bankKey, lv_finalString);
    BankSave(lv_playerBank);
}

int libGame_gf_LoadoutGetPlayerVariation (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;
}

int libGame_gf_LoadoutGetPlayerSkin (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_variation = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerMount (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_variation = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerAnnouncer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_variation = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutAnnouncerItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerBuild (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedBuild;
}

int libGame_gf_LoadoutGetPlayerVariationForHero (int lp_player, int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutVariation;
}

int libGame_gf_LoadoutGetPlayerSkinForHero (int lp_player, int lp_heroIndex) {
    // Variable Declarations
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_variation = libGame_gf_LoadoutGetPlayerVariationForHero(lp_player, lp_heroIndex);

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerMountForHero (int lp_player, int lp_heroIndex) {
    // Variable Declarations
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_variation = libGame_gf_LoadoutGetPlayerVariationForHero(lp_player, lp_heroIndex);

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerAnnouncerForHero (int lp_player, int lp_heroIndex) {
    // Variable Declarations
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_variation = libGame_gf_LoadoutGetPlayerVariationForHero(lp_player, lp_heroIndex);

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutAnnouncerItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerBuildForHero (int lp_player, int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedBuild;
}

void libGame_gf_MatchResultUpdatePlayer (int lp_player, int lp_stuffType) {
    // Variable Declarations
    string lv_iD;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Implementation
    lv_iD = (IntToString(libGame_gv_matchStatisticCurrentSecond) + " " + libGame_ge_MatchStatisticStuffType_Ident(lp_stuffType));
    lv_value = libGame_gf_MatchResultGainNewValueForCurrentSecond(lp_player, lp_stuffType);
    libGame_gf_UnitStatsStoreUserDataToUnit(libGame_gv_players[lp_player].lv_interactiveUnit, lv_iD, lv_value);
}

fixed libGame_gf_MatchResultGainNewValueForCurrentSecond (int lp_player, int lp_stuffType) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    int autoB48714E5_val;

    // Variable Initialization

    // Implementation
    autoB48714E5_val = lp_stuffType;
    if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWSoloKill) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "SoloKill");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWAssists) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "Assists");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWDeaths) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "Deaths");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWSiegeDamage) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "SiegeDamage");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWHeroDamage) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "HeroDamage");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWHealing) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "Healing");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWSelfHealing) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "SelfHealing");
    }
    else if (autoB48714E5_val == libGame_ge_MatchStatisticStuffType_NEWExperience) {
        lv_value = PlayerScoreValueGetAsFixed(lp_player, "ExperienceContribution");
    }
    else {
    }
    lv_value -= libGame_gf_MatchResultGetRecordedValueForSecond(lp_player, (libGame_gv_matchStatisticCurrentSecond - 1), lp_stuffType);
    return lv_value;
}

fixed libGame_gf_MatchResultGetRecordedValueForSecond (int lp_player, int lp_second, int lp_stuffType) {
    // Variable Declarations
    string lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Implementation
    lv_iD = (IntToString(lp_second) + " " + libGame_ge_MatchStatisticStuffType_Ident(lp_stuffType));
    return libGame_gf_UnitStatsGetUserDataFromUnit(lv_iD, libGame_gv_players[lp_player].lv_interactiveUnit);
}

void libGame_gf_MTMLPrepareDataToTransfer () {
    // Variable Declarations
    int lv_itOption;
    string lv_tempString;
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto5DAB78EA_ae = libGame_gv_mTMLGameOptionsCountMax;
    const int auto5DAB78EA_ai = 1;
    const int autoBB5A06D1_ae = libCore_gv_bALMaxTeams;
    const int autoBB5A06D1_ai = 1;
    playergroup auto75D899F8_g;
    playergroup auto971A46F8_g;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    lv_itOption = 1;
    for ( ; ( (auto5DAB78EA_ai >= 0 && lv_itOption <= auto5DAB78EA_ae) || (auto5DAB78EA_ai < 0 && lv_itOption >= auto5DAB78EA_ae) ) ; lv_itOption += auto5DAB78EA_ai ) {
        lv_tempString = (lv_tempString + IntToString(BoolToInt(libGame_gv_mTMLGameSetupData.lv_gameOptions[lv_itOption])));
    }
    libGame_gv_mTMLGameSetupData.lv_gameOptionString = lv_tempString;
    lv_itTeam = 1;
    for ( ; ( (autoBB5A06D1_ai >= 0 && lv_itTeam <= autoBB5A06D1_ae) || (autoBB5A06D1_ai < 0 && lv_itTeam >= autoBB5A06D1_ae) ) ; lv_itTeam += autoBB5A06D1_ai ) {
        lv_tempString = "";
        auto75D899F8_g = libGlue_gv_glueBattleLobbyUI.lv_battleLobbyTeamPlayerGroup[lv_itTeam];
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto75D899F8_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_tempString = (lv_tempString + libGame_gf_StormGetPlayerHandle(lv_itPlayer) + " ");
        }
        libGame_gv_mTMLGameSetupData.lv_teamPlayerHandles[lv_itTeam] = lv_tempString;
        lv_tempString = "";
        auto971A46F8_g = libGlue_gv_glueBattleLobbyUI.lv_battleLobbyTeamPlayerGroup[lv_itTeam];
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto971A46F8_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_tempString = (lv_tempString + libGame_gf_StormGetPlayerBNet(lv_itPlayer) + " ");
        }
        libGame_gv_mTMLGameSetupData.lv_teamPlayerBNet[lv_itTeam] = lv_tempString;
    }
    libGame_gv_mTMLGameSetupData.lv_hostPlayerHandle = libGame_gf_StormGetPlayerHandle(libGame_gv_mTMLGameSetupData.lv_hostPlayer);
}

void libGame_gf_MTMLStoreBankDataAllPlayers () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6BAA8F26_g;

    // Variable Initialization

    // Implementation
    auto6BAA8F26_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6BAA8F26_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_MTMLStoreBankData(lv_itPlayer);
    }
}

void libGame_gf_MTMLStoreBankData (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    bank lv_bank;
    string lv_bankKey;
    string lv_bankSection;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto4656B573_ae = libCore_gv_bALMaxTeams;
    const int auto4656B573_ai = 1;
    const int autoC277C848_ae = libCore_gv_bALMaxTeams;
    const int autoC277C848_ai = 1;

    // Variable Initialization
    lv_bank = libGame_gv_players[lp_player].lv_bankData.lv_metaDataBank;
    lv_bankKey = "";
    lv_bankSection = "";

    // Implementation
    lv_bankSection = "MapToMapLoad";
    lv_bankKey = "GameOptions";
    BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_mTMLGameSetupData.lv_gameOptionString);
    lv_itTeam = 1;
    for ( ; ( (auto4656B573_ai >= 0 && lv_itTeam <= auto4656B573_ae) || (auto4656B573_ai < 0 && lv_itTeam >= auto4656B573_ae) ) ; lv_itTeam += auto4656B573_ai ) {
        lv_bankKey = ("Team" + IntToString(lv_itTeam));
        BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_mTMLGameSetupData.lv_teamPlayerHandles[lv_itTeam]);
    }
    lv_itTeam = 1;
    for ( ; ( (autoC277C848_ai >= 0 && lv_itTeam <= autoC277C848_ae) || (autoC277C848_ai < 0 && lv_itTeam >= autoC277C848_ae) ) ; lv_itTeam += autoC277C848_ai ) {
        lv_bankKey = ("Team" + IntToString(lv_itTeam) + "_BNet");
        BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_mTMLGameSetupData.lv_teamPlayerBNet[lv_itTeam]);
    }
    lv_bankKey = "HostPlayer";
    BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_mTMLGameSetupData.lv_hostPlayerHandle);
    lv_bankKey = "MapDataIndex";
    BankValueSetFromInt(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_mTMLGameSetupData.lv_mapDataIndex);
    lv_bankKey = "MatchID";
    BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gf_MTMLGenerateMatchID());
    lv_bankKey = "Version";
    BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, libGame_gv_gameDataVersion);
    lv_bankKey = "Date";
    BankValueSetFromString(lv_bank, lv_bankSection, lv_bankKey, DateTimeToString(CurrentDateTimeGet()));
    BankSave(lv_bank);
}

void libGame_gf_MTMLLoadBankData (int lp_player) {
    // Variable Declarations
    int lv_itOptionIndex;
    string lv_bankKey;
    string lv_bankSection;
    string lv_tempString;
    int lv_tempInteger;
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itHandle;
    bank lv_bank;

    // Automatic Variable Declarations
    const int auto32E637F8_ae = libGame_gv_mTMLGameOptionsCountMax;
    const int auto32E637F8_ai = 1;
    const int auto8DAA52D5_ae = libCore_gv_bALMaxTeams;
    const int auto8DAA52D5_ai = 1;
    playergroup auto0640F92C_g;
    const int auto87A4F491_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto87A4F491_ai = 1;
    playergroup autoBBAE768C_g;

    // Variable Initialization
    lv_bankKey = "";
    lv_bankSection = "";
    lv_tempString = "";
    lv_bank = libGame_gv_players[lp_player].lv_bankData.lv_metaDataBank;

    // Implementation
    lv_bankSection = "MapToMapLoad";
    lv_bankKey = "GameOptions";
    lv_tempString = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
    libGame_gv_mTMLGameSetupData.lv_gameOptionString = lv_tempString;
    lv_itOptionIndex = 1;
    for ( ; ( (auto32E637F8_ai >= 0 && lv_itOptionIndex <= auto32E637F8_ae) || (auto32E637F8_ai < 0 && lv_itOptionIndex >= auto32E637F8_ae) ) ; lv_itOptionIndex += auto32E637F8_ai ) {
        lv_tempInteger = StringToInt(StringSub(lv_tempString, lv_itOptionIndex, lv_itOptionIndex));
        libGame_gv_mTMLGameSetupData.lv_gameOptions[lv_itOptionIndex] = (lv_tempInteger == 1);
    }

    lv_itTeam = 1;
    for ( ; ( (auto8DAA52D5_ai >= 0 && lv_itTeam <= auto8DAA52D5_ae) || (auto8DAA52D5_ai < 0 && lv_itTeam >= auto8DAA52D5_ae) ) ; lv_itTeam += auto8DAA52D5_ai ) {
        lv_bankKey = ("Team" + IntToString(lv_itTeam));
        lv_tempString = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
        auto0640F92C_g = PlayerGroupAll();
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto0640F92C_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_itHandle = 1;
            for ( ; ( (auto87A4F491_ai >= 0 && lv_itHandle <= auto87A4F491_ae) || (auto87A4F491_ai < 0 && lv_itHandle >= auto87A4F491_ae) ) ; lv_itHandle += auto87A4F491_ai ) {
                if ((StringWord(lv_tempString, lv_itHandle) == libGame_gf_StormGetPlayerHandle(lv_itPlayer))) {
                    PlayerGroupAdd(libGame_gv_mTMLGameSetupData.lv_teamPlayers[lv_itTeam], lv_itPlayer);
                    break;
                }

            }
        }
    }

    lv_bankKey = "HostPlayer";
    lv_tempString = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
    autoBBAE768C_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBBAE768C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_tempString == libGame_gf_StormGetPlayerHandle(lv_itPlayer))) {
            libGame_gv_mTMLGameSetupData.lv_hostPlayer = lv_itPlayer;
            break;
        }

    }
    if ((libGame_gv_mTMLGameSetupData.lv_hostPlayer == -1)) {
        libGame_gv_mTMLGameSetupData.lv_hostPlayer = libCore_gf_RandomPlayerFromPlayerGroup(PlayerGroupActive());
    }

    libGame_gv_mTMLGameSetupData.lv_hostPlayerHandle = libGame_gf_StormGetPlayerHandle(libGame_gv_mTMLGameSetupData.lv_hostPlayer);

    lv_bankKey = "MapDataIndex";
    libGame_gv_mTMLGameSetupData.lv_mapDataIndex = BankValueGetAsInt(lv_bank, lv_bankSection, lv_bankKey);

    lv_bankKey = "Version";
    libGame_gv_mTMLGameSetupData.lv_version = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);

    lv_bankKey = "Date";
    libGame_gv_mTMLGameSetupData.lv_date = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);

    lv_bankKey = "MatchID";
    libGame_gv_mTMLGameSetupData.lv_matchID = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);

}

void libGame_gf_MTMLLoadBankDataForceManualMapLaunch () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto0E750C8D_ae = libCore_gv_bALMaxPlayers;
    const int auto0E750C8D_ai = 1;

    // Variable Initialization

    // Implementation
    libGame_gv_mTMLGameSetupData.lv_hostPlayer = libCore_gv_lOCAL_Player;
    lv_itPlayer = 1;
    for ( ; ( (auto0E750C8D_ai >= 0 && lv_itPlayer <= auto0E750C8D_ae) || (auto0E750C8D_ai < 0 && lv_itPlayer >= auto0E750C8D_ae) ) ; lv_itPlayer += auto0E750C8D_ai ) {
        if ((lv_itPlayer > libCore_gv_bALMaxPlayersOnATeam)) {
            PlayerGroupAdd(libGame_gv_mTMLGameSetupData.lv_teamPlayers[libGame_gv_teamOrderIndex_C], lv_itPlayer);
        }
        else {
            PlayerGroupAdd(libGame_gv_mTMLGameSetupData.lv_teamPlayers[libGame_gv_teamChaosIndex_C], lv_itPlayer);
        }
    }
}

void libGame_gf_MTMLChecking () {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_checkingPlayerGroup;
    string lv_bankKey;
    string lv_bankSection;
    int lv_player1;
    int lv_player2;
    bank lv_bank1;
    bank lv_bank2;

    // Automatic Variable Declarations
    playergroup auto7C25A237_g;

    // Variable Initialization
    lv_checkingPlayerGroup = PlayerGroupEmpty();
    lv_bankKey = "";
    lv_bankSection = "";

    // Implementation
    if ((PlayerGroupCount(PlayerGroupActive()) <= 1)) {
        libGame_gv_mTMLGameSetupData.lv_checking = true;
        return ;
    }

    auto7C25A237_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7C25A237_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_bankData.lv_metaDataBank != null)) {
            PlayerGroupAdd(lv_checkingPlayerGroup, lv_itPlayer);
        }

    }
    lv_player1 = libCore_gf_RandomPlayerFromPlayerGroup(lv_checkingPlayerGroup);
    lv_player2 = libCore_gf_RandomPlayerFromPlayerGroup(libCore_gf_PlayerGroupExceptOfPlayer(lv_checkingPlayerGroup, lv_player1));
    lv_bank1 = libGame_gv_players[lv_player1].lv_bankData.lv_metaDataBank;
    lv_bank2 = libGame_gv_players[lv_player2].lv_bankData.lv_metaDataBank;
    lv_bankSection = "MapToMapLoad";
    lv_bankKey = "Team1";
    if ((BankValueGetAsString(lv_bank1, lv_bankSection, lv_bankKey) == BankValueGetAsString(lv_bank2, lv_bankSection, lv_bankKey))) {
        lv_bankKey = "Team2";
        if ((BankValueGetAsString(lv_bank1, lv_bankSection, lv_bankKey) == BankValueGetAsString(lv_bank2, lv_bankSection, lv_bankKey))) {
            libGame_gv_mTMLGameSetupData.lv_checking = true;
        }

    }

    if ((libGame_gv_mTMLGameSetupData.lv_checking == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_B49BC27C"), true);
    }

}

string libGame_gf_MTMLGenerateMatchID () {
    // Variable Declarations
    string lv_matchID_Server;
    string lv_matchID_Handle;
    string lv_matchID_Date;
    string lv_matchID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_matchID_Server = "";
    lv_matchID_Handle = "";
    lv_matchID_Date = "";
    lv_matchID = "";

    // Implementation
    if ((GameIsOnline() == true)) {
        lv_matchID_Handle = PlayerHandle(PlayerGroupPlayer(PlayerGroupActive(), 1));
        lv_matchID_Handle = StringReplaceWord(lv_matchID_Handle, "-", " ", c_stringReplaceAll, c_stringNoCase);
        lv_matchID_Server = StringWord(lv_matchID_Handle, 1);
        lv_matchID_Handle = StringWord(lv_matchID_Handle, 4);
    }
    else {
        lv_matchID_Server = "0";
        lv_matchID_Handle = "00000";
    }
    lv_matchID_Date = StringReplaceWord(DateTimeToString(CurrentDateTimeGet()), ":", " ", c_stringReplaceAll, c_stringNoCase);
    lv_matchID_Date = StringSub(lv_matchID_Date, (1+2), (StringLength(lv_matchID_Date)-2));
    lv_matchID_Date = StringReplaceWord(lv_matchID_Date, " ", "", c_stringReplaceAll, c_stringNoCase);
    lv_matchID = (lv_matchID_Server + lv_matchID_Handle + lv_matchID_Date);
    return lv_matchID;
}

bool libGame_gf_MTMLGetGameOption (int lp_option) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_mTMLGameSetupData.lv_gameOptions[(lp_option)];
}

int libGame_gf_MTMLGetHostPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_mTMLGameSetupData.lv_hostPlayer;
}

void libGame_gf_MTMLSetGameOption (int lp_option, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_mTMLGameSetupData.lv_gameOptions[(lp_option)] = lp_enabled;
    libGame_gv_mTMLGameSetupData.lv_gameOptions[(lp_option)] = lp_enabled;
}

void libGame_gf_MTMLSetHostPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_mTMLGameSetupData.lv_hostPlayer = lp_player;
}

void libGame_gf_MTMLSetMapDataIndex (int lp_mapDataIndex) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_mTMLGameSetupData.lv_mapDataIndex = lp_mapDataIndex;
}

int libGame_gf_MTMLLastPlayedMatchDataGetHost () {
    int init_i;

    // Variable Declarations
    bool lv_dataIsValid;
    int lv_itPlayer;
    int lv_itPlayer2;
    bank lv_bank;
    string lv_bankSection;
    string lv_bankKey;
    string[libCore_gv_bALMaxEnginePlayerCount + 1] lv_bankValue;

    // Automatic Variable Declarations
    playergroup auto797E944C_g;
    playergroup auto55C139C4_g;
    playergroup autoDD445FF8_g;
    playergroup auto5AD8CE05_g;
    playergroup auto4EFBDD9A_g;
    playergroup auto0732DCEF_g;
    playergroup auto1479BB54_g;

    // Variable Initialization
    lv_bankSection = "";
    lv_bankKey = "";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        lv_bankValue[init_i] = "";
    }

    // Implementation
    lv_bankSection = "MapToMapLoad";
    lv_bankKey = "MatchID";
    lv_dataIsValid = true;
    auto797E944C_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto797E944C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_bank = libGame_gv_players[lv_itPlayer].lv_bankData.lv_metaDataBank;
        if ((BankKeyExists(lv_bank, lv_bankSection, lv_bankKey) == true)) {
            lv_bankValue[lv_itPlayer] = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
        }
        else {
            lv_dataIsValid = false;
            break;
        }
    }
    auto55C139C4_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto55C139C4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_dataIsValid == false)) {
            break;
        }

        autoDD445FF8_g = PlayerGroupActive();
        lv_itPlayer2 = -1;
        while (true) {
            lv_itPlayer2 = PlayerGroupNextPlayer(autoDD445FF8_g, lv_itPlayer2);
            if (lv_itPlayer2 < 0) { break; }
            if (((lv_bankValue[lv_itPlayer] == "") || (lv_bankValue[lv_itPlayer] != lv_bankValue[lv_itPlayer2]))) {
                lv_dataIsValid = false;
                break;
            }

        }
    }

    libGame_gv_mTMLGameSetupData.lv_lastPlayedMatchIDIsValid = lv_dataIsValid;
    lv_bankKey = "HostPlayer";
    auto5AD8CE05_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5AD8CE05_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_bank = libGame_gv_players[lv_itPlayer].lv_bankData.lv_metaDataBank;
        lv_bankValue[lv_itPlayer] = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
    }
    lv_dataIsValid = true;
    auto4EFBDD9A_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4EFBDD9A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_dataIsValid == false)) {
            break;
        }

        auto0732DCEF_g = PlayerGroupActive();
        lv_itPlayer2 = -1;
        while (true) {
            lv_itPlayer2 = PlayerGroupNextPlayer(auto0732DCEF_g, lv_itPlayer2);
            if (lv_itPlayer2 < 0) { break; }
            if ((lv_bankValue[lv_itPlayer] != lv_bankValue[lv_itPlayer2])) {
                lv_dataIsValid = false;
                break;
            }

        }
    }

    if ((lv_dataIsValid == true)) {
        auto1479BB54_g = PlayerGroupActive();
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto1479BB54_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerHandle(lv_itPlayer) == lv_bankValue[lv_itPlayer])) {
                return lv_itPlayer;
            }

        }
    }

    return PlayerGroupPlayer(PlayerGroupActive(), 1);
}

void libGame_gf_MTMLLastPlayedMatchDataAddPlayersToTeams () {
    // Variable Declarations
    bank lv_bank;
    int lv_player;
    string lv_bankKey;
    string lv_bankSection;
    string lv_tempString;
    int lv_itTeam;
    int lv_itHandle;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto604D4E5D_ae = libCore_gv_bALMaxTeams;
    const int auto604D4E5D_ai = 1;
    playergroup auto2946BE36_g;
    const int auto0F12ADBB_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto0F12ADBB_ai = 1;

    // Variable Initialization
    lv_bankKey = "";
    lv_bankSection = "";
    lv_tempString = "";

    // Implementation
    lv_bank = libGame_gv_players[libCore_gf_RandomPlayerFromPlayerGroup(PlayerGroupActive())].lv_bankData.lv_metaDataBank;
    lv_bankSection = "MapToMapLoad";
    lv_itTeam = 1;
    for ( ; ( (auto604D4E5D_ai >= 0 && lv_itTeam <= auto604D4E5D_ae) || (auto604D4E5D_ai < 0 && lv_itTeam >= auto604D4E5D_ae) ) ; lv_itTeam += auto604D4E5D_ai ) {
        lv_bankKey = ("Team" + IntToString(lv_itTeam));
        lv_tempString = BankValueGetAsString(lv_bank, lv_bankSection, lv_bankKey);
        auto2946BE36_g = PlayerGroupAll();
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto2946BE36_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_itHandle = 1;
            for ( ; ( (auto0F12ADBB_ai >= 0 && lv_itHandle <= auto0F12ADBB_ae) || (auto0F12ADBB_ai < 0 && lv_itHandle >= auto0F12ADBB_ae) ) ; lv_itHandle += auto0F12ADBB_ai ) {
                if ((StringWord(lv_tempString, lv_itHandle) == libGame_gf_StormGetPlayerHandle(lv_itPlayer))) {
                    PlayerGroupAdd(libGame_gv_mTMLGameSetupData.lv_teamPlayers[lv_itTeam], lv_itPlayer);
                    break;
                }

            }
        }
    }
}

void libGame_gf_MTMLForceMapDataIndex (int lp_map, int lp_gameMode, int lp_gameMutator) {
    // Variable Declarations
    int lv_itMap;

    // Automatic Variable Declarations
    int autoBA409A19_ae;
    const int autoBA409A19_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerExecute(libCore_gt_MapDataInitialize, true, true);
    autoBA409A19_ae = libCore_gv_mapDataTotalMapCount;
    lv_itMap = 1;
    for ( ; ( (autoBA409A19_ai >= 0 && lv_itMap <= autoBA409A19_ae) || (autoBA409A19_ai < 0 && lv_itMap >= autoBA409A19_ae) ) ; lv_itMap += autoBA409A19_ai ) {
        if ((libCore_gv_mapData[lv_itMap].lv_map == lp_map) && (libCore_gv_mapData[lv_itMap].lv_gameMode == lp_gameMode) && (libCore_gv_mapData[lv_itMap].lv_gameMutator == lp_gameMutator)) {
            libGame_gv_mTMLGameSetupData.lv_mapDataIndex = lv_itMap;
            libCore_gv_sYSMapIndex = lv_itMap;
            libCore_gv_sYSMapIndexHasBeenForced = true;
            return ;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Game_DC01D1B5", "A", StringToText(libCore_ge_MAPMap_Ident(lp_map)));
    TextExpressionSetToken("Param/Expression/lib_Game_DC01D1B5", "B", StringToText(libCore_ge_GameModes_Ident(lp_gameMode)));
    TextExpressionSetToken("Param/Expression/lib_Game_DC01D1B5", "C", StringToText(libCore_ge_GameMutators_Ident(lp_gameMutator)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_DC01D1B5"), true);
}

bool libGame_gf_MinionSystemStarted () {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_minionSystemStarted;
}

void libGame_gf_MinionTurnOnOffCatapults (bool lp_onOff) {
    // Automatic Variable Declarations
    bool autoE8158F53_val;

    // Implementation
    autoE8158F53_val = lp_onOff;
    if (autoE8158F53_val == true) {
        libGame_gv_minionMapNeverSpawnsCatapults = false;
    }
    else if (autoE8158F53_val == false) {
        libGame_gv_minionMapNeverSpawnsCatapults = true;
    }
    else {
    }
}

void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_startStop == true)) {
        if ((libCore_gv_sYSMinionAI == false)) {
            return ;
        }

        if ((libGame_gv_minionSystemStarted == false)) {
            libGame_gv_minionSystemStarted = true;
            libGame_gv_minionSystemPaused = false;
            libAIAI_gf_MinionAITurnMinionAISystemOnOff(true);
        }

    }
    else {
        libGame_gv_minionSystemStarted = false;
        libGame_gf_MinionStartStopMinionSpawnCycle(false);
        libAIAI_gf_MinionAITurnMinionAISystemOnOff(false);
    }
}

void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_startStop == true)) {
        TriggerExecute(libGame_gt_MinionSpawnCycle, true, false);
    }
    else {
        TriggerStop(libGame_gt_MinionSpawnCycle);
    }
}

void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_in;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == true)) {
        if ((lp_pauseUnpause == true)) {
            libGame_gv_minionSystemPaused = true;
            libGame_gv_minionSpawningEnabled = false;
            TimerPause(libGame_gv_scalingTimer, true);
            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
        }
        else {
            libGame_gv_minionSystemPaused = false;
            libGame_gv_minionSpawningEnabled = true;
            if ((libGame_gv_minionScalingEnabled == true)) {
                TimerPause(libGame_gv_scalingTimer, false);
            }

            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(false);
        }
    }

}

void libGame_gf_MinionPauseUnpauseMinionSystemForTeam (bool lp_pauseUnpause, int lp_team, int lp_lane) {
    // Variable Declarations
    int lv_itLane;

    // Automatic Variable Declarations
    int auto7673DA9F_ae;
    const int auto7673DA9F_ai = 1;
    int autoB50D25E8_ae;
    const int autoB50D25E8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == false)) {
        return ;
    }

    if ((lp_pauseUnpause == true)) {
        if ((lp_lane == libGame_ge_AllLanes_AllLanes)) {
            autoB50D25E8_ae = libGame_gv_laneCount;
            lv_itLane = 1;
            for ( ; ( (autoB50D25E8_ai >= 0 && lv_itLane <= autoB50D25E8_ae) || (autoB50D25E8_ai < 0 && lv_itLane >= autoB50D25E8_ae) ) ; lv_itLane += autoB50D25E8_ai ) {
                libGame_gv_minionSystemPausedAdvanced[lp_team][lv_itLane] = true;
            }
        }
        else {
            libGame_gv_minionSystemPausedAdvanced[lp_team][lp_lane] = true;
        }
    }
    else {
        if ((lp_pauseUnpause == false)) {
            if ((lp_lane == libGame_ge_AllLanes_AllLanes)) {
                auto7673DA9F_ae = libGame_gv_laneCount;
                lv_itLane = 1;
                for ( ; ( (auto7673DA9F_ai >= 0 && lv_itLane <= auto7673DA9F_ae) || (auto7673DA9F_ai < 0 && lv_itLane >= auto7673DA9F_ae) ) ; lv_itLane += auto7673DA9F_ai ) {
                    libGame_gv_minionSystemPausedAdvanced[lp_team][lv_itLane] = false;
                }
            }

        }
        else {
            libGame_gv_minionSystemPausedAdvanced[lp_team][lp_lane] = false;
        }
    }
}

void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint) {
    // Variable Declarations
    int lv_team;
    string lv_spawnUnitType;
    bool lv_prefersStructures;
    unit lv_minionUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCore_gv_gameOver == true) || (libGame_gv_minionSpawningEnabled == false))) {
        return ;
    }

    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    lv_spawnUnitType = libCore_gf_DataMinionUnitTypeFromPreset(lp_type, lv_team);
    if ((lv_spawnUnitType == null)) {
        return ;
    }

    if ((lp_type == libCore_ge_MinionType_Catapult) && ((libGame_gv_minionMapNeverSpawnsCatapults == true) || (libGame_gf_TownsAliveinLane(libGame_gf_EnemyTeamNumberOfTeam(lv_team), lp_lane) >= 2) || ((libGame_gf_TownsAliveinLane(libGame_gf_EnemyTeamNumberOfTeam(lv_team), lp_lane) == 1) && (ModI((libGame_gv_minionWaveSpawnCounter - libGame_gv_minionPeriodicCatapultsFirstWave), libGame_gv_minionPeriodicCatapultsWavePeriod_C) != 0)))) {
        return ;
    }

    if ((lp_type == libCore_ge_MinionType_Catapult)) {
        lv_prefersStructures = true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, lv_spawnUnitType, 0, lp_owner, lp_spawnPoint);
    lv_minionUnit = UnitLastCreated();
    if ((libGame_gv_minionScalingEnabled == true)) {
        libGame_gf_UpdateScalingForUnit(lv_minionUnit, libGame_gv_scalingTicks, 0);
    }

    libGame_gf_CalculateSpawnedMinionGoalPoints(lp_owner, lp_spawnPoint);
    libAIAI_gf_MinionAIStartMinionAI(-1, lv_minionUnit, lp_lane, libGame_gv_spawnedMinionFirstWaypointIndex, false, 0, lv_prefersStructures);
    if ((libMapM_gv_mMRavenTeamStats[lv_team].lv_cursed == true)) {
        libMapM_gf_MMRavenApplyCurseEffectOnMinion(lv_minionUnit);
    }

}

trigger auto_libGame_gf_MinionSpawnWave_Trigger = null;
int auto_libGame_gf_MinionSpawnWave_lp_lane;
int auto_libGame_gf_MinionSpawnWave_lp_owner;

void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner) {
    auto_libGame_gf_MinionSpawnWave_lp_lane = lp_lane;
    auto_libGame_gf_MinionSpawnWave_lp_owner = lp_owner;

    if (auto_libGame_gf_MinionSpawnWave_Trigger == null) {
        auto_libGame_gf_MinionSpawnWave_Trigger = TriggerCreate("auto_libGame_gf_MinionSpawnWave_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_MinionSpawnWave_Trigger, false, false);
}

bool auto_libGame_gf_MinionSpawnWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_lane = auto_libGame_gf_MinionSpawnWave_lp_lane;
    int lp_owner = auto_libGame_gf_MinionSpawnWave_lp_owner;

    // Variable Declarations
    const fixed lv_offsetChangePerGroup = 1.875;
    int lv_itGroup;
    int lv_itMinion;
    int lv_groupCount;
    point lv_basePoint;
    point lv_offsetPoint;
    fixed lv_currentOffsetAmount;
    point lv_spawnPoint;
    int lv_team;
    int lv_minionType;

    // Automatic Variable Declarations
    int auto691059B0_ae;
    const int auto691059B0_ai = 1;
    int auto42D45D0C_ae;
    const int auto42D45D0C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_groupCount = libCore_gv_dataMinionWaveCompositionMaxGroupCount;
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[2];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[3];
        lv_team = libGame_gv_teamOrderIndex_C;
    }

    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 1)];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 2)];
        lv_team = libGame_gv_teamChaosIndex_C;
    }

    if ((lv_basePoint == null)) {
        return true;
    }

    Wait(libCore_gv_bALMinionTeamSpawnDelay[lv_team], c_timeGame);
    Wait(libGame_gv_laneData[lp_lane].lv_spawnDelay, c_timeGame);
    auto691059B0_ae = lv_groupCount;
    lv_itGroup = 1;
    for ( ; ( (auto691059B0_ai >= 0 && lv_itGroup <= auto691059B0_ae) || (auto691059B0_ai < 0 && lv_itGroup >= auto691059B0_ae) ) ; lv_itGroup += auto691059B0_ai ) {
        lv_minionType = libCore_gv_dataMinionWaveComposition[lv_team].lv_groupMinionType[lv_itGroup];
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
        auto42D45D0C_ae = libCore_gv_dataMinionWaveComposition[lv_team].lv_groupMinionCount[lv_itGroup];
        lv_itMinion = 1;
        for ( ; ( (auto42D45D0C_ai >= 0 && lv_itMinion <= auto42D45D0C_ae) || (auto42D45D0C_ai < 0 && lv_itMinion >= auto42D45D0C_ae) ) ; lv_itMinion += auto42D45D0C_ai ) {
            libGame_gf_MinionSpawnMinion(lp_lane, lp_owner, lv_minionType, lv_spawnPoint);
        }
        lv_currentOffsetAmount -= lv_offsetChangePerGroup;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_minionScalingEnabled = true;
        TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    }
    else {
        libGame_gv_minionScalingEnabled = false;
        TimerPause(libGame_gv_scalingTimer, true);
    }
}

void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_minionScalingEnabled == true)) {
        if ((lp_pauseUnpause == false)) {
            TimerPause(libGame_gv_scalingTimer, false);
        }
        else {
            TimerPause(libGame_gv_scalingTimer, true);
        }
    }

}

point libGame_gf_ClampSpawnedMinionPointsAgainstEnemyTowers (int lp_player, point lp_minPoint, point lp_maxPoint) {
    // Variable Declarations
    fixed lv_midX;
    fixed lv_midY;
    point lv_midPoint;
    fixed lv_searchDist;
    region lv_enemyRegion;
    int lv_loopIndex;
    unit lv_curUnit;

    // Automatic Variable Declarations
    int auto997BA8E6_ae;
    const int auto997BA8E6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_midX = ((PointGetX(lp_minPoint) + PointGetX(lp_maxPoint)) * 0.5);
    lv_midY = ((PointGetY(lp_minPoint) + PointGetY(lp_maxPoint)) * 0.5);
    lv_midPoint = Point(lv_midX, lv_midY);
    lv_searchDist = DistanceBetweenPoints(lv_midPoint, lp_maxPoint);
    lv_enemyRegion = RegionEmpty();
    RegionAddCircle(lv_enemyRegion, true, lv_midPoint, lv_searchDist);
    auto997BA8E6_ae = libAIAI_gv_towerTowerCount;
    lv_loopIndex = 1;
    for ( ; ( (auto997BA8E6_ai >= 0 && lv_loopIndex <= auto997BA8E6_ae) || (auto997BA8E6_ai < 0 && lv_loopIndex >= auto997BA8E6_ae) ) ; lv_loopIndex += auto997BA8E6_ai ) {
        lv_curUnit = libAIAI_gv_towerTowers[lv_loopIndex].lv_towerUnit;
        if ((UnitIsAlive(lv_curUnit) == true)) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_curUnit), lp_player, libNtve_ge_PlayerRelation_Enemy) == true)) {
                if ((RegionContainsPoint(lv_enemyRegion, UnitGetPosition(lv_curUnit)) == true)) {
                    return UnitGetPosition(lv_curUnit);
                }

            }

        }

    }
    return lp_maxPoint;
}

void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gf_CalculateClosestLaneData(lp_positionofSpawner);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromLane (int lp_ownerPlayer, point lp_positionofSpawner, int lp_lane) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gv_closestLaneData.lv_closestLane = lp_lane;
    libGame_gf_CalculateClosestLaneDataForLane(lp_positionofSpawner, lp_lane);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData (int lp_ownerPlayer) {
    // Variable Declarations
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_spawnedMinionLane = libGame_gv_closestLaneData.lv_closestLane;
    if (((libGame_gv_spawnedMinionLane == 0) || (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount < 1))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_BB9C2CEB"), true);
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_secondaryIndex;
    if ((libGame_gv_players[lp_ownerPlayer].lv_faction == libGame_ge_Faction_Order)) {
        libGame_gv_spawnedMinionFirstWaypointIndex = MaxI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex >= libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - 1);
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex >= (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - libCore_gv_mAPPathNodesBeforeLooping))) {
                libGame_gv_spawnedMinionFirstWaypointIndex -= 1;
            }
        }
    }
    else {
        libGame_gv_spawnedMinionFirstWaypointIndex = MinI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex <= 1)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = 2;
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex <= libCore_gv_mAPPathNodesBeforeLooping)) {
                libGame_gv_spawnedMinionFirstWaypointIndex += 1;
            }
        }
    }
}

void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexForUnitType(UnitGetType(lp_hero))].lv_usesMount == true)) {
        UnitBehaviorAdd(lp_hero, "HeroGenericMount@Mounted", lp_hero, 1);
    }

}

void libGame_gf_SendMountActorMessagesToActor (int lp_mountIndex, actor lp_actor) {
    // Variable Declarations
    string lv_mountMacro;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountMacro = (libCore_gv_dataMountsMountData[lp_mountIndex].lv_creationActorMessageMacro);

    // Implementation
    if ((lv_mountMacro != "") && (lv_mountMacro != null)) {
        ActorSend(lp_actor, (("EventMacroRun " + lv_mountMacro)));
    }

}

bool libGame_gf_MountEnabled (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitAbilityCheck(lp_hero, "HeroGenericMount", true) == true))) {
        return true;
    }

    return false;
}

trigger auto_libGame_gf_BuildingDiesCameraShake_Trigger = null;
fixed auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
string auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
playergroup auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup) {
    auto_libGame_gf_BuildingDiesCameraShake_lp_delay = lp_delay;
    auto_libGame_gf_BuildingDiesCameraShake_lp_intensity = lp_intensity;
    auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup = lp_playerGroup;

    if (auto_libGame_gf_BuildingDiesCameraShake_Trigger == null) {
        auto_libGame_gf_BuildingDiesCameraShake_Trigger = TriggerCreate("auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_BuildingDiesCameraShake_Trigger, false, false);
}

bool auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
    string lp_intensity = auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
    playergroup lp_playerGroup = auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA58721C2_g;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeGame);
    autoA58721C2_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA58721C2_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CameraShake(lv_itPlayer, lp_intensity, "Shake", 0.1, 0.4, 0.5);
    }
    return true;
}

int libGame_gf_TownsAliveinLane (int lp_team, int lp_lane) {
    // Variable Declarations
    int lv_townCount;
    int lv_itTown;

    // Automatic Variable Declarations
    int autoCD91ABB2_ae;
    const int autoCD91ABB2_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD91ABB2_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoCD91ABB2_ai >= 0 && lv_itTown <= autoCD91ABB2_ae) || (autoCD91ABB2_ai < 0 && lv_itTown >= autoCD91ABB2_ae) ) ; lv_itTown += autoCD91ABB2_ai ) {
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libGame_gf_ComputerPlayerInTeam(lp_team)) && (libGame_gv_townTownData[lv_itTown].lv_lane == lp_lane) && (libGame_gv_townTownData[lv_itTown].lv_townHallIndex > 0) && (libGame_gf_TownTownHallIsAlive(lv_itTown) == true)) {
            lv_townCount += 1;
        }

    }
    return lv_townCount;
}

bool libGame_gf_TownAliveInLane (int lp_team, int lp_lane) {
    // Automatic Variable Declarations
    // Implementation
    return (libGame_gf_TownsAliveinLane(lp_team, lp_lane) > 0);
}

void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_itTeamPlayer;
    unit lv_itAlliedUnit;
    int lv_creditPlayer;
    fixed lv_xPValue;
    fixed lv_textTagXPValue;
    unitgroup lv_nearbyUnits;
    unitgroup lv_nearbyUnitsAlliedToKilledUnit;
    playergroup lv_killCreditGroup;
    playergroup lv_xPAwardGroup;
    int lv_xPSource;

    // Automatic Variable Declarations
    unitgroup autoFEC989F2_g;
    int autoFEC989F2_u;
    unitgroup auto8F44BF3B_g;
    int auto8F44BF3B_u;
    playergroup auto032D8D2B_g;
    int auto48AAB528_val;
    int auto68300D32_val;
    playergroup autoA24A7ED5_g;
    playergroup autoF58913B7_g;
    playergroup auto1A5325DB_g;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_nearbyUnitsAlliedToKilledUnit = UnitGroupEmpty();
    lv_killCreditGroup = PlayerGroupEmpty();
    lv_xPAwardGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxEnginePlayerCount) && (libGame_gf_PlayerIsHeroPlayer(lp_killingPlayer) == true)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyUnitsAlliedToKilledUnit = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, libCore_gv_filtersHeroicEnemy, 0);
        autoFEC989F2_g = lv_nearbyUnitsAlliedToKilledUnit;
        autoFEC989F2_u = UnitGroupCount(autoFEC989F2_g, c_unitCountAll);
        for (;; autoFEC989F2_u -= 1) {
            lv_itAlliedUnit = UnitGroupUnitFromEnd(autoFEC989F2_g, autoFEC989F2_u);
            if (lv_itAlliedUnit == null) { break; }
            libGame_gf_SendEventHeroWitnessedAlliedNPCDeath(UnitGetOwner(lv_itAlliedUnit), lp_killedUnit);
        }
    }
    else {
        if ((lp_killedUnitPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lp_killedUnitPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            if ((lp_killedUnitXPAward > 0.0) && (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == false)) {
                TextExpressionSetToken("Param/Expression/lib_Game_E30A5FC5", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
                TextExpressionSetToken("Param/Expression/lib_Game_E30A5FC5", "B", IntToText(lp_killedUnitPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E30A5FC5"), true);
                return ;
            }

        }
    }
    auto8F44BF3B_g = lv_nearbyUnits;
    auto8F44BF3B_u = UnitGroupCount(auto8F44BF3B_g, c_unitCountAll);
    for (;; auto8F44BF3B_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto8F44BF3B_g, auto8F44BF3B_u);
        if (lv_itUnit == null) { break; }
        if ((UnitBehaviorCount(lv_itUnit, "SpecialCaseNPCTakedownParticipant") == 1) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(lp_killedUnit), libNtve_ge_PlayerRelation_Enemy) == true)) {
            libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown(UnitGetOwner(lv_itUnit), lp_killedUnit);
        }

        if (((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) || ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_HideNameplate, lv_itUnit) == false) && (libCore_gf_StormUnitIsHallucination(lv_itUnit) == false)))) {
            lv_creditPlayer = UnitGetOwner(lv_itUnit);
            if ((libGame_gf_PlayerIsHeroPlayer(lv_creditPlayer) == true)) {
                PlayerGroupAdd(lv_killCreditGroup, lv_creditPlayer);
            }

        }

    }
    if ((libGame_gf_PlayerIsHeroPlayer(lp_killingPlayer) == true)) {
        PlayerGroupAdd(lv_killCreditGroup, lp_killingPlayer);
    }

    if ((PlayerGroupCount(lv_killCreditGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == false)) {
        return ;
    }

    auto032D8D2B_g = lv_killCreditGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto032D8D2B_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_SendEventHeroParticipatedInNPCTakedown(lv_itPlayer, lp_killedUnit);
    }
    lv_xPValue = lp_killedUnitXPAward;
    lv_xPValue = libGame_gf_AdjustXPForTeam(lv_xPValue, libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_killedUnit)));
    lv_textTagXPValue = lv_xPValue;
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Game_3147DACE", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_3147DACE", "B", FixedToText(lv_xPValue, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3147DACE"), true);
    }

    if (((libCore_gv_sYSXPOn == false) || (lv_xPValue <= 0.0) || (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == true))) {
        return ;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
        auto48AAB528_val = lp_killedUnitClassification;
        if (auto48AAB528_val == c_unitAttributeBiological) {
            if ((libSprt_gv_dEBUGXPSourceMinion == false)) {
                return ;
            }

        }
        else if (auto48AAB528_val == c_unitAttributeStructure) {
            if ((libSprt_gv_dEBUGXPSourceStructure == false)) {
                return ;
            }

        }
        else if (auto48AAB528_val == c_unitAttributeLight) {
            if ((libSprt_gv_dEBUGXPSourceCreep == false)) {
                return ;
            }

        }
        else {
        }
    }

    auto68300D32_val = lp_killedUnitClassification;
    if (auto68300D32_val == c_unitAttributeStructure) {
        lv_xPSource = libGame_ge_XPSource_Structure;
    }
    else if (auto68300D32_val == c_unitAttributeLight) {
        lv_xPSource = libGame_ge_XPSource_Mercenary;
    }
    else if (auto68300D32_val == c_unitAttributeRobotic) {
        lv_xPSource = libGame_ge_XPSource_Mercenary;
    }
    else if (auto68300D32_val == c_unitAttributeBiological) {
        lv_xPSource = libGame_ge_XPSource_Minion;
    }
    else {
    }
    if ((PlayerGroupCount(lv_killCreditGroup) == 0)) {
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_EnemyPlayerGroupOfPlayer(lp_killedUnitPlayer));
        if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (lp_killedUnitPlayer == libCore_gv_cOMPUTER_Hostile)) {
            lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(lp_killingPlayer));
        }

        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
        if (((lp_killedUnitPlayer < 0) || (lp_killedUnitPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
            TextExpressionSetToken("Param/Expression/lib_Game_637AC2CC", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
            TextExpressionSetToken("Param/Expression/lib_Game_637AC2CC", "B", IntToText(lp_killedUnitPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_637AC2CC"), true);
        }
        else {
            autoF58913B7_g = lv_xPAwardGroup;
            lv_itTeamPlayer = -1;
            while (true) {
                lv_itTeamPlayer = PlayerGroupNextPlayer(autoF58913B7_g, lv_itTeamPlayer);
                if (lv_itTeamPlayer < 0) { break; }
                libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (lv_xPValue / PlayerGroupCount(lv_xPAwardGroup)), lv_xPSource);
            }
        }
    }
    else {
        autoA24A7ED5_g = lv_killCreditGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoA24A7ED5_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPValue / PlayerGroupCount(lv_killCreditGroup)), lv_xPSource);
        }
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(PlayerGroupPlayer(lv_killCreditGroup, 1)));
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
    }
    if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (PlayerGroupCount(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers) > 0) && (PlayerGroupCount(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_11223AC6", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_11223AC6"), true);
    }

    lv_xPValue = (lv_xPValue / PlayerGroupCount(lv_xPAwardGroup));
    auto1A5325DB_g = lv_xPAwardGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1A5325DB_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_GrantXPToPlayer(lv_xPValue, lv_itPlayer, lv_xPSource);
    }
    if ((lp_killedUnitClassification == c_unitAttributeStructure)) {
        libUIUI_gf_UICombatFloatingElementsXP(lv_xPAwardGroup, lp_killedUnit, FixedToText(lv_textTagXPValue, 0), "FCT_XP_Crit");
    }
    else {
        libUIUI_gf_UICombatFloatingElementsXP(lv_xPAwardGroup, lp_killedUnit, FixedToText(lv_textTagXPValue, 0), "FCT_XP_Normal");
    }
}

void libGame_gf_MinionDies (unit lp_minionUnit, int lp_killingPlayer, fixed lp_killXP) {
    // Variable Declarations
    int lv_minionOwner;
    int lv_regenGlobeOwner;
    int lv_unitAttribute;
    int lv_team;
    fixed lv_finalKillXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitAttribute = c_unitAttributeBiological;
    lv_minionOwner = UnitGetOwner(lp_minionUnit);
    if ((UnitHasBehavior2(lp_minionUnit, "SuppressRegenGlobeCreation") == false)) {
        lv_team = libGame_gf_TeamNumberOfPlayer(lv_minionOwner);
        if ((UnitGetType(lp_minionUnit) == libCore_gv_dataMinionWaveComposition[lv_team].lv_minionUnitType[libCore_ge_MinionType_Wizard])) {
            if ((lv_minionOwner == libCore_gv_cOMPUTER_TeamOrder)) {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
            }
            else {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
            }
            UnitCreate(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, UnitGetPosition(lp_minionUnit), 270.0);
        }

    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_minionUnit), c_unitAttributeRobotic) == true)) {
        lv_unitAttribute = c_unitAttributeRobotic;
    }

    lv_finalKillXP = lp_killXP;
    libGame_gf_AwardXPForNPCKill(lp_minionUnit, lv_minionOwner, lv_unitAttribute, lp_killingPlayer, lv_finalKillXP);
}

void libGame_gf_CreepDies (unit lp_creepUnit, int lp_killingPlayer, fixed lp_killXP) {
    // Variable Declarations
    int lv_camp;
    int lv_defenderUnitIndex;
    int lv_defenderAIIndex;
    int lv_team;
    unit lv_itUnit;
    unit lv_createdUnit;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoA246D4F4_g;
    int autoA246D4F4_u;

    // Variable Initialization

    // Implementation
    lv_camp = libMapM_gf_JungleGetJungleCampForUnit(lp_creepUnit);
    lv_defenderUnitIndex = libMapM_gf_JungleGetJungleUnitIndexForUnit(lp_creepUnit);
    if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderDefendersCoweronDeath == true)) {
        autoA246D4F4_g = libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCoweringLivingUnitGroup;
        autoA246D4F4_u = UnitGroupCount(autoA246D4F4_g, c_unitCountAll);
        for (;; autoA246D4F4_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoA246D4F4_g, autoA246D4F4_u);
            if (lv_itUnit == null) { break; }
            if ((lp_creepUnit == lv_itUnit)) {
                if ((PointPathingPassable(UnitGetPosition(lp_creepUnit)) == true)) {
                    UnitCreate(1, "MercCoweringDefenderOrientDummy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, UnitGetPosition(lp_creepUnit), UnitGetFacing(lp_creepUnit));
                    lv_createdUnit = UnitLastCreated();
                }
                else {
                    UnitSetPosition(lp_creepUnit, libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex], false);
                    UnitSetFacing(lp_creepUnit, PointGetFacing(libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex]), 0.0);
                    UnitCreate(1, "MercCoweringDefenderOrientDummy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex], PointGetFacing(libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex]));
                }
            }

            UnitGroupAdd(libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCoweringDeadUnitGroup, UnitLastCreated());
            UnitSetCustomValue(lv_createdUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex), UnitGetCustomValue(lv_itUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex)));
            UnitGroupRemove(libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCoweringLivingUnitGroup, lv_itUnit);
        }
    }

    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(lp_creepUnit);
    if ((lv_defenderAIIndex != 0)) {
        libAIAI_gf_DefenderAICreepDies(lv_defenderAIIndex, lp_creepUnit, 0);
    }

    UnitXPAddXP(libMapM_gv_jungleCreepCamps[lv_camp].lv_campOwnershipFlagUnit, null, lp_killXP);
    libGame_gf_SendEventHeroParticipatedInCreepTakedown(lp_killingPlayer, lp_creepUnit);
}

playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(lv_team, false);
}

playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_player), false);
}

playergroup libGame_gf_AlliesEnemiesOfPlayerStorm (int lp_alliance, int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_playerGroup;
    int lv_relationShip;

    // Automatic Variable Declarations
    playergroup auto67DF856F_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_player == c_playerAny)) {
        return PlayerGroupEmpty();
    }

    if ((lp_alliance == c_playerGroupAlly)) {
        lv_relationShip = libNtve_ge_PlayerRelation_Ally;
    }
    else {
        lv_relationShip = libNtve_ge_PlayerRelation_Enemy;
    }
    auto67DF856F_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto67DF856F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(lp_player, lv_itPlayer, lv_relationShip) == true) && (lv_itPlayer != lp_player) && (libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true)) {
            PlayerGroupAdd(lv_playerGroup, lv_itPlayer);
        }

    }
    return lv_playerGroup;
}

bool libGame_gf_TeamNumberIsValid (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_team == libGame_gv_teamOrderIndex_C) || (lp_team == libGame_gv_teamChaosIndex_C));
}

bool libGame_gf_PlayerIsHeroPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player >= 0) && (lp_player <= libCore_gv_bALMaxEnginePlayerCount)) {
        return (PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lp_player) == true);
    }

    return false;
}

bool libGame_gf_PlayerIsHumanActivePlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, lp_player) == true);
}

bool libGame_gf_UnitIsHero (unit lp_testUnit) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(lp_testUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == false)) {
        return false;
    }

    if ((UnitFilterMatch(lp_testUnit, lv_owner, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0)) == true) && ((lp_testUnit == libGame_gv_players[lv_owner].lv_heroUnit) || (lp_testUnit == libGame_gv_players[lv_owner].lv_activeVehicle) || (UnitGroupHasUnit(libGame_gv_players[lv_owner].lv_heroUnitGroup, lp_testUnit) == true))) {
        return true;
    }

    return false;
}

int libGame_gf_TeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player) == true)) {
        return libGame_gv_teamOrderIndex_C;
    }

    if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_player) == true)) {
        return libGame_gv_teamChaosIndex_C;
    }

    return 0;
}

int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (3-libGame_gf_TeamNumberOfPlayer(lp_player));
}

int libGame_gf_EnemyTeamNumberOfTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return (3 - lp_team);
}

int libGame_gf_ComputerPlayerInTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto1F0E7845_val;

    // Implementation
    auto1F0E7845_val = lp_team;
    if (auto1F0E7845_val == libGame_gv_teamOrderIndex_C) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (auto1F0E7845_val == libGame_gv_teamChaosIndex_C) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
    }
    return 0;
}

int libGame_gf_PlayerFromRosterSlot (int lp_rosterSlot) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto0527102F_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto0527102F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 0;
    for ( ; ( (auto0527102F_ai >= 0 && lv_itPlayer <= auto0527102F_ae) || (auto0527102F_ai < 0 && lv_itPlayer >= auto0527102F_ae) ) ; lv_itPlayer += auto0527102F_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_rosterSlot == lp_rosterSlot)) {
            return lv_itPlayer;
        }

    }
    return -1;
}

int libGame_gf_PlayerFromGameSlot (int lp_gameSlot) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoC5B402A3_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoC5B402A3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 0;
    for ( ; ( (autoC5B402A3_ai >= 0 && lv_itPlayer <= autoC5B402A3_ae) || (autoC5B402A3_ai < 0 && lv_itPlayer >= autoC5B402A3_ae) ) ; lv_itPlayer += autoC5B402A3_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_gameSlot == lp_gameSlot)) {
            return lv_itPlayer;
        }

    }
    return -1;
}

unit libGame_gf_PlayerHeroUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroUnit;
}

playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_team < 1) || (lp_team > 2))) {
        TextExpressionSetToken("Param/Expression/lib_Game_3F1DAD54", "A", IntToText(lp_team));
        TextExpressionSetToken("Param/Expression/lib_Game_3F1DAD54", "B", StringToText(TriggerGetFunction(TriggerGetCurrent())));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_3F1DAD54"));
        return PlayerGroupEmpty();
    }

    if ((lp_nPCOption == true)) {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroup;
    }
    else {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    }
}

int libGame_gf_GetPlayerIDfromTeamSlot (int lp_slot, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEB0ACDD5_g;

    // Variable Initialization

    // Implementation
    autoEB0ACDD5_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEB0ACDD5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_allySlot == lp_slot) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == lp_team)) {
            return lv_itPlayer;
        }

    }
    return 0;
}

string libGame_gf_PlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroInstance;
}

text libGame_gf_StormGetPlayerName (int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        lv_text = PlayerName(lp_player);
    }
    else {
        lv_text = StringToText(("Player " + IntToString(lp_player)));
    }
    return lv_text;
}

string libGame_gf_StormGetPlayerHandle (int lp_player) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        if ((GameIsOnline() == true)) {
            lv_string = PlayerHandle(lp_player);
        }
        else {
            lv_string = libCore_gv_lOCAL_Handle;
        }
    }
    else {
        lv_string = ("Player" + IntToString(lp_player));
    }
    return lv_string;
}

string libGame_gf_StormGetPlayerBNet (int lp_player) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        if ((GameIsOnline() == true)) {
            lv_string = libGame_gv_players[lp_player].lv_bNet;
        }
        else {
            lv_string = libCore_gv_lOCAL_Handle;
        }
    }
    else {
        lv_string = ("Player" + IntToString(lp_player));
    }
    return lv_string;
}

void libGame_gf_GrantXPToPlayer (fixed lp_incomingXP, int lp_player, int lp_source) {
    // Variable Declarations
    fixed lv_xP;
    unit lv_heroUnit;
    int lv_team;
    fixed lv_totalXPForNextLevel;
    fixed lv_totalXPForCurrentLevel;
    fixed lv_currentXPForPlayer;
    fixed lv_fractionalLevelValue;

    // Automatic Variable Declarations
    int auto75C03F63_val;

    // Variable Initialization
    lv_xP = lp_incomingXP;

    // Implementation
    if ((libCore_gv_sYSXPOn == false)) {
        return ;
    }

    lv_heroUnit = libGame_gf_PlayerHeroUnit(lp_player);
    if ((UnitLevel(lv_heroUnit) == libCore_gv_bALMaxLevel)) {
        return ;
    }

    if ((UnitIsValid(lv_heroUnit) == false)) {
        return ;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
        auto75C03F63_val = lp_source;
        if (auto75C03F63_val == libGame_ge_XPSource_Hero) {
            if ((libSprt_gv_dEBUGXPSourceHero == false)) {
                return ;
            }

        }
        else if (auto75C03F63_val == libGame_ge_XPSource_Minion) {
            if ((libSprt_gv_dEBUGXPSourceMinion == false)) {
                return ;
            }

        }
        else if (auto75C03F63_val == libGame_ge_XPSource_Structure) {
            if ((libSprt_gv_dEBUGXPSourceStructure == false)) {
                return ;
            }

        }
        else if (auto75C03F63_val == libGame_ge_XPSource_Mercenary) {
            if ((libSprt_gv_dEBUGXPSourceCreep == false)) {
                return ;
            }

        }
        else {
        }
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libSprt_gv_dEBUGXPBoostEnable == true)) {
        if ((lv_team == libSprt_gv_dEBUGXPBoostTeam)) {
            lv_xP = (lv_xP * libSprt_gv_dEBUGXPBoostMultiplier);
        }

    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libSprt_gv_dEBUGXPPassiveBalancerEnable == true)) {
        if ((lv_team == libSprt_gv_dEBUGXPPassiveBoostTeam)) {
            lv_xP = (lv_xP * libSprt_gv_dEBUGXPPassiveBoostMultiplier);
        }

    }

    UnitXPAddXP(lv_heroUnit, null, lv_xP);
}

trigger auto_libGame_gf_SpawnHero_Trigger = null;
int auto_libGame_gf_SpawnHero_lp_player;
int auto_libGame_gf_SpawnHero_lp_index;
point auto_libGame_gf_SpawnHero_lp_point;

void libGame_gf_SpawnHero (int lp_player, int lp_index, point lp_point) {
    auto_libGame_gf_SpawnHero_lp_player = lp_player;
    auto_libGame_gf_SpawnHero_lp_index = lp_index;
    auto_libGame_gf_SpawnHero_lp_point = lp_point;

    if (auto_libGame_gf_SpawnHero_Trigger == null) {
        auto_libGame_gf_SpawnHero_Trigger = TriggerCreate("auto_libGame_gf_SpawnHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHero_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_SpawnHero_lp_player;
    int lp_index = auto_libGame_gf_SpawnHero_lp_index;
    point lp_point = auto_libGame_gf_SpawnHero_lp_point;

    // Variable Declarations
    int lv_playerTeam;
    int lv_storedSkinIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_player);

    // Implementation
    if ((libGame_gv_players[lp_player].lv_heroUnit != null)) {
        return true;
    }

    while (!((libGame_gv_players[lp_player].lv_heroSpawnReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    lv_storedSkinIndex = libGame_gf_LoadoutGetPlayerSkinForHero(lp_player, lp_index);
    libGame_gf_ActivateSkinForPlayer(lv_storedSkinIndex, lp_player);
    libGame_gf_AnnouncersActivateAnnouncerForPlayer(lp_player);
    libGame_gf_CameraSetCameraDataForPlayer(lp_player, libGame_ge_CameraType_Default, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, libCore_gv_dataHeroesHeroData[lp_index].lv_heroUnitType, 0, lp_player, lp_point);
    libGame_gv_players[lp_player].lv_heroUnit = UnitLastCreated();
    libGame_gv_players[lp_player].lv_selectedUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gv_players[lp_player].lv_heroName = UnitGetName(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gv_players[lp_player].lv_soundDeathAlertPrefix = "UI_HeroDeath_Gen_";
    UnitGroupClear(libGame_gv_players[lp_player].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lp_player].lv_heroUnitGroup, libGame_gv_players[lp_player].lv_heroUnit);
    UnitGroupAdd(libGame_gv_heroes, libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_InitPathingLines(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    libGame_gv_players[lp_player].lv_isDead = false;
    libGame_gf_HeroAddInventoryAbilities(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gf_HeroAddMapMechanicAbilities(libGame_gv_players[lp_player].lv_heroUnit);
    UnitSelect(libGame_gv_players[lp_player].lv_heroUnit, lp_player, true);
    if ((libGame_gv_heroDeath_RespawnMounted == true) && (libCore_gv_dataHeroesHeroData[lp_index].lv_usesMount == true)) {
        libGame_gf_ApplyMountBehaviorToHero(libGame_gv_players[lp_player].lv_heroUnit);
        libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lp_player);
    libUIUI_gf_UIPartyFrameAddPlayerToPartyFrame(lp_player);
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(true, lp_player);
    libUIUI_gf_UIHeroLeaderboardAssignPlayeronLeaderboardToSlotForPlayerGroup(lp_player, libGame_gv_players[lp_player].lv_gameSlot, PlayerGroupAll());
    libUIUI_gf_UIGameUISetPlayerHeroUnit(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UITalentPanelSetUpPlayeronLeaderboard(lp_player);
    libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer(lp_player);
    libUIUI_gf_UITalentPanelSetupStartQuestOfPlayer(lp_player);
    libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UITalentChoicePanelFillPanelForPlayer(lp_player);
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == false)) {
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
        libNtve_gf_HideGameUI(true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gf_PlayerAnnounceEnableDisableForPlayer(true, lp_player);
    }

    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == false)) {
        libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    }

    Wait(0.125, c_timeGame);
    libGame_gf_GrantXPToPlayer(libCore_gf_GetTotalXPForLevel(libCore_gv_sYSHeroStartLevel), lp_player, libGame_ge_XPSource_Trickle);
    libGame_gf_LevelUpLevelUpHero(libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIPartyFrameTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel(libGame_gf_TeamNumberOfPlayer(lp_player), libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gf_SendEventHeroSpawn(lp_player);
    libGame_gv_players[lp_player].lv_allowInput = true;
    return true;
}

trigger auto_libGame_gf_SpawnHeroesForTeam_Trigger = null;
int auto_libGame_gf_SpawnHeroesForTeam_lp_team;

void libGame_gf_SpawnHeroesForTeam (int lp_team) {
    auto_libGame_gf_SpawnHeroesForTeam_lp_team = lp_team;

    if (auto_libGame_gf_SpawnHeroesForTeam_Trigger == null) {
        auto_libGame_gf_SpawnHeroesForTeam_Trigger = TriggerCreate("auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHeroesForTeam_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_SpawnHeroesForTeam_lp_team;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7C27482C_g;

    // Variable Initialization

    // Implementation
    auto7C27482C_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7C27482C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true) && (libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
            libGame_gf_SpawnHero(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_heroIndex, libGame_gv_players[lv_itPlayer].lv_spawnPoint);
        }

        Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
    }
    libGame_gf_ReloadTrackedHeroesForTeam(lp_team);
    return true;
}

void libGame_gf_SpawnHeroesForBothTeams () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    bool lv_ready;

    // Automatic Variable Declarations
    const int autoD7C58E40_ae = libCore_gv_bALMaxTeams;
    const int autoD7C58E40_ai = 1;
    const int autoF8A4DF6E_ae = libCore_gv_bALMaxTeams;
    const int autoF8A4DF6E_ai = 1;
    playergroup auto4964C2BB_g;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (autoD7C58E40_ai >= 0 && lv_itTeam <= autoD7C58E40_ae) || (autoD7C58E40_ai < 0 && lv_itTeam >= autoD7C58E40_ae) ) ; lv_itTeam += autoD7C58E40_ai ) {
        libGame_gf_SpawnHeroesForTeam(lv_itTeam);
    }
    while (true) {
        lv_ready = true;
        lv_itTeam = 1;
        for ( ; ( (autoF8A4DF6E_ai >= 0 && lv_itTeam <= autoF8A4DF6E_ae) || (autoF8A4DF6E_ai < 0 && lv_itTeam >= autoF8A4DF6E_ae) ) ; lv_itTeam += autoF8A4DF6E_ai ) {
            auto4964C2BB_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto4964C2BB_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
                    lv_ready = false;
                    break;
                }

            }
            if ((lv_ready == false)) {
                break;
            }

        }
        if ((lv_ready == true)) {
            return ;
        }

        Wait(0.125, c_timeGame);
    }
}

void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player) {
    // Variable Declarations
    int lv_i;
    unit lv_u;
    playergroup lv_allyPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoB4DBE070_g;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_allyPlayerGroup = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    }
    else {
        lv_allyPlayerGroup = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    }
    autoB4DBE070_g = lv_allyPlayerGroup;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoB4DBE070_g, lv_i);
        if (lv_i < 0) { break; }
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lv_i, c_allianceIdVision, lp_player, lp_onOff);
        }

    }
}

void libGame_gf_AllowInputForPlayers () {
    // Automatic Variable Declarations
    playergroup auto063065A9_g;
    int auto063065A9_var;

    // Implementation
    auto063065A9_g = libCore_gv_allHeroPlayers;
    auto063065A9_var = -1;
    while (true) {
        auto063065A9_var = PlayerGroupNextPlayer(auto063065A9_g, auto063065A9_var);
        if (auto063065A9_var < 0) { break; }
        libGame_gv_players[auto063065A9_var].lv_allowInput = true;
    }
}

void libGame_gf_TurnSharedVisionWithNPCOnOffForBothTeams (int lp_team, bool lp_onOff) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto82A07147_ae = libCore_gv_bALMaxTeams;
    const int auto82A07147_ai = 1;
    playergroup auto89DB0B01_g;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto82A07147_ai >= 0 && lv_itTeam <= auto82A07147_ae) || (auto82A07147_ai < 0 && lv_itTeam >= auto82A07147_ae) ) ; lv_itTeam += auto82A07147_ai ) {
        auto89DB0B01_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto89DB0B01_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            PlayerSetAlliance(libGame_gf_ComputerPlayerInTeam(lp_team), c_allianceIdVision, lv_itPlayer, lp_onOff);
        }
    }
}

void libGame_gf_ReloadTrackedHeroesForTeam (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    playergroup auto4982F4A4_g;
    string autoDC25ED5F_val;
    unitgroup auto2597529F_g;
    int auto2597529F_u;

    // Variable Initialization

    // Implementation
    UnitGroupClear(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team]);
    auto4982F4A4_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4982F4A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        autoDC25ED5F_val = UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit);
        if (autoDC25ED5F_val == "HeroLostVikingsController") {
            auto2597529F_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
            auto2597529F_u = UnitGroupCount(auto2597529F_g, c_unitCountAll);
            for (;; auto2597529F_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto2597529F_g, auto2597529F_u);
                if (lv_itUnit == null) { break; }
                if ((UnitGetType(lv_itUnit) != "HeroLostVikingsController")) {
                    UnitGroupAdd(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team], lv_itUnit);
                }

            }
        }
        else if (autoDC25ED5F_val == "HeroGall") {
        }
        else if (autoDC25ED5F_val == null) {
            UnitGroupAdd(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team], libGame_gv_players[lv_itPlayer].lv_heroUnit);
        }
        else {
        }
    }
}

bool libGame_gf_TargetIsVehicle (unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_ExecuteValidatorOnUnit("IsVehicle", lp_targetUnit, lp_targetUnit);
}

bool libGame_gf_HeroAbilityCooldownCanBeReset (string lp_abilityLink) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_abilityLink != "") && (lp_abilityLink != null) && ((AbilityClass(lp_abilityLink) == c_classIdCAbilEffect) || (AbilityClass(lp_abilityLink) == c_classIdCAbilEffectInstant) || (AbilityClass(lp_abilityLink) == c_classIdCAbilEffectTarget) || (AbilityClass(lp_abilityLink) == c_classIdCAbilAugment) || (AbilityClass(lp_abilityLink) == c_classIdCAbilBehavior) || (AbilityClass(lp_abilityLink) == c_classIdCAbilMorph) || (AbilityClass(lp_abilityLink) == c_classIdCAbilMorphPlacement)) && (CatalogFieldValueCount(c_gameCatalogAbil, lp_abilityLink, "Cost", c_playerAny) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_HeroRefreshCooldowns (int lp_player, bool lp_resetHeroPlayerUnits) {
    // Variable Declarations
    int lv_itAbility;
    unit lv_itUnit;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    int lv_chargeCount;
    unitgroup lv_unitGroup;
    int lv_vehicleIndex;
    unit lv_vehicleUnit;

    // Automatic Variable Declarations
    unitgroup autoB2135E4F_g;
    int autoB2135E4F_u;
    int autoCF835023_ae;
    const int autoCF835023_ai = 1;
    int autoCF6F3DF1_ae;
    const int autoCF6F3DF1_ai = 1;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_resetHeroPlayerUnits == true)) {
        lv_unitGroup = libGame_gv_players[lp_player].lv_heroUnitGroup;
    }
    else {
        lv_unitGroup = UnitGroupSelected(lp_player);
    }
    autoB2135E4F_g = lv_unitGroup;
    autoB2135E4F_u = UnitGroupCount(autoB2135E4F_g, c_unitCountAll);
    for (;; autoB2135E4F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB2135E4F_g, autoB2135E4F_u);
        if (lv_itUnit == null) { break; }
        if ((libGame_gf_UnitIsHero(lv_itUnit) == true)) {
            lv_heroIndex = libCore_gf_HeroIndexForUnitType(UnitGetType(lv_itUnit));
        }
        else {
            if (((UnitGetType(lv_itUnit) == "TargetHeroDummyFreddie") || (UnitGetType(lv_itUnit) == "TargetHeroDummy") || (UnitGetType(lv_itUnit) == "AbathurSymbiote") || (UnitGetType(lv_itUnit) == "RagnarosBigRag"))) {
            }
            else {
                continue;
            }
        }
        autoCF835023_ae = UnitAbilityCount(lv_itUnit);
        lv_itAbility = 1;
        for ( ; ( (autoCF835023_ai >= 0 && lv_itAbility <= autoCF835023_ae) || (autoCF835023_ai < 0 && lv_itAbility >= autoCF835023_ae) ) ; lv_itAbility += autoCF835023_ai ) {
            lv_abilLink = UnitAbilityGet(lv_itUnit, lv_itAbility);
            if ((libGame_gf_HeroAbilityCooldownCanBeReset(lv_abilLink) == true) && (libCore_gf_AbilityHasCategory(lv_abilLink, "AbilityCategories[User2]") == false)) {
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_itUnit));
                libNtve_gf_UnitRemoveCooldown(lv_itUnit, lv_cooldownLink);
                libNtve_gf_PlayerRemoveCooldown(UnitGetOwner(lv_itUnit), lv_cooldownLink);
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_itUnit));
                lv_chargeCount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(lv_itUnit));
                UnitAddChargeUsed(lv_itUnit, lv_chargeLink, (-lv_chargeCount));
                PlayerAddChargeUsed(UnitGetOwner(lv_itUnit), lv_chargeLink, (-lv_chargeCount));
                libGame_gf_StormUniversalModifyCooldownPerUnitCDRAbility(lp_player, lv_abilLink, -500.0, 0);
            }

        }
        autoCF6F3DF1_ae = UnitInventoryCount(lv_itUnit, c_unitInventoryCountCarried);
        lv_itAbility = 1;
        for ( ; ( (autoCF6F3DF1_ai >= 0 && lv_itAbility <= autoCF6F3DF1_ae) || (autoCF6F3DF1_ai < 0 && lv_itAbility >= autoCF6F3DF1_ae) ) ; lv_itAbility += autoCF6F3DF1_ai ) {
            lv_abilLink = (CatalogFieldValueGet(c_gameCatalogItem, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(lv_itUnit, lv_itAbility)), "Item", UnitGetOwner(lv_itUnit)), "Abil", UnitGetOwner(lv_itUnit)));
            if ((libGame_gf_HeroAbilityCooldownCanBeReset(lv_abilLink) == true) && (libCore_gf_AbilityHasCategory(lv_abilLink, "AbilityCategories[User2]") == false)) {
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_itUnit));
                libNtve_gf_UnitRemoveCooldown(lv_itUnit, lv_cooldownLink);
                libNtve_gf_PlayerRemoveCooldown(UnitGetOwner(lv_itUnit), lv_cooldownLink);
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_itUnit));
                lv_chargeCount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(lv_itUnit));
                UnitAddChargeUsed(lv_itUnit, lv_chargeLink, (-lv_chargeCount));
                PlayerAddChargeUsed(UnitGetOwner(lv_itUnit), lv_chargeLink, (-lv_chargeCount));
            }

        }
    }
    libGame_gf_SendEventSpecialCaseTalentCooldownReset(lp_player);
}

void libGame_gf_HeroAddInventoryAbilities (unit lp_unit) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto57CBAE76_ae;
    const int auto57CBAE76_ai = 1;

    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_unit);

    // Implementation
    if ((lv_heroIndex <= 0)) {
        return ;
    }

    auto57CBAE76_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto57CBAE76_ai >= 0 && lv_itAbility <= auto57CBAE76_ae) || (auto57CBAE76_ai < 0 && lv_itAbility >= auto57CBAE76_ae) ) ; lv_itAbility += auto57CBAE76_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_abilityInventoryUnit != "") && (libCore_gv_abilityData[lv_abilityIndex].lv_abilityInventoryUnit != null)) {
            UnitInventoryCreate(lp_unit, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInventoryUnit);
        }

    }
}

void libGame_gf_HeroAddMapMechanicAbilities (unit lp_unit) {
    // Variable Declarations
    int lv_itAbility;

    // Automatic Variable Declarations
    const int auto3263E3DE_ae = libCore_gv_mapMechanicAbilityMaxCount;
    const int auto3263E3DE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itAbility = 1;
    for ( ; ( (auto3263E3DE_ai >= 0 && lv_itAbility <= auto3263E3DE_ae) || (auto3263E3DE_ai < 0 && lv_itAbility >= auto3263E3DE_ae) ) ; lv_itAbility += auto3263E3DE_ai ) {
        if ((libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_mapMechanicAbility[lv_itAbility] != null)) {
            UnitAbilityAdd(lp_unit, libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_mapMechanicAbility[lv_itAbility]);
        }

    }
}

bool libGame_gf_PlayerIsDeveloper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gv_players[lp_player].lv_bNet == "Zero#21933") || (libGame_gv_players[lp_player].lv_bNet == "MindHawk#21616") || (libGame_gv_players[lp_player].lv_bNet == "SomeoneNew#2502") || (libGame_gv_players[lp_player].lv_bNet == "Labreris#2416"))) {
        return true;
    }

    return false;
}

bool libGame_gf_PreloadingModelIsAlreadyStored (string lp_modelEntry) {
    // Variable Declarations
    int lv_itModel;

    // Automatic Variable Declarations
    int auto457B23A7_ae;
    const int auto457B23A7_ai = 1;

    // Variable Initialization

    // Implementation
    auto457B23A7_ae = libGame_gv_preloadingMaxedValue;
    lv_itModel = 1;
    for ( ; ( (auto457B23A7_ai >= 0 && lv_itModel <= auto457B23A7_ae) || (auto457B23A7_ai < 0 && lv_itModel >= auto457B23A7_ae) ) ; lv_itModel += auto457B23A7_ai ) {
        if ((libGame_gv_preloadingModelLink[lv_itModel] == lp_modelEntry)) {
            return true;
        }

    }
    return false;
}

void libGame_gf_PreloadingPreloadModelWaitToFinishLoading () {
    // Variable Declarations
    int lv_itPortrait;

    // Automatic Variable Declarations
    int auto132C077E_ae;
    const int auto132C077E_ai = 1;

    // Variable Initialization

    // Implementation
    auto132C077E_ae = libGame_gv_preloadingIterator;
    lv_itPortrait = 1;
    for ( ; ( (auto132C077E_ai >= 0 && lv_itPortrait <= auto132C077E_ae) || (auto132C077E_ai < 0 && lv_itPortrait >= auto132C077E_ae) ) ; lv_itPortrait += auto132C077E_ai ) {
        if ((libGame_gv_preloadingPortrait[lv_itPortrait] != c_invalidPortraitId)) {
            PortraitWaitForLoad(libGame_gv_preloadingPortrait[lv_itPortrait]);
            libGame_gv_preloadingCurrentValue += 1;
        }

    }
    libGame_gv_preloadingIterator = 0;
}

void libGame_gf_PreloadingStoreModel (string lp_modelEntry) {
    // Automatic Variable Declarations
    // Implementation
    if (((CatalogEntryIsDefault(c_gameCatalogModel, lp_modelEntry) == true) || (CatalogEntryIsValid(c_gameCatalogModel, lp_modelEntry) == false) || (lp_modelEntry == null) || (libGame_gf_PreloadingModelIsAlreadyStored(lp_modelEntry) == true) || (libGame_gf_PreloadingModelIsInTheBlackList(lp_modelEntry) == true))) {
        return ;
    }

    libGame_gv_preloadingMaxedValue += 1;
    if ((libGame_gv_preloadingMaxedValue > libGame_gv_preloadingMaxPreloadedValue)) {
        libGame_gv_preloadingMaxedValue -= 1;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_556801B1"), true);
        return ;
    }

    libGame_gv_preloadingModelLink[libGame_gv_preloadingMaxedValue] = lp_modelEntry;
}

void libGame_gf_PreloadingStoreModelsFromSkinEntry (string lp_skinEntry) {
    // Variable Declarations
    int lv_itReplacement;
    int lv_replacementAmount;
    string lv_model;

    // Automatic Variable Declarations
    int auto1AF97F56_ae;
    const int auto1AF97F56_ai = 1;

    // Variable Initialization

    // Implementation
    lv_replacementAmount = CatalogFieldValueCount(c_gameCatalogSkin, lp_skinEntry, "ReplacementArray", c_playerAny);
    if ((lv_replacementAmount <= 0)) {
        return ;
    }

    auto1AF97F56_ae = (lv_replacementAmount - 1);
    lv_itReplacement = 0;
    for ( ; ( (auto1AF97F56_ai >= 0 && lv_itReplacement <= auto1AF97F56_ae) || (auto1AF97F56_ai < 0 && lv_itReplacement >= auto1AF97F56_ae) ) ; lv_itReplacement += auto1AF97F56_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogSkin, lp_skinEntry, "ReplacementArray[" + IntToString(libGame_gv_preloadingIterator) + "].Catalog", c_playerAny) == "Model")) {
            lv_model = (CatalogFieldValueGet(c_gameCatalogSkin, lp_skinEntry, "ReplacementArray[" + IntToString(libGame_gv_preloadingIterator) + "].To", c_playerAny));
            libGame_gf_PreloadingStoreModel(lv_model);
        }

    }
}

void libGame_gf_PreloadingPreloadModel (int lp_modelIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_preloadingModelIsPreloaded[lp_modelIndex] == true)) {
        return ;
    }

    libGame_gv_preloadingIterator += 1;
    PortraitSetModel(libGame_gv_preloadingPortrait[libGame_gv_preloadingIterator], libGame_gv_preloadingModelLink[lp_modelIndex], false);
    if ((libGame_gv_preloadingIterator == libGame_gv_preloadingPortraitCountMax_C)) {
        libGame_gf_PreloadingPreloadModelWaitToFinishLoading();
    }

    libGame_gv_preloadingModelIsPreloaded[lp_modelIndex] = true;
}

void libGame_gf_PreloadingAddModelToBlackList (string lp_modelEntry) {
    // Variable Declarations
    int lv_itModel;

    // Automatic Variable Declarations
    int autoABAA5208_ae;
    const int autoABAA5208_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_preloadingBlackListModelCount == libGame_gv_preloadingMaxPreloadedValue)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_B5C2D72A"), true);
        return ;
    }

    autoABAA5208_ae = libGame_gv_preloadingBlackListModelCount;
    lv_itModel = 1;
    for ( ; ( (autoABAA5208_ai >= 0 && lv_itModel <= autoABAA5208_ae) || (autoABAA5208_ai < 0 && lv_itModel >= autoABAA5208_ae) ) ; lv_itModel += autoABAA5208_ai ) {
        if ((libGame_gv_preloadingBlackListModel[lv_itModel] == lp_modelEntry)) {
            return ;
        }

    }
    libGame_gv_preloadingBlackListModelCount += 1;
    libGame_gv_preloadingBlackListModel[libGame_gv_preloadingBlackListModelCount] = lp_modelEntry;
}

bool libGame_gf_PreloadingModelIsInTheBlackList (string lp_modelEntry) {
    // Variable Declarations
    int lv_itModel;

    // Automatic Variable Declarations
    int auto6698613C_ae;
    const int auto6698613C_ai = 1;

    // Variable Initialization

    // Implementation
    auto6698613C_ae = libGame_gv_preloadingBlackListModelCount;
    lv_itModel = 1;
    for ( ; ( (auto6698613C_ai >= 0 && lv_itModel <= auto6698613C_ae) || (auto6698613C_ai < 0 && lv_itModel >= auto6698613C_ae) ) ; lv_itModel += auto6698613C_ai ) {
        if ((libGame_gv_preloadingBlackListModel[lv_itModel] == lp_modelEntry)) {
            return true;
        }

    }
    if (((CatalogEntryParent(c_gameCatalogModel, lp_modelEntry) == "SMCAMERA") || (CatalogEntryParent(c_gameCatalogModel, lp_modelEntry) == "SMCHARACTER") || (CatalogEntryParent(c_gameCatalogModel, lp_modelEntry) == "SMSET") || (CatalogEntryParent(c_gameCatalogModel, lp_modelEntry) == "UIGlue") || (CatalogEntryParent(c_gameCatalogModel, lp_modelEntry) == "Portrait"))) {
        return true;
    }

    return false;
}

void libGame_gf_PreloadingForceHeroPreloadingTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_sYSPreloadingEnabled == true) && ((GameIsOnline() == true) || (libGame_gv_preloadingPreloadDuringOfflineTest == true))) {
        libGame_gv_preloadingHeroPreloadingForced = true;
        TriggerEnable(libGame_gt_PreloadingForceHeroPreloadingTimer, true);
    }
    else {
        libGame_gv_preloadingFinished = true;
    }
}

void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel) {
    // Variable Declarations
    int lv_xPToApply;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gf_UnitStatsStoreUserDataToUnit(lp_unit, "Level", IntToFixed(lp_desiredLevel));
    lv_xPToApply = (lp_desiredLevel-lp_existingLevel);
    if ((lv_xPToApply > 0)) {
        UnitXPAddXP(lp_unit, null, lv_xPToApply);
    }

}

void libGame_gf_CoreUpdateScaling () {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto9F071DCC_ae = libCore_gv_bALMaxTeams;
    const int auto9F071DCC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto9F071DCC_ai >= 0 && lv_itTeam <= auto9F071DCC_ae) || (auto9F071DCC_ai < 0 && lv_itTeam >= auto9F071DCC_ae) ) ; lv_itTeam += auto9F071DCC_ai ) {
        if ((UnitIsAlive(libGame_gv_teams[lv_itTeam].lv_core) == true) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeam].lv_core, "CoreScaling") == true)) {
            UnitXPSetCurrentLevel(libGame_gv_teams[lv_itTeam].lv_core, null, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks) {
    // Variable Declarations
    int lv_itDefender;
    int lv_currentDefenderScalingTicks;
    int lv_newDefenderScalingTicks;
    int lv_newMercScalingTicks;
    int lv_campDefenderType;
    unit lv_creepUnit;

    // Automatic Variable Declarations
    int autoEAF2E78D_ae;
    const int autoEAF2E78D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_currentDefenderScalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks;
    lv_newDefenderScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks);
    lv_newMercScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks);
    autoEAF2E78D_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    lv_itDefender = 1;
    for ( ; ( (autoEAF2E78D_ai >= 0 && lv_itDefender <= autoEAF2E78D_ae) || (autoEAF2E78D_ai < 0 && lv_itDefender >= autoEAF2E78D_ae) ) ; lv_itDefender += autoEAF2E78D_ai ) {
        lv_creepUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex, lv_itDefender);
        if ((lv_creepUnit != null) && (UnitIsAlive(lv_creepUnit) == true)) {
            libGame_gf_UpdateScalingForUnit(lv_creepUnit, lv_newDefenderScalingTicks, lv_currentDefenderScalingTicks);
            UnitSetPropertyFixed(lv_creepUnit, c_unitPropLifePercent, 100.0);
        }

    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = lv_newDefenderScalingTicks;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = lv_newMercScalingTicks;
}

void libGame_gf_JungleUpdateScalingForCamps () {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoAD06CBDB_ae;
    const int autoAD06CBDB_ai = 1;

    // Variable Initialization

    // Implementation
    autoAD06CBDB_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoAD06CBDB_ai >= 0 && lv_itCamp <= autoAD06CBDB_ae) || (autoAD06CBDB_ai < 0 && lv_itCamp >= autoAD06CBDB_ae) ) ; lv_itCamp += autoAD06CBDB_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Idle)) {
            libGame_gf_JungleUpdateScalingForCamp(lv_itCamp, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_ScoreValueTrackingUpdatePlayers () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto95D19742_g;

    // Variable Initialization

    // Implementation
    auto95D19742_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto95D19742_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage = PlayerScoreValueGetAsFixed(lv_itPlayer, "SiegeDamage");
        libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage = PlayerScoreValueGetAsFixed(lv_itPlayer, "HeroDamage");
        libGame_gv_scoreValues[lv_itPlayer].lv_selfHealing = PlayerScoreValueGetAsFixed(lv_itPlayer, "SelfHealing");
        libGame_gv_scoreValues[lv_itPlayer].lv_healing = PlayerScoreValueGetAsFixed(lv_itPlayer, "Healing");
    }
}

void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, lp_score, lp_value);
    return ;
    TextExpressionSetToken("Param/Expression/lib_Game_36E0A5DA", "D", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))));
    TextExpressionSetToken("Param/Expression/lib_Game_36E0A5DA", "A", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_Game_36E0A5DA", "B", StringToText((lp_score)));
    TextExpressionSetToken("Param/Expression/lib_Game_36E0A5DA", "C", IntToText(lp_value));
    TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_Game_36E0A5DA"), true);
}

void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromFixed(lp_player, lp_score, lp_value);
    return ;
    TextExpressionSetToken("Param/Expression/lib_Game_82769FD8", "D", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))));
    TextExpressionSetToken("Param/Expression/lib_Game_82769FD8", "A", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_Game_82769FD8", "B", StringToText((lp_score)));
    TextExpressionSetToken("Param/Expression/lib_Game_82769FD8", "C", FixedToText(lp_value, 3));
    TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_Game_82769FD8"), true);
}

void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount, int lp_source) {
    // Variable Declarations
    string lv_scoreValueLink;
    int lv_nPC;

    // Automatic Variable Declarations
    int auto34B78D25_val;

    // Variable Initialization

    // Implementation
    auto34B78D25_val = lp_source;
    if (auto34B78D25_val == libGame_ge_XPSource_Mercenary) {
        lv_scoreValueLink = "ExperienceContributionMercenaries";
    }
    else if (auto34B78D25_val == libGame_ge_XPSource_Hero) {
        lv_scoreValueLink = "ExperienceContributionHeroes";
    }
    else if (auto34B78D25_val == libGame_ge_XPSource_Minion) {
        lv_scoreValueLink = "ExperienceContributionMinions";
    }
    else if (auto34B78D25_val == libGame_ge_XPSource_Structure) {
        lv_scoreValueLink = "ExperienceContributionStructures";
    }
    else if (auto34B78D25_val == libGame_ge_XPSource_Trickle) {
        lv_scoreValueLink = "ExperienceContributionPassive";
    }
    else if (auto34B78D25_val == libGame_ge_XPSource_Debug) {
    }
    else {
    }
    if ((lv_scoreValueLink == null)) {
        return ;
    }

    lv_nPC = libGame_gf_ComputerPlayerInTeam(libGame_gf_TeamNumberOfPlayer(lp_player));
    PlayerScoreValueSetFromFixed(lv_nPC, lv_scoreValueLink, (PlayerScoreValueGetAsFixed(lv_nPC, lv_scoreValueLink) + lp_amount));
    PlayerScoreValueSetFromFixed(lv_nPC, "ExperienceContribution", (PlayerScoreValueGetAsFixed(lv_nPC, "ExperienceContribution") + lp_amount));
    if ((lp_source != libGame_ge_XPSource_Debug) && (lp_source != libGame_ge_XPSource_Trickle)) {
        libGame_gv_scoreValues[lp_player].lv_experience += lp_amount;
        PlayerScoreValueSetFromFixed(lp_player, lv_scoreValueLink, (PlayerScoreValueGetAsFixed(lp_player, lv_scoreValueLink) + lp_amount));
        PlayerScoreValueSetFromFixed(lp_player, "ExperienceContribution", (PlayerScoreValueGetAsFixed(lp_player, "ExperienceContribution") + lp_amount));
    }

}

void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position) {
    // Variable Declarations
    fixed lv_unitRadius;
    region lv_searchRegion;
    unitgroup lv_nearbyEnemyHeroes;
    unit lv_enemyHero;
    fixed lv_enemyHeroRadius;
    fixed lv_distance;
    unitfilter lv_searchFilter;
    const fixed lv_distanceSlop = 0.1;
    const fixed lv_maxHeroRadius = 1.25;

    // Automatic Variable Declarations
    unitgroup autoC1C05AB2_g;
    int autoC1C05AB2_u;

    // Variable Initialization
    lv_nearbyEnemyHeroes = UnitGroupEmpty();
    lv_searchFilter = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)));

    // Implementation
    lv_unitRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Radius", c_playerAny));
    lv_searchRegion = RegionCircle(lp_position, (lv_unitRadius + lv_maxHeroRadius + lv_distanceSlop));
    lv_nearbyEnemyHeroes = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceEnemy, lv_searchRegion, lv_searchFilter, 0);
    if ((UnitGroupCount(lv_nearbyEnemyHeroes, c_unitCountAlive) > 0)) {
        autoC1C05AB2_g = lv_nearbyEnemyHeroes;
        autoC1C05AB2_u = UnitGroupCount(autoC1C05AB2_g, c_unitCountAll);
        for (;; autoC1C05AB2_u -= 1) {
            lv_enemyHero = UnitGroupUnitFromEnd(autoC1C05AB2_g, autoC1C05AB2_u);
            if (lv_enemyHero == null) { break; }
            lv_enemyHeroRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_enemyHero), "Radius", c_playerAny));
            lv_distance = DistanceBetweenPoints(lp_position, UnitGetPosition(lv_enemyHero));
            if (((lv_unitRadius + lv_enemyHeroRadius) <= (lv_distance + lv_distanceSlop))) {
                UnitBehaviorAdd(lp_unit, "ShrubProximityRevealed", lv_enemyHero, 1);
                return ;
            }

        }
    }

}

void libGame_gf_DeactivateSkinForPlayer (int lp_skinIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_skinIndex > 0)) {
        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink != null)) {
            PlayerApplySkin(lp_skinIndex, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink, false);
        }

        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink, 0);
        }

    }

}

void libGame_gf_ActivateSkinForPlayer (int lp_skinIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_skinIndex > 0)) {
        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink != null)) {
            PlayerApplySkin(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink, true);
        }

        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink, 1);
        }

    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_FCE591A1", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Game_FCE591A1", "B", libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfPlayerHero(lp_player)].lv_name);
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_FCE591A1"), true);
    }
}

int libGame_gf_TalentChoicesHeroicTalentTierOfHero (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentHeroicTier;
}

int libGame_gf_TalentChoicesHeroicTalentIndexOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroicTier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroicTier = libGame_gf_TalentChoicesHeroicTalentTierOfHero(libGame_gv_players[lp_player].lv_heroIndex);

    // Implementation
    return libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_heroicTier];
}

bool libGame_gf_TalentChoicesTierIsChosenForPlayer (int lp_player, int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    return (libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_tier] > 0);
}

bool libGame_gf_TalentChoicesPlayerHasTalent (int lp_player, int lp_talentIndex) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto3354ABFF_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto3354ABFF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_talentIndex > 0)) {
        lv_itTier = 1;
        for ( ; ( (auto3354ABFF_ai >= 0 && lv_itTier <= auto3354ABFF_ae) || (auto3354ABFF_ai < 0 && lv_itTier >= auto3354ABFF_ae) ) ; lv_itTier += auto3354ABFF_ai ) {
            if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier] == lp_talentIndex)) {
                return true;
            }

        }
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerHasTalentOnTier (int lp_player, int lp_talentIndex, int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_talentIndex > 0)) {
        if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_tier] == lp_talentIndex)) {
            return true;
        }

    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerCanPrepickTalentTier (int lp_player, int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_tier > 1) && (libGame_gf_TalentChoicesCurrentSelectableTalentTierOfPlayer(lp_player) < lp_tier) && (libGame_gf_TalentChoicesPlayerCanChooseTalentTier(lp_player, lp_tier) == false) && (libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lp_tier) == false)) {
        return true;
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerCanChooseTalentTier (int lp_player, int lp_tier) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    if ((lp_tier > 0) && (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit) >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lp_tier]) && (libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_tier] == 0) && (libGame_gv_talentChoices[lp_player].lv_talentPoints > 0) && (libGame_gf_TalentChoicesPreviousTierofTierIsChoosenForPlayer(lp_player, lp_tier) == true)) {
        return true;
    }

    return false;
}

bool libGame_gf_TalentChoicesPreviousTierofTierIsChoosenForPlayer (int lp_player, int lp_currentTier) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_currentTier == 1) || ((lp_currentTier > 1) && (libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, (lp_currentTier - 1)) == true)))) {
        return true;
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn (int lp_player, int lp_tier, int lp_column) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    if ((libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit) >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lp_tier]) && (libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_tier] == 0) && (libGame_gv_talentChoices[lp_player].lv_talentPoints > 0) && (libGame_gf_TalentChoicesPreviousTierofTierIsChoosenForPlayer(lp_player, lp_tier) == true)) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_tier][lp_column];
        if ((libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex == 0)) {
            return true;
        }
        else {
            if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex) == true)) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerHasHeroicTalent (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_heroicTier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    lv_heroicTier = libGame_gf_TalentChoicesHeroicTalentTierOfHero(lv_heroIndex);
    if ((libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_heroicTier] > 0)) {
        return true;
    }

    return false;
}

bool libGame_gf_TalentChoicesTierIsHeroic (int lp_heroIndex, int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    return (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentHeroicTier == lp_tier);
}

int libGame_gf_TalentChoicesCurrentTalentTierOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;
    int lv_talentTier;

    // Automatic Variable Declarations
    const int auto55490D73_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto55490D73_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto55490D73_ai >= 0 && lv_itTier <= auto55490D73_ae) || (auto55490D73_ai < 0 && lv_itTier >= auto55490D73_ae) ) ; lv_itTier += auto55490D73_ai ) {
        if ((libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lv_itTier) == true)) {
            lv_talentTier += 1;
        }
        else {
            break;
        }
    }
    lv_talentTier += libGame_gv_talentChoices[lp_player].lv_talentPoints;
    return lv_talentTier;
}

int libGame_gf_TalentChoicesCurrentSelectableTalentTierOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;
    int lv_talentTier;

    // Automatic Variable Declarations
    const int auto2D86D262_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto2D86D262_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto2D86D262_ai >= 0 && lv_itTier <= auto2D86D262_ae) || (auto2D86D262_ai < 0 && lv_itTier >= auto2D86D262_ae) ) ; lv_itTier += auto2D86D262_ai ) {
        if ((libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit) == libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_talentTierLevel[lv_itTier])) {
            if ((libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lv_itTier) == true)) {
                lv_talentTier += 1;
            }
            else {
                lv_talentTier += 1;
                break;
            }
        }
        else {
            break;
        }
    }
    return lv_talentTier;
}

int libGame_gf_TalentChoicesNextTierOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto56D29E3C_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto56D29E3C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto56D29E3C_ai >= 0 && lv_itTier <= auto56D29E3C_ae) || (auto56D29E3C_ai < 0 && lv_itTier >= auto56D29E3C_ae) ) ; lv_itTier += auto56D29E3C_ai ) {
        if ((libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lv_itTier) == false)) {
            return lv_itTier;
        }

    }
    return -1;
}

void libGame_gf_TalentChoicesUpdateChoicePanelForPlayer (int lp_player, int lp_updateEvent) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_playerLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);
    lv_playerLevel = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit);
    if ((libGame_gv_talentChoices[lp_player].lv_talentPoints > 0) && (lv_playerLevel > 1)) {
        libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libCore_ge_AnnouncerVOEvents_TalentUnlocked, lp_player);
    }

    libUIUI_gf_UITalentChoicePanelUpdateTalentButtonsForPlayer(lp_player);
    if ((lp_updateEvent == libGame_ge_TalentChoicesUpdateChoicePanelEvent_LevelUp)) {
        if ((libGame_gv_talentChoices[lp_player].lv_talentPoints > 0)) {
            libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionForPlayer(lp_player);
        }

    }
    else {
        libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionForPlayer(lp_player);
    }
    libUIUI_gf_UITalentChoicePanelUpdateTalentTreeSelectionIndicatorForPlayer(lp_player);
    libUIUI_gf_UITalentChoisePanelUpdateTierButtonsForPlayer(lp_player);
    libUIUI_gf_UITalentChoisePanelUpdateTierButtonQuestsForPlayer(lp_player);
}

void libGame_gf_TalentChoicesChooseTalentForPlayer (int lp_tier, int lp_column, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);
    lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_tier][lp_column];
    libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lp_tier] = lv_talentIndex;
    libGame_gv_talentChoices[lp_player].lv_chosenTalentColumn[lp_tier] = lp_column;
    libGame_gf_TalentChoicesUpdateTalentPointsForPlayer(lp_player);
    libGame_gf_StormAddHeroTalentForPlayer(lv_talentIndex, lp_player, true);
    libGame_gf_SendEventPlayerChooseTalent(lp_player, lv_talentIndex);
    libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer(lp_player);
    libUIUI_gf_UITalentPanelUpdateTalentTierOfPlayer(lp_player, lp_tier);
    libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer(lp_player);
    if ((libGame_gf_TalentChoicesHeroicTalentTierOfHero(lv_heroIndex) == lp_tier)) {
        libUIUI_gf_UIHeroLeaderboardTalentsHeroicAbilityLinkUpdate2(lp_player);
    }

    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lp_player, libGame_ge_TalentChoicesUpdateChoicePanelEvent_TalentChosen);
    libUIUI_gf_UIPartyFrameHeroicTalentUpdate(lp_player, lp_tier);
    libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lp_player);
}

void libGame_gf_StormAddHeroTalentForPlayer (int lp_talentIndex, int lp_player, bool lp_includeTalentEntry) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itBehavior;
    int lv_itItem;
    int lv_itCatalogLinkReplacement;
    int lv_catalog;
    string lv_replaceFrom;
    string lv_changeTo;

    // Automatic Variable Declarations
    const int auto899F8F86_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    const int auto899F8F86_ai = 1;
    const int autoC793992E_ae = libCore_gv_talents_MaxItemEntryCount_C;
    const int autoC793992E_ai = 1;
    const int auto057DA50F_ae = libCore_gv_talents_CatalogLinkReplacementMax_C;
    const int auto057DA50F_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_catalog = c_gameCatalogUnit;
    lv_replaceFrom = "";
    lv_changeTo = "";

    // Implementation
    if ((lp_includeTalentEntry == true)) {
        PlayerAddTalent(lp_player, libCore_gv_talentData[lp_talentIndex].lv_talentLink);
    }

    if ((libCore_gv_talentData[lp_talentIndex].lv_effectModification != null)) {
        UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_effectModification, libGame_gv_players[lp_player].lv_heroUnit);
    }

    lv_itBehavior = 1;
    for ( ; ( (auto899F8F86_ai >= 0 && lv_itBehavior <= auto899F8F86_ae) || (auto899F8F86_ai < 0 && lv_itBehavior >= auto899F8F86_ae) ) ; lv_itBehavior += auto899F8F86_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior] != null)) {
            UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior], libGame_gv_players[lp_player].lv_heroUnit, 1);
        }

    }
    lv_itItem = 1;
    for ( ; ( (autoC793992E_ai >= 0 && lv_itItem <= autoC793992E_ae) || (autoC793992E_ai < 0 && lv_itItem >= autoC793992E_ae) ) ; lv_itItem += autoC793992E_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_item[lv_itItem] != null)) {
            UnitInventoryCreate(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_item[lv_itItem]);
        }

    }
    lv_itCatalogLinkReplacement = 1;
    for ( ; ( (auto057DA50F_ai >= 0 && lv_itCatalogLinkReplacement <= auto057DA50F_ae) || (auto057DA50F_ai < 0 && lv_itCatalogLinkReplacement >= auto057DA50F_ae) ) ; lv_itCatalogLinkReplacement += auto057DA50F_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementUsed[lv_itCatalogLinkReplacement] == true)) {
            lv_catalog = libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementType[lv_itCatalogLinkReplacement];
            lv_replaceFrom = libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementFrom[lv_itCatalogLinkReplacement];
            lv_changeTo = libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementTo[lv_itCatalogLinkReplacement];
            CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_changeTo);
        }

    }
}

void libGame_gf_StormResetHeroTalentsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;
    int lv_talentIndex;
    int lv_maxArrayValue;

    // Automatic Variable Declarations
    const int auto08C19AD3_ae = 1;
    const int auto08C19AD3_ai = -1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itTier = libCore_gv_dataHeroesMaxTalentTiers;
    for ( ; ( (auto08C19AD3_ai >= 0 && lv_itTier <= auto08C19AD3_ae) || (auto08C19AD3_ai < 0 && lv_itTier >= auto08C19AD3_ae) ) ; lv_itTier += auto08C19AD3_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier];
        libGame_gv_talentChoices[lp_player].lv_chosenTalentColumn[lv_itTier] = 0;
        if ((lv_talentIndex == 0)) {
            continue;
        }

        libGame_gv_talentChoices[lp_player].lv_chosenTalentIndex[lv_itTier] = 0;
        libGame_gf_StormRemoveHeroTalentForPlayer(lp_player, lv_talentIndex);
    }
    libGame_gf_SendEventPlayerTalentsReset(lp_player);
    libGame_gf_TalentChoicesUpdateTalentPointsForPlayer(lp_player);
    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lp_player, libGame_ge_TalentChoicesUpdateChoicePanelEvent_TalentReset);
    libUIUI_gf_UITalentPanelUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UITalentPanelUpdateTalentsAvailabilityOfPlayer(lp_player);
    libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsHeroicAbilityLinkUpdate2(lp_player);
}

void libGame_gf_StormRemoveHeroTalentForPlayer (int lp_player, int lp_talentIndex) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_itBehavior;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_reference;
    unit lv_itInventoryUnit;
    int lv_itItem;
    int lv_itCatalogLinkReplacement;
    int lv_catalog;
    string lv_replaceFrom;
    string lv_tokenCounterBehavior;

    // Automatic Variable Declarations
    int autoF4B562BF_ae;
    const int autoF4B562BF_ai = 1;
    const int autoCE62A6D7_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    const int autoCE62A6D7_ai = 1;
    const int auto2854C129_ae = libCore_gv_talents_MaxItemEntryCount_C;
    const int auto2854C129_ai = 1;
    unitgroup autoA2EACD6A_g;
    int autoA2EACD6A_u;
    const int autoD2CAB294_ae = libCore_gv_talents_CatalogLinkReplacementMax_C;
    const int autoD2CAB294_ai = 1;

    // Variable Initialization
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_reference = "";
    lv_catalog = c_gameCatalogUnit;
    lv_replaceFrom = "";

    // Implementation
    if ((libCore_gv_talentData[lp_talentIndex].lv_effectModification != null) && (libCore_gv_talentData[lp_talentIndex].lv_effectModification != "")) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, libCore_gv_talentData[lp_talentIndex].lv_effectModification, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            autoF4B562BF_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (autoF4B562BF_ai >= 0 && lv_itArray <= autoF4B562BF_ae) || (autoF4B562BF_ai < 0 && lv_itArray >= autoF4B562BF_ae) ) ; lv_itArray += autoF4B562BF_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lp_talentIndex].lv_effectModification, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lp_player, CatalogReferenceGet((lv_reference), libCore_gv_cOMPUTER_Neutral));
            }
        }

    }

    if ((libCore_gv_talentData[lp_talentIndex].lv_questDataTokenCounterInstance != "[Default]") && (libCore_gv_talentData[lp_talentIndex].lv_questDataTokenCounterInstance != null)) {
        lv_tokenCounterBehavior = UserDataGetGameLink("TokenCounter", libCore_gv_talentData[lp_talentIndex].lv_questDataTokenCounterInstance, "BehaviorTokenCounter", 1);
        libGame_gf_TokenCounterResetTokenOnHeroUnit(lv_tokenCounterBehavior, lv_heroUnit);
        UnitBehaviorRemove(lv_heroUnit, lv_tokenCounterBehavior, 1);
    }

    lv_itBehavior = 1;
    for ( ; ( (autoCE62A6D7_ai >= 0 && lv_itBehavior <= autoCE62A6D7_ae) || (autoCE62A6D7_ai < 0 && lv_itBehavior >= autoCE62A6D7_ae) ) ; lv_itBehavior += autoCE62A6D7_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior] != null) && (libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior] != "")) {
            libGame_gf_TokenCounterResetTokenOnHeroUnit(libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior], lv_heroUnit);
            UnitBehaviorRemove(lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior], 1);
        }

    }
    lv_itItem = 1;
    for ( ; ( (auto2854C129_ai >= 0 && lv_itItem <= auto2854C129_ae) || (auto2854C129_ai < 0 && lv_itItem >= auto2854C129_ae) ) ; lv_itItem += auto2854C129_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_item[lv_itItem] != null) && (libCore_gv_talentData[lp_talentIndex].lv_item[lv_itItem] != "")) {
            autoA2EACD6A_g = UnitInventoryGroup(lv_heroUnit);
            autoA2EACD6A_u = UnitGroupCount(autoA2EACD6A_g, c_unitCountAll);
            for (;; autoA2EACD6A_u -= 1) {
                lv_itInventoryUnit = UnitGroupUnitFromEnd(autoA2EACD6A_g, autoA2EACD6A_u);
                if (lv_itInventoryUnit == null) { break; }
                if ((UnitGetType(lv_itInventoryUnit) == libCore_gv_talentData[lp_talentIndex].lv_item[lv_itItem])) {
                    UnitInventoryRemove(lv_itInventoryUnit);
                }

            }
        }

    }
    lv_itCatalogLinkReplacement = 1;
    for ( ; ( (autoD2CAB294_ai >= 0 && lv_itCatalogLinkReplacement <= autoD2CAB294_ae) || (autoD2CAB294_ai < 0 && lv_itCatalogLinkReplacement >= autoD2CAB294_ae) ) ; lv_itCatalogLinkReplacement += autoD2CAB294_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementUsed[lv_itCatalogLinkReplacement] == true)) {
            lv_catalog = libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementType[lv_itCatalogLinkReplacement];
            lv_replaceFrom = libCore_gv_talentData[lp_talentIndex].lv_catalogLinkReplacementFrom[lv_itCatalogLinkReplacement];
            CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_replaceFrom);
        }

    }
    PlayerRemoveTalent(lp_player, libCore_gv_talentData[lp_talentIndex].lv_talentLink);
}

void libGame_gf_TalentChoicesUpdateTalentPointsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_allowedTalentPoints;
    int lv_spendTalentPoints;
    int lv_currentTalentPoints;
    int lv_level;
    int lv_itTier;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoB450C175_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoB450C175_ai = 1;

    // Variable Initialization

    // Implementation
    lv_level = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_HeroLevelIndex, libGame_gv_players[lp_player].lv_heroUnit);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itTier = 1;
    for ( ; ( (autoB450C175_ai >= 0 && lv_itTier <= autoB450C175_ae) || (autoB450C175_ai < 0 && lv_itTier >= autoB450C175_ae) ) ; lv_itTier += autoB450C175_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier] <= lv_level)) {
            lv_allowedTalentPoints += 1;
            if ((libGame_gf_TalentChoicesTierIsChosenForPlayer(lp_player, lv_itTier) == true)) {
                lv_spendTalentPoints += 1;
            }

        }
        else {
            break;
        }
    }
    lv_currentTalentPoints = (lv_allowedTalentPoints - lv_spendTalentPoints);
    libGame_gv_talentChoices[lp_player].lv_talentPoints = lv_currentTalentPoints;
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HasTalentPoints", lv_currentTalentPoints);
}

fixed libGame_gf_AdjustXPForTeam (fixed lp_amount, int lp_team) {
    // Variable Declarations
    fixed lv_returnAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_returnAmount = (lp_amount * libGame_gv_teams[lp_team].lv_xPMultiplier);
    return lv_returnAmount;
}

fixed libGame_gf_TokenCounterGetCurrentTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    string lv_chargeLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chargeLink = ("TokenCounter/" + (lp_tokenCounterBehavior) + "_Current");

    // Implementation
    return PlayerGetChargeUsed(lp_player, lv_chargeLink);
}

fixed libGame_gf_TokenCounterGetMaximumTokenCount (string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libCore_gf_TokenTokenCounterIndex(lp_tokenCounterBehavior);

    // Implementation
    if ((lv_index > 0)) {
        return libCore_gv_tokenCounterData[lv_index].lv_maxAmount;
    }

    return -1.0;
}

fixed libGame_gf_TokenCounterGetTargetTokenCount (string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libCore_gf_TokenTokenCounterIndex(lp_tokenCounterBehavior);

    // Implementation
    if ((lv_index > 0)) {
        return libCore_gv_tokenCounterData[lv_index].lv_targetAmount;
    }

    return -1.0;
}

bool libGame_gf_TokenCounterCheckTokenEventForPlayer (string lp_tokenEvent, string lp_tokenCounter, int lp_player) {
    // Variable Declarations
    string lv_chargeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chargeString = "";

    // Implementation
    lv_chargeString = ("TokenCounter/" + (lp_tokenCounter) + "_" + lp_tokenEvent);
    return (PlayerGetChargeUsed(lp_player, lv_chargeString) == 1);
}

void libGame_gf_TokenCounterUpdateTokenEventForPlayer (bool lp_setReset, string lp_tokenCounterBehavior, string lp_event, int lp_player) {
    // Variable Declarations
    string lv_chargeString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chargeString = "";

    // Implementation
    lv_chargeString = ("TokenCounter/" + (lp_tokenCounterBehavior) + "_" + lp_event);
    if ((lp_setReset == true)) {
        if ((PlayerGetChargeUsed(lp_player, lv_chargeString) == 0.0)) {
            PlayerAddChargeUsed(lp_player, lv_chargeString, 1.0);
        }

    }
    else {
        if ((PlayerGetChargeUsed(lp_player, lv_chargeString) == 1.0)) {
            PlayerAddChargeUsed(lp_player, lv_chargeString, -1.0);
        }

    }
}

void libGame_gf_TokenCounterModifyTokenForPlayer (int lp_option, fixed lp_tokenChangeValue, string lp_tokenCounterBehavior, int lp_index, int lp_player, unit lp_launchUnit, unit lp_impactUnit, bool lp_ignoreQuestEvents) {
    // Variable Declarations
    string lv_chargeLink;
    fixed lv_maximumValue;
    fixed lv_currentValue;
    fixed lv_targetValue;
    string lv_type;
    fixed lv_modifiedValue;
    fixed lv_modifiedValue_Ref;
    int lv_itConditionalEvent;
    int lv_itDeltaEvent;
    fixed lv_itDeltaValue;
    int lv_itValue;

    // Automatic Variable Declarations
    int auto4805F1C1_val;
    string auto0061DE38_val;
    int auto63CDFE10_ae;
    const int auto63CDFE10_ai = 1;
    int auto991BD1FF_ae;
    const int auto991BD1FF_ai = 1;
    int autoA9803EA8_ae;
    const int autoA9803EA8_ai = 1;
    int autoC2944807_ae;
    const int autoC2944807_ai = 1;
    int auto65C960A4_ae;
    const int auto65C960A4_ai = 1;
    int auto8EF24EFA_ae;
    const int auto8EF24EFA_ai = -1;

    // Variable Initialization
    lv_chargeLink = "";

    // Implementation
    if ((UnitHasBehavior2(lp_launchUnit, lp_tokenCounterBehavior) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C3C56B8A", "A", libCore_gf_ConvertCatalogEntryToText(UnitGetType(lp_launchUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_C3C56B8A", "B", libCore_gf_ConvertCatalogEntryToText(lp_tokenCounterBehavior));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_C3C56B8A"), true);
        return ;
    }

    if ((!((lp_option == c_upgradeOperationAdd) || (lp_option == c_upgradeOperationSubtract) || (lp_option == c_upgradeOperationSet)))) {
        return ;
    }

    if ((lp_option == c_upgradeOperationSet)) {
        if ((lp_tokenChangeValue < 0.0)) {
            return ;
        }

    }
    else {
        if ((lp_tokenChangeValue <= 0.0)) {
            return ;
        }

    }
    lv_type = libCore_gv_tokenCounterData[lp_index].lv_type;
    lv_maximumValue = libCore_gv_tokenCounterData[lp_index].lv_maxAmount;
    lv_targetValue = libCore_gv_tokenCounterData[lp_index].lv_targetAmount;
    lv_chargeLink = ("TokenCounter/" + (lp_tokenCounterBehavior));
    lv_currentValue = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    auto4805F1C1_val = lp_option;
    if (auto4805F1C1_val == c_upgradeOperationAdd) {
        if ((lv_currentValue >= lv_maximumValue)) {
            return ;
        }

        lv_modifiedValue = (lv_currentValue + lp_tokenChangeValue);
        auto0061DE38_val = lv_type;
        if (auto0061DE38_val == "UnlimitedTargetCount") {
            if ((lv_currentValue < lv_targetValue)) {
                if ((lv_modifiedValue <= lv_targetValue)) {
                    PlayerAddChargeUsed(lp_player, lv_chargeLink, (-lp_tokenChangeValue));
                    PlayerAddChargeUsed(lp_player, (lv_chargeLink + "_Current"), lp_tokenChangeValue);
                    CatalogFieldValueModify(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountUse", lp_player, FixedToString(libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player), c_fixedPrecisionAny), c_upgradeOperationSet);
                }
                else {
                    lv_modifiedValue_Ref = lv_modifiedValue;
                    lv_modifiedValue = (lv_targetValue - lv_currentValue);
                    libGame_gf_TokenCounterModifyTokenForPlayer(lp_option, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
                    lv_modifiedValue = (lv_modifiedValue_Ref - lv_targetValue);
                    libGame_gf_TokenCounterModifyTokenForPlayer(lp_option, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
                    return ;
                }
            }
            else {
                if ((lv_modifiedValue <= lv_maximumValue)) {
                    PlayerAddChargeUsed(lp_player, (lv_chargeLink + "_Current"), lp_tokenChangeValue);
                    CatalogFieldValueModify(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountUse", lp_player, FixedToString(libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player), c_fixedPrecisionAny), c_upgradeOperationSet);
                    CatalogFieldValueModify(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player, FixedToString(libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player), c_fixedPrecisionAny), c_upgradeOperationSet);
                }
                else {
                    lv_modifiedValue = (lv_modifiedValue - lv_maximumValue);
                    libGame_gf_TokenCounterModifyTokenForPlayer(lp_option, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
                    return ;
                }
            }
        }
        else {
            if ((lv_modifiedValue <= lv_targetValue)) {
                PlayerAddChargeUsed(lp_player, lv_chargeLink, (-lp_tokenChangeValue));
                PlayerAddChargeUsed(lp_player, (lv_chargeLink + "_Current"), lp_tokenChangeValue);
                CatalogFieldValueModify(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountUse", lp_player, FixedToString(libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player), c_fixedPrecisionAny), c_upgradeOperationSet);
            }
            else {
                lv_modifiedValue = (lv_targetValue - lv_currentValue);
                libGame_gf_TokenCounterModifyTokenForPlayer(lp_option, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
                return ;
            }
        }
        if ((libCore_gv_tokenCounterData[lp_index].lv_eventsIncreaseEffect != null)) {
            UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsIncreaseEffect, lp_launchUnit);
        }

        if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_eventsIncreaseQuestEvent) == true)) {
            libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsIncreaseQuestEvent);
        }

        auto63CDFE10_ae = libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCount;
        lv_itConditionalEvent = 1;
        for ( ; ( (auto63CDFE10_ai >= 0 && lv_itConditionalEvent <= auto63CDFE10_ae) || (auto63CDFE10_ai < 0 && lv_itConditionalEvent >= auto63CDFE10_ae) ) ; lv_itConditionalEvent += auto63CDFE10_ai ) {
            if ((IntToFixed(libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCompareValue[lv_itConditionalEvent]) <= lv_modifiedValue)) {
                libGame_gf_TokenCounterUpdateTokenEventForPlayer(true, lp_tokenCounterBehavior, ("ConditionalEvent" + IntToString(lv_itConditionalEvent)), lp_player);
            }
            else {
                libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, ("ConditionalEvent" + IntToString(lv_itConditionalEvent)), lp_player);
            }
            if ((IntToFixed(libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCompareValue[lv_itConditionalEvent]) > lv_currentValue) && (IntToFixed(libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCompareValue[lv_itConditionalEvent]) <= lv_modifiedValue)) {
                if ((libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsEffect[lv_itConditionalEvent] != null)) {
                    UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsEffect[lv_itConditionalEvent], lp_launchUnit);
                }

                if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsQuestEvent[lv_itConditionalEvent]) == true)) {
                    libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsQuestEvent[lv_itConditionalEvent]);
                }

            }

        }
        auto991BD1FF_ae = libCore_gv_tokenCounterData[lp_index].lv_deltaEventsCount;
        lv_itDeltaEvent = 1;
        for ( ; ( (auto991BD1FF_ai >= 0 && lv_itDeltaEvent <= auto991BD1FF_ae) || (auto991BD1FF_ai < 0 && lv_itDeltaEvent >= auto991BD1FF_ae) ) ; lv_itDeltaEvent += auto991BD1FF_ai ) {
            if ((libCore_gv_tokenCounterData[lp_index].lv_deltaEventsDelta[lv_itDeltaEvent] <= 0)) {
                continue;
            }

            autoA9803EA8_ae = FixedToInt(lv_modifiedValue);
            lv_itValue = (FixedToInt(lv_currentValue) + 1);
            for ( ; ( (autoA9803EA8_ai >= 0 && lv_itValue <= autoA9803EA8_ae) || (autoA9803EA8_ai < 0 && lv_itValue >= autoA9803EA8_ae) ) ; lv_itValue += autoA9803EA8_ai ) {
                if ((ModI(lv_itValue, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsDelta[lv_itDeltaEvent]) == 0)) {
                    if ((libCore_gv_tokenCounterData[lp_index].lv_deltaEventsEffect[lv_itDeltaEvent] != null)) {
                        UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsEffect[lv_itDeltaEvent], lp_launchUnit);
                    }

                    if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_deltaEventsQuestEvent[lv_itDeltaEvent]) == true)) {
                        libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsQuestEvent[lv_itDeltaEvent]);
                    }

                }

            }
        }
        if ((lv_modifiedValue == lv_maximumValue)) {
            libGame_gf_TokenCounterUpdateTokenEventForPlayer(true, lp_tokenCounterBehavior, "Maximum", lp_player);
            if ((libCore_gv_tokenCounterData[lp_index].lv_eventsAtMaxEffect != null)) {
                UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsAtMaxEffect, lp_launchUnit);
            }

            if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_eventsAtMaxQuestEvent) == true)) {
                libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsAtMaxQuestEvent);
            }

        }
        else {
            libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Maximum", lp_player);
        }
        if ((lv_modifiedValue == lv_maximumValue) && (libCore_gv_tokenCounterData[lp_index].lv_optionResetAtMax == true)) {
            libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, 0.0, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
            return ;
        }

        libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Minimum", lp_player);
    }
    else if (auto4805F1C1_val == c_upgradeOperationSubtract) {
        lv_modifiedValue = (lv_currentValue - lp_tokenChangeValue);
        if ((lv_modifiedValue >= 0.0)) {
            PlayerAddChargeUsed(lp_player, lv_chargeLink, lp_tokenChangeValue);
            PlayerAddChargeUsed(lp_player, (lv_chargeLink + "_Current"), (-lp_tokenChangeValue));
            CatalogFieldValueModify(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountUse", lp_player, FixedToString(libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player), c_fixedPrecisionAny), c_upgradeOperationSet);
        }
        else {
            lv_modifiedValue = lv_currentValue;
            libGame_gf_TokenCounterModifyTokenForPlayer(lp_option, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
            return ;
        }
        if ((libCore_gv_tokenCounterData[lp_index].lv_eventsDecreaseEffect != null)) {
            UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsDecreaseEffect, lp_launchUnit);
        }

        if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_eventsDecreaseQuestEvent) == true)) {
            libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsDecreaseQuestEvent);
        }

        autoC2944807_ae = libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCount;
        lv_itConditionalEvent = 1;
        for ( ; ( (autoC2944807_ai >= 0 && lv_itConditionalEvent <= autoC2944807_ae) || (autoC2944807_ai < 0 && lv_itConditionalEvent >= autoC2944807_ae) ) ; lv_itConditionalEvent += autoC2944807_ai ) {
            if ((libCore_gv_tokenCounterData[lp_index].lv_conditionalEventsCompareValue[lv_itConditionalEvent] > FixedToInt(lv_modifiedValue))) {
                libGame_gf_TokenCounterUpdateTokenEventForPlayer(true, lp_tokenCounterBehavior, ("ConditionalEvent" + IntToString(lv_itConditionalEvent)), lp_player);
            }
            else {
                libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, ("ConditionalEvent" + IntToString(lv_itConditionalEvent)), lp_player);
            }
        }
        auto65C960A4_ae = libCore_gv_tokenCounterData[lp_index].lv_deltaEventsCount;
        lv_itDeltaEvent = 1;
        for ( ; ( (auto65C960A4_ai >= 0 && lv_itDeltaEvent <= auto65C960A4_ae) || (auto65C960A4_ai < 0 && lv_itDeltaEvent >= auto65C960A4_ae) ) ; lv_itDeltaEvent += auto65C960A4_ai ) {
            if ((libCore_gv_tokenCounterData[lp_index].lv_deltaEventsDelta[lv_itDeltaEvent] >= 0)) {
                continue;
            }

            auto8EF24EFA_ae = FixedToInt(lv_modifiedValue);
            lv_itValue = (FixedToInt(lv_currentValue) - 1);
            for ( ; ( (auto8EF24EFA_ai >= 0 && lv_itValue <= auto8EF24EFA_ae) || (auto8EF24EFA_ai < 0 && lv_itValue >= auto8EF24EFA_ae) ) ; lv_itValue += auto8EF24EFA_ai ) {
                if ((ModI(lv_itValue, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsDelta[lv_itDeltaEvent]) == 0)) {
                    if ((libCore_gv_tokenCounterData[lp_index].lv_deltaEventsEffect[lv_itDeltaEvent] != null)) {
                        UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsEffect[lv_itDeltaEvent], lp_launchUnit);
                    }

                    if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_deltaEventsQuestEvent[lv_itDeltaEvent]) == true)) {
                        libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_deltaEventsQuestEvent[lv_itDeltaEvent]);
                    }

                }

            }
        }
        if ((lv_modifiedValue == 0.0)) {
            libGame_gf_TokenCounterUpdateTokenEventForPlayer(true, lp_tokenCounterBehavior, "Minimum", lp_player);
            if ((libCore_gv_tokenCounterData[lp_index].lv_eventsAtMinEffect != null)) {
                UnitCreateEffectUnit(lp_launchUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsAtMinEffect, lp_launchUnit);
            }

            if ((lp_ignoreQuestEvents == false) && (libCore_gf_UserDataInstanceisUsed(libCore_gv_tokenCounterData[lp_index].lv_eventsAtMinQuestEvent) == true)) {
                libGame_gf_TokenCounterSendQuestEvent(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit, libCore_gv_tokenCounterData[lp_index].lv_eventsAtMinQuestEvent);
            }

        }
        else {
            libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Minimum", lp_player);
        }
        if ((lv_modifiedValue < lv_maximumValue)) {
            libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Maximum", lp_player);
        }

    }
    else if (auto4805F1C1_val == c_upgradeOperationSet) {
        if ((lp_tokenChangeValue > lv_currentValue)) {
            lv_modifiedValue = (lp_tokenChangeValue - lv_currentValue);
            libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationAdd, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
        }
        else if ((lp_tokenChangeValue < lv_currentValue)) {
            lv_modifiedValue = (lv_currentValue - lp_tokenChangeValue);
            libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSubtract, lv_modifiedValue, lp_tokenCounterBehavior, lp_index, lp_player, lp_launchUnit, null, lp_ignoreQuestEvents);
        }
        return ;
    }
    else {
    }
    if ((libCore_gv_tokenCounterData[lp_index].lv_scoreValueLink != null)) {
        PlayerScoreValueSetFromFixed(lp_player, libCore_gv_tokenCounterData[lp_index].lv_scoreValueLink, libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player));
    }

    if ((libCore_gv_tokenCounterData[lp_index].lv_isQuest == true)) {
        libUIUI_gf_UIQuestsUpdateQuestUIOfPlayerForSingleBehavior(lp_tokenCounterBehavior, lp_player);
    }

}

void libGame_gf_TokenCounterSendQuestEvent (string lp_tokenCounterBehavior, unit lp_launchUnit, unit lp_impactUnit, string lp_questEvent) {
    // Automatic Variable Declarations
    string auto1884D613_val;

    // Implementation
    auto1884D613_val = lp_questEvent;
    if (auto1884D613_val == "QuestIncrease") {
        libGame_gf_SendEventQuestIncrease(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit);
    }
    else if (auto1884D613_val == "QuestDecrease") {
        libGame_gf_SendEventQuestDecrease(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit);
    }
    else if (auto1884D613_val == "QuestMilestone") {
        libGame_gf_SendEventQuestMilestone(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit);
    }
    else if (auto1884D613_val == "QuestComplete") {
        libGame_gf_SendEventQuestComplete(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit);
    }
    else if (auto1884D613_val == "QuestReset") {
        libGame_gf_SendEventQuestReset(lp_tokenCounterBehavior, lp_launchUnit, lp_impactUnit);
    }
    else {
    }
}

void libGame_gf_TokenCounterResetTokenOnHeroUnit (string lp_tokenCounterBehavior, unit lp_heroUnit) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;
    string lv_reference;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_chargeLink;
    int lv_index;
    int lv_itEvent;
    string lv_itEffect;

    // Automatic Variable Declarations
    int auto743E4A68_ae;
    const int auto743E4A68_ai = 1;
    int auto00F4D2E2_ae;
    const int auto00F4D2E2_ai = 1;
    int autoDBB2AD01_ae;
    const int autoDBB2AD01_ai = 1;
    int auto0EF7A3F1_ae;
    const int auto0EF7A3F1_ai = 1;
    int autoCC5B2694_ae;
    const int autoCC5B2694_ai = 1;
    const int auto6522FECE_ae = libCore_gv_tokenConditionalEventsMaxCount;
    const int auto6522FECE_ai = 1;
    int auto57A01E1C_ae;
    const int auto57A01E1C_ai = 1;
    const int auto88C22DF4_ae = libCore_gv_tokenDeltaEventsMaxCount;
    const int auto88C22DF4_ai = 1;
    int auto612141EB_ae;
    const int auto612141EB_ai = 1;

    // Variable Initialization
    lv_hero = lp_heroUnit;
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_reference = "";
    lv_chargeLink = "";
    lv_index = libCore_gf_TokenTokenCounterIndex(lp_tokenCounterBehavior);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_player) == true) && (lv_index > 0)) {
    }
    else {
        return ;
    }
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lv_player, 0.0, c_upgradeOperationAdd);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountUse", lv_player, 0.0, c_upgradeOperationAdd);
    lv_chargeLink = ("TokenCounter/" + (lp_tokenCounterBehavior));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, lv_chargeLink);
    PlayerAddChargeUsed(lv_player, lv_chargeLink, libGame_gf_TokenCounterGetTargetTokenCount(lp_tokenCounterBehavior));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, (lv_chargeLink + "_Current"));
    libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Maximum", lv_player);
    libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, "Minimum", lv_player);
    auto743E4A68_ae = libCore_gv_tokenCounterData[lv_index].lv_conditionalEventsCount;
    lv_itEvent = 1;
    for ( ; ( (auto743E4A68_ai >= 0 && lv_itEvent <= auto743E4A68_ae) || (auto743E4A68_ai < 0 && lv_itEvent >= auto743E4A68_ae) ) ; lv_itEvent += auto743E4A68_ai ) {
        libGame_gf_TokenCounterUpdateTokenEventForPlayer(false, lp_tokenCounterBehavior, ("ConditionalEvent" + IntToString(lv_itEvent)), lv_player);
    }

    if ((libCore_gv_tokenCounterData[lv_index].lv_scoreValueLink != null)) {
        PlayerScoreValueSetFromFixed(lv_player, libCore_gv_tokenCounterData[lv_index].lv_scoreValueLink, 0.0);
    }

    lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_eventsAtMaxEffect;
    if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            auto00F4D2E2_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (auto00F4D2E2_ai >= 0 && lv_itArray <= auto00F4D2E2_ae) || (auto00F4D2E2_ai < 0 && lv_itArray >= auto00F4D2E2_ae) ) ; lv_itArray += auto00F4D2E2_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
            }
        }

    }

    lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_eventsAtMinEffect;
    if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            autoDBB2AD01_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (autoDBB2AD01_ai >= 0 && lv_itArray <= autoDBB2AD01_ae) || (autoDBB2AD01_ai < 0 && lv_itArray >= autoDBB2AD01_ae) ) ; lv_itArray += autoDBB2AD01_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
            }
        }

    }

    lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_eventsDecreaseEffect;
    if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            auto0EF7A3F1_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (auto0EF7A3F1_ai >= 0 && lv_itArray <= auto0EF7A3F1_ae) || (auto0EF7A3F1_ai < 0 && lv_itArray >= auto0EF7A3F1_ae) ) ; lv_itArray += auto0EF7A3F1_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
            }
        }

    }

    lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_eventsIncreaseEffect;
    if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            autoCC5B2694_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (autoCC5B2694_ai >= 0 && lv_itArray <= autoCC5B2694_ae) || (autoCC5B2694_ai < 0 && lv_itArray >= autoCC5B2694_ae) ) ; lv_itArray += autoCC5B2694_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
            }
        }

    }

    lv_itEvent = 1;
    for ( ; ( (auto6522FECE_ai >= 0 && lv_itEvent <= auto6522FECE_ae) || (auto6522FECE_ai < 0 && lv_itEvent >= auto6522FECE_ae) ) ; lv_itEvent += auto6522FECE_ai ) {
        lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_conditionalEventsEffect[lv_itEvent];
        if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
            lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
            if ((lv_maxArrayValue > 0)) {
                auto57A01E1C_ae = (lv_maxArrayValue-1);
                lv_itArray = 0;
                for ( ; ( (auto57A01E1C_ai >= 0 && lv_itArray <= auto57A01E1C_ae) || (auto57A01E1C_ai < 0 && lv_itArray >= auto57A01E1C_ae) ) ; lv_itArray += auto57A01E1C_ai ) {
                    lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                    CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
                }
            }

        }

    }
    lv_itEvent = 1;
    for ( ; ( (auto88C22DF4_ai >= 0 && lv_itEvent <= auto88C22DF4_ae) || (auto88C22DF4_ai < 0 && lv_itEvent >= auto88C22DF4_ae) ) ; lv_itEvent += auto88C22DF4_ai ) {
        lv_itEffect = libCore_gv_tokenCounterData[lv_index].lv_deltaEventsEffect[lv_itEvent];
        if ((lv_itEffect != null) && (lv_itEffect != "") && (CatalogEntryScope(c_gameCatalogEffect, lv_itEffect) == "CEffectModifyPlayer")) {
            lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, lv_itEffect, "EffectArray", c_playerAny);
            if ((lv_maxArrayValue > 0)) {
                auto612141EB_ae = (lv_maxArrayValue-1);
                lv_itArray = 0;
                for ( ; ( (auto612141EB_ai >= 0 && lv_itArray <= auto612141EB_ae) || (auto612141EB_ai < 0 && lv_itArray >= auto612141EB_ae) ) ; lv_itArray += auto612141EB_ai ) {
                    lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, lv_itEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                    CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), c_playerAny));
                }
            }

        }

    }

}

void libGame_gf_QuestTokenCompleteQuestOnPlayerHeroUnit (string lp_tokenCounterBehavior, int lp_player, bool lp_ignoreQuestEvents) {
    // Variable Declarations
    unit lv_hero;
    int lv_index;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gv_players[lp_player].lv_heroUnit;

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == true) && (lv_hero != null)) {
    }
    else {
        return ;
    }
    lv_index = libCore_gf_TokenTokenCounterIndex(lp_tokenCounterBehavior);
    if ((lv_index <= 0)) {
        return ;
    }

    if ((libCore_gv_tokenCounterData[lv_index].lv_isQuest == false)) {
        return ;
    }

    if ((libCore_gv_tokenCounterData[lv_index].lv_optionSuppressQuestCompleteCheat == true)) {
        return ;
    }

    if ((libCore_gv_tokenCounterData[lv_index].lv_type == "Limited")) {
        lv_amount = libGame_gf_TokenCounterGetTargetTokenCount(lp_tokenCounterBehavior);
    }
    else if ((libCore_gv_tokenCounterData[lv_index].lv_type == "Unlimited")) {
        lv_amount = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
        lv_amount += libCore_gv_tokenCounterDataDEBUGUnlimitedAmount;
    }
    else if ((libCore_gv_tokenCounterData[lv_index].lv_type == "UnlimitedTargetCount")) {
        if ((libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player) < libCore_gv_tokenCounterData[lv_index].lv_targetAmount)) {
            lv_amount = libGame_gf_TokenCounterGetTargetTokenCount(lp_tokenCounterBehavior);
        }
        else {
            if ((libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player) < libCore_gv_tokenCounterData[lv_index].lv_maxAmount)) {
                lv_amount = libGame_gf_TokenCounterGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
                lv_amount += libCore_gv_tokenCounterDataDEBUGUnlimitedAmount;
            }
            else {
                return ;
            }
        }
    }
    libGame_gf_TokenCounterModifyTokenForPlayer(c_upgradeOperationSet, lv_amount, lp_tokenCounterBehavior, lv_index, lp_player, libGame_gv_players[lp_player].lv_heroUnit, libGame_gv_players[lp_player].lv_heroUnit, lp_ignoreQuestEvents);
}

void libGame_gf_QuestTokenCompleteQuestsOnPlayerHeroUnit (int lp_player) {
    // Variable Declarations
    string lv_itBehavior;

    // Automatic Variable Declarations
    unit auto8A42C6D1_u;
    int auto8A42C6D1_i;

    // Variable Initialization

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == true) && (libGame_gv_players[lp_player].lv_heroUnit != null)) {
    }
    else {
        return ;
    }
    auto8A42C6D1_u = libGame_gv_players[lp_player].lv_heroUnit;
    auto8A42C6D1_i = 1;
    for ( ; auto8A42C6D1_i <= UnitBehaviorCountAll(auto8A42C6D1_u) ; auto8A42C6D1_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(auto8A42C6D1_u, auto8A42C6D1_i)) ) {
        lv_itBehavior = UnitBehaviorGet(auto8A42C6D1_u, auto8A42C6D1_i);
        libGame_gf_QuestTokenCompleteQuestOnPlayerHeroUnit(lv_itBehavior, lp_player, false);
    }
}

void libGame_gf_TurnOnOffTownDestructionRemovesCoreInvulnerable (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_townDestructionRemovesCoreInvulnerable = true;
    }
    else {
        libGame_gv_townDestructionRemovesCoreInvulnerable = false;
    }
}

void libGame_gf_TownAddStructureToTownArray (int lp_townIndex, unit lp_structureUnit, int lp_structurePresetValue, int lp_enemyTeam) {
    // Variable Declarations
    int lv_structureIndex;

    // Automatic Variable Declarations
    int auto848C22CC_val;

    // Variable Initialization

    // Implementation
    if ((lp_structurePresetValue == libGame_ge_TownStructureTypes_None)) {
        return ;
    }

    libGame_gv_townTownData[lp_townIndex].lv_structureCount += 1;
    lv_structureIndex = libGame_gv_townTownData[lp_townIndex].lv_structureCount;
    UnitSetCustomValue(lp_structureUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownIndex), lp_townIndex);
    UnitSetCustomValue(lp_structureUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownStructureIndex), lv_structureIndex);
    libGame_gv_townTownData[lp_townIndex].lv_structureTypes[lv_structureIndex] = lp_structurePresetValue;
    libGame_gv_townTownData[lp_townIndex].lv_structureUnits[lv_structureIndex] = lp_structureUnit;
    libGame_gv_townTownData[lp_townIndex].lv_structureUnitIDs[lv_structureIndex] = UnitGetType(lp_structureUnit);
    libGame_gv_townTownData[lp_townIndex].lv_structureSpawnPoints[lv_structureIndex] = UnitGetPosition(lp_structureUnit);
    auto848C22CC_val = lp_structurePresetValue;
    if (auto848C22CC_val == libGame_ge_TownStructureTypes_TownHall) {
        libGame_gv_townTownData[lp_townIndex].lv_townHallIndex = lv_structureIndex;
        libGame_gv_townTownData[lp_townIndex].lv_townHallPosition = UnitGetPosition(lp_structureUnit);
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_CannonTower) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_Gate) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_Moonwell) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else {
    }
}

int libGame_gf_TownGetTownForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_TownIndex, lp_unit);
}

int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownStructureIndex)));
}

int libGame_gf_TownGetTownStructurePresetFromUnit (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCannonTower) == true)) {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCore) == true)) {
        return libGame_ge_TownStructureTypes_Core;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureGate) == true)) {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureMoonwell) == true)) {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureTownHall) == true)) {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureWall) == true)) {
        return libGame_ge_TownStructureTypes_Wall;
    }
    return libGame_ge_TownStructureTypes_None;
}

int libGame_gf_TownGetTownHallPresetOfUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "TownL2") == true)) {
        return libGame_ge_TownHallTypes_FrontTown;
    }
    else if ((UnitHasBehavior2(lp_unit, "TownL3") == true)) {
        return libGame_ge_TownHallTypes_BackTown;
    }
    return libGame_ge_TownHallTypes_None;
}

int libGame_gf_TownGetTownFromPoint (point lp_point) {
    // Variable Declarations
    int lv_town;

    // Automatic Variable Declarations
    int auto4EBC5822_ae;
    const int auto4EBC5822_ai = 1;

    // Variable Initialization

    // Implementation
    auto4EBC5822_ae = libGame_gv_townTownCount;
    lv_town = 1;
    for ( ; ( (auto4EBC5822_ai >= 0 && lv_town <= auto4EBC5822_ae) || (auto4EBC5822_ai < 0 && lv_town >= auto4EBC5822_ae) ) ; lv_town += auto4EBC5822_ai ) {
        if ((RegionContainsPoint(libGame_gv_townTownData[lv_town].lv_townRegion, lp_point) == true)) {
            return lv_town;
        }

    }
    return 0;
}

bool libGame_gf_TownTownIsAlive (int lp_town, int lp_player) {
    // Variable Declarations
    unitgroup lv_buildings;
    unit lv_itBuilding;

    // Automatic Variable Declarations
    unitgroup autoEA0CE0DE_g;
    int autoEA0CE0DE_u;

    // Variable Initialization
    lv_buildings = UnitGroupEmpty();

    // Implementation
    lv_buildings = UnitGroup(null, lp_player, libGame_gv_townTownData[lp_town].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA0CE0DE_g = lv_buildings;
    autoEA0CE0DE_u = UnitGroupCount(autoEA0CE0DE_g, c_unitCountAll);
    for (;; autoEA0CE0DE_u -= 1) {
        lv_itBuilding = UnitGroupUnitFromEnd(autoEA0CE0DE_g, autoEA0CE0DE_u);
        if (lv_itBuilding == null) { break; }
        if (((UnitHasBehavior2(lv_itBuilding, "TownDeadController@DeadBehavior") == true) || (UnitHasBehavior2(lv_itBuilding, "TownCannonTowerInvulnerable") == true))) {
            UnitGroupRemove(lv_buildings, lv_itBuilding);
        }

    }
    return !(libNtve_gf_UnitGroupIsDead(lv_buildings));
}

unit libGame_gf_TownTownHall (int lp_town) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_townTownData[lp_town].lv_structureUnits[libGame_gv_townTownData[lp_town].lv_townHallIndex];
}

bool libGame_gf_TownTownHallIsAlive (int lp_townIndex) {
    // Variable Declarations
    unit lv_townUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townUnit = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[libGame_gv_townTownData[lp_townIndex].lv_townHallIndex];

    // Implementation
    if (((UnitIsAlive(lv_townUnit) == false) || (UnitHasBehavior2(lv_townUnit, "TownDeadController@DeadBehavior") == true))) {
        return false;
    }

    return true;
}

void libGame_gf_oldTownAnnounceTownDestroyed (unit lp_fortKeep) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_fortKeep) == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLORAllyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
    }
    else {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLOREnemyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
    }
}

void libGame_gf_TownUpdateMoonwellIcon (int lp_townIndex) {
    // Variable Declarations
    int lv_itStructure;
    unit lv_townHall;
    unit lv_moonwell;

    // Automatic Variable Declarations
    int autoF6EFF2AA_ae;
    const int autoF6EFF2AA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_townHall = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[libGame_gv_townTownData[lp_townIndex].lv_townHallIndex];
    autoF6EFF2AA_ae = libGame_gv_townTownData[lp_townIndex].lv_structureCount;
    lv_itStructure = 1;
    for ( ; ( (autoF6EFF2AA_ai >= 0 && lv_itStructure <= autoF6EFF2AA_ae) || (autoF6EFF2AA_ai < 0 && lv_itStructure >= autoF6EFF2AA_ae) ) ; lv_itStructure += autoF6EFF2AA_ai ) {
        if ((libGame_gv_townTownData[lp_townIndex].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_Moonwell)) {
            lv_moonwell = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[lv_itStructure];
            break;
        }

    }
    if ((libGame_gf_TownTownHallIsAlive(lp_townIndex) == true)) {
        if ((UnitIsAlive(lv_moonwell) == true)) {
            UnitBehaviorRemove(lv_moonwell, "MoonwellSelf", 1);
            if ((UnitGetOwner(lv_townHall) == libCore_gv_cOMPUTER_TeamOrder)) {
                UnitBehaviorAdd(lv_townHall, "MoonwellLeft", lv_townHall, 1);
                UnitBehaviorRemove(lv_townHall, "MoonwellRight", 1);
            }
            else {
                UnitBehaviorAdd(lv_townHall, "MoonwellRight", lv_townHall, 1);
                UnitBehaviorRemove(lv_townHall, "MoonwellLeft", 1);
            }
        }
        else {
            UnitBehaviorRemove(lv_townHall, "MoonwellRight", 1);
            UnitBehaviorRemove(lv_townHall, "MoonwellLeft", 1);
        }
    }
    else {
        UnitKill(lv_moonwell);
        if ((UnitIsAlive(lv_moonwell) == true)) {
            UnitBehaviorAdd(lv_moonwell, "MoonwellSelf", lv_moonwell, 1);
        }

    }
}

void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType) {
    // Variable Declarations
    int lv_townHallIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_townHallIndex = libGame_gv_townTownData[lp_town].lv_townHallIndex;
    if ((lv_townHallIndex < 0)) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Fort_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLORAllyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        if ((lp_townType == libGame_ge_TownHallTypes_FrontTown)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
    }
    else {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLOREnemyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        if ((lp_townType == libGame_ge_TownHallTypes_FrontTown)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
    }
}

void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner) {
    // Variable Declarations
    int lv_player;
    int lv_pillarUnits;

    // Automatic Variable Declarations
    playergroup auto706756FD_g;

    // Variable Initialization

    // Implementation
    if ((lp_newOwner == libCore_gv_cOMPUTER_Neutral)) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStop Capture");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStart Capture Stand,Work,Start Stand,Work Stand,Work,End");
    }
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, lp_newOwner, true);
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_captureBeaconUnit, lp_newOwner, true);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "Signal ActiveSoundTog");
    Wait(0.125, c_timeGame);
    auto706756FD_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto706756FD_g, lv_player);
        if (lv_player < 0) { break; }
        VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), 0.75), 0.75, false);
    }
}

int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_WatchTowerIndex)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_IncludeGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_IncludeGame_Init () {
    libGame_gt_IncludeGame = TriggerCreate("libGame_gt_IncludeGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Players
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializePlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_itTeamSlot;
    string lv_itAlert;
    int lv_enemyTeam;
    bool lv_playerFound;
    int lv_itGameSlotPlayer;

    // Automatic Variable Declarations
    playergroup autoA69269CE_g;
    playergroup auto5419114F_g;
    const int auto67479088_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto67479088_ai = 1;
    const int auto5744E368_ae = libCore_gv_bALMaxTeams;
    const int auto5744E368_ai = 1;
    playergroup auto6C01FB04_g;
    const int auto6B8B9B44_ae = libCore_gv_bALMaxTeams;
    const int auto6B8B9B44_ai = 1;
    playergroup autoBE197355_g;
    const int autoBA605B80_ae = libCore_gv_bALMaxTeams;
    const int autoBA605B80_ai = 1;
    const int auto1FB2D897_ae = libCore_gv_bALMaxTeams;
    const int auto1FB2D897_ai = 1;
    playergroup auto9F2BB521_g;
    const int auto31FC6729_ae = libCore_gv_bALMaxTeams;
    const int auto31FC6729_ai = 1;
    playergroup auto284E88AB_g;
    const int auto0E316302_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto0E316302_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_BNetGrabberInitialization, true, true);
    TriggerExecute(libGame_gt_AvatarGrabberInitialization, true, true);
    autoA69269CE_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA69269CE_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerSetRace(lv_itPlayer, "Neut");
    }
    auto5419114F_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5419114F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerSetRace(lv_itPlayer, "Prot");
        PlayerSetCommander(lv_itPlayer, "RotSCommander");
    }

    lv_itPlayer = 0;
    for ( ; ( (auto67479088_ai >= 0 && lv_itPlayer <= auto67479088_ae) || (auto67479088_ai < 0 && lv_itPlayer >= auto67479088_ae) ) ; lv_itPlayer += auto67479088_ai ) {
        PlayerSetState(lv_itPlayer, c_playerStateShowWorldTip, false);
        if ((PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            libGame_gv_players[lv_itPlayer].lv_playerName = PlayerName(lv_itPlayer);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_E140BF8A", "A", IntToText(lv_itPlayer));
            libGame_gv_players[lv_itPlayer].lv_playerName = TextExpressionAssemble("Param/Expression/lib_Game_E140BF8A");
        }
    }
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamChaos;
    lv_itTeam = 1;
    for ( ; ( (auto5744E368_ai >= 0 && lv_itTeam <= auto5744E368_ae) || (auto5744E368_ai < 0 && lv_itTeam >= auto5744E368_ae) ) ; lv_itTeam += auto5744E368_ai ) {
        lv_itTeamSlot = 0;
        auto6C01FB04_g = libGame_gv_mTMLGameSetupData.lv_teamPlayers[lv_itTeam];
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto6C01FB04_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_itGameSlotPlayer += 1;
            lv_itTeamSlot += 1;
            if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
                libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_Faction_Order;
                libGame_gv_players[lv_itPlayer].lv_rosterSlot = (lv_itTeamSlot + 0);
                libGame_gv_players[lv_itPlayer].lv_gameSlot = lv_itGameSlotPlayer;
            }
            else if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
                libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_Faction_Chaos;
                libGame_gv_players[lv_itPlayer].lv_rosterSlot = (lv_itTeamSlot + libCore_gv_bALMaxPlayersOnATeam);
                libGame_gv_players[lv_itPlayer].lv_gameSlot = lv_itGameSlotPlayer;
            }
            libGame_gv_players[lv_itPlayer].lv_spawnPoint = PlayerStartLocation(libGame_gv_players[lv_itPlayer].lv_rosterSlot);
            libGame_gv_players[lv_itPlayer].lv_playerStatus = libGame_ge_PlayerStatusStorm_ChoosingaHero;
            libGame_gv_players[lv_itPlayer].lv_team = lv_itTeam;
            libGame_gv_players[lv_itPlayer].lv_allySlot = lv_itTeamSlot;
            libGame_gv_teams[lv_itTeam].lv_teamActivePlayersCount += 1;
            TechTreeUpgradeAddLevel(lv_itPlayer, "IsHeroPlayer", 1);
            PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, lv_itPlayer);
            PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itPlayer);
            PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObservers, lv_itPlayer);
            PlayerGroupAdd(libCore_gv_allHeroPlayers, lv_itPlayer);
            if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
                PlayerGroupAdd(libCore_gv_activeHumanPlayers, lv_itPlayer);
            }

            PlayerOptionOverride(lv_itPlayer, "showalerts", "0");
            PlayerOptionOverride(lv_itPlayer, "buildgridhint", "1");
            PlayerOptionOverride(lv_itPlayer, "showworkerstatus", "0");
            PlayerOptionOverride(lv_itPlayer, "simplecommandcard", "0");
            PlayerOptionOverride(lv_itPlayer, "showcurrentordermodel", "1");
            PlayerOptionOverride(lv_itPlayer, "selectallconjoined", "0");
            PlayerOptionOverride(lv_itPlayer, "displayflyerhelper", "0");
            UIFlyerHelperOverride(PlayerGroupAll(), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
            PlayerOptionOverride(lv_itPlayer, "showunitpoints", "0");
            PlayerOptionOverride(lv_itPlayer, "displayunitstatus", "All");
            PlayerOptionOverride(lv_itPlayer, "gametooltips", "0");
            PlayerSetState(lv_itPlayer, c_playerStateFidgetingEnabled, false);
            PlayerSetState(lv_itPlayer, c_playerStateDisplayGameResult, false);
            PlayerOptionOverride(lv_itPlayer, "teamcoloredlifestatus", "0");
            CameraPan(lv_itPlayer, Point(0.0, 0.0), 0.0625, -1, 0.0, false);
            CameraUseHeightDisplacement(lv_itPlayer, false);
            CameraLockInput(lv_itPlayer, true);
            VisExploreArea(lv_itPlayer, RegionEntireMap(), true, false);
            libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 0.0);
        }
    }
    if ((PlayerGroupCount(libCore_gv_activeHumanPlayers) == 1)) {
        libGame_gv_pLAYERSoloMode = true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto6B8B9B44_ai >= 0 && lv_itTeam <= auto6B8B9B44_ae) || (auto6B8B9B44_ai < 0 && lv_itTeam >= auto6B8B9B44_ae) ) ; lv_itTeam += auto6B8B9B44_ai ) {
        PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeam].lv_nPCPlayer);
        VisRevealerCreate(libGame_gv_teams[lv_itTeam].lv_nPCPlayer, libGame_gv_teams[lv_itTeam].lv_baseRegion);
        libGame_gv_teams[lv_itTeam].lv_baseRevealer = VisRevealerLastCreated();
        libGame_gv_players[libGame_gv_teams[lv_itTeam].lv_nPCPlayer].lv_team = lv_itTeam;
        autoBE197355_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoBE197355_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libNtve_gf_SetAlliance(libGame_gv_teams[lv_itTeam].lv_nPCPlayer, lv_itPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }
    }
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_faction = libGame_ge_Faction_Order;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_faction = libGame_ge_Faction_Chaos;
    lv_itTeam = 1;
    for ( ; ( (autoBA605B80_ai >= 0 && lv_itTeam <= autoBA605B80_ae) || (autoBA605B80_ai < 0 && lv_itTeam >= autoBA605B80_ae) ) ; lv_itTeam += autoBA605B80_ai ) {
        lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam);
        libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamChaos, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamChaos);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Hostile);
    lv_itTeam = 1;
    for ( ; ( (auto1FB2D897_ai >= 0 && lv_itTeam <= auto1FB2D897_ae) || (auto1FB2D897_ai < 0 && lv_itTeam >= auto1FB2D897_ae) ) ; lv_itTeam += auto1FB2D897_ai ) {
        auto9F2BB521_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto9F2BB521_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, lv_itPlayer, libNtve_ge_AllianceSetting_Enemy);
        }
    }

    lv_itTeam = 1;
    for ( ; ( (auto31FC6729_ai >= 0 && lv_itTeam <= auto31FC6729_ae) || (auto31FC6729_ai < 0 && lv_itTeam >= auto31FC6729_ae) ) ; lv_itTeam += auto31FC6729_ai ) {
        auto284E88AB_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto284E88AB_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_itPlayer);
        }
    }
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    lv_itPlayer = 0;
    for ( ; ( (auto0E316302_ai >= 0 && lv_itPlayer <= auto0E316302_ae) || (auto0E316302_ai < 0 && lv_itPlayer >= auto0E316302_ae) ) ; lv_itPlayer += auto0E316302_ai ) {
        MeleeSetOption(lv_itPlayer, c_meleeOptionSplitResources, false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, (("IsPlayer" + libCore_gf_ConvertIntegerToStringDigit(lv_itPlayer, 2))), 1);
        PlayerAddResponse(lv_itPlayer, "HeroGenericDisabler@BasicAttack");
        PlayerAddResponse(lv_itPlayer, "HeroGenericDisabler@SpellDamage");
        PlayerAddResponse(lv_itPlayer, "HeroGenericDisabler@TrueDamage");
        if ((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, lv_itPlayer) == true)) {
            PlayerAddResponse(lv_itPlayer, "HeroGenericExperience@LastHitTimerResponseSpell");
            PlayerAddResponse(lv_itPlayer, "HeroGenericExperience@LastHitTimerResponsePhysical");
            PlayerAddResponse(lv_itPlayer, "HeroGenericExperience@LastHitTimerResponseTrue");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializePlayers_Init () {
    libGame_gt_InitializePlayers = TriggerCreate("libGame_gt_InitializePlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Systems
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeGameSystems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_InitializeCodeLaneSystem, true, true);
    // libGame_gt_StartGame
    TriggerExecute(libGame_gt_InitializeWatchTowers, true, true);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    TriggerExecute(libMapM_gt_InitializeJungleCamps, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeGameSystems_Init () {
    libGame_gt_InitializeGameSystems = TriggerCreate("libGame_gt_InitializeGameSystems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Crit User Data
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsCritUserData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_key;
    fixed lv_currentValue;
    int lv_casterPlayer;
    unit lv_targetUnit;
    string lv_effect;

    // Automatic Variable Declarations
    string auto6D625118_val;

    // Variable Initialization
    lv_key = "";
    lv_effect = EventPlayerEffectUsed();

    // Actions
    if (!runActions) {
        return true;
    }

    // libCore_gt_InitializeUserDataEffectsSpecificEffects
    auto6D625118_val = CatalogEntryParent(c_gameCatalogEffect, lv_effect);
    if (auto6D625118_val == "StormCriticalStatusIncrementer") {
        lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    }
    else if (auto6D625118_val == "StormCriticalStatusIncrementerCaster") {
        lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    }
    else {
        return true;
    }
    lv_casterPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_key = CatalogFieldValueGet(c_gameCatalogEffect, lv_effect, "Key", lv_casterPlayer);
    Wait(0.0, c_timeGame);
    lv_currentValue = libGame_gf_UnitStatsGetUserDataFromUnit(lv_key, lv_targetUnit);
    lv_currentValue -= 1.0;
    if ((lv_currentValue < 0.0)) {
        lv_currentValue = 0.0;
    }

    libGame_gf_UnitStatsStoreUserDataToUnit(lv_targetUnit, lv_key, lv_currentValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsCritUserData_Init () {
    libGame_gt_UnitStatsCritUserData = TriggerCreate("libGame_gt_UnitStatsCritUserData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Damage Prevented
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsDamagePrevented_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itBehavior;
    int lv_itPlayer;
    bool[libCore_gv_bALMaxEnginePlayerCount + 1] lv_player;
    fixed lv_amount;

    // Automatic Variable Declarations
    unit auto5A0ACB3F_u;
    int auto5A0ACB3F_i;
    const int auto45D706E2_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto45D706E2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A0ACB3F_u = EventUnit();
    auto5A0ACB3F_i = 1;
    for ( ; auto5A0ACB3F_i <= UnitBehaviorCountAll(auto5A0ACB3F_u) ; auto5A0ACB3F_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(auto5A0ACB3F_u, auto5A0ACB3F_i)) ) {
        lv_itBehavior = UnitBehaviorGet(auto5A0ACB3F_u, auto5A0ACB3F_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagPhysical) == true)) {
            lv_player[UnitBehaviorEffectPlayer(EventUnit(), lv_itBehavior, c_effectPlayerCaster, 0)] = true;
        }

    }
    lv_itPlayer = 0;
    for ( ; ( (auto45D706E2_ai >= 0 && lv_itPlayer <= auto45D706E2_ae) || (auto45D706E2_ai < 0 && lv_itPlayer >= auto45D706E2_ae) ) ; lv_itPlayer += auto45D706E2_ai ) {
        if ((lv_player[lv_itPlayer] == false)) {
            lv_amount = UnitBehaviorEffectTreeUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " DamagePrevented"));
            if ((lv_amount > 0.0)) {
                UnitBehaviorEffectTreeSetUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " DamagePrevented"), 0.0);
                libGame_gf_SendEventHeroDamagePrevented(EventUnit(), lv_amount, lv_itPlayer);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsDamagePrevented_Init () {
    libGame_gt_UnitStatsDamagePrevented = TriggerCreate("libGame_gt_UnitStatsDamagePrevented_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsDamagePrevented, null, c_unitBehaviorFlagPhysical, c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsDamagePrevented, null, c_unitBehaviorFlagPhysical, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Healing Prevented / Increased
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsHealingPreventedIncreased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_amount;

    // Automatic Variable Declarations
    const int auto1BA7155E_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1BA7155E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_StormBehaviorHasCategory(EventUnitBehavior(), libGame_ge_StormBehaviorCategories_HealReceivedModifying) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (auto1BA7155E_ai >= 0 && lv_itPlayer <= auto1BA7155E_ae) || (auto1BA7155E_ai < 0 && lv_itPlayer >= auto1BA7155E_ae) ) ; lv_itPlayer += auto1BA7155E_ai ) {
        if ((UnitBehaviorEffectTreeUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " HealReceivedMultiplier")) >= 0.0) && (UnitBehaviorEffectTreeUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " HealReducedValue")) > 0.0)) {
            lv_amount = UnitBehaviorEffectTreeUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " HealReducedValue"));
            UnitBehaviorEffectTreeSetUserData(EventUnit(), "HeroGenericUserRecord", ("Player" + IntToString(lv_itPlayer) + " HealReducedValue"), 0.0);
            libGame_gf_SendEventHeroHealPrevented(lv_amount, lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsHealingPreventedIncreased_Init () {
    libGame_gt_UnitStatsHealingPreventedIncreased = TriggerCreate("libGame_gt_UnitStatsHealingPreventedIncreased_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsHealingPreventedIncreased, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Status - Update
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatusUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatusUpdate(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatusUpdate_Init () {
    libGame_gt_UnitStatusUpdate = TriggerCreate("libGame_gt_UnitStatusUpdate_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_UnitStatusUpdate, c_playerAny, "UIForceUpdateUnitStatusStatsDisplay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Status - Update (Behavior)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatusUpdateBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatusUpdate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatusUpdateBehavior_Init () {
    libGame_gt_UnitStatusUpdateBehavior = TriggerCreate("libGame_gt_UnitStatusUpdateBehavior_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatusUpdateBehavior, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announcement - Message Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnouncementMessageTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoAAEA99AD_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAAEA99AD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoAAEA99AD_ai >= 0 && lv_itPlayer <= autoAAEA99AD_ae) || (autoAAEA99AD_ai < 0 && lv_itPlayer >= autoAAEA99AD_ae) ) ; lv_itPlayer += autoAAEA99AD_ai ) {
        if ((EventTimer() == libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer)) {
            libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnouncementMessageTimerExpires_Init () {
    libGame_gt_AnnouncementMessageTimerExpires = TriggerCreate("libGame_gt_AnnouncementMessageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[1].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[2].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[3].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[4].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[5].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[6].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[7].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[8].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[9].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[10].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[11].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[12].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[13].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[14].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[15].lv_messageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;

    // Automatic Variable Declarations
    const int autoE88319BD_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoE88319BD_ai = 1;
    int autoAC6C9A3D_ae;
    const int autoAC6C9A3D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (autoE88319BD_ai >= 0 && lv_itPlayer <= autoE88319BD_ae) || (autoE88319BD_ai < 0 && lv_itPlayer >= autoE88319BD_ae) ) ; lv_itPlayer += autoE88319BD_ai ) {
        if ((libCore_gv_sYSIsGlue == false)) {
            autoAC6C9A3D_ae = libCore_gv_dataHeroesNumberOfHeroes;
            lv_itHero = 1;
            for ( ; ( (autoAC6C9A3D_ai >= 0 && lv_itHero <= autoAC6C9A3D_ae) || (autoAC6C9A3D_ai < 0 && lv_itHero >= autoAC6C9A3D_ae) ) ; lv_itHero += autoAC6C9A3D_ai ) {
                libGame_gf_BankInitializeHeroBankForPlayer(lv_itHero, lv_itPlayer);
            }
        }

    }
    if ((libCore_gv_sYSIsGlue == false)) {
        libGame_gf_MTMLChecking();
        if ((libCore_gv_sYSForceManualMapLaunch == true)) {
            libGame_gf_MTMLLoadBankDataForceManualMapLaunch();
        }
        else {
            libGame_gf_MTMLLoadBankData(libCore_gf_RandomPlayerFromPlayerGroup(PlayerGroupActive()));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBanks_Init () {
    libGame_gt_InitializeBanks = TriggerCreate("libGame_gt_InitializeBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bank - Open Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BankOpenBanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto939D0B5E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto939D0B5E_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto939D0B5E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
            BankLoad("PlayerSettings", lv_itPlayer);
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_playerSettingsBank = BankLastCreated();
            BankLoad("MetaData", lv_itPlayer);
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_metaDataBank = BankLastCreated();
        }

    }
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BankOpenBanks_Init () {
    libGame_gt_BankOpenBanks = TriggerCreate("libGame_gt_BankOpenBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Movement Controller
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesMovementController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_movespeedCurrent;
    fixed lv_movespeedDefault;
    bool lv_isSlowed;
    bool lv_isFast;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_isSlowed = libCore_gf_ExecuteValidatorOnUnit("TargetIsSlowed", lv_unit, lv_unit);
    lv_isFast = libCore_gf_ExecuteValidatorOnUnit("TargetIsFast", lv_unit, lv_unit);
    lv_movespeedCurrent = UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent);
    lv_movespeedDefault = UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropNormal);
    if ((lv_isSlowed == true)) {
        if ((lv_movespeedCurrent >= lv_movespeedDefault)) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck0");
        }
        else if ((lv_movespeedCurrent <= (lv_movespeedDefault / 2.0))) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck2");
        }
        else if (true) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck1");
        }
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck0");
    }
    if ((lv_isFast == true)) {
        if ((UnitHasBehavior2(lv_unit, "HeroGenericMount@Mounted") == false)) {
            if ((lv_movespeedCurrent <= (lv_movespeedDefault * 1.1))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
            }
            else if ((lv_movespeedCurrent > (lv_movespeedDefault * 1.25))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck2");
            }
            else if (true) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck1");
            }
        }
        else {
            if ((lv_movespeedCurrent <= (lv_movespeedDefault * (1.0 + libGame_gv_mountMovespeedBuff)))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
            }
            else if ((lv_movespeedCurrent > (lv_movespeedDefault * (1.0 + libGame_gv_mountMovespeedBuff)))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck2");
            }
        }
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesMovementController_Init () {
    libGame_gt_BehaviorCategoriesMovementController = TriggerCreate("libGame_gt_BehaviorCategoriesMovementController_Func");
    TriggerAddEventUnitProperty(libGame_gt_BehaviorCategoriesMovementController, null, c_unitPropMovementSpeed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Logic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CapturePointLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_captureIncrement = 1;
    unit lv_itUnit;
    int lv_capturePointIndex;
    int lv_orderTeamHeroes;
    int lv_chaosTeamHeroes;
    playergroup lv_capturingPlayers;
    bool lv_hasOverCaptureRegion;
    bool lv_becameFullyCaptured;
    int lv_newOwnerPlayer;

    // Automatic Variable Declarations
    int auto318A7F83_ae;
    const int auto318A7F83_ai = 1;
    unitgroup autoD0047345_g;
    int autoD0047345_u;
    int auto7A18317D_val;
    playergroup auto35C6319C_g;
    int auto35C6319C_var;
    playergroup autoCCFBCF4A_g;
    int autoCCFBCF4A_var;

    // Variable Initialization
    lv_capturingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_capturePointCurrentCount <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    auto318A7F83_ae = libGame_gv_capturePointCurrentCount;
    lv_capturePointIndex = 1;
    for ( ; ( (auto318A7F83_ai >= 0 && lv_capturePointIndex <= auto318A7F83_ae) || (auto318A7F83_ai < 0 && lv_capturePointIndex >= auto318A7F83_ae) ) ; lv_capturePointIndex += auto318A7F83_ai ) {
        if ((UnitHasBehavior2(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "DisableBeaconBuff") == true)) {
            continue;
        }

        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_enabled == false)) {
            continue;
        }

        lv_orderTeamHeroes = 0;
        lv_chaosTeamHeroes = 0;
        autoD0047345_g = UnitGroup(null, c_playerAny, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion, libCore_gv_filtersHeroic, 0);
        autoD0047345_u = UnitGroupCount(autoD0047345_g, c_unitCountAll);
        for (;; autoD0047345_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoD0047345_g, autoD0047345_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorAdd(lv_itUnit, "HeroGenericHeroOnCapturePoint", lv_itUnit, 1);
            if (((UnitFilterMatch(lv_itUnit, UnitGetOwner(lv_itUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true) || ((UnitHasBehavior2(lv_itUnit, "CapturePointAllowed") == true) && (libCore_gf_StormUnitIsHallucination(lv_itUnit) == false)))) {
                if ((libGame_gv_players[UnitGetOwner(lv_itUnit)].lv_faction == libGame_ge_Faction_Order)) {
                    lv_orderTeamHeroes += 1;
                }
                else {
                    lv_chaosTeamHeroes += 1;
                }
                PlayerGroupAdd(lv_capturingPlayers, UnitGetOwner(lv_itUnit));
            }

        }
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_decayToOwner == true)) {
            auto7A18317D_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
            if (auto7A18317D_val == libCore_gv_cOMPUTER_TeamOrder) {
                if ((lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_TeamChaos) {
                if ((lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_Neutral) {
                if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    }

                }

            }
            else {
            }
        }

        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + lv_captureIncrement) >= libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints;
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
            }
        }

        if ((lv_chaosTeamHeroes > 0) && (lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter - lv_captureIncrement) <= (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints);
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
            }
        }

        libNtve_gf_SetDialogItemCurrentValue(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureProgressBar, (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints), PlayerGroupAll());
        if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Neutral) && (((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == false) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1)) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Neutral, 0, lv_capturingPlayers);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
            auto35C6319C_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers;
            auto35C6319C_var = -1;
            while (true) {
                auto35C6319C_var = PlayerGroupNextPlayer(auto35C6319C_g, auto35C6319C_var);
                if (auto35C6319C_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = auto35C6319C_var;
                    break;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamOrder, lv_newOwnerPlayer, lv_capturingPlayers);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
            autoCCFBCF4A_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers;
            autoCCFBCF4A_var = -1;
            while (true) {
                autoCCFBCF4A_var = PlayerGroupNextPlayer(autoCCFBCF4A_g, autoCCFBCF4A_var);
                if (autoCCFBCF4A_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = autoCCFBCF4A_var;
                    break;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamChaos, lv_newOwnerPlayer, lv_capturingPlayers);
        }
        lv_hasOverCaptureRegion = (libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture);
        if ((lv_becameFullyCaptured == true) && (lv_hasOverCaptureRegion == true)) {
            libGame_gf_SendEventCapturePointBecomesFullyOverCaptured(lv_capturePointIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CapturePointLogic_Init () {
    libGame_gt_CapturePointLogic = TriggerCreate("libGame_gt_CapturePointLogic_Func");
    TriggerEnable(libGame_gt_CapturePointLogic, false);
    TriggerAddEventTimePeriodic(libGame_gt_CapturePointLogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DimCapturePoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCapturePointIndex;

    // Automatic Variable Declarations
    const int autoC075120A_ae = libGame_gv_capturePointMaxCount_C;
    const int autoC075120A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itCapturePointIndex = 1;
    for ( ; ( (autoC075120A_ai >= 0 && lv_itCapturePointIndex <= autoC075120A_ae) || (autoC075120A_ai < 0 && lv_itCapturePointIndex >= autoC075120A_ae) ) ; lv_itCapturePointIndex += autoC075120A_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSetAnimationState(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureProgressBarDimmingFrame, PlayerGroupAll(), "IsDim", "DimmedOn");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "SetTintColor 35,35,35 0.000000 OneShot VoidPrisonTint");
            libCore_gf_SendActorMessageToDoodadsInRegion("Signal PauseCapturePoint", null, RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DimCapturePoint_Init () {
    libGame_gt_DimCapturePoint = TriggerCreate("libGame_gt_DimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_DimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnDim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnDimCapturePoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCapturePointIndex;

    // Automatic Variable Declarations
    const int auto34124284_ae = libGame_gv_capturePointMaxCount_C;
    const int auto34124284_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itCapturePointIndex = 1;
    for ( ; ( (auto34124284_ai >= 0 && lv_itCapturePointIndex <= auto34124284_ae) || (auto34124284_ai < 0 && lv_itCapturePointIndex >= auto34124284_ae) ) ; lv_itCapturePointIndex += auto34124284_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSetAnimationState(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureProgressBarDimmingFrame, PlayerGroupAll(), "IsDim", "DimmedOff");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "ClearTintColor 0.000000 VoidPrisonTint");
            libCore_gf_SendActorMessageToDoodadsInRegion("Signal UnPauseCapturePoint", null, RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnDimCapturePoint_Init () {
    libGame_gt_UnDimCapturePoint = TriggerCreate("libGame_gt_UnDimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_UnDimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Is Under Attack NEW
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreIsUnderAttackNEW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeamNumber;
    int lv_enemyTeamNumber;
    unitgroup lv_enemiesNearCore;

    // Automatic Variable Declarations
    const int auto18A732C2_ae = libCore_gv_bALMaxTeams;
    const int auto18A732C2_ai = 1;

    // Variable Initialization
    lv_enemiesNearCore = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gv_towerMapPlaysCoreWarning == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeamNumber = 1;
    for ( ; ( (auto18A732C2_ai >= 0 && lv_itTeamNumber <= auto18A732C2_ae) || (auto18A732C2_ai < 0 && lv_itTeamNumber >= auto18A732C2_ae) ) ; lv_itTeamNumber += auto18A732C2_ai ) {
        lv_enemyTeamNumber = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeamNumber);
        if ((libGame_gv_teams[lv_itTeamNumber].lv_core != null)) {
            if ((UnitHasBehavior2(libGame_gv_teams[lv_itTeamNumber].lv_core, "CoreInvulnerability") == true)) {
                if ((libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] == true)) {
                    PingDestroy(libGame_gv_towerTeamCoreAlertPing[lv_itTeamNumber]);
                    libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning(lv_itTeamNumber, false);
                    libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] = false;
                }

                continue;
            }

            lv_enemiesNearCore = UnitGroupSearch(null, UnitGetOwner(libGame_gv_teams[lv_itTeamNumber].lv_core), UnitGetPosition(libGame_gv_teams[lv_itTeamNumber].lv_core), libGame_gv_towerCoreUnderAttackScanRange, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] == true)) {
                if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersHeroicjustexcludingCloakedandDead, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersMercLaner, 0), c_unitCountAlive) == 0) && (libCore_gf_DataUnitGroupHasMinionType(libCore_ge_MinionType_Catapult, lv_enemiesNearCore) == false)) {
                    PingDestroy(libGame_gv_towerTeamCoreAlertPing[lv_itTeamNumber]);
                    libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning(lv_itTeamNumber, false);
                    libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] = false;
                }
                else {
                    if ((TimerGetRemaining(libGame_gv_towerTeamCoreAlertCooldownTimer[lv_itTeamNumber]) <= 0.0)) {
                        TimerStart(libGame_gv_towerTeamCoreAlertCooldownTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertMinTime, false, c_timeGame);
                        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lv_itTeamNumber, false), libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                    }

                }
            }
            else {
                if (((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersHeroicjustexcludingCloakedandDead, 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersMercLaner, 0), c_unitCountAlive) > 0) || (libCore_gf_DataUnitGroupHasMinionType(libCore_ge_MinionType_Catapult, lv_enemiesNearCore) == true))) {
                    libGame_gf_TowerCreateCoreUnderAttackPing(libGame_gv_teams[lv_itTeamNumber].lv_core, lv_itTeamNumber);
                    libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning(lv_itTeamNumber, true);
                    libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] = true;
                    if ((TimerGetRemaining(libGame_gv_towerTeamCoreAlertCooldownTimer[lv_itTeamNumber]) <= 0.0)) {
                        TimerStart(libGame_gv_towerTeamCoreAlertCooldownTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertMinTime, false, c_timeGame);
                        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lv_itTeamNumber, false), libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                    }

                }

            }
        }

    }
    TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreIsUnderAttackNEW_Init () {
    libGame_gt_TowerCoreIsUnderAttackNEW = TriggerCreate("libGame_gt_TowerCoreIsUnderAttackNEW_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreIsUnderAttackNEW, libGame_gv_towerMainCoreAlertTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Has Taken Damage
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreHasTakenDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_teamUnderAttack;
    timer lv_teamAlertTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_teamUnderAttack = PlayerGroupEmpty();
    lv_teamAlertTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIPartyFrameShowHideCoreHealth(true);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "PalaceDamageResponseController", 1);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "PalaceDamageResponseController", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreHasTakenDamage_Init () {
    libGame_gt_TowerCoreHasTakenDamage = TriggerCreate("libGame_gt_TowerCoreHasTakenDamage_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerCoreHasTakenDamage, c_playerAny, "PalaceDamageResponseDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Slow
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSlow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSlow_Init () {
    libGame_gt_CCRecognitionSlow = TriggerCreate("libGame_gt_CCRecognitionSlow_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSlow, null, c_unitBehaviorFlagSlow, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSlow, null, c_unitBehaviorFlagSlow, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Root
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionRoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true) && (libCore_gf_StormUnitIsHallucination(EventUnit()) == false)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), UnitGetOwner(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionRoot_Init () {
    libGame_gt_CCRecognitionRoot = TriggerCreate("libGame_gt_CCRecognitionRoot_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_unitBehaviorFlagUser6, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stun
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
        if ((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0)) {
            libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), UnitGetOwner(EventUnit()));
        }

        if (((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit) || (EventUnit() == libGame_gv_players[EventPlayer()].lv_activeVehicle))) {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(EventPlayer(), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStun_Init () {
    libGame_gt_CCRecognitionStun = TriggerCreate("libGame_gt_CCRecognitionStun_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Silenced
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSilenced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
        if ((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0)) {
            libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), UnitGetOwner(EventUnit()));
        }

        if (((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit) || (EventUnit() == libGame_gv_players[EventPlayer()].lv_activeVehicle))) {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(EventPlayer(), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSilenced_Init () {
    libGame_gt_CCRecognitionSilenced = TriggerCreate("libGame_gt_CCRecognitionSilenced_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSilenced, null, c_unitBehaviorFlagUser7, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSilenced, null, c_unitBehaviorFlagUser7, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Damage Taken
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGame_gv_heroes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectInHistoryForUnit(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageAmount(), EventUnitDamageAttempted(), EventUnitDamageBehaviorShield(), libGame_ge_EffectHistoryDamagedOrHealed_Damaged, EventUnitDamageEffect(), "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryDamageTaken_Init () {
    libGame_gt_EffectHistoryDamageTaken = TriggerCreate("libGame_gt_EffectHistoryDamageTaken_Func");
    TriggerAddEventUnitDamaged(libGame_gt_EffectHistoryDamageTaken, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Damage Taken (Fatal)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryDamageTakenFatal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGame_gv_heroes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectInHistoryForUnit(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageAmount(), EventUnitDamageAttempted(), EventUnitDamageBehaviorShield(), libGame_ge_EffectHistoryDamagedOrHealed_Damaged, EventUnitDamageEffect(), "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryDamageTakenFatal_Init () {
    libGame_gt_EffectHistoryDamageTakenFatal = TriggerCreate("libGame_gt_EffectHistoryDamageTakenFatal_Func");
    TriggerAddEventUnitDamaged(libGame_gt_EffectHistoryDamageTakenFatal, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Healed
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryHealed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGame_gv_players[EventPlayer()].lv_heroUnitGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExist(c_gameCatalogEffect, EventUnitHealEffect(), "StormFlag IgnoredByEffectHistory") == false))) {
            return false;
        }

        if (!((EventUnitHealAmount() > 0.0))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGenericPhysicalLeechHeal"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGenericSpellLeechHeal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectInHistoryForUnit(EventUnitHealLaunchUnit(), EventUnit(), EventUnitHealAmount(), 0.0, 0.0, libGame_ge_EffectHistoryDamagedOrHealed_Healed, EventUnitHealEffect(), "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryHealed_Init () {
    libGame_gt_EffectHistoryHealed = TriggerCreate("libGame_gt_EffectHistoryHealed_Func");
    TriggerAddEventUnitHealed(libGame_gt_EffectHistoryHealed, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Healed Leech Generic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryHealedLeechGeneric_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_parent = "";

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnitGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedAmountFixed(c_effectAmountHealed, false) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parent = (EventPlayerEffectUsedAbil());
    if ((lv_parent == "")) {
        lv_parent = (EventPlayerEffectUsedSourceBehavior());
        if ((lv_parent == "")) {
            lv_parent = (EventPlayerEffectUsedWeapon());
        }

    }

    libGame_gf_EffectHistoryAddEffectInHistoryForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedAmountFixed(c_effectAmountHealed, false), 0.0, 0.0, libGame_ge_EffectHistoryDamagedOrHealed_Healed, EventPlayerEffectUsed(), lv_parent, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryHealedLeechGeneric_Init () {
    libGame_gt_EffectHistoryHealedLeechGeneric = TriggerCreate("libGame_gt_EffectHistoryHealedLeechGeneric_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_EffectHistoryHealedLeechGeneric, c_playerAny, "HeroGenericPhysicalLeechHeal");
    TriggerAddEventPlayerEffectUsed(libGame_gt_EffectHistoryHealedLeechGeneric, c_playerAny, "HeroGenericSpellLeechHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Start
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unit lv_targetUnit;
    int lv_damagingPlayer;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_targetUnit = EventUnit();
    lv_damagingPlayer = EventUnitDamageSourcePlayer();
    lv_targetPlayer = EventPlayer();
    if ((UnitIsValid(lv_damagingUnit) == true) && ((UnitGroupHasUnit(libGame_gv_players[lv_damagingPlayer].lv_heroUnitGroup, lv_damagingUnit) == true) || (lv_damagingUnit == libGame_gv_players[lv_damagingPlayer].lv_activeVehicle))) {
        libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }

    if ((UnitIsValid(lv_targetUnit) == true) && ((UnitGroupHasUnit(libGame_gv_players[lv_damagingPlayer].lv_heroUnitGroup, lv_targetUnit) == true) || (lv_targetUnit == libGame_gv_players[lv_damagingPlayer].lv_activeVehicle))) {
        libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatStart_Init () {
    libGame_gt_EncouragementDataTrackingInCombatStart = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatStart_Func");
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_EncouragementDataTrackingInCombatStart, null, null);
    TriggerAddEventUnitDamaged(libGame_gt_EncouragementDataTrackingInCombatStart, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Timeout
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    const int auto8FCFB595_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto8FCFB595_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto8FCFB595_ai >= 0 && lv_itPlayer <= auto8FCFB595_ae) || (auto8FCFB595_ai < 0 && lv_itPlayer >= auto8FCFB595_ae) ) ; lv_itPlayer += auto8FCFB595_ai ) {
        if ((EventTimer() == libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_inCombatTimeoutTimer)) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }

    }
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombat = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombatDurationTimer, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedHeroesNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedHeroesNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedMinionsNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedMinionsNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_enemyMinionDamageTaken = 0.0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentHeroKills = 0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTaken = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatTimeout_Init () {
    libGame_gt_EncouragementDataTrackingInCombatTimeout = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatTimeout_Func");
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[1].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[2].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[3].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[4].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[5].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[6].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[7].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[8].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[9].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[10].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[11].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[12].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[13].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[14].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[15].lv_inCombatTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Experience Globe - Scaling
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ExperienceGlobeScaling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_oldCheatXP == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamOrder, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamOrder) + libGame_gv_experienceGlobeScaling));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamChaos, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamChaos) + libGame_gv_experienceGlobeScaling));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ExperienceGlobeScaling_Init () {
    libGame_gt_ExperienceGlobeScaling = TriggerCreate("libGame_gt_ExperienceGlobeScaling_Func");
    libGame_gf_ScalingIncremented(libGame_gt_ExperienceGlobeScaling);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Experience Globe - Spawn
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ExperienceGlobeSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    int auto67F4A8A3_val;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_oldCheatXP == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "ExperienceGlobeSpawn") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_PlayerIsHeroPlayer(libNtve_gf_KillingPlayer()) == true) && (libGame_gf_TeamNumberOfPlayer(libNtve_gf_KillingPlayer()) != libGame_gf_TeamNumberOfPlayer(EventPlayer()))) {
        lv_heroUnit = libGame_gv_players[libNtve_gf_KillingPlayer()].lv_heroUnit;
        UnitCreateEffectUnit(lv_unit, "ExperienceGlobeDummyImpactSetLastHit", lv_heroUnit);
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "HeroGenericExperience@LastHitTimer") == true)) {
            lv_heroUnit = libGame_gv_players[UnitBehaviorEffectPlayer(EventUnit(), "HeroGenericExperience@LastHitTimer", c_effectPlayerCaster, 0)].lv_heroUnit;
            UnitCreateEffectUnit(lv_unit, "ExperienceGlobeDummyImpactSetLastHit", lv_heroUnit);
        }
        else {
            auto67F4A8A3_val = UnitGetOwner(lv_unit);
            if (auto67F4A8A3_val == libCore_gv_cOMPUTER_TeamOrder) {
                PlayerCreateEffectPoint(libCore_gv_cOMPUTER_TeamChaos, "HeroGenericGenerateExperienceGlobeCreateUnit", UnitGetPosition(lv_unit));
            }
            else if (auto67F4A8A3_val == libCore_gv_cOMPUTER_TeamChaos) {
                PlayerCreateEffectPoint(libCore_gv_cOMPUTER_TeamOrder, "HeroGenericGenerateExperienceGlobeCreateUnit", UnitGetPosition(lv_unit));
            }
            else {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_A119F9B8"), true);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ExperienceGlobeSpawn_Init () {
    libGame_gt_ExperienceGlobeSpawn = TriggerCreate("libGame_gt_ExperienceGlobeSpawn_Func");
    TriggerAddEventUnitDied(libGame_gt_ExperienceGlobeSpawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Experience Globe - Grant XP
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ExperienceGlobeGrantXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetPlayer;
    int lv_itPlayer;
    fixed lv_xPAmount;
    playergroup lv_awardGroup;

    // Automatic Variable Declarations
    playergroup auto307C3D80_g;

    // Variable Initialization
    lv_targetPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_awardGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_oldCheatXP == false))) {
            return false;
        }

        if (!((lv_targetPlayer >= 0))) {
            return false;
        }

        if (!((lv_targetPlayer <= libCore_gv_bALMaxEnginePlayerCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "ExperienceGlobeDummyImpactSetMinion")) {
        lv_xPAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamOrder);
    }
    else if ((EventPlayerEffectUsed() == "ExperienceGlobeDummyImpactSetReducedXP")) {
        lv_xPAmount = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamOrder) * libGame_gv_experienceGlobeExtendedDurationMod);
    }
    else if ((EventPlayerEffectUsed() == "ExperienceGlobeDummyImpactSetLastHit")) {
        lv_xPAmount = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("ExperienceAcquiredMinions"), "XP", libCore_gv_cOMPUTER_TeamOrder) * libGame_gv_experienceGlobeLastHitMod);
    }
    lv_xPAmount = libGame_gf_AdjustXPForTeam(lv_xPAmount, libGame_gf_TeamNumberOfPlayer(lv_targetPlayer));
    if ((lv_xPAmount <= 0.0)) {
        return true;
    }

    lv_awardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer));
    auto307C3D80_g = lv_awardGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto307C3D80_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_GrantXPToPlayer(lv_xPAmount, lv_itPlayer, libGame_ge_XPSource_Minion);
    }
    libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_targetPlayer, lv_xPAmount, libGame_ge_XPSource_Minion);
    if ((EventPlayerEffectUsed() == "ExperienceGlobeDummyImpactSetLastHit")) {
        libUIUI_gf_UICombatFloatingElementsXP(libCore_gv_playerGroupFromPlayer[lv_targetPlayer], EventPlayerEffectUsedUnit(c_effectUnitSource), FixedToText(lv_xPAmount, 0), "FCT_XP_Greater");
    }
    else {
        libUIUI_gf_UICombatFloatingElementsXP(libCore_gv_playerGroupFromPlayer[lv_targetPlayer], EventPlayerEffectUsedUnit(c_effectUnitSource), FixedToText(lv_xPAmount, 0), "FCT_XP_Normal");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ExperienceGlobeGrantXP_Init () {
    libGame_gt_ExperienceGlobeGrantXP = TriggerCreate("libGame_gt_ExperienceGlobeGrantXP_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_ExperienceGlobeGrantXP, c_playerAny, "ExperienceGlobeDummyImpactSetMinion");
    TriggerAddEventPlayerEffectUsed(libGame_gt_ExperienceGlobeGrantXP, c_playerAny, "ExperienceGlobeDummyImpactSetReducedXP");
    TriggerAddEventPlayerEffectUsed(libGame_gt_ExperienceGlobeGrantXP, c_playerAny, "ExperienceGlobeDummyImpactSetLastHit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Experience Globe - Modify Duration
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ExperienceGlobeModifyDuration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_addTime;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_addTime = 0.125;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_time = UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ExperienceGlobeTimedLife");
    lv_time += lv_addTime;
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ExperienceGlobeTimedLife", lv_time);
    lv_time = UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroGenericExperienceGlobeReducedXPCoolup");
    lv_time += lv_addTime;
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HeroGenericExperienceGlobeReducedXPCoolup", lv_time);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ExperienceGlobeModifyDuration_Init () {
    libGame_gt_ExperienceGlobeModifyDuration = TriggerCreate("libGame_gt_ExperienceGlobeModifyDuration_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_ExperienceGlobeModifyDuration, c_playerAny, "HeroGenericExperienceGlobeModifyBehaviorsDurationSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OldXP - Enable/Disable
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OldXPEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_oldCheatXP == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_52A51139"), true);
        TriggerEnable(libGame_gt_OldXPEnabledMinionVeterancy, true);
        libGame_gv_oldCheatXP = true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_83CC3EAB"), true);
        TriggerEnable(libGame_gt_OldXPEnabledMinionVeterancy, false);
        libGame_gv_oldCheatXP = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OldXPEnableDisable_Init () {
    libGame_gt_OldXPEnableDisable = TriggerCreate("libGame_gt_OldXPEnableDisable_Func");
    TriggerAddEventChatMessage(libGame_gt_OldXPEnableDisable, c_playerAny, "-oldxp", true);
    TriggerAddEventChatMessage(libGame_gt_OldXPEnableDisable, c_playerAny, "-oldexp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OldXP Enabled - Minion Veterancy
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OldXPEnabledMinionVeterancy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_oldCheatXP == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MeleeMinionScaling") == true)) {
        UnitBehaviorAdd(EventUnit(), "MeleeMinionXPScaling", EventUnit(), 1);
        UnitXPAddXP(EventUnit(), "MeleeMinionXPScaling", libGame_gv_scalingTicks);
    }
    else if ((UnitHasBehavior2(EventUnit(), "WizardMinionScaling") == true)) {
        UnitBehaviorAdd(EventUnit(), "WizardMinionXPScaling", EventUnit(), 1);
        UnitXPAddXP(EventUnit(), "WizardMinionXPScaling", libGame_gv_scalingTicks);
    }
    else if ((UnitHasBehavior2(EventUnit(), "RangedMinionScaling") == true)) {
        UnitBehaviorAdd(EventUnit(), "RangedMinionXPScaling", EventUnit(), 1);
        UnitXPAddXP(EventUnit(), "RangedMinionXPScaling", libGame_gv_scalingTicks);
    }
    else if ((UnitHasBehavior2(EventUnit(), "CatapultMinionScaling") == true)) {
        UnitBehaviorAdd(EventUnit(), "CatapultMinionXPScaling", EventUnit(), 1);
        UnitXPAddXP(EventUnit(), "CatapultMinionXPScaling", libGame_gv_scalingTicks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OldXPEnabledMinionVeterancy_Init () {
    libGame_gt_OldXPEnabledMinionVeterancy = TriggerCreate("libGame_gt_OldXPEnabledMinionVeterancy_Func");
    TriggerAddEventUnitCreated(libGame_gt_OldXPEnabledMinionVeterancy, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RunAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;
    int lv_itStructure;

    // Automatic Variable Declarations
    int auto19E6853A_ae;
    const int auto19E6853A_ai = 1;
    int autoE8EF6B85_ae;
    const int autoE8EF6B85_ai = 1;
    int autoA1216A7E_ae;
    const int autoA1216A7E_ai = 1;
    int auto731D81D5_ae;
    const int auto731D81D5_ai = 1;
    int auto68779A05_ae;
    const int auto68779A05_ai = 1;
    int auto0665BF1F_ae;
    const int auto0665BF1F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomRunAnimationsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "Signal CoreBuild");
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "Signal CoreBuild");
    Wait(12.0, c_timeGame);
    auto19E6853A_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto19E6853A_ai >= 0 && lv_itTown <= auto19E6853A_ae) || (auto19E6853A_ai < 0 && lv_itTown >= auto19E6853A_ae) ) ; lv_itTown += auto19E6853A_ai ) {
        autoE8EF6B85_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (autoE8EF6B85_ai >= 0 && lv_itStructure <= autoE8EF6B85_ae) || (autoE8EF6B85_ai < 0 && lv_itStructure >= autoE8EF6B85_ae) ) ; lv_itStructure += autoE8EF6B85_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_TownHall)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    Wait(2.0, c_timeGame);
    autoA1216A7E_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoA1216A7E_ai >= 0 && lv_itTown <= autoA1216A7E_ae) || (autoA1216A7E_ai < 0 && lv_itTown >= autoA1216A7E_ae) ) ; lv_itTown += autoA1216A7E_ai ) {
        auto731D81D5_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (auto731D81D5_ai >= 0 && lv_itStructure <= auto731D81D5_ae) || (auto731D81D5_ai < 0 && lv_itStructure >= auto731D81D5_ae) ) ; lv_itStructure += auto731D81D5_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_CannonTower)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 6.0, false);
    auto68779A05_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto68779A05_ai >= 0 && lv_itTown <= auto68779A05_ae) || (auto68779A05_ai < 0 && lv_itTown >= auto68779A05_ae) ) ; lv_itTown += auto68779A05_ai ) {
        auto0665BF1F_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (auto0665BF1F_ai >= 0 && lv_itStructure <= auto0665BF1F_ae) || (auto0665BF1F_ai < 0 && lv_itStructure >= auto0665BF1F_ae) ) ; lv_itStructure += auto0665BF1F_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_Gate)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RunAnimations_Init () {
    libGame_gt_RunAnimations = TriggerCreate("libGame_gt_RunAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates (Open The Gates Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoC0D98775_ae;
    const int autoC0D98775_ai = 1;
    unitgroup auto4C45A59A_g;
    int auto4C45A59A_u;
    unit auto4C45A59A_var;
    unitgroup autoA56EBEB5_g;
    int autoA56EBEB5_u;
    unit autoA56EBEB5_var;
    playergroup autoE473043F_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_gameStarted = true;
    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_HeroKillCreditProximityTracking, true);
    TimerStart(libGame_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    TimerStart(libGame_gv_minionSpawnStartTimer, libCore_gv_bALSpawnMinionsDelay, false, c_timeGame);
    TriggerEnable(libMapM_gt_JungleCreepCampRespawnTimerExpires, true);
    TriggerExecute(libMapM_gt_StartJungleCampTimers, true, false);
    TriggerEnable(libMapM_gt_JungleRespawnTimerTextTagCountdown, true);
    autoC0D98775_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoC0D98775_ai >= 0 && lv_itCamp <= autoC0D98775_ae) || (autoC0D98775_ai < 0 && lv_itCamp >= autoC0D98775_ae) ) ; lv_itCamp += autoC0D98775_ai ) {
        libMapM_gf_JungleUpdateTextTagForCamp(lv_itCamp);
    }
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_xPTrickleStartTimer, libCore_gv_bALXPTrickleStartDelay, false, c_timeGame);
    SoundPlayForPlayer(SoundLink("GameStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto4C45A59A_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C45A59A_u = UnitGroupCount(auto4C45A59A_g, c_unitCountAll);
    for (;; auto4C45A59A_u -= 1) {
        auto4C45A59A_var = UnitGroupUnitFromEnd(auto4C45A59A_g, auto4C45A59A_u);
        if (auto4C45A59A_var == null) { break; }
        UnitRemove(auto4C45A59A_var);
    }
    autoA56EBEB5_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA56EBEB5_u = UnitGroupCount(autoA56EBEB5_g, c_unitCountAll);
    for (;; autoA56EBEB5_u -= 1) {
        autoA56EBEB5_var = UnitGroupUnitFromEnd(autoA56EBEB5_g, autoA56EBEB5_u);
        if (autoA56EBEB5_var == null) { break; }
        UnitRemove(autoA56EBEB5_var);
    }
    autoE473043F_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE473043F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "GatesAreOpen", 1);
    }
    TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_662009D4"), null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init () {
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires = TriggerCreate("libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On XP Trickle (XP Trickle Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGame_gt_XPTrickle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init () {
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires = TriggerCreate("libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires, libGame_gv_xPTrickleStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Minions
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SpawnMinions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto598B40D5_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto598B40D5_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto598B40D5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "MinionsAreSpawning", 1);
    }
    if ((libCore_gv_sYSMinionAI == true)) {
        libGame_gf_MinionStartStopMinionSystem(true);
        if ((libGame_gv_minionSpawningEnabled == true)) {
            libGame_gf_MinionStartStopMinionSpawnCycle(true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SpawnMinions_Init () {
    libGame_gt_SpawnMinions = TriggerCreate("libGame_gt_SpawnMinions_Func");
    TriggerAddEventTimer(libGame_gt_SpawnMinions, libGame_gv_minionSpawnStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transparencyCurrent;
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itLevel;
    int lv_itLevelEXPValue;
    fixed lv_itDelay;

    // Automatic Variable Declarations
    const int auto44903501_ae = libCore_gv_bALMaxTeams;
    const int auto44903501_ai = 1;
    const int autoD030BF5F_ae = libCore_gv_bALMaxTeams;
    const int autoD030BF5F_ai = 1;
    playergroup auto847D07A3_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libGame_gv_teams[1].lv_baseRegion, false);
    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libGame_gv_teams[2].lv_baseRegion, false);
    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, true);
    TriggerEnable(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, true);
    TriggerEnable(libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds, true);
    TriggerEnable(libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds, true);
    if ((libCore_gv_sYSTowerAI == true)) {
        libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    }

    TriggerEnable(libGame_gt_CapturePointLogic, true);
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, true);
    TimerStart(libUIUI_gv_partyFrameDeathUpdateTimer, libUIUI_gv_partyFrameTimersUpdateDelay_C, false, c_timeGame);
    TriggerEnable(libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires, true);
    TriggerEnable(libGame_gt_HeroMoonwellDurationTextTagUpdates, true);
    TriggerEnable(libGame_gt_RegenGlobeGeneratorTextTagUpdates, true);
    TriggerExecute(libMapM_gt_MMRepulseRegionPunchBehavior, true, false);
    TriggerExecute(libMapM_gt_MMSafeRegionBehavior, true, false);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, true);
    TriggerEnable(libSond_gt_HeroVOHeroGoHeal, true);

    libUIUI_gf_UIUpdateTimeLabels();
    SoundPlayForPlayer(SoundLink("Gen_HeroRespawn_GameStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(libGame_gv_heroSpawnDelay_C, c_timeGame);
    lv_itTeam = 1;
    for ( ; ( (auto44903501_ai >= 0 && lv_itTeam <= auto44903501_ae) || (auto44903501_ai < 0 && lv_itTeam >= auto44903501_ae) ) ; lv_itTeam += auto44903501_ai ) {
        libUIUI_gf_UIPartyFrameSetUpCoreHealthBarforTeam(lv_itTeam);
    }
    TriggerExecute(libUIUI_gt_UIGameUITurnOnFactionStates, true, false);
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, true);
    TriggerEnable(libUIUI_gt_UITargetInfoPanelUnitClicked, true);
    TriggerEnable(libUIUI_gt_UITargetInfoPanelPeriodicUpdate, true);
    TriggerEnable(libUIUI_gt_UITargetInfoPanelLMBClicked, true);

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_Game_4AEE27E7"));
    libGame_gf_SpawnHeroesForBothTeams();
    libGame_gf_AllowInputForPlayers();
    libNtve_gf_HideGameUI(true, libCore_gv_observerPlayers);
    GameSetPauseable(true);
    if ((GameIsOnline() == true)) {
        TimerStart(libGame_gv_openTheGatesTimer, libCore_gv_bALOpenTheGatesDelay, false, c_timeGame);
    }
    else {
        TimerStart(libGame_gv_openTheGatesTimer, 5.0, false, c_timeGame);
    }
    libGame_gf_SendEventGameOpenTimerStarted();
    TriggerEnable(libUIUI_gt_UIHeroLeaderboardSortingUpdate, true);
    TriggerExecute(libGame_gt_AnnounceCountdown, true, false);
    TriggerExecute(libGame_gt_RunAnimations, true, false);
    if ((GameIsOnline() == false)) {
        lv_itTeam = 1;
        for ( ; ( (autoD030BF5F_ai >= 0 && lv_itTeam <= autoD030BF5F_ae) || (autoD030BF5F_ai < 0 && lv_itTeam >= autoD030BF5F_ae) ) ; lv_itTeam += autoD030BF5F_ai ) {
            auto847D07A3_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto847D07A3_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                PlayerSetAlliance(lv_itPlayer, c_allianceIdVision, libCore_gv_lOCAL_Player, true);
                PlayerSetAlliance(lv_itPlayer, c_allianceIdControl, libCore_gv_lOCAL_Player, true);
            }
        }
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdControl, libCore_gv_lOCAL_Player, true);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdControl, libCore_gv_lOCAL_Player, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StartGame_Init () {
    libGame_gt_StartGame = TriggerCreate("libGame_gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Countdown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnounceCountdown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 34.0, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_BattleStartingIn, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObservers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnounceCountdown_Init () {
    libGame_gt_AnnounceCountdown = TriggerCreate("libGame_gt_AnnounceCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Heroes To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_bumpBackDistance = 2.25;
    int lv_itPlayer;
    unit lv_heroUnit;
    region lv_region;
    point lv_targetPoint;

    // Automatic Variable Declarations
    playergroup autoF0C9300B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0C9300B_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoF0C9300B_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroUnit = libGame_gv_players[lv_itPlayer].lv_heroUnit;
        if ((lv_heroUnit != null) && (UnitIsAlive(lv_heroUnit) == true)) {
            lv_region = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_baseRegion;
            if ((lv_region == null)) {
                return true;
            }

            if ((libNtve_gf_UnitInRegion(lv_heroUnit, lv_region) == false)) {
                lv_targetPoint = UnitGetPosition(lv_heroUnit);
                while (((PointPathingPassable(lv_targetPoint) == false) || (RegionContainsPoint(lv_region, lv_targetPoint) == false))) {
                    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, 0.0625, libGame_gv_players[lv_itPlayer].lv_spawnPoint);
                }
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, lv_bumpBackDistance, libGame_gv_players[lv_itPlayer].lv_spawnPoint);
                UnitSetPosition(lv_heroUnit, lv_targetPoint, true);
                UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func");
    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, false);
    TriggerAddEventTimePeriodic(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Other Stuff To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "IgnoresCountdownTimer") == false))) {
            return false;
        }

        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false) || (libCore_gf_StormUnitIsHallucination(EventUnit()) == true) || (UnitHasBehavior2(EventUnit(), "Precursor") == true)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterItem), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func");
    TriggerEnable(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Created Units To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_createdUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_createdUnit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_baseRegion != null))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_baseRegion != null))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_createdUnit, "IgnoresCountdownTimer") == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(lv_createdUnit, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_baseRegion) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(lv_createdUnit, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_baseRegion) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lv_createdUnit), c_unitAttributeHeroic) == false) || (libCore_gf_StormUnitIsHallucination(lv_createdUnit) == true) || (UnitHasBehavior2(lv_createdUnit, "Precursor") == true)) && (UnitFilterMatch(lv_createdUnit, 0, UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterItem), 0)) == true)) {
        UnitKill(lv_createdUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds_Func");
    TriggerEnable(libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds, false);
    TriggerAddEventUnitCreated(libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Units Created Outside Of Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofCreatedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ownerofCreatedUnit = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!(((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Arena) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Mutator)))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_baseRegion != null))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_baseRegion != null))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitCreatedUnit(), "IgnoresCountdownTimer") == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitCreatedUnit(), libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_baseRegion) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitCreatedUnit(), libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_baseRegion) == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_ownerofCreatedUnit) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 0, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds_Init () {
    libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds = TriggerCreate("libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds_Func");
    TriggerEnable(libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds, false);
    TriggerAddEventUnitCreated(libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Determine Winning Team
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DetermineWinningTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamCorAlive;
    int lv_winningTeam;

    // Automatic Variable Declarations
    unitgroup auto0279AE3E_g;
    int auto0279AE3E_u;
    unitgroup auto7A0D5146_g;
    int auto7A0D5146_u;
    playergroup auto8E747106_g;

    // Variable Initialization
    lv_winningTeam = -1;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOverDetermineWinningTeamHasRun == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameOverDetermineWinningTeamHasRun = true;
    if ((UnitIsAlive(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    libGame_gv_gameOverWinningTeam = lv_winningTeam;
    if ((lv_winningTeam == -1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_5B6E34F2"), true);
    }

    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libGame_gf_PlayGameOverStinger(lv_winningTeam);
    if ((lv_winningTeam > 0)) {
        auto0279AE3E_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0279AE3E_u = UnitGroupCount(auto0279AE3E_g, c_unitCountAll);
        for (;; auto0279AE3E_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto0279AE3E_g, auto0279AE3E_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorRemove(lv_itUnit, "HeroGenericMount@Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameWon");
        }
        auto7A0D5146_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7A0D5146_u = UnitGroupCount(auto7A0D5146_g, c_unitCountAll);
        for (;; auto7A0D5146_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto7A0D5146_g, auto7A0D5146_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorRemove(lv_itUnit, "HeroGenericMount@Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameLost");
        }
    }

    Wait(libGame_gv_gameOverCameraPanTime_C, c_timeGame);
    SoundPlayForPlayer(SoundLink("Doodad_Core_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(libGame_gv_gameOverCoreAnimationWaitTime_C, c_timeGame);
    auto8E747106_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8E747106_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gf_PlayVictoryDefeatVO(lv_winningTeam);
    libGame_gf_GameOver(lv_winningTeam);
    TriggerExecute(libGame_gt_GameOverCountdownStart, true, false);
    libUIUI_gf_GameStatsShowHidePanel(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DetermineWinningTeam_Init () {
    libGame_gt_DetermineWinningTeam = TriggerCreate("libGame_gt_DetermineWinningTeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over - Countdown Start
//--------------------------------------------------------------------------------------------------
bool libGame_gt_GameOverCountdownStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_winningPlayerGroup;
    playergroup lv_otherPlayerGroup;
    playergroup lv_playersReady;
    int lv_playerCount_Ready;
    int lv_playerCount_Total;
    fixed lv_remainingTime;
    bool lv_everyoneIsReady;

    // Automatic Variable Declarations
    int autoC9723F7F_n;
    int autoC9723F7F_i;
    playergroup auto3AFF1CD2_g;
    const int autoA73DEF88_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoA73DEF88_ai = 1;

    // Variable Initialization
    lv_winningPlayerGroup = PlayerGroupEmpty();
    lv_otherPlayerGroup = PlayerGroupEmpty();
    lv_playersReady = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_remainingTime = IntToFixed(libGame_gv_gameOverWaitingTime_C);
    autoC9723F7F_n = (libGame_gv_gameOverWaitingTime_C * 16);
    for (autoC9723F7F_i = 1; autoC9723F7F_i <= autoC9723F7F_n; autoC9723F7F_i += 1) {
        auto3AFF1CD2_g = PlayerGroupActive();
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto3AFF1CD2_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_gameOverPlayerReady[lv_itPlayer] == true)) {
                PlayerGroupAdd(lv_playersReady, lv_itPlayer);
            }
            else {
                PlayerGroupRemove(lv_playersReady, lv_itPlayer);
            }
        }
        lv_playerCount_Ready = PlayerGroupCount(lv_playersReady);
        lv_playerCount_Total = PlayerGroupCount(PlayerGroupActive());
        libUIUI_gf_GameStatsUpdateCountdownandLabel(IntToFixed(libGame_gv_gameOverWaitingTime_C), lv_remainingTime, lv_playerCount_Ready, lv_playerCount_Total);
        if ((lv_playerCount_Total > 0) && (lv_playerCount_Ready == lv_playerCount_Total)) {
            lv_itPlayer = 0;
            for ( ; ( (autoA73DEF88_ai >= 0 && lv_itPlayer <= autoA73DEF88_ae) || (autoA73DEF88_ai < 0 && lv_itPlayer >= autoA73DEF88_ae) ) ; lv_itPlayer += autoA73DEF88_ai ) {
                if ((libGame_gv_players[lv_itPlayer].lv_victoryDefeat == c_gameOverVictory)) {
                    PlayerGroupAdd(lv_winningPlayerGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_otherPlayerGroup, lv_itPlayer);
                }
            }
            TriggerExecute(libGlue_gt_GlueStart, true, false);
            libUIUI_gf_GameOverSplashShowHideForAllPlayers(false, libGame_gv_gameOverWinningTeam);
            libUIUI_gf_FullscreenOverlaysHideMainPanelForAllPlayers();
            libUIUI_gf_UIHeroLeaderboardHideMainPanelForAllPlayers();
            libUIUI_gf_GameStatsShowHidePanel(false);

            return true;
        }

        Wait(0.0625, c_timeGame);
        lv_remainingTime -= 0.0625;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_GameOverCountdownStart_Init () {
    libGame_gt_GameOverCountdownStart = TriggerCreate("libGame_gt_GameOverCountdownStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Knockback Launch Missile
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsKnockbackLaunchMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_base;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromBasePlayerTargetPoint;
    fixed lv_baseRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_base = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_hallOfStormsKnockbackLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_base), libGame_gv_hallOfStormsKnockbackLaunchDistance, UnitGetPosition(lv_targetUnit));
    lv_actualTargetPoint = lv_targetPoint;
    if ((PointPathingPassable(lv_actualTargetPoint) == true)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_base))].lv_core), 7.5, UnitGetPosition(lv_base));
    }

    UnitCreateEffectPoint(lv_targetUnit, "HallOfStormsKnockbackLaunchMissile", lv_actualTargetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsKnockbackLaunchMissile_Init () {
    libGame_gt_HallOfStormsKnockbackLaunchMissile = TriggerCreate("libGame_gt_HallOfStormsKnockbackLaunchMissile_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HallOfStormsKnockbackLaunchMissile, c_playerAny, "HallOfStormsKnockbackDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Knockback Unit Enters Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "HallOfStormsKnockbackKillable") == true)) {
        UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    else {
        UnitCreateEffectPoint(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "HallOfStormsKnockbackLaunchMissile", libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint());
        PlayerCreateEffectUnit(UnitGetOwner(libGame_gf_UnitEntersSafeZonePuntRegionUnit()), "HallOfStormsKnockbackImpactSet", libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Init () {
    libGame_gt_HallOfStormsKnockbackUnitEntersRegion = TriggerCreate("libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsKnockbackUnitEntersRegion, false);
    libGame_gf_UnitEntersSafeZonePuntRegion(libGame_gt_HallOfStormsKnockbackUnitEntersRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Unit Enters Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsUnitEntersRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gf_UnitEntersSafeZoneRegionUnit(), "HallOfStormsAllyApplySet", libGame_gf_UnitEntersSafeZoneRegionUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsUnitEntersRegion_Init () {
    libGame_gt_HallOfStormsUnitEntersRegion = TriggerCreate("libGame_gt_HallOfStormsUnitEntersRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsUnitEntersRegion, false);
    libGame_gf_UnitEntersSafeZoneRegion(libGame_gt_HallOfStormsUnitEntersRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Unit Exits Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsUnitExitsRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gf_UnitExitsSafeZoneRegionUnit(), "HallOfStormsProtectionBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsUnitExitsRegion_Init () {
    libGame_gt_HallOfStormsUnitExitsRegion = TriggerCreate("libGame_gt_HallOfStormsUnitExitsRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsUnitExitsRegion, false);
    libGame_gf_UnitExitsSafeZoneRegion(libGame_gt_HallOfStormsUnitExitsRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Stats, Award XP, Make Annouccements CORE
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadHero;
    int lv_killingPlayer;
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    unitgroup lv_nearbyUnits;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_killingGroup;
    int lv_killingFaction;
    point lv_deadHeroPosition;

    // Automatic Variable Declarations
    playergroup auto262C5A21_g;
    playergroup auto1C310CDF_g;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();
    lv_killingFaction = libGame_ge_Faction_Neutral;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    lv_deadHero = libGame_gf_HeroKilledUnit();
    if ((libGame_gv_heroDeath_UpdateStats == false)) {
        return true;
    }

    if (((lv_killingPlayer < 0) || (lv_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_EC1A1505", "A", IntToText(lv_killingPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_EC1A1505"), true);
        return true;
    }

    lv_deadPlayer = UnitGetOwner(lv_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadHeroPosition = UnitGetPosition(lv_deadHero);
    if ((lv_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    lv_deadPlayerTeamGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    auto262C5A21_g = lv_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto262C5A21_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
        }

    }
    lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, lv_killingPlayer, lv_deadHero);
    if (((PlayerGroupCount(lv_killingGroup) > 0) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamChaos))) {
        libGame_gf_HeroDeathUpdateTeamStats(lv_deadHero, lv_killingFaction);
    }

    libGame_gf_HeroDeathUpdatePlayerStats(lv_deadHero, lv_killingPlayer, lv_killingTeamGroup, lv_killingGroup);
    libGame_gf_HeroDeathAwardXP(lv_deadHero, lv_killingPlayer, lv_awardGroup, lv_killingGroup, true);
    libGame_gf_HeroDeathDeadTeamAnnouncements(lv_deadHero, lv_deadPlayerTeamGroup, lv_killingFaction);
    libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount = 0;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "KillStreak", libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount);
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        libGame_gv_gAMEFirstBloodAvailable = false;
    }

    if ((PlayerGroupCount(lv_killingGroup) > 0)) {
        auto1C310CDF_g = lv_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto1C310CDF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(lv_deadHero), c_unitAttributeSummoned) == false) && (libCore_gf_StormUnitIsHallucination(lv_deadHero) == false)) {
                libGame_gf_SendEventHeroParticipatedInTakedown(lv_killingPlayer, lv_itPlayer, lv_deadPlayer, lv_deadHero, lv_deadHeroPosition);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init () {
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE = TriggerCreate("libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func");
    libGame_gf_HeroKilled(libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_deadPlayer) == true))) {
            return false;
        }

        if (!((lv_deadUnit == libGame_gv_players[lv_deadPlayer].lv_heroUnit))) {
            return false;
        }

        if (!((libCore_gf_StormUnitIsHallucination(lv_deadUnit) == false))) {
            return false;
        }

        if (!((libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_AbnormalDeath, lv_deadUnit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_deadPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_deadUnit), null, false);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    UnitCreate(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit), 270.0);
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDies_Init () {
    libGame_gt_HeroDeathHeroDies = TriggerCreate("libGame_gt_HeroDeathHeroDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoE25EFFC3_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoE25EFFC3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 0;
    for ( ; ( (autoE25EFFC3_ai >= 0 && lv_player <= autoE25EFFC3_ae) || (autoE25EFFC3_ai < 0 && lv_player >= autoE25EFFC3_ae) ) ; lv_player += autoE25EFFC3_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_player].lv_respawnTimer)) {
            if ((libGame_gv_players[lv_player].lv_noRespawn == true)) {
                break;
            }

            if ((libGame_gv_players[lv_player].lv_heroRequiresCustomRespawn == false)) {
                libGame_gf_HeroDeathRespawnHeroForPlayer(lv_player, libGame_gv_heroDeath_RespawnMounted, libGame_gv_players[lv_player].lv_spawnPoint, 100.0);
                break;
            }
            else {
                libGame_gf_SendEventRequestCustomRespawn(lv_player, libGame_gv_heroDeath_RespawnMounted, libGame_gv_players[lv_player].lv_spawnPoint, 100.0);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[0].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[10].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[13].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[14].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[15].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Sound Cue Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto839D0564_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto839D0564_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto839D0564_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnSoundCueTimer)) {
            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericIgnoreDeathSounds") == true)) {
                return true;
            }

            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Ready", -1), lv_itPlayer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[0].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[1].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[2].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[3].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[4].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[5].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[6].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[7].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[8].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[9].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[10].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[11].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[12].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[13].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[14].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[15].lv_respawnSoundCueTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Team Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTeamMultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoF9524C8D_ae = libCore_gv_bALMaxTeams;
    const int autoF9524C8D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (autoF9524C8D_ai >= 0 && lv_itTeam <= autoF9524C8D_ae) || (autoF9524C8D_ai < 0 && lv_itTeam >= autoF9524C8D_ae) ) ; lv_itTeam += autoF9524C8D_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_multikillTimer)) {
            libGame_gv_teams[lv_itTeam].lv_multikillStreak = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTeamMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathTeamMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathTeamMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[2].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Player Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto57604967_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto57604967_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto57604967_ai >= 0 && lv_itPlayer <= auto57604967_ae) || (auto57604967_ai < 0 && lv_itPlayer >= auto57604967_ae) ) ; lv_itPlayer += auto57604967_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_multikillTimer)) {
            if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak > 0)) {
                DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ShowTimedNotification_Expire");
            }

            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathPlayerMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[2].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[3].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[4].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[5].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[6].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[7].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[8].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[9].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[10].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[13].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[14].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Multikill Timer UI
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateMultikillTimerUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_remainingTimerDuration;
    bool lv_playerStillUpdating;
    fixed lv_animTime;

    // Automatic Variable Declarations
    const int auto1500C4D7_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1500C4D7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (auto1500C4D7_ai >= 0 && lv_itPlayer <= auto1500C4D7_ae) || (auto1500C4D7_ai < 0 && lv_itPlayer >= auto1500C4D7_ae) ) ; lv_itPlayer += auto1500C4D7_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak == 5)) {
            TimerPause(libGame_gv_players[lv_itPlayer].lv_multikillTimer, true);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            continue;
        }

        lv_remainingTimerDuration = TimerGetRemaining(libGame_gv_players[lv_itPlayer].lv_multikillTimer);
        if ((lv_remainingTimerDuration > 0.0)) {
            lv_playerStillUpdating = true;
            lv_animTime = (libGame_gv_heroDeathMultikillTimeoutDuration - lv_remainingTimerDuration);
            libNtve_gf_SetDialogItemAnimationTime(libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage, lv_animTime, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }

    }
    if ((lv_playerStillUpdating == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateMultikillTimerUI_Init () {
    libGame_gt_HeroDeathUpdateMultikillTimerUI = TriggerCreate("libGame_gt_HeroDeathUpdateMultikillTimerUI_Func");
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroDeathUpdateMultikillTimerUI, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Kill Stinger Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathKillStingerTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto9CAC6F06_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto9CAC6F06_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (auto9CAC6F06_ai >= 0 && lv_itPlayer <= auto9CAC6F06_ae) || (auto9CAC6F06_ai < 0 && lv_itPlayer >= auto9CAC6F06_ae) ) ; lv_itPlayer += auto9CAC6F06_ai ) {
        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
            break;
        }

        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Enemy, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathKillStingerTimerExpires_Init () {
    libGame_gt_HeroDeathKillStingerTimerExpires = TriggerCreate("libGame_gt_HeroDeathKillStingerTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[0].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[13].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[14].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[15].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[0].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[13].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[14].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[15].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Death Toast Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoB0832484_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoB0832484_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 0;
    for ( ; ( (autoB0832484_ai >= 0 && lv_itPlayer <= autoB0832484_ae) || (autoB0832484_ai < 0 && lv_itPlayer >= autoB0832484_ae) ) ; lv_itPlayer += autoB0832484_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_deathToastTimer)) {
            libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init () {
    libGame_gt_HeroDeathHeroDeathToastTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[0].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[1].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[2].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[3].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[4].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[5].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[6].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[7].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[8].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[9].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[10].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[11].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[12].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[13].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[14].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[15].lv_deathToastTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Code Lane System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeCodeLaneSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laneIndex;
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int autoDE3B1032_ae;
    const int autoDE3B1032_ai = 1;
    int auto71FE6EAB_ae;
    const int auto71FE6EAB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AILaneWaypointClearAll();
    autoDE3B1032_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; ( (autoDE3B1032_ai >= 0 && lv_laneIndex <= autoDE3B1032_ae) || (autoDE3B1032_ai < 0 && lv_laneIndex >= autoDE3B1032_ae) ) ; lv_laneIndex += autoDE3B1032_ai ) {
        auto71FE6EAB_ae = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
        lv_waypointIndex = 1;
        for ( ; ( (auto71FE6EAB_ai >= 0 && lv_waypointIndex <= auto71FE6EAB_ae) || (auto71FE6EAB_ai < 0 && lv_waypointIndex >= auto71FE6EAB_ae) ) ; lv_waypointIndex += auto71FE6EAB_ai ) {
            AILaneWaypointAdd(lv_laneIndex, libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeCodeLaneSystem_Init () {
    libGame_gt_InitializeCodeLaneSystem = TriggerCreate("libGame_gt_InitializeCodeLaneSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up - Hero Gains Level
//--------------------------------------------------------------------------------------------------
bool libGame_gt_LevelUpHeroGainsLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((libCore_gf_StormUnitIsHallucination(EventUnit()) == false))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit == EventUnit()))) {
            return false;
        }

        if (!((EventUnitBehavior() == "HeroGenericHeroDummyVeterancy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_LevelUpLevelUpHero(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_LevelUpHeroGainsLevel_Init () {
    libGame_gt_LevelUpHeroGainsLevel = TriggerCreate("libGame_gt_LevelUpHeroGainsLevel_Func");
    TriggerAddEventUnitGainLevel(libGame_gt_LevelUpHeroGainsLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSIsGlue == false))) {
            return false;
        }

        if (!((libGame_gv_players[lv_player].lv_gameEndsForPlayer == false))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_LefttheGame;
    TimerStart(libGame_gv_players[lv_player].lv_playerLeftAnnouncementTimer, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_player);
    libGame_gv_teams[lv_team].lv_teamActivePlayersCount -= 1;
    PlayerGroupRemove(libCore_gv_activeHumanPlayers, lv_player);
    if ((libGame_gv_teams[lv_team].lv_teamActivePlayersCount == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A99F0F34", "A", FixedToText(libGame_gv_teamAbandonedTheGameTimerDuration_C, 0));
        UIDisplayMessage(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_A99F0F34"));
        TimerStart(libGame_gv_teams[lv_team].lv_abandonedTheGame, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeavesGame_Init () {
    libGame_gt_PlayerLeavesGame = TriggerCreate("libGame_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libGame_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Abandoned The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamAbandonedTheGameTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoF1FF13CD_ae = libCore_gv_bALMaxTeams;
    const int autoF1FF13CD_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (autoF1FF13CD_ai >= 0 && lv_itTeam <= autoF1FF13CD_ae) || (autoF1FF13CD_ai < 0 && lv_itTeam >= autoF1FF13CD_ae) ) ; lv_itTeam += autoF1FF13CD_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_abandonedTheGame)) {
            lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam);
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_Game_7B9AE285"));
            UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability", 1);
            UnitKill(libGame_gv_teams[lv_itTeam].lv_core);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamAbandonedTheGameTimerExpires_Init () {
    libGame_gt_TeamAbandonedTheGameTimerExpires = TriggerCreate("libGame_gt_TeamAbandonedTheGameTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[1].lv_abandonedTheGame);
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[2].lv_abandonedTheGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Left Announcement Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeftAnnouncementTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_announcementGroup;
    int lv_itPlayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoD3FF07AC_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoD3FF07AC_ai = 1;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoD3FF07AC_ai >= 0 && lv_itPlayer <= autoD3FF07AC_ae) || (autoD3FF07AC_ai < 0 && lv_itPlayer >= autoD3FF07AC_ae) ) ; lv_itPlayer += autoD3FF07AC_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_playerLeftAnnouncementTimer)) {
            libGame_gv_players[lv_itPlayer].lv_playerLeftAnnouncementPlayed = true;
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            PlayerGroupRemove(lv_announcementGroup, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeftAnnouncementTimerExpires_Init () {
    libGame_gt_PlayerLeftAnnouncementTimerExpires = TriggerCreate("libGame_gt_PlayerLeftAnnouncementTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[0].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[1].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[2].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[3].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[4].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[5].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[6].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[7].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[8].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[9].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[10].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[11].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[12].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[13].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[14].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[15].lv_playerLeftAnnouncementTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loadout - Game Over Refresh Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_LoadoutGameOverRefreshBanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto222380DA_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto222380DA_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto222380DA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_LoadoutPrepickedTalentBuildUpdateBuildIndexBankOfHeroForPlayer(libGame_gv_players[lv_itPlayer].lv_heroIndex, lv_itPlayer);
        libGame_gf_LoadoutPrepickedTalentsUpdateBuildsBankOfHeroForPlayer(libGame_gv_players[lv_itPlayer].lv_heroIndex, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_LoadoutGameOverRefreshBanks_Init () {
    libGame_gt_LoadoutGameOverRefreshBanks = TriggerCreate("libGame_gt_LoadoutGameOverRefreshBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Match Statistic - Timer Update
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MatchStatisticTimerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE01B8DEC_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameStarted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    libGame_gv_matchStatisticCurrentSecond = FixedToInt(TimerGetElapsed(libGame_gv_gameTimer));
    autoE01B8DEC_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE01B8DEC_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWSoloKill);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWAssists);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWDeaths);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWSiegeDamage);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWHeroDamage);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWHealing);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWSelfHealing);
        libGame_gf_MatchResultUpdatePlayer(lv_itPlayer, libGame_ge_MatchStatisticStuffType_NEWExperience);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MatchStatisticTimerUpdate_Init () {
    libGame_gt_MatchStatisticTimerUpdate = TriggerCreate("libGame_gt_MatchStatisticTimerUpdate_Func");
    TriggerEnable(libGame_gt_MatchStatisticTimerUpdate, false);
    TriggerAddEventTimePeriodic(libGame_gt_MatchStatisticTimerUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Spawn Cycle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionSpawnCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_itLane;
    int lv_itTeam;
    timer lv_waveTimer;
    bool lv_paused;

    // Automatic Variable Declarations
    int autoEF0C47DC_ae;
    const int autoEF0C47DC_ai = 1;
    const int auto00D28062_ae = libCore_gv_bALMaxTeams;
    const int auto00D28062_ai = 1;

    // Variable Initialization
    lv_waveTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libCore_gv_gameOver == true) || (libCore_gv_sYSMinionAI == false))) {
            return true;
        }

        TimerStart(lv_waveTimer, libCore_gv_bALMinionWaveInterval, false, c_timeGame);
        libGame_gv_minionWaveSpawnCounter += 1;
        autoEF0C47DC_ae = libGame_gv_laneCount;
        lv_itLane = 1;
        for ( ; ( (autoEF0C47DC_ai >= 0 && lv_itLane <= autoEF0C47DC_ae) || (autoEF0C47DC_ai < 0 && lv_itLane >= autoEF0C47DC_ae) ) ; lv_itLane += autoEF0C47DC_ai ) {
            if ((libGame_gv_laneData[lv_itLane].lv_minionSpawningEnabled == true)) {
                lv_itTeam = 1;
                for ( ; ( (auto00D28062_ai >= 0 && lv_itTeam <= auto00D28062_ae) || (auto00D28062_ai < 0 && lv_itTeam >= auto00D28062_ae) ) ; lv_itTeam += auto00D28062_ai ) {
                    if ((libGame_gv_minionSystemPausedAdvanced[lv_itTeam][lv_itLane] == false)) {
                        libGame_gf_MinionSpawnWave(lv_itLane, libGame_gf_ComputerPlayerInTeam(lv_itTeam));
                    }

                }
                Wait(0.1875, c_timeGame);
            }

        }
        while ((TimerGetRemaining(lv_waveTimer) > 0.0)) {
            if ((libGame_gv_minionSpawningEnabled == false)) {
                if ((lv_paused == false)) {
                    TimerPause(lv_waveTimer, true);
                    lv_paused = true;
                }

            }
            else {
                if ((lv_paused == true)) {
                    TimerPause(lv_waveTimer, false);
                    lv_paused = false;
                }

            }
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionSpawnCycle_Init () {
    libGame_gt_MinionSpawnCycle = TriggerCreate("libGame_gt_MinionSpawnCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Cooldown On/Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellCooldownOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_itPlayerIndex;
    bool lv_isHeroUnit;
    unit lv_itMoonwell;
    int lv_owner;
    fixed lv_heightOffset;

    // Automatic Variable Declarations
    playergroup autoBCC2C7D2_g;
    unitgroup auto0BB97B31_g;
    int auto0BB97B31_u;
    unitgroup autoF5A3BD5F_g;
    int autoF5A3BD5F_u;
    unitgroup autoA70316D5_g;
    int autoA70316D5_u;
    const int autoD53F9E12_ae = libGame_gv_moonwellMaxMoonwellCount;
    int autoD53F9E12_var;

    // Variable Initialization
    lv_heightOffset = 4.1;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBCC2C7D2_g = libCore_gv_allHeroPlayers;
    lv_itPlayerIndex = -1;
    while (true) {
        lv_itPlayerIndex = PlayerGroupNextPlayer(autoBCC2C7D2_g, lv_itPlayerIndex);
        if (lv_itPlayerIndex < 0) { break; }
        if ((EventUnit() == libGame_gv_players[lv_itPlayerIndex].lv_heroUnit)) {
            lv_owner = lv_itPlayerIndex;
            lv_isHeroUnit = true;
            break;
        }

    }
    if (((UnitIsValid(EventUnit()) == false) || (lv_isHeroUnit == false))) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_owner], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
        if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Game_4E700B52", "A", IntToText(lv_owner));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_4E700B52"), true);
        }

        autoF5A3BD5F_g = UnitGroup(null, libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_owner)].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF5A3BD5F_u = UnitGroupCount(autoF5A3BD5F_g, c_unitCountAll);
        for (;; autoF5A3BD5F_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(autoF5A3BD5F_g, autoF5A3BD5F_u);
            if (lv_itMoonwell == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(lv_itMoonwell), c_unitFlagTownStructureMoonwell) == true)) {
                libNtve_gf_SendActorMessageToUnit(lv_itMoonwell, "Signal MoonwellDrink");
                UnitGroupAdd(libGame_gv_moonwellTextTagsUnitGroup[lv_owner], lv_itMoonwell);
            }

        }
        autoA70316D5_g = libGame_gv_moonwellTextTagsUnitGroup[lv_owner];
        autoA70316D5_u = UnitGroupCount(autoA70316D5_g, c_unitCountAll);
        for (;; autoA70316D5_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(autoA70316D5_g, autoA70316D5_u);
            if (lv_itMoonwell == null) { break; }
            lv_index += 1;
            TextTagCreate((StringExternal("Param/Value/lib_Game_483A4F7C") + FixedToText(UnitBehaviorDuration(EventUnit(), "HeroGenericFountainDrink@HealingFountainCooldown"), 0)), 20, UnitGetPosition(lv_itMoonwell), lv_heightOffset, false, false, PlayerGroupSingle(lv_owner));
            libGame_gv_moonwellTextTags[lv_owner][lv_index] = TextTagLastCreated();
            libGame_gv_moonwellTextTagsUnit[lv_owner][lv_index] = lv_itMoonwell;
        }
    }
    else {
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_owner], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_owner] = false;
        auto0BB97B31_g = libGame_gv_moonwellTextTagsUnitGroup[lv_owner];
        auto0BB97B31_u = UnitGroupCount(auto0BB97B31_g, c_unitCountAll);
        for (;; auto0BB97B31_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(auto0BB97B31_g, auto0BB97B31_u);
            if (lv_itMoonwell == null) { break; }
            libNtve_gf_SendActorMessageToUnit(lv_itMoonwell, "Signal MoonwellReset");
            UnitGroupRemove(libGame_gv_moonwellTextTagsUnitGroup[lv_owner], lv_itMoonwell);
        }
        autoD53F9E12_var = 1;
        for ( ; autoD53F9E12_var <= autoD53F9E12_ae; autoD53F9E12_var += 1 ) {
            libGame_gv_moonwellTextTagsUnit[lv_owner][autoD53F9E12_var] = null;
            TextTagDestroy(libGame_gv_moonwellTextTags[lv_owner][autoD53F9E12_var]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellCooldownOnOff_Init () {
    libGame_gt_HeroMoonwellCooldownOnOff = TriggerCreate("libGame_gt_HeroMoonwellCooldownOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGenericFountainDrink@HealingFountainCooldown", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGenericFountainDrink@HealingFountainCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Duration Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellDurationTextTagUpdates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itMoonwell;
    text lv_helpLabel;
    int lv_team;
    fixed lv_remainingCooldown;

    // Automatic Variable Declarations
    playergroup autoFF5CCD60_g;
    const int auto64F0DDE2_ae = libGame_gv_moonwellMaxMoonwellCount;
    const int auto64F0DDE2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF5CCD60_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFF5CCD60_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitGroupCount(libGame_gv_moonwellTextTagsUnitGroup[lv_itPlayer], c_unitCountAlive) > 0)) {
            lv_team = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
            lv_remainingCooldown = UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericFountainDrink@HealingFountainCooldown");
            lv_itMoonwell = 1;
            for ( ; ( (auto64F0DDE2_ai >= 0 && lv_itMoonwell <= auto64F0DDE2_ae) || (auto64F0DDE2_ai < 0 && lv_itMoonwell >= auto64F0DDE2_ae) ) ; lv_itMoonwell += auto64F0DDE2_ai ) {
                if ((UnitIsAlive(libGame_gv_moonwellTextTagsUnit[lv_itPlayer][lv_itMoonwell]) == true)) {
                    if ((libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_itPlayer] == true)) {
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], (StringExternal("Param/Value/lib_Game_187E158B") + FixedToText(lv_remainingCooldown, 0)));
                    }
                    else {
                        lv_helpLabel = StringExternal("Param/Value/lib_Game_59D420AA");
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], lv_helpLabel);
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], PlayerGroupSingle(lv_itPlayer), false);
                    }
                }
                else {
                    TextTagDestroy(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell]);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellDurationTextTagUpdates_Init () {
    libGame_gt_HeroMoonwellDurationTextTagUpdates = TriggerCreate("libGame_gt_HeroMoonwellDurationTextTagUpdates_Func");
    TriggerEnable(libGame_gt_HeroMoonwellDurationTextTagUpdates, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroMoonwellDurationTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Mount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;
    fixed lv_mountScale;
    fixed lv_mountWalkAnimMoveSpeed;
    string lv_mountModel;
    actor lv_mountActor;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7C71BFDF_g;

    // Variable Initialization
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "HeroAbathurUltimateEvolution@TimedLife") == true)) {
        auto7C71BFDF_g = libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit()));
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto7C71BFDF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit))) {
                lv_mountIndex = libGame_gf_LoadoutGetPlayerMountForHero(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_heroIndex);
                break;
            }

        }
    }
    else {
        lv_mountIndex = libGame_gf_LoadoutGetPlayerMountForHero(UnitGetOwner(EventUnit()), lv_heroIndex);
    }
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroupStatus;
    lv_mountScale = MaxF(libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelScale, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountScaling);
    lv_mountWalkAnimMoveSpeed = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelWalkAnimMoveSpeed;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "0");
    if ((UnitHasBehavior2(EventUnit(), "SiegeMode") == true)) {
        UnitCreateEffectUnit(EventUnit(), "SiegeModeRemoveSet", EventUnit());
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 1")));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_attachedMountModel == true)) {
        ActorSend(lv_heroActor, "PhysicsTerminate");
        lv_mountModel = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModel;
        ActorSend(lv_heroActor, libNtve_gf_Create(libGame_gv_mountModelActor, (lv_mountModel)));
        lv_mountActor = ActorFromActor(lv_heroActor, libGame_gv_mountModelActor);
        libGame_gf_SendMountActorMessagesToActor(lv_mountIndex, lv_mountActor);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer == true)) {
            ActorSend(lv_mountActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
        }

        ActorSend(lv_mountActor, libNtve_gf_SetScaleAbsolute(lv_mountScale, lv_mountScale, lv_mountScale, 0.0));
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup + " {} {} Instant")));
        if ((lv_poseAnimGroup == "Ridebike")) {
            UnitBehaviorAdd(EventUnit(), "HideHandAttachmentsWhileMounted", EventUnit(), 1);
        }

        ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", libGame_gv_mountModelActor));
        ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpAttachMount", 0, 0));
        ActorSend(lv_heroActor, libNtve_gf_RefSet("::HostForProps", "PropsHost"));
        ActorSend(lv_mountActor, libNtve_gf_RefSet("::HostForProps", (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType)));
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_mountWalkAnimMoveSpeed));
    ActorSend(lv_mountActor, libNtve_gf_Signal("MountSound"));
    ActorSend(lv_heroActor, libNtve_gf_Signal("Mounted"));
    ActorSend(lv_heroActor, libNtve_gf_Create("MountSmokeScreen", ""));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMountSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOLoopingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountLoopingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOLoopingSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOStationarySound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountStationarySound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOStationarySound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMovingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMovingSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStartSound != "")) {
        CatalogLinkReplace(UnitGetOwner(EventUnit()), c_gameCatalogSound, "GenericMountMoveStartSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStartSound));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStopSound != "")) {
        CatalogLinkReplace(UnitGetOwner(EventUnit()), c_gameCatalogSound, "GenericMountMoveStopSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStopSound));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMount_Init () {
    libGame_gt_HeroMount = TriggerCreate("libGame_gt_HeroMount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMount, null, "HeroGenericMount@Mounted", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    fixed lv_heroWalkAnimMoveSpeed;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto15B0EFFE_g;

    // Variable Initialization
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCore_gv_allHeroPlayers, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "HeroAbathurUltimateEvolution@TimedLife") == true)) {
        auto15B0EFFE_g = libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit()));
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto15B0EFFE_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit))) {
                lv_mountIndex = libGame_gf_LoadoutGetPlayerMountForHero(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_heroIndex);
                break;
            }

        }
    }
    else {
        lv_mountIndex = libGame_gf_LoadoutGetPlayerMountForHero(UnitGetOwner(EventUnit()), lv_heroIndex);
    }
    lv_heroWalkAnimMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventUnit()), "WalkAnimMoveSpeed", UnitGetOwner(EventUnit())));
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroupStatus;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "5");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "2.5");
    if ((UnitHasBehavior2(EventUnit(), "WarSpurs") == true)) {
        UnitBehaviorAdd(EventUnit(), "WarSpursSpeedBuff", EventUnit(), 1);
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 0")));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_attachedMountModel == true)) {
        ActorSend(lv_heroActor, (("AnimBlendTimeApply 0")));
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup + " Instant")));
        ActorSend(lv_heroActor, (("AnimBlendTimeApply")));
        ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), libGame_gv_mountModelActor), libNtve_gf_Destroy());
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_heroWalkAnimMoveSpeed));
    if ((UnitIsAlive(EventUnit()) == true)) {
        ActorSend(lv_heroActor, libNtve_gf_Create("DismountSmokeScreen", ""));
    }

    ActorSend(lv_heroActor, libNtve_gf_Signal("Dismounted"));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vODismountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vODismountSound)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismount_Init () {
    libGame_gt_HeroDismount = TriggerCreate("libGame_gt_HeroDismount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroDismount, null, "HeroGenericMount@Mounted", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreDiesGameOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_i;
    unit lv_u;
    const fixed lv_cameraPanTime = 2.0;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    const fixed lv_coreAnimationWaitTime = 5.0;
    int lv_killingFaction;
    int lv_winningTeam;
    int lv_losingTeam;
    point lv_corePoint;

    // Automatic Variable Declarations
    playergroup autoDBB5F078_g;
    unitgroup auto20E6C678_g;
    int auto20E6C678_u;
    unit auto20E6C678_var;
    playergroup autoF83D87B4_g;
    int autoF83D87B4_var;
    playergroup auto20E05A0A_g;
    int auto20E05A0A_var;
    unitgroup auto82B0AB44_g;
    int auto82B0AB44_u;
    unit auto82B0AB44_var;
    playergroup auto23398500_g;
    int auto23398500_var;
    playergroup auto742BA61F_g;
    int auto742BA61F_var;

    // Variable Initialization
    lv_killingFaction = libGame_ge_Faction_Neutral;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_gameOver = true;
    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(libGame_gv_gameTimer, true);
    lv_corePoint = UnitGetPosition(EventUnit());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, true);
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        lv_killingFaction = libGame_ge_Faction_Order;
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Chaos;
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    lv_losingTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam);
    UnitPauseAll(true);
    autoDBB5F078_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoDBB5F078_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto20E6C678_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto20E6C678_u = UnitGroupCount(auto20E6C678_g, c_unitCountAll);
        for (;; auto20E6C678_u -= 1) {
            auto20E6C678_var = UnitGroupUnitFromEnd(auto20E6C678_g, auto20E6C678_u);
            if (auto20E6C678_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto20E6C678_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(auto20E6C678_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[1].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[2].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(0.0625, c_timeGame);
    libUIUI_gf_UIPartyFrameSetCoreLifeTo0(lv_losingTeam);
    libGame_gf_MinionPauseUnpauseMinionSystem(true);
    VisRevealerCreate(libGame_gv_teamOrderIndex_C, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    VisRevealerCreate(libGame_gv_teamChaosIndex_C, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "Massive", PlayerGroupAll());
    autoF83D87B4_g = libGame_gv_teams[lv_winningTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoF83D87B4_var = -1;
    while (true) {
        autoF83D87B4_var = PlayerGroupNextPlayer(autoF83D87B4_g, autoF83D87B4_var);
        if (autoF83D87B4_var < 0) { break; }
        libGame_gv_players[autoF83D87B4_var].lv_victoryDefeat = c_gameOverVictory;
    }
    auto20E05A0A_g = libGame_gv_teams[lv_losingTeam].lv_teamPlayerGroupNoNPCPlayers;
    auto20E05A0A_var = -1;
    while (true) {
        auto20E05A0A_var = PlayerGroupNextPlayer(auto20E05A0A_g, auto20E05A0A_var);
        if (auto20E05A0A_var < 0) { break; }
        libGame_gv_players[auto20E05A0A_var].lv_victoryDefeat = c_gameOverDefeat;
    }
    auto82B0AB44_g = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82B0AB44_u = UnitGroupCount(auto82B0AB44_g, c_unitCountAll);
    for (;; auto82B0AB44_u -= 1) {
        auto82B0AB44_var = UnitGroupUnitFromEnd(auto82B0AB44_g, auto82B0AB44_u);
        if (auto82B0AB44_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto82B0AB44_var), "AnimPlay Victory Stand,Victory PlayForever");
    }
    auto23398500_g = libCore_gv_allHeroPlayers;
    auto23398500_var = -1;
    while (true) {
        auto23398500_var = PlayerGroupNextPlayer(auto23398500_g, auto23398500_var);
        if (auto23398500_var < 0) { break; }
        CameraLockInput(auto23398500_var, true);
        PlayerOptionOverride(auto23398500_var, "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, auto23398500_var);
    }
    Wait(0.0625, c_timeGame);
    auto742BA61F_g = libCore_gv_allHeroPlayers;
    auto742BA61F_var = -1;
    while (true) {
        auto742BA61F_var = PlayerGroupNextPlayer(auto742BA61F_g, auto742BA61F_var);
        if (auto742BA61F_var < 0) { break; }
        CameraFollowUnitGroup(auto742BA61F_var, UnitGroupFilterPlayer(UnitGroupSelected(auto742BA61F_var), auto742BA61F_var, 0), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(auto742BA61F_var, lv_corePoint, lv_cameraPanTime, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, lv_corePoint, lv_cameraPanTime, -1, 10, false);
    TriggerExecute(libGame_gt_LoadoutGameOverRefreshBanks, true, false);
    TriggerExecute(libGame_gt_DetermineWinningTeam, true, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogExitButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogQuitButton, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreDiesGameOver_Init () {
    libGame_gt_CoreDiesGameOver = TriggerCreate("libGame_gt_CoreDiesGameOver_Func");
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[1].lv_core"));
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[2].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NPC Unit Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_NPCUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_minionIndex;
    int lv_killingPlayer;
    fixed lv_triggeringUnitKillXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_activeVehicle != EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_triggeringUnitKillXP = EventUnitDamageKillXP();
    if ((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeLight) == true)) {
        libGame_gf_CreepDies(lv_unit, lv_killingPlayer, lv_triggeringUnitKillXP);
        return true;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lv_unit);
    libAIAI_gf_MinionAIFreeMinionIndex(libAIAI_gf_MinionAIGetIndexForMinion(lv_unit));
    if ((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeSummoned) == true)) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeBiological) == true) && (libCore_gf_StormUnitIsHallucination(lv_unit) == false) && (libGame_gv_minionSystemStarted == true)) {
        libGame_gf_MinionDies(lv_unit, lv_killingPlayer, lv_triggeringUnitKillXP);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_NPCUnitDies_Init () {
    libGame_gt_NPCUnitDies = TriggerCreate("libGame_gt_NPCUnitDies_Func");
    TriggerAddEventUnitDied(libGame_gt_NPCUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_townIndex;
    int lv_structureIndex;
    fixed lv_townHallAnimationExlodeTime;
    int lv_townType;
    int lv_killingFaction;
    int lv_victimTeam;
    playergroup lv_killingPlayersGroup;
    playergroup lv_nearbyPlayersGroup;
    int lv_xPValue;
    int lv_itStructure;

    // Automatic Variable Declarations
    unitgroup autoF99772AE_g;
    int autoF99772AE_u;
    playergroup auto642271F4_g;

    // Variable Initialization
    lv_townHallAnimationExlodeTime = 0.75;
    lv_killingFaction = libGame_ge_Faction_Neutral;
    lv_killingPlayersGroup = PlayerGroupEmpty();
    lv_nearbyPlayersGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "TownDeadController@DeadTowerSuicide"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "TownDeadController@DeadBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(EventUnit());
    if ((lv_townIndex <= 0)) {
        return true;
    }

    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventUnit());
    lv_townType = libGame_gf_TownGetTownStructurePresetFromUnit(EventUnit());
    lv_victimTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    lv_xPValue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny);
    if (((lv_townType == libGame_ge_TownStructureTypes_TownHall) || (lv_townType == libGame_ge_TownStructureTypes_Moonwell))) {
        libGame_gf_TownUpdateMoonwellIcon(lv_townIndex);
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    if ((lv_townType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((libGame_gv_minionPeriodicCatapultsFirstWave == 0)) {
            libGame_gv_minionPeriodicCatapultsFirstWave = (libGame_gv_minionWaveSpawnCounter + 1);
        }

        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining -= 1;
        }
        autoF99772AE_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF99772AE_u = UnitGroupCount(autoF99772AE_g, c_unitCountAll);
        for (;; autoF99772AE_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoF99772AE_g, autoF99772AE_u);
            if (lv_itUnit == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
            }

            PlayerGroupAdd(lv_nearbyPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(0.0, "Heavy", lv_nearbyPlayersGroup);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetOfUnit(EventUnit()));
        auto642271F4_g = lv_killingPlayersGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto642271F4_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gv_townDestructionRemovesCoreInvulnerable == true) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && (libGame_gf_TownAliveInLane(lv_victimTeam, libGame_gv_townTownData[lv_townIndex].lv_lane) == false)) {
            UnitBehaviorRemove(libGame_gv_teams[lv_victimTeam].lv_core, "CoreInvulnerability", 1);
        }

    }
    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeStructure, EventUnitDamageSourcePlayer(), lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDies_Init () {
    libGame_gt_TownStructureDies = TriggerCreate("libGame_gt_TownStructureDies_Func");
    TriggerAddEventUnitDied(libGame_gt_TownStructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies (Special Case)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDiesSpecialCase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_towerUnit;
    unit lv_killingUnit;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_towerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_xPValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_towerUnit), "KillXP", c_playerAny);
    libGame_gf_AwardXPForNPCKill(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAttributeStructure, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDiesSpecialCase_Init () {
    libGame_gt_TownStructureDiesSpecialCase = TriggerCreate("libGame_gt_TownStructureDiesSpecialCase_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TownStructureDiesSpecialCase, c_playerAny, "TownCannonTowerDeathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies (Special Case) (Custom)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDiesSpecialCaseCustom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_killingFaction;
    unit lv_towerUnit;
    unit lv_killingUnit;
    int lv_xPValue;
    int lv_townIndex;
    int lv_townType;
    int lv_structureIndex;
    int lv_victimTeam;
    playergroup lv_killingPlayersGroup;
    playergroup lv_nearbyPlayersGroup;

    // Automatic Variable Declarations
    unitgroup autoD814BA93_g;
    int autoD814BA93_u;
    playergroup auto4EA7FB5A_g;

    // Variable Initialization
    lv_killingFaction = libGame_ge_Faction_Neutral;
    lv_killingPlayersGroup = PlayerGroupEmpty();
    lv_nearbyPlayersGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_towerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_towerUnit);
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(lv_towerUnit);
    lv_townType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_towerUnit);
    lv_victimTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_towerUnit));
    lv_xPValue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_towerUnit), "KillXP", c_playerAny);
    if ((UnitGetOwner(lv_towerUnit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    libGame_gf_TownUpdateMoonwellIcon(lv_townIndex);
    if ((lv_townType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((libGame_gv_minionPeriodicCatapultsFirstWave == 0)) {
            libGame_gv_minionPeriodicCatapultsFirstWave = (libGame_gv_minionWaveSpawnCounter + 1);
        }

        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining -= 1;
        }
        autoD814BA93_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_towerUnit), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD814BA93_u = UnitGroupCount(autoD814BA93_g, c_unitCountAll);
        for (;; autoD814BA93_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoD814BA93_g, autoD814BA93_u);
            if (lv_itUnit == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(lv_towerUnit), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
            }

            PlayerGroupAdd(lv_nearbyPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(0.0, "Heavy", lv_nearbyPlayersGroup);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetOfUnit(lv_towerUnit));
        auto4EA7FB5A_g = lv_killingPlayersGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4EA7FB5A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gv_townDestructionRemovesCoreInvulnerable == true) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && (libGame_gf_TownAliveInLane(lv_victimTeam, libGame_gv_townTownData[lv_townIndex].lv_lane) == false)) {
            UnitBehaviorRemove(libGame_gv_teams[lv_victimTeam].lv_core, "CoreInvulnerability", 1);
        }

    }

    libGame_gf_AwardXPForNPCKill(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAttributeStructure, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDiesSpecialCaseCustom_Init () {
    libGame_gt_TownStructureDiesSpecialCaseCustom = TriggerCreate("libGame_gt_TownStructureDiesSpecialCaseCustom_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TownStructureDiesSpecialCaseCustom, c_playerAny, "TownDeadController@ApplyDeadBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Dead State Gate Check
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerDeadStateGateCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup auto84EE78FA_g;
    int auto84EE78FA_u;
    unit auto84EE78FA_var;
    unitgroup auto64C0221B_g;
    int auto64C0221B_u;
    unit auto64C0221B_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84EE78FA_g = lv_unitGroup;
    auto84EE78FA_u = UnitGroupCount(auto84EE78FA_g, c_unitCountAll);
    for (;; auto84EE78FA_u -= 1) {
        auto84EE78FA_var = UnitGroupUnitFromEnd(auto84EE78FA_g, auto84EE78FA_u);
        if (auto84EE78FA_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto84EE78FA_var), c_unitFlagTownStructureGate) == true)) {
            return true;
        }

    }
    UnitBehaviorAdd(EventUnit(), "UnitGivesNoXP", EventUnit(), 1);
    UnitKill(EventUnit());
    auto64C0221B_g = lv_unitGroup;
    auto64C0221B_u = UnitGroupCount(auto64C0221B_g, c_unitCountAll);
    for (;; auto64C0221B_u -= 1) {
        auto64C0221B_var = UnitGroupUnitFromEnd(auto64C0221B_g, auto64C0221B_u);
        if (auto64C0221B_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto64C0221B_var), c_unitFlagTownStructureWall) == true)) {
            UnitKill(auto64C0221B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerDeadStateGateCheck_Init () {
    libGame_gt_TowerTowerDeadStateGateCheck = TriggerCreate("libGame_gt_TowerTowerDeadStateGateCheck_Func");
    TriggerAddEventUnitAbility(libGame_gt_TowerTowerDeadStateGateCheck, null, AbilityCommand("TowerDeadMorph", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Dead State Gate Check (Dead Tower)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerDeadStateGateCheckDeadTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97FA52C5_g;
    int auto97FA52C5_u;
    unit auto97FA52C5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto97FA52C5_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 6.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97FA52C5_u = UnitGroupCount(auto97FA52C5_g, c_unitCountAll);
    for (;; auto97FA52C5_u -= 1) {
        auto97FA52C5_var = UnitGroupUnitFromEnd(auto97FA52C5_g, auto97FA52C5_u);
        if (auto97FA52C5_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto97FA52C5_var), c_unitFlagTownStructureWall) == true)) {
            UnitKill(auto97FA52C5_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerDeadStateGateCheckDeadTower_Init () {
    libGame_gt_TowerTowerDeadStateGateCheckDeadTower = TriggerCreate("libGame_gt_TowerTowerDeadStateGateCheckDeadTower_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerTowerDeadStateGateCheckDeadTower, c_playerAny, "TownGateKillDeadTower");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kill Credit Proximity Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroKillCreditProximityTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    fixed lv_missionTime;
    int lv_owner;

    // Automatic Variable Declarations
    playergroup autoC460E2A3_g;
    unitgroup autoA6D66C2D_g;
    int autoA6D66C2D_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameStarted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTime = GameGetMissionTime();
    autoC460E2A3_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC460E2A3_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitIsAlive(libGame_gv_players[lv_itPlayer].lv_heroUnit) == true) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_SpecialDeathState, libGame_gv_players[lv_itPlayer].lv_heroUnit) == false)) {
            autoA6D66C2D_g = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), libCore_gv_bALHeroKillXPRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterResistant - 32))), 0);
            autoA6D66C2D_u = UnitGroupCount(autoA6D66C2D_g, c_unitCountAll);
            for (;; autoA6D66C2D_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(autoA6D66C2D_g, autoA6D66C2D_u);
                if (lv_itUnit == null) { break; }
                lv_owner = UnitGetOwner(lv_itUnit);
                libGame_gv_players[lv_itPlayer].lv_lastTimeHeroWasWithingXPRadius[lv_owner] = lv_missionTime;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroKillCreditProximityTracking_Init () {
    libGame_gt_HeroKillCreditProximityTracking = TriggerCreate("libGame_gt_HeroKillCreditProximityTracking_Func");
    TriggerEnable(libGame_gt_HeroKillCreditProximityTracking, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroKillCreditProximityTracking, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Trickle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_XPTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    fixed lv_xPAmount;
    int lv_player;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoF25C8E04_ae = libCore_gv_bALMaxTeams;
    const int autoF25C8E04_ai = 1;
    unitgroup auto24DBFA7E_g;
    int auto24DBFA7E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSXPTrickleEnabled == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (autoF25C8E04_ai >= 0 && lv_itTeam <= autoF25C8E04_ae) || (autoF25C8E04_ai < 0 && lv_itTeam >= autoF25C8E04_ae) ) ; lv_itTeam += autoF25C8E04_ai ) {
        lv_xPAmount = libGame_gf_AdjustXPForTeam(libCore_gv_data_XP_TrickleAmount_C, lv_itTeam);
        auto24DBFA7E_g = libGame_gv_heroes;
        auto24DBFA7E_u = UnitGroupCount(auto24DBFA7E_g, c_unitCountAll);
        for (;; auto24DBFA7E_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto24DBFA7E_g, auto24DBFA7E_u);
            if (lv_itUnit == null) { break; }
            lv_player = UnitGetOwner(lv_itUnit);
            if ((libGame_gf_TeamNumberOfPlayer(lv_player) == lv_itTeam)) {
                libGame_gf_GrantXPToPlayer(lv_xPAmount, lv_player, libGame_ge_XPSource_Trickle);
            }

        }
        libGame_gf_ScoreValuesRecordXPContributionForPlayer(libGame_gf_ComputerPlayerInTeam(lv_itTeam), lv_xPAmount, libGame_ge_XPSource_Trickle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_XPTrickle_Init () {
    libGame_gt_XPTrickle = TriggerCreate("libGame_gt_XPTrickle_Func");
    TriggerEnable(libGame_gt_XPTrickle, false);
    TriggerAddEventTimePeriodic(libGame_gt_XPTrickle, libCore_gv_data_XP_TricklePeriod_C, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increment Hero Count
//--------------------------------------------------------------------------------------------------
bool libGame_gt_IncrementHeroCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lv_hero);
    if ((lv_heroIndex > 0) && (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType == UnitGetType(lv_hero))) {
        libGDHL_gf_IncrementDecrementHeroCount(true, lv_heroIndex);
    }

    if ((libGame_gf_EffectHistoryLifeCurrentOfUnitGet(lv_hero) == 0)) {
        libGame_gf_EffectHistoryLifeCurrentOfUnitIncrement(lv_hero);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_IncrementHeroCount_Init () {
    libGame_gt_IncrementHeroCount = TriggerCreate("libGame_gt_IncrementHeroCount_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_IncrementHeroCount, c_playerAny, "AddToAllHeroicUnitsTrackingBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrement Hero Count
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DecrementHeroCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = libCore_gf_HeroIndexOfUnit(EventUnit());
    if ((lv_heroIndex > 0) && (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType == UnitGetType(EventUnit()))) {
        libGDHL_gf_IncrementDecrementHeroCount(false, lv_heroIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DecrementHeroCount_Init () {
    libGame_gt_DecrementHeroCount = TriggerCreate("libGame_gt_DecrementHeroCount_Func");
    TriggerAddEventUnitRemoved(libGame_gt_DecrementHeroCount, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Shrub Proximity Reveal Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerShrubProximityRevealProc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ShrubProximityRevealApplyRevealer", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerShrubProximityRevealProc_Init () {
    libGame_gt_PlayerShrubProximityRevealProc = TriggerCreate("libGame_gt_PlayerShrubProximityRevealProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerShrubProximityRevealProc, c_playerAny, "ShrubProximityRevealDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Avatar Grabber Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AvatarGrabberInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_imageString;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto98592FC0_g;

    // Variable Initialization
    lv_imageString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeEditBox, "AvatarTextureCoordsGrabber/OutputFile");
    libGame_gv_avatarGrabberImageEditBox = DialogControlLastCreated();
    DialogControlSetAnimationState(libGame_gv_avatarGrabberImageEditBox, PlayerGroupAll(), "State", "GetAvatarData");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeEditBox, "AvatarTextureCoordsGrabber/OutputTextureCoords");
    libGame_gv_avatarGrabberTextureCoordsEditBox = DialogControlLastCreated();
    DialogControlSetAnimationState(libGame_gv_avatarGrabberTextureCoordsEditBox, PlayerGroupAll(), "State", "GetAvatarData");
    Wait(1.0, c_timeGame);
    auto98592FC0_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto98592FC0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
            if ((GameIsOnline() == false)) {
                lv_imageString = "c:/programdata/blizzard entertainment/battle.net/cache/ea/0e/ea0e6924e5bc850e1ad5c40ea0769461610bd8d395919f3229dc88a209c6615a.wafl";
                libGame_gv_players[lv_itPlayer].lv_avatarTextureImage = (lv_imageString);
                libGame_gv_players[lv_itPlayer].lv_avatarTextureCoords = "0.000000,0.666667,0.166667,0.833333";
            }
            else {
                lv_imageString = libNtve_gf_DialogItemEditValue(libGame_gv_avatarGrabberImageEditBox, lv_itPlayer);
                libGame_gv_players[lv_itPlayer].lv_avatarTextureImage = (lv_imageString);
                libGame_gv_players[lv_itPlayer].lv_avatarTextureCoords = libNtve_gf_DialogItemEditValue(libGame_gv_avatarGrabberTextureCoordsEditBox, lv_itPlayer);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AvatarGrabberInitialization_Init () {
    libGame_gt_AvatarGrabberInitialization = TriggerCreate("libGame_gt_AvatarGrabberInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BNet Grabber Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BNetGrabberInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoB5B7DCEE_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == false)) {
        libGame_gv_players[1].lv_bNet = "OfflineTester";
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeEditBox, "BNetGrabber");
    libGame_gv_bNetGrabberEditBox = DialogControlLastCreated();
    DialogControlSetAnimationState(libGame_gv_bNetGrabberEditBox, PlayerGroupAll(), "State", "GetBNet");
    Wait(1.0, c_timeGame);
    autoB5B7DCEE_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB5B7DCEE_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
            libGame_gv_players[lv_itPlayer].lv_bNet = libNtve_gf_DialogItemEditValue(libGame_gv_bNetGrabberEditBox, lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BNetGrabberInitialization_Init () {
    libGame_gt_BNetGrabberInitialization = TriggerCreate("libGame_gt_BNetGrabberInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Initialize
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPortrait;

    // Automatic Variable Declarations
    const int autoC84D2BE8_ae = libGame_gv_preloadingPortraitCountMax_C;
    const int autoC84D2BE8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSPreloadingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPortrait = 1;
    for ( ; ( (autoC84D2BE8_ai >= 0 && lv_itPortrait <= autoC84D2BE8_ae) || (autoC84D2BE8_ai < 0 && lv_itPortrait >= autoC84D2BE8_ae) ) ; lv_itPortrait += autoC84D2BE8_ai ) {
        PortraitCreate(0, 0, c_anchorCenter, 237, 360, "Invisible", "", "", false, false);
        libGame_gv_preloadingPortrait[lv_itPortrait] = PortraitLastCreated();
    }
    libGame_gv_preloadingInitialized = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingInitialize_Init () {
    libGame_gt_PreloadingInitialize = TriggerCreate("libGame_gt_PreloadingInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Destroy Portraits
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingDestroyPortraits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPortrait;

    // Automatic Variable Declarations
    const int auto7A6F28D6_ae = libGame_gv_preloadingPortraitCountMax_C;
    const int auto7A6F28D6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSPreloadingEnabled == true))) {
            return false;
        }

        if (!(((GameIsOnline() == true) || (libGame_gv_preloadingPreloadDuringOfflineTest == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPortrait = 1;
    for ( ; ( (auto7A6F28D6_ai >= 0 && lv_itPortrait <= auto7A6F28D6_ae) || (auto7A6F28D6_ai < 0 && lv_itPortrait >= auto7A6F28D6_ae) ) ; lv_itPortrait += auto7A6F28D6_ai ) {
        if ((libGame_gv_preloadingPortrait[lv_itPortrait] != c_invalidPortraitId)) {
            PortraitDestroy(libGame_gv_preloadingPortrait[lv_itPortrait]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingDestroyPortraits_Init () {
    libGame_gt_PreloadingDestroyPortraits = TriggerCreate("libGame_gt_PreloadingDestroyPortraits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Black List Initialize
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingBlackListInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPowerConduit");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakShieldRegenAura");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakShieldRegenAuraImpact");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakChargeUpModel");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPsiShiftModel");
    libGame_gf_PreloadingAddModelToBlackList("AlarakMindBlastAvatarMode");
    libGame_gf_PreloadingAddModelToBlackList("AlarakPsiOrbAvatarMode");
    libGame_gf_PreloadingAddModelToBlackList("AlarakInsanityExplosionImpact");
    libGame_gf_PreloadingAddModelToBlackList("AlarakInsanityImpact");
    libGame_gf_PreloadingAddModelToBlackList("AlarakInsanityModel");
    libGame_gf_PreloadingAddModelToBlackList("AlarakPsiOrbBeam");
    libGame_gf_PreloadingAddModelToBlackList("AlarakPsiOrbFinalImpact");
    libGame_gf_PreloadingAddModelToBlackList("AlarakPsiOrbFinalImpactUnit");
    libGame_gf_PreloadingAddModelToBlackList("AlarakPsiOrbMissile");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarak");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPsiOrbMissile");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPsiOrbBeam");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPsiOrbFinalImpact");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakPsiOrbFinalImpactUnit");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakSuperMoveChargeAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarakSuperMove");
    libGame_gf_PreloadingAddModelToBlackList("AlarakForkedLightningAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("AlarakSoulStealDummyAttackMissile");
    libGame_gf_PreloadingAddModelToBlackList("AlarakSoulStealGlaze");
    libGame_gf_PreloadingAddModelToBlackList("AlarakSoulAbsorptionDummyAttackMissile");
    libGame_gf_PreloadingAddModelToBlackList("AlarakEx2Portrait");
    libGame_gf_PreloadingAddModelToBlackList("AlarakEx2Portrait3D");
    libGame_gf_PreloadingAddModelToBlackList("AlarakEx2PortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("AlarakEx2Portrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("AlarakDeadlyCharge");
    libGame_gf_PreloadingAddModelToBlackList("AlarakDeadlyChargeImpact");
    libGame_gf_PreloadingAddModelToBlackList("AlarakDestructionWave");
    libGame_gf_PreloadingAddModelToBlackList("AlarakDestructionWaveNoOffset");
    libGame_gf_PreloadingAddModelToBlackList("AlarakDestructionWaveImpact");
    libGame_gf_PreloadingAddModelToBlackList("Alarak");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarak_Fight_Beam");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarak_Strong_Beam");
    libGame_gf_PreloadingAddModelToBlackList("PitAlarak_Strong_Beam_Impact");
    libGame_gf_PreloadingAddModelToBlackList("Glue_SMX3_Alarak_Throne");
    libGame_gf_PreloadingAddModelToBlackList("GlueSMX3Alarak");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuAlarakLow");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuAbathurLow");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuAbathur_Smoke");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAttackBeamLow");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisTemporalRiftModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVortexModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisMothershipTeleportIn");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisMothershipTeleportOut");
    libGame_gf_PreloadingAddModelToBlackList("Artanis");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisPortrait");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkInLightningAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkOutLightningAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisInspireLaunch");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisInspireImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisTemporalFieldModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisMaelstromImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisMaelstromStunImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisOverchargeImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisOverchargeModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisOverchargeLaunch");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisDeathAiur01");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisPortraitAiur01");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisPsionicShockwave");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkImpactAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkInAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkMissileAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisBlinkOutAiur02");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoid");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidShadow");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidWeapon");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("ShadowArtanisWeapon");
    libGame_gf_PreloadingAddModelToBlackList("ShadowArtanisAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidPsiStormModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidPsiStormImpact");
    libGame_gf_PreloadingAddModelToBlackList("ShadowArtanis");
    libGame_gf_PreloadingAddModelToBlackList("ShadowArtanisShadow");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisLineAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAreaStun");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAreaStunModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidDamageAOEModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidStasisModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnar");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarShadow");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarLightningShadow");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarAttackImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarPsiStormModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarPsiStormImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisLightningDashAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisLightningDashIn");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisLightningDashImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAstralWindCastModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisAstralWindImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisEx2Portrait");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisEx2PortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisEx2Portrait3D");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisEx2Portrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarWeapon");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisResurgenceChargeModel");
    libGame_gf_PreloadingAddModelToBlackList("Artanis_BlueBlades");
    libGame_gf_PreloadingAddModelToBlackList("ArtanisVoidUlnarDeath");
    libGame_gf_PreloadingAddModelToBlackList("GlueMainMenuVoidArtanis");
    libGame_gf_PreloadingAddModelToBlackList("GlueMainMenuVoidArtanisWithBraids");
    libGame_gf_PreloadingAddModelToBlackList("GlueMainMenuVoidArtanisWithGauntlet");
    libGame_gf_PreloadingAddModelToBlackList("GlueMainMenuVoidArtanisPsyBlade");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screens_CampaignMode_Light_Artanis");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_Artanis_Jumpin_Planet");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_Artanis_Jumpin_bg");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_Artanis_Jumpin_Glare");
    libGame_gf_PreloadingAddModelToBlackList("MainMenuVoidArtanis_FX");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeShadowFuryImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeGunAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeShadowFury");
    libGame_gf_PreloadingAddModelToBlackList("FirebatMercenaryPortrait");
    libGame_gf_PreloadingAddModelToBlackList("FirebatAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("FirebatBunkerAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("SMFirebat");
    libGame_gf_PreloadingAddModelToBlackList("SMFirebatPHCrate");
    libGame_gf_PreloadingAddModelToBlackList("FirebatPortrait");
    libGame_gf_PreloadingAddModelToBlackList("Firebat");
    libGame_gf_PreloadingAddModelToBlackList("FirebatDeath");
    libGame_gf_PreloadingAddModelToBlackList("MercFirebatImpactModelFlames");
    libGame_gf_PreloadingAddModelToBlackList("MercFirebatAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("MercFirebatBunkerAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("FirebatAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("MengskFirebat");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuDehakaLow");
    libGame_gf_PreloadingAddModelToBlackList("DehakaAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("DehakaMirrorImageWeapon");
    libGame_gf_PreloadingAddModelToBlackList("DehakaHeroGlow");
    libGame_gf_PreloadingAddModelToBlackList("DehakaAirWeapon");
    libGame_gf_PreloadingAddModelToBlackList("DehakaHealBuffModel");
    libGame_gf_PreloadingAddModelToBlackList("DehakaHealImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("DehakaReviveCocoon");
    libGame_gf_PreloadingAddModelToBlackList("DehakaReviveCocoonDeath");
    libGame_gf_PreloadingAddModelToBlackList("DehakaPortrait");
    libGame_gf_PreloadingAddModelToBlackList("DehakaPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("Dehaka");
    libGame_gf_PreloadingAddModelToBlackList("DehakaMirrorImage");
    libGame_gf_PreloadingAddModelToBlackList("DehakaRightArm");
    libGame_gf_PreloadingAddModelToBlackList("FenixSpawnImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixSpawnImpactModel2");
    libGame_gf_PreloadingAddModelToBlackList("FenixStormCloakAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("FenixAirGroundWeaponRight");
    libGame_gf_PreloadingAddModelToBlackList("FenixAirGroundAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixAirGroundWeaponLeft");
    libGame_gf_PreloadingAddModelToBlackList("FenixBirthImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampion");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionWarpOut");
    libGame_gf_PreloadingAddModelToBlackList("FenixPsionicAvatarAOEModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionWeapon");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionWarpIn");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionPowerShieldImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirAirLeftImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirAirRightImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirAirLeftMissile");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirAirRightMissile");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAir");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirDeath");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionPortrait");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirWarpIn");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirGroundImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirGroundLaunch");
    libGame_gf_PreloadingAddModelToBlackList("FenixChampionAirGravitonPrisonImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortalAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortalAttackImpactLow");
    libGame_gf_PreloadingAddModelToBlackList("FenixMechPortrait");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortal");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortalPlacement");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortalWarpIn");
    libGame_gf_PreloadingAddModelToBlackList("FenixImmortalDeath");
    libGame_gf_PreloadingAddModelToBlackList("FenixLeapAttackImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixLeapAttackStunModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixChargeStunModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixWhirlwindModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixWhirlwindImpact");
    libGame_gf_PreloadingAddModelToBlackList("FenixChargeImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixThornsAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("FenixMegaShieldModel");
    libGame_gf_PreloadingAddModelToBlackList("FenixEx2Portrait");
    libGame_gf_PreloadingAddModelToBlackList("FenixEx2PortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("FenixEx2Portrait3D");
    libGame_gf_PreloadingAddModelToBlackList("FenixEx2Portrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("FenixCocoon");
    libGame_gf_PreloadingAddModelToBlackList("Fenix");
    libGame_gf_PreloadingAddModelToBlackList("GlazeFenixShield");
    libGame_gf_PreloadingAddModelToBlackList("Fenix_Death");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuFenixLow");
    libGame_gf_PreloadingAddModelToBlackList("GlueFenixMech");
    libGame_gf_PreloadingAddModelToBlackList("KerriganBirthRays");
    libGame_gf_PreloadingAddModelToBlackList("KerriganSearchImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganSearchFlashImpact");
    libGame_gf_PreloadingAddModelToBlackList("Kerrigan");
    libGame_gf_PreloadingAddModelToBlackList("KerriganChar");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEgg");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEggDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganWeapon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganWeaponImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganCharWeapon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganCharWeaponImpact");
    libGame_gf_PreloadingAddModelToBlackList("SMMarSaraBarKerriganPhotoHS");
    libGame_gf_PreloadingAddModelToBlackList("SMKerriganPhoto");
    libGame_gf_PreloadingAddModelToBlackList("KerriganPortrait");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03CreepTeleportImpactIn");
    libGame_gf_PreloadingAddModelToBlackList("InfestedKerrigan");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03CreepTeleportImpactOut");
    libGame_gf_PreloadingAddModelToBlackList("KerriganVoid");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03Portrait");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03Portrait3D");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03HealImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue02");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue02Attachment");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue02EffectWeapon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganVoidKineticBlastAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganVoidKineticBlastWeapon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03QuantumBlastWeapon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03QuantumBlastImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LineDashAttackModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LeapAttackRockModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LeapAttackSpellModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LeapAttackSelfImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LineDashAttackStormModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03LineDashAttackStormImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03ExtinctionPulse");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03ExtinctionShockwave");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03ExtinctionImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03HealDamageFireModel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03QuantumRayBeam");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03QuantumRayCharge");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEpilogue03QuantumRayHandCharge");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaActivated");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaBurn");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaShockwave");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEnergyPass");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEnergyCharge");
    libGame_gf_PreloadingAddModelToBlackList("Void_Kerrigan_Energy_Attack");
    libGame_gf_PreloadingAddModelToBlackList("Void_Kerrigan_FinalCharge");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEconDropInvisible");
    libGame_gf_PreloadingAddModelToBlackList("GlueKerriganInfestedWithLight");
    libGame_gf_PreloadingAddModelToBlackList("UmojanLabKerriganCell");
    libGame_gf_PreloadingAddModelToBlackList("UmojanLabKerriganExitDoor");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screens_CampaignMode_Light_Kerrigan");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEnergyAttack");
    libGame_gf_PreloadingAddModelToBlackList("KerriganHeroGlow");
    libGame_gf_PreloadingAddModelToBlackList("KerriganHeroGlowPurple");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestBroodling");
    libGame_gf_PreloadingAddModelToBlackList("KerriganRangedImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganRangedWeapon");
    libGame_gf_PreloadingAddModelToBlackList("InfestedKerrigan");
    libGame_gf_PreloadingAddModelToBlackList("K5KerriganFuryBuff");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhost00");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhost");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhost02");
    libGame_gf_PreloadingAddModelToBlackList("KerriganDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("KerriganAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganRespawnImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhostLab");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhostLabUnarmed");
    libGame_gf_PreloadingAddModelToBlackList("KerriganPrimalPortrait");
    libGame_gf_PreloadingAddModelToBlackList("KerriganPrimalPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("KerriganPrimalPortrait3D");
    libGame_gf_PreloadingAddModelToBlackList("KerriganPrimalPortrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhostPortrait");
    libGame_gf_PreloadingAddModelToBlackList("KerriganGhostPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("UmojanLabKerriganDoor");
    libGame_gf_PreloadingAddModelToBlackList("SMX1_KerriganAbilityConfirmationButtonEffect");
    libGame_gf_PreloadingAddModelToBlackList("KerriganDoorBeamOfDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganBeamOfDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEnhanceBeam");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerran");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranPortrait");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranDeathAcid");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranDeathTimeout");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganInfestedTerranAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("KerriganReviveCocoon");
    libGame_gf_PreloadingAddModelToBlackList("KerriganReviveCocoonDeath");
    libGame_gf_PreloadingAddModelToBlackList("KerriganApocalypseCursorSplat");
    libGame_gf_PreloadingAddModelToBlackList("KerriganDropPodsCursorSplat");
    libGame_gf_PreloadingAddModelToBlackList("KerriganEnergyCollect");
    libGame_gf_PreloadingAddModelToBlackList("KerriganApocalypseExplosion");
    libGame_gf_PreloadingAddModelToBlackList("KerriganApocalypseBeam");
    libGame_gf_PreloadingAddModelToBlackList("KerriganApocalypseChannel");
    libGame_gf_PreloadingAddModelToBlackList("KerriganDropPodExplosion");
    libGame_gf_PreloadingAddModelToBlackList("K5KerriganLevelUp");
    libGame_gf_PreloadingAddModelToBlackList("KerriganLabAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("KerriganLabAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("KerriganLevelUpPortrait");
    libGame_gf_PreloadingAddModelToBlackList("LtMorales_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("PickupMedicRecharge");
    libGame_gf_PreloadingAddModelToBlackList("TechPurchaseMedicFlare");
    libGame_gf_PreloadingAddModelToBlackList("StetmannMedicPortrait");
    libGame_gf_PreloadingAddModelToBlackList("MedicPortrait");
    libGame_gf_PreloadingAddModelToBlackList("Medic");
    libGame_gf_PreloadingAddModelToBlackList("MedicKillSquad");
    libGame_gf_PreloadingAddModelToBlackList("MedicDeath");
    libGame_gf_PreloadingAddModelToBlackList("MedicKillSquadDeath");
    libGame_gf_PreloadingAddModelToBlackList("MedicStetmann");
    libGame_gf_PreloadingAddModelToBlackList("MedicStetmannDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("MedicHealBeam");
    libGame_gf_PreloadingAddModelToBlackList("MedicHealModel");
    libGame_gf_PreloadingAddModelToBlackList("MedicHealModel");
    libGame_gf_PreloadingAddModelToBlackList("MedicDeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("InfestedMedicPortrait");
    libGame_gf_PreloadingAddModelToBlackList("MercMedic");
    libGame_gf_PreloadingAddModelToBlackList("MercMedicDeath");
    libGame_gf_PreloadingAddModelToBlackList("MercMedicHealBeam");
    libGame_gf_PreloadingAddModelToBlackList("MercMedicHealModel");
    libGame_gf_PreloadingAddModelToBlackList("MengskMedic");
    libGame_gf_PreloadingAddModelToBlackList("MengskMedicHealBeam");
    libGame_gf_PreloadingAddModelToBlackList("MengskMedicHealModel");
    libGame_gf_PreloadingAddModelToBlackList("InfestedMedic");
    libGame_gf_PreloadingAddModelToBlackList("InfestedMedicInfestation");
    libGame_gf_PreloadingAddModelToBlackList("EnergyNovaShockwave");
    libGame_gf_PreloadingAddModelToBlackList("EnergyNovaBurn");
    libGame_gf_PreloadingAddModelToBlackList("EnergyNovaShockwaveSmoke");
    libGame_gf_PreloadingAddModelToBlackList("EnergyNovaRangeVisual");
    libGame_gf_PreloadingAddModelToBlackList("SMNova");
    libGame_gf_PreloadingAddModelToBlackList("NovaPortrait");
    libGame_gf_PreloadingAddModelToBlackList("NukeSiloNova");
    libGame_gf_PreloadingAddModelToBlackList("Nova");
    libGame_gf_PreloadingAddModelToBlackList("NovaDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaSnipeAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeShadowFuryImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaArmorBlinkSuitBlinkOriginModel");
    libGame_gf_PreloadingAddModelToBlackList("NovaArmorBlinkSuitBlinkStopModel");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDroneAbsorbCPBeam");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDronePlaceholderShotBeam");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDronePlaceholderShotBeamImpact");
    libGame_gf_PreloadingAddModelToBlackList("Nova_DominationVisor_Beam");
    libGame_gf_PreloadingAddModelToBlackList("Nova_DominationVisor_Impact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPlasmaBlastNewImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPlasmaBlastNewHitImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPlasmaBlastNewLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPlasmaBlastNewLaunchMissile");
    libGame_gf_PreloadingAddModelToBlackList("Nova_BlinkIn");
    libGame_gf_PreloadingAddModelToBlackList("Nova_BlinkOut");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Blink_Shield");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Holographic_Decoy_Birth");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Holographic_Decoy_Death");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDrone");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDroneDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaDefensiveDroneRelease");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaBlastWeaponImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaBlastWeapon");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaRifleWeaponImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaRifleWeaponLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaRifleWeapon");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_PulseGrenade");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_JetPack");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_MonoMolecularBlade");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_SniperRifle");
    libGame_gf_PreloadingAddModelToBlackList("PickUp_Nova_PlasmaRifle");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaPuddle");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaPuddleSmall");
    libGame_gf_PreloadingAddModelToBlackList("NovaPlasmaPuddleLarge");
    libGame_gf_PreloadingAddModelToBlackList("SuperStimNovaHoT");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeGunAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponBlazefireBladeShadowFury");
    libGame_gf_PreloadingAddModelToBlackList("EMPNovaImpact");
    libGame_gf_PreloadingAddModelToBlackList("EMPNovaLaunch");
    libGame_gf_PreloadingAddModelToBlackList("EMPNovaConstantModel");
    libGame_gf_PreloadingAddModelToBlackList("XelNagaTowerEpilogueNova");
    libGame_gf_PreloadingAddModelToBlackList("XelNagaTowerEpilogueNovaHeal");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaActivated");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaBurn");
    libGame_gf_PreloadingAddModelToBlackList("KerriganNovaShockwave");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroBase");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroJetpack");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroApolloInfantrySuit");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroBlinkSuit");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroDeathWarpOutBase");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroDeathWarpOutJetpack");
    libGame_gf_PreloadingAddModelToBlackList("NovaHeroDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleAttackCloakedImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleAttackUncloakedImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleSnipeAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleSnipeAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponCanisterRifleSnipeAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetPulseGrenadesAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetPulseGrenadesWeapon");
    libGame_gf_PreloadingAddModelToBlackList("PickupNovaGadgetCharges");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetSwarmGrenadesAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetSwarmGrenadesWeapon");
    libGame_gf_PreloadingAddModelToBlackList("SuperStimpackNovaEndImpact");
    libGame_gf_PreloadingAddModelToBlackList("SuperStimpackNovaStartImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaLockdownMissile");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetFlashBangGrenadesWeapon");
    libGame_gf_PreloadingAddModelToBlackList("NovaGadgetFlashBangGrenadesAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaPsiEmitter");
    libGame_gf_PreloadingAddModelToBlackList("NovaPsiEmitterDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaPsiEmitterPlacement");
    libGame_gf_PreloadingAddModelToBlackList("NovaPsiEmitterReleaseWeapon");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_Equipment");
    libGame_gf_PreloadingAddModelToBlackList("Pickup_Nova_Technology");
    libGame_gf_PreloadingAddModelToBlackList("GeneralNovaPickup");
    libGame_gf_PreloadingAddModelToBlackList("VultureNovaPickup");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponHellfireShotgunLaunchModel");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponHellfireShotgunImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponHellfireShotgunBlastLaunchModel");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponHellfireShotgunBlastImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPsiBladeDamageImpactCloaked");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPsiBladeDamageImpactUncloaked");
    libGame_gf_PreloadingAddModelToBlackList("NovaPsiStrikeModel");
    libGame_gf_PreloadingAddModelToBlackList("NovaWeaponPsiStrikeImpact");
    libGame_gf_PreloadingAddModelToBlackList("NovaNeckBreakImpact");
    libGame_gf_PreloadingAddModelToBlackList("StimPackDevice_Nova");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Holographic_Decoy");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Holographic_Decoy_Impact");
    libGame_gf_PreloadingAddModelToBlackList("NovaAcidPuddle");
    libGame_gf_PreloadingAddModelToBlackList("NovaAcidPuddlePortrait");
    libGame_gf_PreloadingAddModelToBlackList("NovaColonistHut");
    libGame_gf_PreloadingAddModelToBlackList("NovaColonistHutDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaInfestedBanshee");
    libGame_gf_PreloadingAddModelToBlackList("NovaInfestedBansheeDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaInfestedBansheePortrait");
    libGame_gf_PreloadingAddModelToBlackList("NovaTerrazineTank");
    libGame_gf_PreloadingAddModelToBlackList("NovaTerrazineTankDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaTerrazineTankDeathLow");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicatorRailgunBeam");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicator");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicatorDeath");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicatorPortrait");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicatorMissileAttackMissile");
    libGame_gf_PreloadingAddModelToBlackList("NovaEradicatorMissileAttackTargetingUI");
    libGame_gf_PreloadingAddModelToBlackList("NovaUmojanLabWallCap");
    libGame_gf_PreloadingAddModelToBlackList("NovaTerrazineCanister");
    libGame_gf_PreloadingAddModelToBlackList("Nova_ShotGunCone");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Blink_Shield_ImpactPoint");
    libGame_gf_PreloadingAddModelToBlackList("Beacon_Nova");
    libGame_gf_PreloadingAddModelToBlackList("Beacon_NovaSmall");
    libGame_gf_PreloadingAddModelToBlackList("Nova_Chase_BackgroundBuildings");
    libGame_gf_PreloadingAddModelToBlackList("VoidRay_TalDarim_Nova04");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screens_Mission_NovaCalldownTwo");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuNova02Low");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuNova03Low");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuNova04Low");
    libGame_gf_PreloadingAddModelToBlackList("Glue_NovaBlackOpsShip");
    libGame_gf_PreloadingAddModelToBlackList("NovaTrophyModel");
    libGame_gf_PreloadingAddModelToBlackList("Nova2TrophyModel");
    libGame_gf_PreloadingAddModelToBlackList("Nova3TrophyModel");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_PrePurchase");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_PrePurchaseLow");
    libGame_gf_PreloadingAddModelToBlackList("GlueSMX3Nova");
    libGame_gf_PreloadingAddModelToBlackList("GlueSMX3NovaLow");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuNovaLow");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Cutscene_MP01_010_LensFlareNova");
    libGame_gf_PreloadingAddModelToBlackList("GhostNova");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaPortrait");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_NovaPortrait");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_NovaPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_NovaPortraitAddition_Low");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeath");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeathBlast");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeathAcid");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeathEviscerate");
    libGame_gf_PreloadingAddModelToBlackList("GhostNovaDeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge00");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge01");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge02");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge03");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge04");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge05");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge06");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge07");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge08");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge09");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge10");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge11");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge12");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge13");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge14");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge15");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge16");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge17");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge18");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova_Ship_Bridge19");
    libGame_gf_PreloadingAddModelToBlackList("SMX3_Nova");
    libGame_gf_PreloadingAddModelToBlackList("PurificationNovaImpact");
    libGame_gf_PreloadingAddModelToBlackList("PurificationNovaModelSwap");
    libGame_gf_PreloadingAddModelToBlackList("PurificationNovaRangeIndicator");
    libGame_gf_PreloadingAddModelToBlackList("PurificationNova");
    libGame_gf_PreloadingAddModelToBlackList("PurificationNovaBirth");
    libGame_gf_PreloadingAddModelToBlackList("GlazeNovaBaseDecoy");
    libGame_gf_PreloadingAddModelToBlackList("NovaEx3_Death");
    libGame_gf_PreloadingAddModelToBlackList("NovaEx3_DeathAcid");
    libGame_gf_PreloadingAddModelToBlackList("NovaEx3_DeathFire");
    libGame_gf_PreloadingAddModelToBlackList("Nova");
    libGame_gf_PreloadingAddModelToBlackList("PoisonNovaDotModel");
    libGame_gf_PreloadingAddModelToBlackList("PoisonNovaModel");
    libGame_gf_PreloadingAddModelToBlackList("SpaceDiablo");
    libGame_gf_PreloadingAddModelToBlackList("Diablo_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("L800ETC_Ad");
    libGame_gf_PreloadingAddModelToBlackList("SMBridgePlanetCastanar");
    libGame_gf_PreloadingAddModelToBlackList("SMBridgePlanetChar");
    libGame_gf_PreloadingAddModelToBlackList("PurifierPlanetCrackerBeam");
    libGame_gf_PreloadingAddModelToBlackList("PurifierPlanetCrackerImpact");
    libGame_gf_PreloadingAddModelToBlackList("L800ETCNuke");
    libGame_gf_PreloadingAddModelToBlackList("PurifierPlanetCrackerVoidBeam");
    libGame_gf_PreloadingAddModelToBlackList("MothershipAiur06PlanetCrackerBeam");
    libGame_gf_PreloadingAddModelToBlackList("SOAPlanetCrackerRadarModel");
    libGame_gf_PreloadingAddModelToBlackList("SOAPlanetCrackerAUnit");
    libGame_gf_PreloadingAddModelToBlackList("SOAPlanetCrackerABeam");
    libGame_gf_PreloadingAddModelToBlackList("SOAPlanetCrackerAChargeBeam");
    libGame_gf_PreloadingAddModelToBlackList("SOAPlanetCrackerTargetModel");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerPurifierUnit");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerPurifierBeam");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerPurifierChargeBeam");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerPurifierTargetModel");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerPurifierMothershipModel");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerAiurBeam");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerAiurChargeBeam");
    libGame_gf_PreloadingAddModelToBlackList("PlanetCrackerAiurTargetModel");
    libGame_gf_PreloadingAddModelToBlackList("SOA_GroundTargetCursor");
    libGame_gf_PreloadingAddModelToBlackList("SOAGravitonBombTargetModel");
    libGame_gf_PreloadingAddModelToBlackList("SOAOrbitalStrikeTargetModel");
    libGame_gf_PreloadingAddModelToBlackList("PickupNovaGadgetCharges");
    libGame_gf_PreloadingAddModelToBlackList("AOEStretchLineMid");
    libGame_gf_PreloadingAddModelToBlackList("AOEStretchLineStart");
    libGame_gf_PreloadingAddModelToBlackList("AOEStretchLineEnd");
    libGame_gf_PreloadingAddModelToBlackList("SMX1LeviathanSetCalloutPositions");
    libGame_gf_PreloadingAddModelToBlackList("LiberatorAGTargetCursorSplat");
    libGame_gf_PreloadingAddModelToBlackList("LiberatorAGTargetCursorSplat_Upgrade");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineEnd");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineMid");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineStart");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineRedEnd");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineRedMid");
    libGame_gf_PreloadingAddModelToBlackList("ZergAOEStretchLineRedStart");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineBlueStart");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineBlueMid");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineBlueScrollMid");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineBlueEnd");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineSolarLanceStart");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineSolarLanceMid");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineSolarLanceEnd");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineLargeStart");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineLargeMid");
    libGame_gf_PreloadingAddModelToBlackList("ProtossAOEStretchLineLargeEnd");
    libGame_gf_PreloadingAddModelToBlackList("BossTargetCursorSplat");
    libGame_gf_PreloadingAddModelToBlackList("MurlocMarine");
    libGame_gf_PreloadingAddModelToBlackList("MurlocMarine");
    libGame_gf_PreloadingAddModelToBlackList("DarkProbe");
    libGame_gf_PreloadingAddModelToBlackList("DarkProbeDeath");
    libGame_gf_PreloadingAddModelToBlackList("TalDarim_Probe_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe");
    libGame_gf_PreloadingAddModelToBlackList("DarkProbe");
    libGame_gf_PreloadingAddModelToBlackList("DarkProbeDeath");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Collection_DeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Blizzcon17_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("ProbeAttackBeam");
    libGame_gf_PreloadingAddModelToBlackList("ProbeAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("SMX2RobotProbe");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Blizzcon17");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Blizzcon17_Death");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Blizzcon17_DeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Collection");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Collection_Death");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Collection_DeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Collection");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Collection_Death");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Collection_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Collection_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe");
    libGame_gf_PreloadingAddModelToBlackList("ProbeDeath");
    libGame_gf_PreloadingAddModelToBlackList("ProbeDeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("ProbePortrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_DeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim_Death");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Taldarim");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Portrait");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_DeathRagdoll");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier_Death");
    libGame_gf_PreloadingAddModelToBlackList("Probe_Purifier");
    libGame_gf_PreloadingAddModelToBlackList("TRaynorDumpTruck");
    libGame_gf_PreloadingAddModelToBlackList("RaynorSnipeBigBloodImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorSnipeLaunchSquib");
    libGame_gf_PreloadingAddModelToBlackList("RaynorSnipeBeam");
    libGame_gf_PreloadingAddModelToBlackList("RaynorCommandoAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("RaynorCommandoAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorCommando");
    libGame_gf_PreloadingAddModelToBlackList("RaynorCommandoDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("SMHyperionBridgeTRaynor03BriefingCamera");
    libGame_gf_PreloadingAddModelToBlackList("CivilianRaynor");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02KateLockwell");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02MengskHologram");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02MengskHologramSet");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02MaleCivilian");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02Screen");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02PortraitRight");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor02TitleTopRight");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor03KateLockwell");
    libGame_gf_PreloadingAddModelToBlackList("SMTVRaynor03KateLockwellPortrait");
    libGame_gf_PreloadingAddModelToBlackList("SMRaynorGun");
    libGame_gf_PreloadingAddModelToBlackList("RaynorPlasmaGunImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorPlasmaGunLaunch");
    libGame_gf_PreloadingAddModelToBlackList("RaynorGatlingGunAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("RaynorGatlingGunAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorCommanderPortrait");
    libGame_gf_PreloadingAddModelToBlackList("RaynorMarinePortrait");
    libGame_gf_PreloadingAddModelToBlackList("SMRaynorsRaidersScreen");
    libGame_gf_PreloadingAddModelToBlackList("NewsRaynorLogo");
    libGame_gf_PreloadingAddModelToBlackList("SMRaynorCommander");
    libGame_gf_PreloadingAddModelToBlackList("SMRaynorMarine");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor01SignsDestructible1");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor01SignsDestructible2");
    libGame_gf_PreloadingAddModelToBlackList("Raynor");
    libGame_gf_PreloadingAddModelToBlackList("MarineRaynorDeath");
    libGame_gf_PreloadingAddModelToBlackList("RaynorDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("RaynorAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("RaynorAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorD8Charge");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor01RadarDish");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor01Signs");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor02MineLift");
    libGame_gf_PreloadingAddModelToBlackList("GlueRaynorMarine");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor02Crane");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor02CranePart2x2");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor02CranePart3x3");
    libGame_gf_PreloadingAddModelToBlackList("TRaynor02CranePart5x5");
    libGame_gf_PreloadingAddModelToBlackList("GlueVoidRaynorCommander");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screens_CampaignMode_Light_Raynor");
    libGame_gf_PreloadingAddModelToBlackList("RaynorLab");
    libGame_gf_PreloadingAddModelToBlackList("RaynorLabAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("RaynorLabAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("RaynorMarinePortrait3D");
    libGame_gf_PreloadingAddModelToBlackList("StukovBossBlastWeapon");
    libGame_gf_PreloadingAddModelToBlackList("StukovBossBlastAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("StukovBossBlastAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenuStukovLow");
    libGame_gf_PreloadingAddModelToBlackList("GlueInfestedStukov");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranPortrait");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortrait");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortrait3D");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortraitDark");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovPortraitDarkAddition");
    libGame_gf_PreloadingAddModelToBlackList("StukovHeroGlow");
    libGame_gf_PreloadingAddModelToBlackList("StukovEnhanceBeam");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerran");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranDeath");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranDeathAcid");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranDeathTimeout");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("StukovInfestedTerranAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("StukovReviveCocoon");
    libGame_gf_PreloadingAddModelToBlackList("StukovReviveCocoonDeath");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukov");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovWeapon");
    libGame_gf_PreloadingAddModelToBlackList("InfestedStukovAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("Tassadar");
    libGame_gf_PreloadingAddModelToBlackList("TassadarPortrait");
    libGame_gf_PreloadingAddModelToBlackList("TychusEjectMissile");
    libGame_gf_PreloadingAddModelToBlackList("TychusTossGrenadeImpact");
    libGame_gf_PreloadingAddModelToBlackList("TychusGrenadeWeapon");
    libGame_gf_PreloadingAddModelToBlackList("TychusTossGrenade");
    libGame_gf_PreloadingAddModelToBlackList("TychusCommandoAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("TychusCommandoAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("TychusCommando");
    libGame_gf_PreloadingAddModelToBlackList("TychusCommandoDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("Tychus03OmegaStormImpact");
    libGame_gf_PreloadingAddModelToBlackList("Tychus03OmegaStormModel");
    libGame_gf_PreloadingAddModelToBlackList("BriefingPortrait_TTychus04");
    libGame_gf_PreloadingAddModelToBlackList("BriefingPortrait_TTychus05");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ArtifactActivated");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveDeath");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveDeathLow");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveShield");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveSmallDeath");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveSmallDeathLow");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ObjectiveSmallShield");
    libGame_gf_PreloadingAddModelToBlackList("TychusChaingun");
    libGame_gf_PreloadingAddModelToBlackList("TychusChaingunAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("TychusChaingunAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("TTychus05ArtifactAttached");
    libGame_gf_PreloadingAddModelToBlackList("SMMarSaraBarTychusCameras");
    libGame_gf_PreloadingAddModelToBlackList("SMHyperionBridgeStage1TychusCameras");
    libGame_gf_PreloadingAddModelToBlackList("SMHyperionCantinaTychusCameras");
    libGame_gf_PreloadingAddModelToBlackList("TychusPortrait");
    libGame_gf_PreloadingAddModelToBlackList("Tychus");
    libGame_gf_PreloadingAddModelToBlackList("TychusDeathFire");
    libGame_gf_PreloadingAddModelToBlackList("TychusLMWeapon");
    libGame_gf_PreloadingAddModelToBlackList("TychusAttackLaunch");
    libGame_gf_PreloadingAddModelToBlackList("TychusAttackImpact");
    libGame_gf_PreloadingAddModelToBlackList("GlueTychus");
    libGame_gf_PreloadingAddModelToBlackList("SMTychusMinigun");
    libGame_gf_PreloadingAddModelToBlackList("SMX3TychusBarBottles");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenu_TychusLow");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraReviveCocoon");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraReviveCocoonDeath");
    libGame_gf_PreloadingAddModelToBlackList("SMX1Zagara");
    libGame_gf_PreloadingAddModelToBlackList("GlueVoidZagara");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraDeepBurrow");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraDeepUnburrow");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraPortrait");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraPortraitAddition");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraPortrait3D");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraPortrait3DAddition");
    libGame_gf_PreloadingAddModelToBlackList("ZaGaraAcidSpinesMissile");
    libGame_gf_PreloadingAddModelToBlackList("ZaGaraDeath");
    libGame_gf_PreloadingAddModelToBlackList("ZaGara");
    libGame_gf_PreloadingAddModelToBlackList("ZagaraEggCollection");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulStunModel");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulCrystalCharge");
    libGame_gf_PreloadingAddModelToBlackList("SMZeratulMissionSelectBorder");
    libGame_gf_PreloadingAddModelToBlackList("SMZeratulBriefingBorder");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkOut");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulPortrait");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBriefing1APortrait");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBriefing1BPortrait");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBriefing2Portrait");
    libGame_gf_PreloadingAddModelToBlackList("SMZeratul");
    libGame_gf_PreloadingAddModelToBlackList("Zeratul");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulDeath");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkIn");
    libGame_gf_PreloadingAddModelToBlackList("TZeratul02HybridWarpInUnit");
    libGame_gf_PreloadingAddModelToBlackList("PylonPlacementTZeratul02");
    libGame_gf_PreloadingAddModelToBlackList("VC_Zeratul1_Sky");
    libGame_gf_PreloadingAddModelToBlackList("VC_Zeratul2_Planet");
    libGame_gf_PreloadingAddModelToBlackList("VCZeratul2PlanetLow");
    libGame_gf_PreloadingAddModelToBlackList("VC_Zeratul4_Fade");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoid");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidDeath");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidPortrait");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidAiur01");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidAiur01Death");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkAiur01Out");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkAiur01In");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkAiur01Impact");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidPrisonAiur01Buff");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulVoidPrisonAiur01");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulBlinkAiur01Missile");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulKnockbackImpactModel");
    libGame_gf_PreloadingAddModelToBlackList("PrologueZeratul");
    libGame_gf_PreloadingAddModelToBlackList("PrologueZeratulDeath");
    libGame_gf_PreloadingAddModelToBlackList("PrologueZeratulPortrait");
    libGame_gf_PreloadingAddModelToBlackList("UI_Screen_MainMenu_ZeratulLow");
    libGame_gf_PreloadingAddModelToBlackList("ZeratulPortrait3D");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingBlackListInitialize_Init () {
    libGame_gt_PreloadingBlackListInitialize = TriggerCreate("libGame_gt_PreloadingBlackListInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - FX Store Models
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingFXStoreModels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_PreloadingBlackListInitialize, true, true);
    TriggerExecute(libGame_gt_PreloadingFXStoreModelsGeneric, true, true);
    TriggerExecute(libGame_gt_PreloadingFXStoreModelsMapCursedHollow, true, true);
    TriggerExecute(libGame_gt_PreloadingFXStoreModelsMutatorWinterveil, true, true);
    TriggerExecute(libGame_gt_PreloadingPreloadingControl, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingFXStoreModels_Init () {
    libGame_gt_PreloadingFXStoreModels = TriggerCreate("libGame_gt_PreloadingFXStoreModels_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - FX Store Models Generic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingFXStoreModelsGeneric_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itModel;
    string lv_itUserDataInstance;

    // Automatic Variable Declarations
    int auto84A79F42_catalog;
    int auto84A79F42_i;
    string auto05BFDD70_userType;
    int auto05BFDD70_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSPreloadingEnabled == true))) {
            return false;
        }

        if (!(((GameIsOnline() == true) || (libGame_gv_preloadingPreloadDuringOfflineTest == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto84A79F42_catalog = c_gameCatalogModel;
    auto84A79F42_i = 1;
    for ( ; auto84A79F42_i <= CatalogEntryCount(c_gameCatalogModel) ; auto84A79F42_i += 1 ) {
        lv_itModel = CatalogEntryGet(auto84A79F42_catalog, auto84A79F42_i);
        if (((StringContains((lv_itModel), "Talent", c_stringAnywhere, c_stringNoCase) == true))) {
            libGame_gf_PreloadingStoreModel(lv_itModel);
        }

    }
    auto05BFDD70_userType = "Mount";
    auto05BFDD70_i = 1;
    for ( ; auto05BFDD70_i <= UserDataInstanceCount(auto05BFDD70_userType) ; auto05BFDD70_i += 1 ) {
        lv_itUserDataInstance = UserDataInstance(auto05BFDD70_userType, auto05BFDD70_i);
        libGame_gf_PreloadingStoreModel(UserDataGetGameLink("Mount", lv_itUserDataInstance, "Model", 1));
    }
    libGame_gf_PreloadingStoreModel("Invisible");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_Portrait_OnFire");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_KillLog_Quest");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_KillLog_OnFire");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_PartyFrame_OnFire");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_PartyFrame_OnFire_Enemy");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_KillLog");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_HealthBar_OnFire");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_HealthBar_OnFire_NoMana");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_Callout");
    libGame_gf_PreloadingStoreModel("Storm_UI_Hud_Talent_Advantage");
    libGame_gf_PreloadingStoreModel("Storm_UI_VictoryScreenFX");
    libGame_gf_PreloadingStoreModel("Storm_UI_DefeatScreenFX");
    libGame_gf_PreloadingStoreModel("MasterTaunt");
    libGame_gf_PreloadingStoreModel("KingsCoreDeathAttachment");
    libGame_gf_PreloadingStoreModel("AssistMePing");
    libGame_gf_PreloadingStoreModel("AssistMePingMinimap");
    libGame_gf_PreloadingStoreModel("AttackOverheadPing");
    libGame_gf_PreloadingStoreModel("DangerPing");
    libGame_gf_PreloadingStoreModel("DangerPingMinimap");
    libGame_gf_PreloadingStoreModel("DefendPing");
    libGame_gf_PreloadingStoreModel("DefendPingMinimap");
    libGame_gf_PreloadingStoreModel("HearthstonePingMinimap");
    libGame_gf_PreloadingStoreModel("HelpOverheadPing");
    libGame_gf_PreloadingStoreModel("MapMechanicPing");
    libGame_gf_PreloadingStoreModel("OnMyWayPing");
    libGame_gf_PreloadingStoreModel("OnMyWayPingMinimap");
    libGame_gf_PreloadingStoreModel("RetreatPing");
    libGame_gf_PreloadingStoreModel("RetreatPingMinimap");
    libGame_gf_PreloadingStoreModel("StormPingAlert");
    libGame_gf_PreloadingStoreModel("StormPingArrow");
    libGame_gf_PreloadingStoreModel("StormPingBoss");
    libGame_gf_PreloadingStoreModel("StormPingCoreAttack");
    libGame_gf_PreloadingStoreModel("StormPingGeneral");
    libGame_gf_PreloadingStoreModel("StormPingSimple");
    libGame_gf_PreloadingStoreModel("StormPingWarning");
    libGame_gf_PreloadingStoreModel("StormBlind");
    libGame_gf_PreloadingStoreModel("StormCommandUIHarnessAttack");
    libGame_gf_PreloadingStoreModel("StormCommandUIHarnessMove");
    libGame_gf_PreloadingStoreModel("StormDamageReduction");
    libGame_gf_PreloadingStoreModel("StormFastBuff");
    libGame_gf_PreloadingStoreModel("StormFastBuffLarge");
    libGame_gf_PreloadingStoreModel("StormFear");
    libGame_gf_PreloadingStoreModel("StormHeroDeathCommon");
    libGame_gf_PreloadingStoreModel("LowAmmoCastleDisabledModel");
    libGame_gf_PreloadingStoreModel("LowAmmoTowerDisabledModel");
    libGame_gf_PreloadingStoreModel("RevealedBuff");
    libGame_gf_PreloadingStoreModel("StormSleep");
    libGame_gf_PreloadingStoreModel("StormSlowDebuff");
    libGame_gf_PreloadingStoreModel("StormSlowDebuffLarge");
    libGame_gf_PreloadingStoreModel("StormStun");
    libGame_gf_PreloadingStoreModel("QuestTalentCompleteModel");
    libGame_gf_PreloadingStoreModel("RegenGlobeAttachment");
    libGame_gf_PreloadingStoreModel("RegenGlobeEnemy");
    libGame_gf_PreloadingStoreModel("RegenGlobeEnemyAttachment");
    libGame_gf_PreloadingStoreModel("RegenGlobeImpact");
    libGame_gf_PreloadingStoreModel("RegenGlobeMissile");
    libGame_gf_PreloadingStoreModel("RegenGlobeMissileAllyAttachment");
    libGame_gf_PreloadingStoreModel("RegenGlobeMissileEnemyAttachment");
    libGame_gf_PreloadingStoreModel("RegenGlobeNeutral");
    libGame_gf_PreloadingStoreModel("RegenGlobeNeutralSpawnMissile");
    libGame_gf_PreloadingStoreModel("HeroGenericExperience@Globe");
    libGame_gf_PreloadingStoreModel("HeroGenericExperience@GlobeMissileImpactTeamColor");
    libGame_gf_PreloadingStoreModel("HeroGenericExperience@GlobeMissileImpact");
    libGame_gf_PreloadingStoreModel("HeroGenericExperience@GlobeLastHitImpact");
    libGame_gf_PreloadingStoreModel("UI_RangeSplat");
    libGame_gf_PreloadingStoreModel("HeroDeathFX");
    libGame_gf_PreloadingStoreModel("HeroRespawn");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Enemy");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Enemy_Low");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Player");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Player_Low");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Teammate");
    libGame_gf_PreloadingStoreModel("Storm_HeroRing_Teammate_Low");
    libGame_gf_PreloadingStoreModel("Storm_Effect_HeroLevelUp");
    libGame_gf_PreloadingStoreModel("MountSmokeScreen");
    libGame_gf_PreloadingStoreModel("StormGroundConfirmation");
    libGame_gf_PreloadingStoreModel("Storm_Effect_MinionWarpIn");
    libGame_gf_PreloadingStoreModel("MinionMeleeKingsCrest");
    libGame_gf_PreloadingStoreModel("KingsCrestFootmanMinionDeath");
    libGame_gf_PreloadingStoreModel("KingsCrestFootmanMinionDeathRagdoll");
    libGame_gf_PreloadingStoreModel("MinionRangedKingsCrest");
    libGame_gf_PreloadingStoreModel("KingsCrestRangedMinionDeath");
    libGame_gf_PreloadingStoreModel("KingsCrestRangedMinionDeathRagdoll");
    libGame_gf_PreloadingStoreModel("KingsCrestRangedMinionMissle");
    libGame_gf_PreloadingStoreModel("KingsCrestRangedMinionMissleImpact");
    libGame_gf_PreloadingStoreModel("MinionWizardKingsCrest");
    libGame_gf_PreloadingStoreModel("KingsCrestWizardMinionDeath");
    libGame_gf_PreloadingStoreModel("WizardMinionMissile");
    libGame_gf_PreloadingStoreModel("WizardMinionMissileImpact");
    libGame_gf_PreloadingStoreModel("WizardMinionMissileLaunch");
    libGame_gf_PreloadingStoreModel("KingsCrestCatapultMinionMissle");
    libGame_gf_PreloadingStoreModel("CatapultMinionWarning");
    libGame_gf_PreloadingStoreModel("CatapultMinionImpactModel");
    libGame_gf_PreloadingStoreModel("MinionCatapultRanged");
    libGame_gf_PreloadingStoreModel("MinionCatapultRangedDeath");

    libGame_gf_PreloadingStoreModel("HeroGenericCaptureMacGuffin@BeamVFX");
    libGame_gf_PreloadingStoreModel("HeroGenericCaptureMacGuffinTwo@BeamVFX");
    libGame_gf_PreloadingStoreModel("HeroGenericFountainDrink@HealImpact");
    libGame_gf_PreloadingStoreModel("HeroGenericFountainDrink@HealingWellBeam");
    libGame_gf_PreloadingStoreModel("HeroGenericFountainDrink@HealingWellBeamRed");
    libGame_gf_PreloadingStoreModel("GodRayModel");
    libGame_gf_PreloadingStoreModel("Storm_Effect_HeroDeath");
    libGame_gf_PreloadingStoreModel("HeroGenericHearthstone@ModelChannel");
    libGame_gf_PreloadingStoreModel("HeroGenericHearthstone@ModelFinal");
    libGame_gf_PreloadingStoreModel("MeleeHeroAttackImpact");
    libGame_gf_PreloadingStoreModel("Mount");
    libGame_gf_PreloadingStoreModel("HeroGenericMount@SummonChannel");
    libGame_gf_PreloadingStoreModel("ShrubBuff");
    libGame_gf_PreloadingStoreModel("KingsCoreAOEImpact");
    libGame_gf_PreloadingStoreModel("KingsCoreShootAttackBeamLow");
    libGame_gf_PreloadingStoreModel("KingsCoreShootAttackBeam");
    libGame_gf_PreloadingStoreModel("KingsCoreAttackLaunch");
    libGame_gf_PreloadingStoreModel("CorePermanentInvulnerabilityAuraShield");
    libGame_gf_PreloadingStoreModel("CorePermanentInvulnerabilityOrbitingModel");
    libGame_gf_PreloadingStoreModel("CorePermanentInvulnerabilityModelAttachment");
    libGame_gf_PreloadingStoreModel("CoreKingsCrestDeath");
    libGame_gf_PreloadingStoreModel("TowerTargetingMarker");
    libGame_gf_PreloadingStoreModel("TowerAttackBeam");
    libGame_gf_PreloadingStoreModel("KingsCrestTowerMissile");
    libGame_gf_PreloadingStoreModel("KingsCrestTowerMissileImpact");
    libGame_gf_PreloadingStoreModel("TownHallL2WeaponAttackImpact");
    libGame_gf_PreloadingStoreModel("TownHallL2WeaponAttackLaunch");
    libGame_gf_PreloadingStoreModel("TownHallL2WeaponAttackMissile");
    libGame_gf_PreloadingStoreModel("TownTownHallL2ExplosionDamage");
    libGame_gf_PreloadingStoreModel("TownTownHallL2Death");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDamageLightBase");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDeadBase");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDeadTurret");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDamageLightTurret");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDamageHeavyBase");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestExplosionDamageHeavyTurret");
    libGame_gf_PreloadingStoreModel("CannonTowerL2WarningModel");
    libGame_gf_PreloadingStoreModel("CannonTowerL2AttackImpact");
    libGame_gf_PreloadingStoreModel("CannonTowerL2AttackLaunch");
    libGame_gf_PreloadingStoreModel("CannonTowerL2WeaponMissile");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestBirthModel");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestDamageHeavy");
    libGame_gf_PreloadingStoreModel("TownTowerL2KingsCrestDamageLight");
    libGame_gf_PreloadingStoreModel("TownTownHallL3BirthModel");
    libGame_gf_PreloadingStoreModel("TownTownHallL3Damage");
    libGame_gf_PreloadingStoreModel("TownTownHallL3ExplosionDamage");
    libGame_gf_PreloadingStoreModel("TownHallL3WeaponAttackImpact");
    libGame_gf_PreloadingStoreModel("TownHallL3WeaponAttackLaunch");
    libGame_gf_PreloadingStoreModel("TownHallL3WeaponAttackMissile");
    libGame_gf_PreloadingStoreModel("TownTownHallL3Death");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestBirthModel");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrest");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDeadBase");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDamageLightBase");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDeadTurret");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDamageLightTurret");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDamageHeavyBase");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestExplosionDamageHeavyTurret");
    libGame_gf_PreloadingStoreModel("CannonTowerL3WarningModel");
    libGame_gf_PreloadingStoreModel("CannonTowerL3AttackImpact");
    libGame_gf_PreloadingStoreModel("CannonTowerL3AttackLaunch");
    libGame_gf_PreloadingStoreModel("CannonTowerL3WeaponMissile");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestDamageHeavy");
    libGame_gf_PreloadingStoreModel("TownTowerL3KingsCrestDamageLight");
    libGame_gf_PreloadingStoreModel("MercDefenderSiegeGiant");
    libGame_gf_PreloadingStoreModel("MercDefenderSiegeGiantAttackMissile");
    libGame_gf_PreloadingStoreModel("MercLanerSiegeGiantAttackMissile");
    libGame_gf_PreloadingStoreModel("MercLanerSiegeGiantNormal");
    libGame_gf_PreloadingStoreModel("MercSiegeGiant");
    libGame_gf_PreloadingStoreModel("MercSiegeGiantDamageImpact");
    libGame_gf_PreloadingStoreModel("MercSiegeGiantDeath");
    libGame_gf_PreloadingStoreModel("MercSiegeGiantDefenderNonDeath");
    libGame_gf_PreloadingStoreModel("SiegeGiantBirthFX");
    libGame_gf_PreloadingStoreModel("SiegeGiantMeleeImpactFX");
    libGame_gf_PreloadingStoreModel("SiegeGiantMeleeWarning");
    libGame_gf_PreloadingStoreModel("MercDefenderMeleeKnight");
    libGame_gf_PreloadingStoreModel("MercDefenderMeleeKnightDeath");
    libGame_gf_PreloadingStoreModel("MercDefenderMeleeKnightBirthModel");
    libGame_gf_PreloadingStoreModel("MercLanerMeleeKnight");
    libGame_gf_PreloadingStoreModel("MercLanerMeleeKnightDeath");
    libGame_gf_PreloadingStoreModel("MercDefenderRangedMageBirthModel");
    libGame_gf_PreloadingStoreModel("MercRangedKnightAttackMissile");
    libGame_gf_PreloadingStoreModel("MercRangedKnightAttackLaunchEffect");
    libGame_gf_PreloadingStoreModel("MercRangedKnightAttackImpactEffect");
    libGame_gf_PreloadingStoreModel("GraveGolemBirth");
    libGame_gf_PreloadingStoreModel("GraveGolemEntanglingRootsMissile");
    libGame_gf_PreloadingStoreModel("GraveGolemMegaHitLaunch");
    libGame_gf_PreloadingStoreModel("GraveGolemMegaStunHandAttach");
    libGame_gf_PreloadingStoreModel("GraveGolemRootsLaunchFX");
    libGame_gf_PreloadingStoreModel("JungleGraveGolem");
    libGame_gf_PreloadingStoreModel("BindingRootsImpact");
    libGame_gf_PreloadingStoreModel("BindingRootsModel");
    libGame_gf_PreloadingStoreModel("BindingRootsWarningModel");
    libGame_gf_PreloadingStoreModel("JungleGraveGolemDeath");
    libGame_gf_PreloadingStoreModel("MegaStunStomp");
    libGame_gf_PreloadingStoreModel("MegaStunWarningModel");
    libGame_gf_PreloadingStoreModel("MercGoblinSapper");
    libGame_gf_PreloadingStoreModel("MercDefenderGoblinSapperAttackMissile");
    libGame_gf_PreloadingStoreModel("MercGoblinSapperAttackImpactWarning");
    libGame_gf_PreloadingStoreModel("MercGoblinSapperAttackImpact");
    libGame_gf_PreloadingStoreModel("MercGoblinSapperCoreMortarDeath");
    libGame_gf_PreloadingStoreModel("MercGoblinSapperDeath");
    libGame_gf_PreloadingStoreModel("MercGoblinSapperSuicideDeath");
    libGame_gf_PreloadingStoreModel("MercLanerGoblinSapperAttackMissile");
    libGame_gf_PreloadingStoreModel("MercLanerGoblinSapperCoreMortarMissileImpact");
    libGame_gf_PreloadingStoreModel("MercLanerGoblinSapperCoreMortarMissile");
    libGame_gf_PreloadingStoreModel("MercLanerGoblinSapperSuicideActive");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath00");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath01");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath02");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath03");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath04");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath05");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath06");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath07");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath08");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath09");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath10");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath11");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath12");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath13");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath14");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath15");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath16");
    libGame_gf_PreloadingStoreModel("StormKingsCrestFenceStoneDeath17");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingFXStoreModelsGeneric_Init () {
    libGame_gt_PreloadingFXStoreModelsGeneric = TriggerCreate("libGame_gt_PreloadingFXStoreModelsGeneric_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - FX Store Models Map (Cursed Hollow)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingFXStoreModelsMapCursedHollow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libCore_gf_MapDataGetMapMapPreset(libCore_gv_sYSMapIndex) == libCore_ge_MAPMap_CursedHollow) || (libCore_gf_MapDataGetMapMapPreset(libCore_gv_sYSMapIndex) == libCore_ge_MAPMap_CursedHollowWinterveil)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PreloadingStoreModelsFromSkinEntry("TilesetRavenCourtReplacement");
    libGame_gf_PreloadingStoreModel("CurseofEluneBuilding");
    libGame_gf_PreloadingStoreModel("CurseofEluneUnits");
    libGame_gf_PreloadingStoreModel("RavenLordTribute");
    libGame_gf_PreloadingStoreModel("RavenLordTributePreview");
    libGame_gf_PreloadingStoreModel("RavenLordTributeSpawn");
    libGame_gf_PreloadingStoreModel("RavenLordTributeWarning");
    libGame_gf_PreloadingStoreModel("CursedHollowCoreCurse@CircleWarning");
    libGame_gf_PreloadingStoreModel("CursedHollowCoreCurse@Detonate");
    libGame_gf_PreloadingStoreModel("CursedHollowCoreCurse@Warning");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingFXStoreModelsMapCursedHollow_Init () {
    libGame_gt_PreloadingFXStoreModelsMapCursedHollow = TriggerCreate("libGame_gt_PreloadingFXStoreModelsMapCursedHollow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - FX Store Models Mutator (Winterveil)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingFXStoreModelsMutatorWinterveil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gf_MapDataGetMapMutatorPreset(libCore_gv_sYSMapIndex) == libCore_ge_GameMutators_Winterveil))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PreloadingStoreModel("SnowmanInProgressMiddle");
    libGame_gf_PreloadingStoreModel("SnowmanInProgressTop");
    libGame_gf_PreloadingStoreModel("Storm_FX_KingsCrest_Rain");
    libGame_gf_PreloadingStoreModel("Storm_FX_SnowBrawl_SnowBall_Big_Clean");
    libGame_gf_PreloadingStoreModel("Storm_FX_SnowBrawl_SnowBall_Clean");
    libGame_gf_PreloadingStoreModel("HardPackSnowballImpact");
    libGame_gf_PreloadingStoreModel("HeavySnowballImpact");
    libGame_gf_PreloadingStoreModel("HardPackSnowballMissile");
    libGame_gf_PreloadingStoreModel("HeavySnowballMissile");
    libGame_gf_PreloadingStoreModel("SnowmanAttackMissile");
    libGame_gf_PreloadingStoreModel("HardPackSnowballMissileTrailSplat");
    libGame_gf_PreloadingStoreModel("HardPackSnowballTrailSplat");
    libGame_gf_PreloadingStoreModel("HeavySnowballExplosion");
    libGame_gf_PreloadingStoreModel("HeavySnowballImpactGlaze");
    libGame_gf_PreloadingStoreModel("HeavySnowballLaunch");
    libGame_gf_PreloadingStoreModel("SnowballPickupGroundPuff");
    libGame_gf_PreloadingStoreModel("SnowmanEnrageGlaze");
    libGame_gf_PreloadingStoreModel("HeavySnowballSlow");
    libGame_gf_PreloadingStoreModel("SnowballPickupGlow");
    libGame_gf_PreloadingStoreModel("WorldEnderSnowballWarningMotion01");
    libGame_gf_PreloadingStoreModel("WorldEnderSnowballWarningSplatRing");
    libGame_gf_PreloadingStoreModel("SnowmanDeath");
    libGame_gf_PreloadingStoreModel("EvilSnowman");
    libGame_gf_PreloadingStoreModel("SnowballPickupHardPackSnowball");
    libGame_gf_PreloadingStoreModel("SnowballPickupHeavySnowball");
    libGame_gf_PreloadingStoreModel("SnowmanInProgress");
    libGame_gf_PreloadingStoreModel("WorldEnderSnowballMissile");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingFXStoreModelsMutatorWinterveil_Init () {
    libGame_gt_PreloadingFXStoreModelsMutatorWinterveil = TriggerCreate("libGame_gt_PreloadingFXStoreModelsMutatorWinterveil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Store Hero Models
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingStoreHeroModels_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itPlayer;
    string lv_itModel;

    // Automatic Variable Declarations
    playergroup auto0DE627AD_g;
    int autoC9A110AC_catalog;
    int autoC9A110AC_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0DE627AD_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto0DE627AD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        if ((libGame_gv_preloadingHeroIsStored[lv_heroIndex] == true)) {
            continue;
        }

        autoC9A110AC_catalog = c_gameCatalogModel;
        autoC9A110AC_i = 1;
        for ( ; autoC9A110AC_i <= CatalogEntryCount(c_gameCatalogModel) ; autoC9A110AC_i += 1 ) {
            lv_itModel = CatalogEntryGet(autoC9A110AC_catalog, autoC9A110AC_i);
            if ((StringContains((lv_itModel), libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroID, c_stringAnywhere, c_stringNoCase) == true)) {
                libGame_gf_PreloadingStoreModel(lv_itModel);
            }

        }
        libGame_gv_preloadingHeroIsStored[lv_heroIndex] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingStoreHeroModels_Init () {
    libGame_gt_PreloadingStoreHeroModels = TriggerCreate("libGame_gt_PreloadingStoreHeroModels_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Preloading Control
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingPreloadingControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itModel;

    // Automatic Variable Declarations
    int autoE224E65E_ae;
    const int autoE224E65E_ai = 1;
    int autoCD61F2AD_ae;
    const int autoCD61F2AD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_preloadingIterator = 0;
    autoE224E65E_ae = libGame_gv_preloadingMaxedValue;
    lv_itModel = 1;
    for ( ; ( (autoE224E65E_ai >= 0 && lv_itModel <= autoE224E65E_ae) || (autoE224E65E_ai < 0 && lv_itModel >= autoE224E65E_ae) ) ; lv_itModel += autoE224E65E_ai ) {
        libGame_gf_PreloadingPreloadModel(lv_itModel);
        if ((libGame_gv_preloadingHeroPreloadingForced == true)) {
            GameSetSpeedValue(c_gameSpeedFaster);
            TriggerExecute(libGame_gt_PreloadingStoreHeroModels, true, true);
            break;
        }

    }
    if ((libGame_gv_preloadingHeroPreloadingForced == false)) {
        while (!((libGame_gv_preloadingHeroPreloadingForced == true))) {
            Wait(1.0, c_timeGame);
        }
        GameSetSpeedValue(c_gameSpeedFaster);
        TriggerExecute(libGame_gt_PreloadingStoreHeroModels, true, true);
    }

    TextExpressionSetToken("Param/Expression/lib_Game_BFFA379C", "A", IntToText(libGame_gv_preloadingCurrentValue));
    TextExpressionSetToken("Param/Expression/lib_Game_BFFA379C", "B", IntToText(libGame_gv_preloadingMaxedValue));
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, TextExpressionAssemble("Param/Expression/lib_Game_BFFA379C"), PlayerGroupAll());
    autoCD61F2AD_ae = libGame_gv_preloadingMaxedValue;
    lv_itModel = libGame_gv_preloadingCurrentValue;
    for ( ; ( (autoCD61F2AD_ai >= 0 && lv_itModel <= autoCD61F2AD_ae) || (autoCD61F2AD_ai < 0 && lv_itModel >= autoCD61F2AD_ae) ) ; lv_itModel += autoCD61F2AD_ai ) {
        libGame_gf_PreloadingPreloadModel(lv_itModel);
        TextExpressionSetToken("Param/Expression/lib_Game_F2AC2990", "A", IntToText(libGame_gv_preloadingCurrentValue));
        TextExpressionSetToken("Param/Expression/lib_Game_F2AC2990", "B", IntToText(libGame_gv_preloadingMaxedValue));
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, TextExpressionAssemble("Param/Expression/lib_Game_F2AC2990"), PlayerGroupAll());
    }
    libGame_gv_preloadingCurrentValue = 0;
    TriggerExecute(libGame_gt_PreloadingDestroyPortraits, true, true);
    libGame_gv_preloadingFinished = true;
    GameSetSpeedValue(c_gameSpeedNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingPreloadingControl_Init () {
    libGame_gt_PreloadingPreloadingControl = TriggerCreate("libGame_gt_PreloadingPreloadingControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Force Hero Preloading (Timer)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingForceHeroPreloadingTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_preloadingFinished == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerStop(TriggerGetCurrent());
    }
    else {
        if ((TriggerActiveCount(libGame_gt_PreloadingPreloadingControl) <= 0)) {
            TriggerExecute(libGame_gt_PreloadingPreloadingControl, false, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingForceHeroPreloadingTimer_Init () {
    libGame_gt_PreloadingForceHeroPreloadingTimer = TriggerCreate("libGame_gt_PreloadingForceHeroPreloadingTimer_Func");
    TriggerEnable(libGame_gt_PreloadingForceHeroPreloadingTimer, false);
    TriggerAddEventTimePeriodic(libGame_gt_PreloadingForceHeroPreloadingTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Force Hero Preloading (Original)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingForceHeroPreloadingOriginal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSPreloadingEnabled == true))) {
            return false;
        }

        if (!(((GameIsOnline() == true) || (libGame_gv_preloadingPreloadDuringOfflineTest == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_preloadingHeroPreloadingForced = true;
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libGame_gv_preloadingFinished == true)) {
            break;
        }
        else {
            if ((TriggerActiveCount(libGame_gt_PreloadingPreloadingControl) <= 0)) {
                TriggerExecute(libGame_gt_PreloadingPreloadingControl, false, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingForceHeroPreloadingOriginal_Init () {
    libGame_gt_PreloadingForceHeroPreloadingOriginal = TriggerCreate("libGame_gt_PreloadingForceHeroPreloadingOriginal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Regen Globe Dummy Impact
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRegenGlobeDummyImpact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "RegenGlobeImpactSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRegenGlobeDummyImpact_Init () {
    libGame_gt_PlayerRegenGlobeDummyImpact = TriggerCreate("libGame_gt_PlayerRegenGlobeDummyImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerRegenGlobeDummyImpact, c_playerAny, "RegenGlobePickupImpactDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Regen Globe Neutral Dummy Set
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRegenGlobeNeutralDummySet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == libGame_gv_teamOrderIndex_C)) {
        UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), libCore_gv_cOMPUTER_TeamOrder, false);
    }
    else {
        UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), libCore_gv_cOMPUTER_TeamChaos, false);
    }
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RegenGlobePickupSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRegenGlobeNeutralDummySet_Init () {
    libGame_gt_PlayerRegenGlobeNeutralDummySet = TriggerCreate("libGame_gt_PlayerRegenGlobeNeutralDummySet_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerRegenGlobeNeutralDummySet, c_playerAny, "RegenGlobeNeutralDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Regen Globe Created Change Owner
//--------------------------------------------------------------------------------------------------
bool libGame_gt_NeutralRegenGlobeCreatedChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RegenGlobeNeutral"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), libCore_gv_cOMPUTER_Hostile, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_NeutralRegenGlobeCreatedChangeOwner_Init () {
    libGame_gt_NeutralRegenGlobeCreatedChangeOwner = TriggerCreate("libGame_gt_NeutralRegenGlobeCreatedChangeOwner_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_NeutralRegenGlobeCreatedChangeOwner, null, "RegenGlobeNeutralTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Generator Initialize
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RegenGlobeGeneratorInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itGenerator;
    int lv_index;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoF3781E5A_g;
    int autoF3781E5A_u;
    unitgroup auto18CA408B_g;
    int auto18CA408B_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = UnitGroup("RegenGlobeGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3781E5A_g = lv_unitGroup;
    autoF3781E5A_u = UnitGroupCount(autoF3781E5A_g, c_unitCountAll);
    for (;; autoF3781E5A_u -= 1) {
        lv_itGenerator = UnitGroupUnitFromEnd(autoF3781E5A_g, autoF3781E5A_u);
        if (lv_itGenerator == null) { break; }
        lv_index += 1;
        if ((lv_index > libGame_gv_regenGlobeGeneratorMaxCount)) {
            TextExpressionSetToken("Param/Expression/lib_Game_D03C13C2", "A", IntToText(libGame_gv_regenGlobeGeneratorMaxCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_D03C13C2"), true);
            break;
        }

        libGame_gv_regenGlobeGeneratorUnit[lv_index] = lv_itGenerator;
    }
    TriggerEnable(libGame_gt_RegenGlobeGeneratorTextTagUpdates, true);
    auto18CA408B_g = lv_unitGroup;
    auto18CA408B_u = UnitGroupCount(auto18CA408B_g, c_unitCountAll);
    for (;; auto18CA408B_u -= 1) {
        lv_itGenerator = UnitGroupUnitFromEnd(auto18CA408B_g, auto18CA408B_u);
        if (lv_itGenerator == null) { break; }
        UnitBehaviorAdd(lv_itGenerator, "RegenGlobeGenerator@GenerateRegenGlobe", lv_itGenerator, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RegenGlobeGeneratorInitialize_Init () {
    libGame_gt_RegenGlobeGeneratorInitialize = TriggerCreate("libGame_gt_RegenGlobeGeneratorInitialize_Func");
    TriggerAddEventTimer(libGame_gt_RegenGlobeGeneratorInitialize, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Generator Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RegenGlobeGeneratorTextTagUpdates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGenerator;
    text lv_textTag_Text;

    // Automatic Variable Declarations
    const int autoCCC6BC96_ae = libGame_gv_regenGlobeGeneratorMaxCount;
    const int autoCCC6BC96_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itGenerator = 1;
    for ( ; ( (autoCCC6BC96_ai >= 0 && lv_itGenerator <= autoCCC6BC96_ae) || (autoCCC6BC96_ai < 0 && lv_itGenerator >= autoCCC6BC96_ae) ) ; lv_itGenerator += autoCCC6BC96_ai ) {
        if ((libGame_gv_regenGlobeGeneratorUnit[lv_itGenerator] == null)) {
            continue;
        }

        if ((UnitHasBehavior2(libGame_gv_regenGlobeGeneratorUnit[lv_itGenerator], "RegenGlobeGenerator@GenerateRegenGlobe") == false)) {
            if ((libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator] != c_textTagNone)) {
                TextTagShow(libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator], PlayerGroupAll(), false);
            }

        }
        else {
            if ((libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator] == c_textTagNone)) {
                TextTagCreate(StringToText(""), 24, UnitGetPosition(libGame_gv_regenGlobeGeneratorUnit[lv_itGenerator]), 1.0, true, false, PlayerGroupAll());
                libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator] = TextTagLastCreated();
            }

            TextExpressionSetToken("Param/Expression/lib_Game_B42CAAFA", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(UnitBehaviorDuration(libGame_gv_regenGlobeGeneratorUnit[lv_itGenerator], "RegenGlobeGenerator@GenerateRegenGlobe"))));
            lv_textTag_Text = TextExpressionAssemble("Param/Expression/lib_Game_B42CAAFA");
            TextTagSetText(libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator], lv_textTag_Text);
            TextTagShow(libGame_gv_regenGlobeGeneratorTextTag[lv_itGenerator], PlayerGroupAll(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RegenGlobeGeneratorTextTagUpdates_Init () {
    libGame_gt_RegenGlobeGeneratorTextTagUpdates = TriggerCreate("libGame_gt_RegenGlobeGeneratorTextTagUpdates_Func");
    TriggerEnable(libGame_gt_RegenGlobeGeneratorTextTagUpdates, false);
    TriggerAddEventTimePeriodic(libGame_gt_RegenGlobeGeneratorTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Generator Globe Share Vision
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RegenGlobeGeneratorGlobeShareVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_ShareVisionofUnitForBothTeams(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RegenGlobeGeneratorGlobeShareVision_Init () {
    libGame_gt_RegenGlobeGeneratorGlobeShareVision = TriggerCreate("libGame_gt_RegenGlobeGeneratorGlobeShareVision_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_RegenGlobeGeneratorGlobeShareVision, null, "RegenGlobeGenerator@CasterDetector", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scaling Timer Expiration
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScalingTimerExpiration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scalingTicks += 1;
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }

    TriggerExecute(libGame_gt_JungleScalingTimerExpires, true, false);
    TriggerExecute(libGame_gt_CoreScalingTimerExpires, true, false);
    libGame_gf_SendEventScalingIncremented();
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScalingTimerExpiration_Init () {
    libGame_gt_ScalingTimerExpiration = TriggerCreate("libGame_gt_ScalingTimerExpiration_Func");
    TriggerAddEventTimer(libGame_gt_ScalingTimerExpiration, libGame_gv_scalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_JungleScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_JungleUpdateScalingForCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_JungleScalingTimerExpires_Init () {
    libGame_gt_JungleScalingTimerExpires = TriggerCreate("libGame_gt_JungleScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionAI == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CoreUpdateScaling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreScalingTimerExpires_Init () {
    libGame_gt_CoreScalingTimerExpires = TriggerCreate("libGame_gt_CoreScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teamfight Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamfightTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unitgroup lv_allyUnitGroup;
    unitgroup lv_enemyUnitGroup;
    unit lv_playerUnitCurrent;

    // Automatic Variable Declarations
    playergroup autoD8BAAFA9_g;

    // Variable Initialization
    lv_allyUnitGroup = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCore_gv_gameOver == false)) {
        autoD8BAAFA9_g = libCore_gv_allHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoD8BAAFA9_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_playerUnitCurrent = libGame_gv_players[lv_itPlayer].lv_heroUnit;
            if ((UnitIsValid(lv_playerUnitCurrent) == true)) {
                lv_allyUnitGroup = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(lv_playerUnitCurrent), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                libGame_gv_teamfightTrackingNearbyAllyCount[lv_itPlayer] = UnitGroupCount(lv_allyUnitGroup, c_unitCountAlive);
                lv_enemyUnitGroup = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(lv_playerUnitCurrent), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                libGame_gv_teamfightTrackingNearbyEnemyCount[lv_itPlayer] = UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamfightTracking_Init () {
    libGame_gt_TeamfightTracking = TriggerCreate("libGame_gt_TeamfightTracking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Token Counter Modify
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TokenCounterModify_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    string lv_behavior;
    string lv_effectUsed;
    int lv_operation;
    int lv_index;
    string lv_techAlias;
    unit lv_casterUnit;
    unit lv_targetUnit;
    bool lv_ignoreQuestEvents;

    // Automatic Variable Declarations
    string auto76BA766F_val;

    // Variable Initialization
    lv_effectUsed = EventPlayerEffectUsed();
    lv_techAlias = "";

    // Actions
    if (!runActions) {
        return true;
    }

    // libCore_gt_InitializeUserDataEffectsSpecificEffects
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((lv_targetUnit == null) && (lv_casterUnit != null)) {
        lv_targetUnit = lv_casterUnit;
    }

    auto76BA766F_val = CatalogFieldValueGet(c_gameCatalogEffect, lv_effectUsed, "Operation", c_playerAny);
    if (auto76BA766F_val == "Add") {
        lv_operation = c_upgradeOperationAdd;
    }
    else if (auto76BA766F_val == "Subtract") {
        lv_operation = c_upgradeOperationSubtract;
    }
    else if (auto76BA766F_val == "Set") {
        lv_operation = c_upgradeOperationSet;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_EF5C359A", "A", StringToText((lv_effectUsed)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_EF5C359A"), true);
        return true;
    }
    lv_amount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lv_effectUsed, "Amount", EventPlayer());
    if ((lv_operation == c_upgradeOperationSet)) {
        if ((lv_amount < 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_Game_F7F95865", "A", StringToText((lv_effectUsed)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_F7F95865"), true);
            return true;
        }

    }
    else {
        if ((lv_amount <= 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_Game_AE9CA970", "A", StringToText((lv_effectUsed)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_AE9CA970"), true);
            return true;
        }

    }
    lv_techAlias = CatalogFieldValueGet(c_gameCatalogEffect, lv_effectUsed, "TechAliasArray[" + IntToString(0) + "]", c_playerAny);
    if ((StringWord(lv_techAlias, 2) != "Bogus")) {
        lv_behavior = (StringWord(lv_techAlias, 2));
        if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == false)) {
            lv_behavior = null;
        }

    }
    else {
        lv_behavior = null;
    }
    if ((lv_behavior == null)) {
        TextExpressionSetToken("Param/Expression/lib_Game_45A51D96", "A", StringToText((lv_effectUsed)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_45A51D96"), true);
        return true;
    }

    lv_index = libCore_gf_TokenTokenCounterIndex(lv_behavior);
    if ((lv_index <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C161E101", "A", StringToText((lv_behavior)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_C161E101"), true);
        return true;
    }

    lv_ignoreQuestEvents = libCore_gf_TechAliasExist(c_gameCatalogEffect, lv_effectUsed, "StormFlag IgnoredByQuestEvents");
    libGame_gf_TokenCounterModifyTokenForPlayer(lv_operation, lv_amount, lv_behavior, lv_index, EventPlayer(), lv_casterUnit, lv_targetUnit, lv_ignoreQuestEvents);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TokenCounterModify_Init () {
    libGame_gt_TokenCounterModify = TriggerCreate("libGame_gt_TokenCounterModify_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Increase
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestIncrease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestIncreaseLaunchUnit();
    lv_player = UnitGetOwner(lv_hero);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TokenCounterEventQuestProgressDummySet", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestIncrease_Init () {
    libGame_gt_QuestTokenQuestIncrease = TriggerCreate("libGame_gt_QuestTokenQuestIncrease_Func");
    libGame_gf_QuestIncrease(libGame_gt_QuestTokenQuestIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Complete
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestCompleteLaunchUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TokenCounterEventQuestCompleteDummySet", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestComplete_Init () {
    libGame_gt_QuestTokenQuestComplete = TriggerCreate("libGame_gt_QuestTokenQuestComplete_Func");
    libGame_gf_QuestComplete(libGame_gt_QuestTokenQuestComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Reset
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestResetLaunchUnit();
    lv_player = UnitGetOwner(lv_hero);

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TalentQuestResetSound", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestReset_Init () {
    libGame_gt_QuestTokenQuestReset = TriggerCreate("libGame_gt_QuestTokenQuestReset_Func");
    libGame_gf_QuestReset(libGame_gt_QuestTokenQuestReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Town System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeTownSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;
    unit lv_u;
    int lv_townStructureType;
    int lv_townStructureCount;
    int lv_townEnemyTeam;
    unit lv_moonwerll;

    // Automatic Variable Declarations
    int autoC0CC02B0_ae;
    const int autoC0CC02B0_ai = 1;
    unitgroup autoE446A6B0_g;
    int autoE446A6B0_u;
    int autoFD196D51_ae;
    const int autoFD196D51_ai = 1;
    unitgroup autoD24F27E1_g;
    int autoD24F27E1_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSTowns == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining = 0;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining = 0;
    autoC0CC02B0_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoC0CC02B0_ai >= 0 && lv_itTown <= autoC0CC02B0_ae) || (autoC0CC02B0_ai < 0 && lv_itTown >= autoC0CC02B0_ae) ) ; lv_itTown += autoC0CC02B0_ai ) {
        libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gv_townTownData[lv_itTown].lv_owner)].lv_townsRemaining += 1;
        libGame_gv_townTownData[lv_itTown].lv_structureCount = 0;
        libGame_gv_townTownData[lv_itTown].lv_structuresAlive = 0;
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamChaos;
        }
        else {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamOrder;
        }
        autoE446A6B0_g = UnitGroup(null, libGame_gv_townTownData[lv_itTown].lv_owner, libGame_gv_townTownData[lv_itTown].lv_townRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE446A6B0_u = UnitGroupCount(autoE446A6B0_g, c_unitCountAll);
        for (;; autoE446A6B0_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoE446A6B0_g, autoE446A6B0_u);
            if (lv_u == null) { break; }
            lv_townStructureType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_u);
            libGame_gf_TownAddStructureToTownArray(lv_itTown, lv_u, lv_townStructureType, lv_townEnemyTeam);
        }
    }
    autoFD196D51_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoFD196D51_ai >= 0 && lv_itTown <= autoFD196D51_ae) || (autoFD196D51_ai < 0 && lv_itTown >= autoFD196D51_ae) ) ; lv_itTown += autoFD196D51_ai ) {
        libGame_gf_TownUpdateMoonwellIcon(lv_itTown);
    }
    libGame_gf_SendEventTownDataInitialized();
    autoD24F27E1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD24F27E1_u = UnitGroupCount(autoD24F27E1_g, c_unitCountAll);
    for (;; autoD24F27E1_u -= 1) {
        lv_moonwerll = UnitGroupUnitFromEnd(autoD24F27E1_g, autoD24F27E1_u);
        if (lv_moonwerll == null) { break; }
        if ((libGame_gf_TownGetTownForUnit(lv_moonwerll) == 0) && ((UnitGetType(lv_moonwerll) == "TownMoonwell") || (UnitGetType(lv_moonwerll) == "TownMoonwellL2") || (UnitGetType(lv_moonwerll) == "TownMoonwellL3"))) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_moonwerll), "SetMinimapVisibility 1");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeTownSystem_Init () {
    libGame_gt_InitializeTownSystem = TriggerCreate("libGame_gt_InitializeTownSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeWatchTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoA4F9003E_g;
    int autoA4F9003E_u;
    playergroup autoA7C6630D_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA4F9003E_g = UnitGroup("XelNagaWatchTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4F9003E_u = UnitGroupCount(autoA4F9003E_g, c_unitCountAll);
    for (;; autoA4F9003E_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoA4F9003E_g, autoA4F9003E_u);
        if (lv_u == null) { break; }
        libGame_gv_watchTowersCurrentCount += 1;
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_watchTowerUnit = lv_u;
        UnitSetCustomValue(lv_u, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_WatchTowerIndex), libGame_gv_watchTowersCurrentCount);
        UnitCreate(1, "WatchTowerCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u), 270.0);
        libGame_gf_CapturePointCreate(UnitLastCreated(), libCore_gv_data_WatchTower_CaptureRadius_C, libCore_gv_data_WatchTower_CaptureTime_C, 0.0, true, true);
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_capturePointIndex = libGame_gf_LastCreatedCapturePoint();
        autoA7C6630D_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoA7C6630D_g, lv_player);
            if (lv_player < 0) { break; }
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
    }
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeWatchTowers_Init () {
    libGame_gt_InitializeWatchTowers = TriggerCreate("libGame_gt_InitializeWatchTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Turn On Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersTurnOnWatchTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_watchtower;
    int lv_player;

    // Automatic Variable Declarations
    int auto9E128731_ae;
    const int auto9E128731_ai = 1;
    playergroup autoB058DA0E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E128731_ae = libGame_gv_watchTowersCurrentCount;
    lv_watchtower = 1;
    for ( ; ( (auto9E128731_ai >= 0 && lv_watchtower <= auto9E128731_ae) || (auto9E128731_ai < 0 && lv_watchtower >= auto9E128731_ae) ) ; lv_watchtower += auto9E128731_ai ) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_watchtower].lv_captureBeaconUnit, "SetVisibility 1");
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit, "SetMinimapVisibility 1");
        autoB058DA0E_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoB058DA0E_g, lv_player);
            if (lv_player < 0) { break; }
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit), 0.75), 0.125, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersTurnOnWatchTowers_Init () {
    libGame_gt_WatchTowersTurnOnWatchTowers = TriggerCreate("libGame_gt_WatchTowersTurnOnWatchTowers_Func");
    TriggerAddEventTimer(libGame_gt_WatchTowersTurnOnWatchTowers, libGame_gv_jungleWatchTowerStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Ownership Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersOwnershipChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWatchTower;
    int lv_itPlayer;
    int lv_capturePointIndex;
    int lv_capturePointOwner;
    int lv_capturePointAIOwner;

    // Automatic Variable Declarations
    const int auto49092148_ae = libGame_gv_watchTowersMaxCount;
    const int auto49092148_ai = 1;
    int auto4369F3E3_val;

    // Variable Initialization
    lv_capturePointIndex = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_capturePointOwner = libGame_gf_CapturePointChangesOwnerNewOwnerPlayer();
    lv_capturePointAIOwner = libGame_gf_CapturePointChangesOwnerAIOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itWatchTower = 1;
    for ( ; ( (auto49092148_ai >= 0 && lv_itWatchTower <= auto49092148_ae) || (auto49092148_ai < 0 && lv_itWatchTower >= auto49092148_ae) ) ; lv_itWatchTower += auto49092148_ai ) {
        if ((libGame_gv_watchTowers[lv_itWatchTower].lv_capturePointIndex == lv_capturePointIndex)) {
            libGame_gf_WatchTowersChangeWatchTowerOwnership(lv_itWatchTower, lv_capturePointAIOwner);
            auto4369F3E3_val = lv_capturePointAIOwner;
            if (auto4369F3E3_val == libCore_gv_cOMPUTER_Neutral) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerNeutral");
            }
            else if (auto4369F3E3_val == libCore_gv_cOMPUTER_TeamChaos) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerChaos");
            }
            else if (auto4369F3E3_val == libCore_gv_cOMPUTER_TeamOrder) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerOrder");
            }
            else {
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersOwnershipChanges_Init () {
    libGame_gt_WatchTowersOwnershipChanges = TriggerCreate("libGame_gt_WatchTowersOwnershipChanges_Func");
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, false);
    libGame_gf_CapturePointChangesOwner(libGame_gt_WatchTowersOwnershipChanges);
}

void libGame_InitTriggers () {
    libGame_gt_IncludeGame_Init();
    libGame_gt_InitializePlayers_Init();
    libGame_gt_InitializeGameSystems_Init();
    libGame_gt_UnitStatsCritUserData_Init();
    libGame_gt_UnitStatsDamagePrevented_Init();
    libGame_gt_UnitStatsHealingPreventedIncreased_Init();
    libGame_gt_UnitStatusUpdate_Init();
    libGame_gt_UnitStatusUpdateBehavior_Init();
    libGame_gt_AnnouncementMessageTimerExpires_Init();
    libGame_gt_InitializeBanks_Init();
    libGame_gt_BankOpenBanks_Init();
    libGame_gt_BehaviorCategoriesMovementController_Init();
    libGame_gt_CapturePointLogic_Init();
    libGame_gt_DimCapturePoint_Init();
    libGame_gt_UnDimCapturePoint_Init();
    libGame_gt_TowerCoreIsUnderAttackNEW_Init();
    libGame_gt_TowerCoreHasTakenDamage_Init();
    libGame_gt_CCRecognitionSlow_Init();
    libGame_gt_CCRecognitionRoot_Init();
    libGame_gt_CCRecognitionStun_Init();
    libGame_gt_CCRecognitionSilenced_Init();
    libGame_gt_EffectHistoryDamageTaken_Init();
    libGame_gt_EffectHistoryDamageTakenFatal_Init();
    libGame_gt_EffectHistoryHealed_Init();
    libGame_gt_EffectHistoryHealedLeechGeneric_Init();
    libGame_gt_EncouragementDataTrackingInCombatStart_Init();
    libGame_gt_EncouragementDataTrackingInCombatTimeout_Init();
    libGame_gt_ExperienceGlobeScaling_Init();
    libGame_gt_ExperienceGlobeSpawn_Init();
    libGame_gt_ExperienceGlobeGrantXP_Init();
    libGame_gt_ExperienceGlobeModifyDuration_Init();
    libGame_gt_OldXPEnableDisable_Init();
    libGame_gt_OldXPEnabledMinionVeterancy_Init();
    libGame_gt_RunAnimations_Init();
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init();
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init();
    libGame_gt_SpawnMinions_Init();
    libGame_gt_StartGame_Init();
    libGame_gt_AnnounceCountdown_Init();
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init();
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init();
    libGame_gt_ConfineCreatedUnitsToBaseUntilCountdownEnds_Init();
    libGame_gt_RemoveUnitsCreatedOutsideOfBaseUntilCountdownEnds_Init();
    libGame_gt_DetermineWinningTeam_Init();
    libGame_gt_GameOverCountdownStart_Init();
    libGame_gt_HallOfStormsKnockbackLaunchMissile_Init();
    libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Init();
    libGame_gt_HallOfStormsUnitEntersRegion_Init();
    libGame_gt_HallOfStormsUnitExitsRegion_Init();
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init();
    libGame_gt_HeroDeathHeroDies_Init();
    libGame_gt_HeroDeathHeroRespawnTimerExpires_Init();
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init();
    libGame_gt_HeroDeathTeamMultikillTimerExpires_Init();
    libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init();
    libGame_gt_HeroDeathUpdateMultikillTimerUI_Init();
    libGame_gt_HeroDeathKillStingerTimerExpires_Init();
    libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init();
    libGame_gt_InitializeCodeLaneSystem_Init();
    libGame_gt_LevelUpHeroGainsLevel_Init();
    libGame_gt_PlayerLeavesGame_Init();
    libGame_gt_TeamAbandonedTheGameTimerExpires_Init();
    libGame_gt_PlayerLeftAnnouncementTimerExpires_Init();
    libGame_gt_LoadoutGameOverRefreshBanks_Init();
    libGame_gt_MatchStatisticTimerUpdate_Init();
    libGame_gt_MinionSpawnCycle_Init();
    libGame_gt_HeroMoonwellCooldownOnOff_Init();
    libGame_gt_HeroMoonwellDurationTextTagUpdates_Init();
    libGame_gt_HeroMount_Init();
    libGame_gt_HeroDismount_Init();
    libGame_gt_CoreDiesGameOver_Init();
    libGame_gt_NPCUnitDies_Init();
    libGame_gt_TownStructureDies_Init();
    libGame_gt_TownStructureDiesSpecialCase_Init();
    libGame_gt_TownStructureDiesSpecialCaseCustom_Init();
    libGame_gt_TowerTowerDeadStateGateCheck_Init();
    libGame_gt_TowerTowerDeadStateGateCheckDeadTower_Init();
    libGame_gt_HeroKillCreditProximityTracking_Init();
    libGame_gt_XPTrickle_Init();
    libGame_gt_IncrementHeroCount_Init();
    libGame_gt_DecrementHeroCount_Init();
    libGame_gt_PlayerShrubProximityRevealProc_Init();
    libGame_gt_AvatarGrabberInitialization_Init();
    libGame_gt_BNetGrabberInitialization_Init();
    libGame_gt_PreloadingInitialize_Init();
    libGame_gt_PreloadingDestroyPortraits_Init();
    libGame_gt_PreloadingBlackListInitialize_Init();
    libGame_gt_PreloadingFXStoreModels_Init();
    libGame_gt_PreloadingFXStoreModelsGeneric_Init();
    libGame_gt_PreloadingFXStoreModelsMapCursedHollow_Init();
    libGame_gt_PreloadingFXStoreModelsMutatorWinterveil_Init();
    libGame_gt_PreloadingStoreHeroModels_Init();
    libGame_gt_PreloadingPreloadingControl_Init();
    libGame_gt_PreloadingForceHeroPreloadingTimer_Init();
    libGame_gt_PreloadingForceHeroPreloadingOriginal_Init();
    libGame_gt_PlayerRegenGlobeDummyImpact_Init();
    libGame_gt_PlayerRegenGlobeNeutralDummySet_Init();
    libGame_gt_NeutralRegenGlobeCreatedChangeOwner_Init();
    libGame_gt_RegenGlobeGeneratorInitialize_Init();
    libGame_gt_RegenGlobeGeneratorTextTagUpdates_Init();
    libGame_gt_RegenGlobeGeneratorGlobeShareVision_Init();
    libGame_gt_ScalingTimerExpiration_Init();
    libGame_gt_JungleScalingTimerExpires_Init();
    libGame_gt_CoreScalingTimerExpires_Init();
    libGame_gt_TeamfightTracking_Init();
    libGame_gt_TokenCounterModify_Init();
    libGame_gt_QuestTokenQuestIncrease_Init();
    libGame_gt_QuestTokenQuestComplete_Init();
    libGame_gt_QuestTokenQuestReset_Init();
    libGame_gt_InitializeTownSystem_Init();
    libGame_gt_InitializeWatchTowers_Init();
    libGame_gt_WatchTowersTurnOnWatchTowers_Init();
    libGame_gt_WatchTowersOwnershipChanges_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_InitLib_completed = false;

void libGame_InitLib () {
    if (libGame_InitLib_completed) {
        return;
    }

    libGame_InitLib_completed = true;

    libGame_InitLibraries();
    libGame_InitVariables();
    libGame_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibGDHL"
include "LibSprt"
include "LibMapM"
include "LibSond"
include "LibUIUI"
include "LibGlue"

