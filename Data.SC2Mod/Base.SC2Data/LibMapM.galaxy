include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibGame_h"
include "LibGDHL_h"
include "LibSprt_h"
include "LibSond_h"
include "LibUIUI_h"

include "LibMapM_h"

//--------------------------------------------------------------------------------------------------
// Library: Maps
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMapM_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
    libSond_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libMapM_InitVariables_completed = false;

void libMapM_InitVariables () {
    int init_i;
    int init_i1;

    if (libMapM_InitVariables_completed) {
        return;
    }

    libMapM_InitVariables_completed = true;

    libMapM_gv_bALJungleLeashRespawnTime = 45.0;
    libMapM_gv_bALJungleCampScalingTimerDuration = 60.0;
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsParentPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsPositionControl[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Timer[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Title[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_PlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Debug[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libMapM_gv_jungleMaxCamps; init_i1 += 1) {
        libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Custom;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataMinimapIconScale = 0.7;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataBattleshipSpawnType = libMapM_ge_JungleCampMercTypes_Custom;
        libMapM_gv_jungleCreepCamps[init_i].lv_defenderCoweringLivingUnitGroup = UnitGroupEmpty();
        libMapM_gv_jungleCreepCamps[init_i].lv_defenderCoweringDeadUnitGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libMapM_gv_jungleCreepCamps[init_i].lv_mercMercCampHasSingleWaypoint[init_i1] = true;
        }
        libMapM_gv_jungleCreepCamps[init_i].lv_campActorMessageUponSpawn = "";
        libMapM_gv_jungleCreepCamps[init_i].lv_campHelperTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campRespawnTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campSpecialTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_capturingPlayer = libCore_gv_cOMPUTER_Neutral;
        libMapM_gv_jungleCreepCamps[init_i].lv_stateIsEnabled = true;
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepBirthTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepRespawnTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepActiveTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_aIState = libMapM_ge_JungleCampStates_Dead;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMinimapCamps; init_i += 1) {
        libMapM_gv_jungleMinimap[init_i].lv_iconGroup = UnitGroupEmpty();
    }
    libMapM_gv_jungleScalingTimer = TimerCreate();
    for (init_i = 0; init_i <= libMapM_gv_mapMechanicsMaxCount_C; init_i += 1) {
        libMapM_gv_mapMechanics[init_i] = "";
    }
    libMapM_gv_mMRepulseRegionPunchedGroup = UnitGroupEmpty();
    libMapM_gv_mMRavenTributeUseTributePreviews = true;
    libMapM_gv_mMRavenTributes = UnitGroupEmpty();
    libMapM_gv_mMRavenStartTime = 150.0;
    libMapM_gv_mMRavenStartTimer = TimerCreate();
    libMapM_gv_mMRavenObjectivePreviewTimer = TimerCreate();
    libMapM_gv_mMRavenObjectivePreviewLongDelay = 30.0;
    libMapM_gv_mMRavenObjectivePreviewShortDelay = 15.0;
    libMapM_gv_mMRavenWarningTimer = TimerCreate();
    libMapM_gv_mMRavenTributeSpawnTimer = TimerCreate();
    libMapM_gv_mMRavenTributeWarnings = UnitGroupEmpty();
    libMapM_gv_mMRavenCurseTimer = TimerCreate();
    libMapM_gv_mMRavenEventFirstTime = true;
    libMapM_gv_mMWinterveilTownSnowballSpawnTimer = TimerCreate();
    libMapM_gv_mMWinterveilPlayerSnowballSpawnTimer = TimerCreate();
    libMapM_gv_mMWinterveilSnowmanTeachers = UnitGroupEmpty();
    libMapM_gv_mMWinterveilSnowmenInProgress = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libMapM_gv_mMWinterveilSnowmenPetGroups[init_i] = UnitGroupEmpty();
    }
    libMapM_gv_mMWinterveilSnowballDamageScalingTimer = TimerCreate();
    libMapM_gv_mMWinterveilSnowTributeSpawnTimer = TimerCreate();
    libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex = 1;
}

// Presets
string libMapM_ge_JungleCampDefenderTypes_Ident (int lp_val) {
         if (lp_val == libMapM_ge_JungleCampDefenderTypes_Custom) { return "Custom"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) { return "SiegeGiants"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_Knights) { return "Knights"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) { return "GraveGolem"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) { return "Doubloons"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_Sappers) { return "Sappers"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) { return "SiegeCamp1"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) { return "SiegeCamp2"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) { return "SiegeCamp3"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) { return "BruiserCamp1"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) { return "BruiserCamp2"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) { return "BruiserCamp3"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) { return "BossCamp1"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) { return "BossCamp2"; }
    else if (lp_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) { return "BossCamp3"; }
    return null;
}

string libMapM_ge_JungleCampStates_Ident (int lp_val) {
         if (lp_val == libMapM_ge_JungleCampStates_Idle) { return "Idle"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Busy) { return "Busy"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Dead) { return "Dead"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Paused) { return "Paused"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Hibernating) { return "Hibernating"; }
    else if (lp_val == libMapM_ge_JungleCampStates_HibernetingReadyToSpawn) { return "HibernetingReadyToSpawn"; }
    return null;
}

// Functions
void libMapM_gf_ShareVisionofUnitForBothTeams (unit lp_unit) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto349B167E_ae = libCore_gv_bALMaxTeams;
    const int auto349B167E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto349B167E_ai >= 0 && lv_itTeam <= auto349B167E_ae) || (auto349B167E_ai < 0 && lv_itTeam >= auto349B167E_ae) ) ; lv_itTeam += auto349B167E_ai ) {
        libNtve_gf_ShareVisionofUnit(lp_unit, true, libGame_gf_ComputerPlayerInTeam(lv_itTeam));
    }
    libNtve_gf_ShareVisionofUnit(lp_unit, true, libCore_gv_oBSERVER_ObserverUIPlayer);
}

trigger auto_libMapM_gf_MapActivateTileset_Trigger = null;
int auto_libMapM_gf_MapActivateTileset_lp_tileset;

void libMapM_gf_MapActivateTileset (int lp_tileset) {
    auto_libMapM_gf_MapActivateTileset_lp_tileset = lp_tileset;

    if (auto_libMapM_gf_MapActivateTileset_Trigger == null) {
        auto_libMapM_gf_MapActivateTileset_Trigger = TriggerCreate("auto_libMapM_gf_MapActivateTileset_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MapActivateTileset_Trigger, false, false);
}

bool auto_libMapM_gf_MapActivateTileset_TriggerFunc (bool testConds, bool runActions) {
    int lp_tileset = auto_libMapM_gf_MapActivateTileset_lp_tileset;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto1B6EB5F5_g;
    int auto4F65B62C_val;

    // Variable Initialization

    // Implementation
    auto1B6EB5F5_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1B6EB5F5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto4F65B62C_val = lp_tileset;
        if (auto4F65B62C_val == libMapM_ge_MapTileset_RavenCourt) {
            PlayerApplySkin(lv_itPlayer, "TilesetRavenCourtReplacement", true);
        }
        else {
        }
    }
    return true;
}

int libMapM_gf_JungleCampDefenderTypeIndex (int lp_defenderType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_defenderType);
}

void libMapM_gf_DataInitializeScalingDataForDefender (int lp_defenderTypeIndex, string lp_scalingBehavior) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_dataJungleCampDefenderData[lp_defenderTypeIndex].lv_numberOfRanks = MinI((CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1), libCore_gv_dataScalingMaxScalingTicks);
}

int libMapM_gf_JungleCampMercTypesIndex (int lp_mercType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_mercType);
}

void libMapM_gf_DataInitializeScalingDataForMerc (int lp_mercTypeIndex, string lp_scalingBehavior) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_dataJungleCampMercData[lp_mercTypeIndex].lv_numberOfRanks = MinI((CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1), libCore_gv_dataScalingMaxScalingTicks);
}

void libMapM_gf_JungleInitializeDefenderData (int lp_camp) {
    // Variable Declarations
    int lv_i;
    int lv_campTypeIndex;
    int lv_missingPoints;

    // Automatic Variable Declarations
    int auto1634221D_ae;
    const int auto1634221D_ai = 1;
    int autoA56A1090_ae;
    const int autoA56A1090_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType != libMapM_ge_JungleCampDefenderTypes_Custom)) {
        lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType);
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampIsSoloable = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campIsSoloable;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampIsElite = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campIsElite;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersCoweronDeath = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_defendersCoweronDeath;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderInitialSpawnDelay = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_initialSpawnDelay;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_respawnTime;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfCreeps;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeNameLabel = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campTypeNameLabel;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campTypeMinimapLabel;
        auto1634221D_ae = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfCreeps;
        lv_i = 1;
        for ( ; ( (auto1634221D_ai >= 0 && lv_i <= auto1634221D_ae) || (auto1634221D_ai < 0 && lv_i >= auto1634221D_ae) ) ; lv_i += auto1634221D_ai ) {
            libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderUnitTypes[lv_i] = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_creepUnitTypes[lv_i];
            libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringUnit[lv_i] = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_defenderCoweringUnit[lv_i];
        }
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfRanks;
    }

    autoA56A1090_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    lv_i = 1;
    for ( ; ( (autoA56A1090_ai >= 0 && lv_i <= autoA56A1090_ae) || (autoA56A1090_ai < 0 && lv_i >= autoA56A1090_ae) ) ; lv_i += autoA56A1090_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i] == null)) {
            lv_missingPoints += 1;
        }

    }
    if ((lv_missingPoints > 0)) {
    }

    libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCaptureXPValue = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_xPAwardForCapture;
}

void libMapM_gf_JungleInitializeMercCampData (int lp_camp) {
    // Variable Declarations
    int lv_i;
    int lv_itTeam;
    int lv_itLane;
    int lv_itWaypoint;
    int lv_campTypeIndex;
    int lv_ownerPlayer;
    point lv_rallyPoint;
    bool lv_foundLane;
    int lv_spawnLane;
    int lv_spawnFirstWaypointIndex;

    // Automatic Variable Declarations
    int auto154BCA63_ae;
    const int auto154BCA63_ai = 1;
    const int auto6E74ECD0_ae = libCore_gv_bALMaxTeams;
    const int auto6E74ECD0_ai = 1;
    int auto57847B83_ae;
    const int auto57847B83_ai = 1;
    int autoD27B9BD9_ae;
    const int autoD27B9BD9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfMinionsSpawned = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfMinionsSpawned;
    auto154BCA63_ae = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfMinionsSpawned;
    lv_i = 1;
    for ( ; ( (auto154BCA63_ai >= 0 && lv_i <= auto154BCA63_ae) || (auto154BCA63_ai < 0 && lv_i >= auto154BCA63_ae) ) ; lv_i += auto154BCA63_ai ) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i] = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_spawnedMinionUnitTypes[lv_i];
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
    lv_itTeam = 1;
    for ( ; ( (auto6E74ECD0_ai >= 0 && lv_itTeam <= auto6E74ECD0_ae) || (auto6E74ECD0_ai < 0 && lv_itTeam >= auto6E74ECD0_ae) ) ; lv_itTeam += auto6E74ECD0_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercMercCampHasSingleWaypoint[lv_itTeam] == true)) {
            if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
                lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[1].lv_waypoint;
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            else {
                lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[1].lv_waypoint;
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamChaos;
            }
        }
        else {
            if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_itTeam, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            else {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_itTeam, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamChaos;
            }
        }
        lv_foundLane = false;
        auto57847B83_ae = libGame_gv_laneCount;
        lv_itLane = 1;
        for ( ; ( (auto57847B83_ai >= 0 && lv_itLane <= auto57847B83_ae) || (auto57847B83_ai < 0 && lv_itLane >= auto57847B83_ae) ) ; lv_itLane += auto57847B83_ai ) {
            autoD27B9BD9_ae = libGame_gv_laneData[lv_itLane].lv_waypointCount;
            lv_itWaypoint = 1;
            for ( ; ( (autoD27B9BD9_ai >= 0 && lv_itWaypoint <= autoD27B9BD9_ae) || (autoD27B9BD9_ai < 0 && lv_itWaypoint >= autoD27B9BD9_ae) ) ; lv_itWaypoint += autoD27B9BD9_ai ) {
                if ((libGame_gv_laneData[lv_itLane].lv_waypoints[lv_itWaypoint] == lv_rallyPoint)) {
                    lv_spawnLane = lv_itLane;
                    lv_spawnFirstWaypointIndex = lv_itWaypoint;
                    lv_foundLane = true;
                    break;
                }

            }
        }
        if ((lv_foundLane == false)) {
            libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
            lv_spawnLane = libGame_gv_spawnedMinionLane;
            lv_spawnFirstWaypointIndex = libGame_gv_spawnedMinionFirstWaypointIndex;
        }

        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_itTeam] = lv_spawnLane;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnFirstWaypointIndex[lv_itTeam] = lv_spawnFirstWaypointIndex;
    }
}

point libMapM_gf_JungleDetermineMercWaypoint (int lp_owningTeam, int lp_camp) {
    // Variable Declarations
    point lv_waypoint;
    int lv_itPath;
    int lv_enemyTeamPlayer;
    unitgroup lv_buildings;

    // Automatic Variable Declarations
    const int auto02115739_ae = libMapM_gv_dataJungleMaxNumberOfPaths;
    const int auto02115739_ai = 1;
    const int auto575845F7_ae = libMapM_gv_dataJungleMaxNumberOfPaths;
    const int auto575845F7_ai = 1;

    // Variable Initialization
    lv_buildings = UnitGroupEmpty();

    // Implementation
    if ((lp_owningTeam == libGame_gv_teamOrderIndex_C)) {
        lv_enemyTeamPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_itPath = 1;
        for ( ; ( (auto02115739_ai >= 0 && lv_itPath <= auto02115739_ae) || (auto02115739_ai < 0 && lv_itPath >= auto02115739_ae) ) ; lv_itPath += auto02115739_ai ) {
            if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_townRegion == null)) {
                lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_waypoint;
                if ((lv_waypoint == null)) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_23D016D6", "A", IntToText(lp_camp));
                    TextExpressionSetToken("Param/Expression/lib_MapM_23D016D6", "B", IntToText(lv_itPath));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_23D016D6"), true);
                }

                return lv_waypoint;
            }
            else {
                lv_buildings = UnitGroup(null, lv_enemyTeamPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_buildings, c_unitCountAlive) > 0)) {
                    lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_waypoint;
                    return lv_waypoint;
                }

            }
        }
    }

    if ((lp_owningTeam == libGame_gv_teamChaosIndex_C)) {
        lv_enemyTeamPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_itPath = 1;
        for ( ; ( (auto575845F7_ai >= 0 && lv_itPath <= auto575845F7_ae) || (auto575845F7_ai < 0 && lv_itPath >= auto575845F7_ae) ) ; lv_itPath += auto575845F7_ai ) {
            if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_townRegion == null)) {
                lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_waypoint;
                if ((lv_waypoint == null)) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_C21662A6", "A", IntToText(lp_camp));
                    TextExpressionSetToken("Param/Expression/lib_MapM_C21662A6", "B", IntToText(lv_itPath));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_C21662A6"), true);
                }

                return lv_waypoint;
            }
            else {
                lv_buildings = UnitGroup(null, lv_enemyTeamPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_buildings, c_unitCountAlive) > 0)) {
                    lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_waypoint;
                    return lv_waypoint;
                }

            }
        }
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_1B9B7AE0"), true);
    return lv_waypoint;
}

void libMapM_gf_JungleInitializeRewardCampData (int lp_camp) {
    // Variable Declarations
    int lv_campTypeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataRewardSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_rewardNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
}

void libMapM_gf_JungleInitializeDoubloonCampData (int lp_camp) {
    // Variable Declarations
    int lv_campTypeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataBattleshipSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_piratesNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
}

void libMapM_gf_JungleInitializeDoubloonSmallCampData (int lp_camp) {
    // Variable Declarations
    int lv_campTypeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataBattleshipSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_piratesNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
}

void libMapM_gf_JungleInitializeCreepCamp (int lp_camp) {
    // Variable Declarations
    unit lv_iconUnit;
    string lv_icon;
    int lv_infoPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_infoPanel = c_invalidDialogControlId;

    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit = UnitGroupUnit(UnitGroup("LootBannerSconce", c_playerAny, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit == null)) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_stateIsEnabled = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_717E41E2"), true);
        return ;
    }

    libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagPosition = UnitGetPosition(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit);
    libMapM_gf_JungleDropLootBannerinMercCamp(lp_camp, libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_Hostile]);
    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconUseTeamColor == true) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnitTeamColor", c_unitCreateIgnorePlacement, 0, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnit", c_unitCreateIgnorePlacement, 0, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    lv_iconUnit = UnitLastCreated();
    DialogCreate(1, 1, c_anchorTop, 0, 0, true);
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsDialog[lp_camp] = DialogLastCreated();
    DialogSetPositionRelativeToUnitWithAnchor(DialogLastCreated(), libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, "Ref_Overhead", c_anchorCenter, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsPositionControl[lp_camp] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/MercCampPanel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsParentPanel = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsParentPanel, c_triggerControlTypePanel, "JungleCampInfoPanel/JungleCampInfoPanelTemplate");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp] = DialogControlLastCreated();
    lv_infoPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsPositionControl[lp_camp], c_anchorBottom, 0, 0);
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "CampTimerLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Timer[lp_camp] = DialogControlLastCreated();
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "CampTitleLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Title[lp_camp] = DialogControlLastCreated();
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "PlayerNameLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_PlayerName[lp_camp] = DialogControlLastCreated();
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "CampDescriptionLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[lp_camp] = DialogControlLastCreated();
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "DebugLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Debug[lp_camp] = DialogControlLastCreated();
    DialogControlHookup(lv_infoPanel, c_triggerControlTypeLabel, "CampEliteLabel");
    libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel2[lp_camp] = DialogControlLastCreated();

    lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, true);
    libNtve_gf_SendActorMessageToUnit(lv_iconUnit, "MinimapIcon " + lv_icon);
    libNtve_gf_SendActorMessageToUnit(lv_iconUnit, "MinimapIconScale " + FixedToString(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconScale, c_fixedPrecisionAny));
    libNtve_gf_SendActorMessageToUnit(lv_iconUnit, "SetMinimapVisibility");
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit = lv_iconUnit;
}

int libMapM_gf_JungleMinimapGetFreeIndex () {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    const int auto32D6AAA5_ae = libMapM_gv_jungleMinimapCamps;
    const int auto32D6AAA5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itIndex = 1;
    for ( ; ( (auto32D6AAA5_ai >= 0 && lv_itIndex <= auto32D6AAA5_ae) || (auto32D6AAA5_ai < 0 && lv_itIndex >= auto32D6AAA5_ae) ) ; lv_itIndex += auto32D6AAA5_ai ) {
        if ((libMapM_gv_jungleMinimap[lv_itIndex].lv_isUsed == false)) {
            libMapM_gv_jungleMinimap[lv_itIndex].lv_isUsed = true;
            return lv_itIndex;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_MapM_FAF3BF36", "A", IntToText(libMapM_gv_jungleMinimapCamps));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_FAF3BF36"), true);
    return -1;
}

int libMapM_gf_JungleMinimapGetIndexFromLanerCreepUnit (unit lp_lanerCreepUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_JungleLanerCreepCampMinimapIndex, lp_lanerCreepUnit);
}

void libMapM_gf_JungleMinimapClearIndex (int lp_minimapIndex) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_isUsed = false;
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_iconGroup = UnitGroupEmpty();
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_leader = null;
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_creepCampIndex = 0;
    PathDestroy(libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathOrder);
    PathDestroy(libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathChaos);
    PathDestroy(libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathObserver);
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathOrder = 0;
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathChaos = 0;
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_pathObserver = 0;
}

void libMapM_gf_JungleMinimapEditMercPath (unit lp_mercLeader, bool lp_newPath) {
    // Variable Declarations
    int lv_minimapIndex;
    int lv_waveIndex;
    int lv_currentLane;
    int lv_waypoint;

    // Automatic Variable Declarations
    int auto1E74E450_val;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_mercLeader) == false)) {
        return ;
    }

    lv_minimapIndex = libMapM_gf_JungleMinimapGetIndexFromLanerCreepUnit(lp_mercLeader);
    if ((libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder != 0) && (PathGetUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder) == lp_mercLeader)) {
        PathClearWayPoints(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder);
        PathClearWayPoints(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos);
        PathClearWayPoints(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver);
    }
    else {
        PathDestroy(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder);
        PathDestroy(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos);
        PathDestroy(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver);
        PathCreateForUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_mercLeader);
        PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\storm_waypointline.dds");
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
        libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder = PathLastCreated();
        PathCreateForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_mercLeader);
        PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\storm_waypointline.dds");
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
        libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos = PathLastCreated();
        PathCreateForUnit(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_mercLeader);
        PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\storm_waypointline.dds");
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
        libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver = PathLastCreated();
    }
    lv_waveIndex = FixedToInt(UnitGetCustomValue(lp_mercLeader, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MinionIndex)));
    lv_currentLane = libAIAI_gv_minionAIActiveMinions[lv_waveIndex].lv_lane;
    lv_waypoint = libAIAI_gv_minionAIActiveMinions[lv_waveIndex].lv_nextWaypoint;
    auto1E74E450_val = libAIAI_gv_minionAIActiveMinions[lv_waveIndex].lv_ownerPlayer;
    if (auto1E74E450_val == libCore_gv_cOMPUTER_TeamOrder) {
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.02));
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.02));
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        while ((lv_waypoint < (libGame_gv_laneData[lv_currentLane].lv_waypointCount - 1))) {
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            if ((lp_newPath == true)) {
                libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint + 1)]));
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint + 1)]));
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint + 1)]));
                PingSetScale(PingLastCreated(), 0.3);
            }

            lv_waypoint += 1;
        }
    }
    else if (auto1E74E450_val == libCore_gv_cOMPUTER_TeamChaos) {
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.02));
        PathSetColor(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        while ((lv_waypoint > 1)) {
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathOrder, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathChaos, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            PathAddWayPoint(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_pathObserver, libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint]);
            if ((lp_newPath == true)) {
                libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint - 1)]));
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint - 1)]));
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), libMapM_gv_jungleMinimapPingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_waypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_waypoint - 1)]));
                PingSetScale(PingLastCreated(), 0.3);
            }

            lv_waypoint -= 1;
        }
    }
    else {
    }
}

void libMapM_gf_JungleMinimapSetIconForMercMinions (int lp_campIndex, int lp_minimapIndex, unitgroup lp_mercUnitGroup) {
    // Variable Declarations
    string lv_image;
    bool lv_mercLeaderBool;
    unit lv_minimapUnit;
    unit lv_itMerc;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto259A5368_g;
    int auto259A5368_u;

    // Variable Initialization

    // Implementation
    libMapM_gv_jungleMinimap[lp_minimapIndex].lv_creepCampIndex = lp_campIndex;
    auto259A5368_g = lp_mercUnitGroup;
    auto259A5368_u = UnitGroupCount(auto259A5368_g, c_unitCountAll);
    for (;; auto259A5368_u -= 1) {
        lv_itMerc = UnitGroupUnitFromEnd(auto259A5368_g, auto259A5368_u);
        if (lv_itMerc == null) { break; }
        lv_minimapUnit = lv_itMerc;
        if ((lv_mercLeaderBool == false)) {
            lv_mercLeaderBool = true;
            libMapM_gv_jungleMinimap[lp_minimapIndex].lv_leader = lv_itMerc;
            UnitBehaviorAdd(lv_itMerc, "MinionDeathMonitor", lv_itMerc, 1);
            if (((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Sappers) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Easy.dds");
            }
            else if (((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Elite.dds");
            }
            else if (((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Boss.dds");
            }
            TextExpressionSetToken("Param/Expression/lib_MapM_3A7E9007", "A", libMapM_gv_jungleCreepCamps[lp_campIndex].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_3A7E9007"));
            libNtve_gf_SendActorMessageToUnit(lv_itMerc, "MinimapIconScale 0.750000");
            libNtve_gf_SendActorMessageToUnit(lv_itMerc, "SetMinimapVisibility 1");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(lv_itMerc, "SetMinimapVisibility");
        }
    }
}

int libMapM_gf_JungleGetJungleCampForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepCampIndex)));
}

int libMapM_gf_JungleGetJungleUnitIndexForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex)));
}

string libMapM_gf_JungleGetCurrentIconForJungleCamp (int lp_camp, bool lp_alive) {
    // Automatic Variable Declarations
    int autoF6AE4A30_val;

    // Implementation
    autoF6AE4A30_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (autoF6AE4A30_val == libMapM_ge_JungleCampTypes_MercCamp) {
        if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Sappers) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Easy.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Elite.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Boss.dds";
        }
    }
    else if (autoF6AE4A30_val == libMapM_ge_JungleCampTypes_RewardCamp) {
        if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Sappers) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Easy.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Elite.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Boss.dds";
        }
    }
    else if (autoF6AE4A30_val == libMapM_ge_JungleCampTypes_DoubloonCampSmall) {
        if ((lp_alive == true)) {
            return "assets\\Textures\\UI_MinimapIcon_Map_BHB_PirateCamp.dds";
        }
        else {
            return "assets\\Textures\\UI_MinimapIcon_Map_BHB_PirateCampEmpty.dds";
        }
    }
    else if (autoF6AE4A30_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
        if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Sappers) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Easy.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Elite.dds";
        }
        else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
            return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Boss.dds";
        }
    }
    else {
    }
    return "assets\\Textures\\UI_MinimapIcon_Merc_Camp_Easy.dds";
}

int libMapM_gf_JungleGetCampIndexFromDefenderIndex (int lp_defenderIndex) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoE4C46BDA_ae;
    const int autoE4C46BDA_ai = 1;

    // Variable Initialization

    // Implementation
    autoE4C46BDA_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoE4C46BDA_ai >= 0 && lv_itCamp <= autoE4C46BDA_ae) || (autoE4C46BDA_ai < 0 && lv_itCamp >= autoE4C46BDA_ae) ) ; lv_itCamp += autoE4C46BDA_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex == lp_defenderIndex)) {
            return lv_itCamp;
        }

    }
    return 0;
}

void libMapM_gf_JungleUpdateTextTagForCamp (int lp_camp) {
    // Variable Declarations
    int lv_campType;
    int lv_defenderType;
    text lv_titleText;
    text lv_subText;
    text lv_descText;
    text lv_formattedTitleText;
    text lv_playerNameText;
    text lv_debugDamageText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_campType = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    lv_defenderType = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
    lv_titleText = StringExternal("Param/Value/lib_MapM_F98A7A16");
    lv_subText = StringToText("");
    lv_descText = StringExternal("Param/Value/lib_MapM_DEB39179");
    lv_formattedTitleText = StringToText("");
    lv_playerNameText = StringToText("");
    lv_debugDamageText = StringToText("");

    // Implementation
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_stateIsEnabled == false)) {
        return ;
    }

    if ((libMapM_gv_dataJungleCampDefenderData[lv_defenderType].lv_customTextTagTitle != null)) {
        lv_titleText = libMapM_gv_dataJungleCampDefenderData[lv_defenderType].lv_customTextTagTitle;
    }
    else if ((lv_defenderType == libMapM_ge_JungleCampDefenderTypes_Doubloons)) {
        lv_titleText = StringExternal("Param/Value/lib_MapM_1C3E90F5");
    }
    else if (((lv_defenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_Sappers) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
        lv_titleText = StringExternal("Param/Value/lib_MapM_6ED5B9D2");
    }
    else if (((lv_defenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
        lv_titleText = StringExternal("Param/Value/lib_MapM_3EBF4A86");
    }
    else if (((lv_defenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
        lv_titleText = StringExternal("Param/Value/lib_MapM_8C1A8167");
    }
    if ((libMapM_gv_dataJungleCampDefenderData[(lv_defenderType)].lv_campIsElite == true)) {
        DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel2[lp_camp], PlayerGroupAll(), "CampEliteStatus", "CampIsElite");
    }
    else {
        DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel2[lp_camp], PlayerGroupAll(), "CampEliteStatus", "CampNotElite");
    }
    if ((libGame_gf_PlayerIsHeroPlayer(libMapM_gv_jungleCreepCamps[lp_camp].lv_capturingPlayer) == true)) {
        lv_playerNameText = libGame_gv_players[libMapM_gv_jungleCreepCamps[lp_camp].lv_capturingPlayer].lv_playerName;
    }

    if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer) > 0.0)) {
        lv_subText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer)));
        TextExpressionSetToken("Param/Expression/lib_MapM_FC3CA94E", "B", lv_titleText);
        TextExpressionSetToken("Param/Expression/lib_MapM_FC3CA94E", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer))));
        ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_FC3CA94E"));
    }

    if ((libMapM_gv_dataJungleCampDefenderData[lp_camp].lv_customTextTagInfoText != null)) {
        lv_descText = libMapM_gv_dataJungleCampDefenderData[lp_camp].lv_customTextTagInfoText;
    }
    else if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDamagesCoreOnCapture == true)) {
        lv_descText = StringExternal("Param/Value/lib_MapM_063ECF3A");
    }
    else if (((lv_campType == libMapM_ge_JungleCampTypes_DoubloonCamp) || (lv_campType == libMapM_ge_JungleCampTypes_DoubloonCampSmall))) {
        lv_descText = StringExternal("Param/Value/lib_MapM_D59122D7");
    }
    else if (((lv_defenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (lv_defenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
        lv_descText = StringExternal("Param/Value/lib_MapM_0EF21799");
    }
    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libSprt_gv_dEBUGMapTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_MapM_35448BC5", "A", IntToText(FixedToInt(libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture)));
        lv_debugDamageText = TextExpressionAssemble("Param/Expression/lib_MapM_35448BC5");
    }

    if ((libGame_gf_PlayerIsHeroPlayer(libMapM_gv_jungleCreepCamps[lp_camp].lv_capturingPlayer) == true)) {
        if ((libGame_gf_TeamNumberOfPlayer(libMapM_gv_jungleCreepCamps[lp_camp].lv_capturingPlayer) == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TeamCaptured", "BlueTeam");
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TeamCaptured", "RedTeam");
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libCore_gv_observerPlayers, "TeamCaptured", "BlueTeam");
        }
        else {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TeamCaptured", "RedTeam");
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TeamCaptured", "BlueTeam");
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], libCore_gv_observerPlayers, "TeamCaptured", "RedTeam");
        }
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer) > 0.0)) {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[lp_camp], PlayerGroupAll(), "ShowHideDescription", "HideDesc");
        }
        else {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[lp_camp], PlayerGroupAll(), "ShowHideDescription", "ShowDesc");
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], PlayerGroupAll(), "TeamCaptured", "CapturedReset");
        }
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Timer[lp_camp], lv_subText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Title[lp_camp], lv_titleText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_PlayerName[lp_camp], lv_playerNameText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[lp_camp], lv_descText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Debug[lp_camp], lv_debugDamageText, PlayerGroupAll());
    }
    else {
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer) > 0.0)) {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], PlayerGroupAll(), "TeamCaptured", "FirstSpawnEvent");
        }
        else {
            DialogControlSetAnimationState(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel[lp_camp], PlayerGroupAll(), "TeamCaptured", "NotCaptured");
        }
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Timer[lp_camp], lv_subText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Title[lp_camp], lv_titleText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_PlayerName[lp_camp], lv_playerNameText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Description[lp_camp], lv_descText, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsInfoPanel_Label_Debug[lp_camp], lv_debugDamageText, PlayerGroupAll());
    }
}

void libMapM_gf_JungleSwitchToTextTagForCamp (int lp_camp) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gf_JungleUpdateTextTagForCamp(lp_camp);
}

void libMapM_gf_JungleUpdateMinimapTooltipForCamp (int lp_camp) {
    // Variable Declarations
    text lv_titleText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_titleText = StringExternal("Param/Value/lib_MapM_6CC70C56");

    // Implementation
    libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "SetMinimapVisibility 1");
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeNameLabel != null)) {
        lv_titleText = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeNameLabel;
    }

    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel != null)) {
        TextExpressionSetToken("Param/Expression/lib_MapM_4C214A41", "CampType", lv_titleText);
        TextExpressionSetToken("Param/Expression/lib_MapM_4C214A41", "CampName", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
        ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_4C214A41"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_MapM_BA4C09D3", "CampType", lv_titleText);
        ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_BA4C09D3"));
    }
}

trigger auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger = null;
int auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp;

void libMapM_gf_JungleRespawnCreepsForCamp (int lp_camp) {
    auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp = lp_camp;

    if (auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger == null) {
        auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger = TriggerCreate("auto_libMapM_gf_JungleRespawnCreepsForCamp_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger, false, false);
}

bool auto_libMapM_gf_JungleRespawnCreepsForCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_camp = auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp;

    // Variable Declarations
    int lv_i;
    fixed lv_staggeredBirth;
    unit lv_u;
    region lv_aggroRegion;
    string lv_icon;
    unitgroup lv_defenderGroup;
    unit lv_newUnit;

    // Automatic Variable Declarations
    unitgroup auto83B415C5_g;
    int auto83B415C5_u;
    unitgroup auto4EFB758B_g;
    int auto4EFB758B_u;
    int auto293675AA_ae;
    const int auto293675AA_ai = 1;

    // Variable Initialization
    lv_defenderGroup = UnitGroupEmpty();

    // Implementation
    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_RewardCamp) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCamp))) {
        UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, libCore_gv_cOMPUTER_Neutral, true);
        UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_Neutral, true);
        libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, "Signal OwnerNeutral");
    }

    auto83B415C5_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
    auto83B415C5_u = UnitGroupCount(auto83B415C5_g, c_unitCountAll);
    for (;; auto83B415C5_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto83B415C5_g, auto83B415C5_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
    auto4EFB758B_g = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringDeadUnitGroup;
    auto4EFB758B_u = UnitGroupCount(auto4EFB758B_g, c_unitCountAll);
    for (;; auto4EFB758B_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto4EFB758B_g, auto4EFB758B_u);
        if (lv_u == null) { break; }
        libNtve_gf_SendActorMessageToGameRegion(RegionCircle(UnitGetPosition(lv_u), 2.0), "Signal CreepCleanup");
        UnitRemove(lv_u);
    }
    Wait(0.125, c_timeGame);
    auto293675AA_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    lv_i = 1;
    for ( ; ( (auto293675AA_ai >= 0 && lv_i <= auto293675AA_ae) || (auto293675AA_ai < 0 && lv_i >= auto293675AA_ae) ) ; lv_i += auto293675AA_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderUnitTypes[lv_i], c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i]);
        lv_newUnit = UnitLastCreated();
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_campActorMessageUponSpawn != "")) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(lv_newUnit), StringToText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campActorMessageUponSpawn));
        }

        UnitGroupAdd(lv_defenderGroup, lv_newUnit);
        UnitSetCustomValue(lv_newUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepCampIndex), IntToFixed(lp_camp));
        UnitSetCustomValue(lv_newUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex), IntToFixed(lv_i));
        UnitBehaviorAdd(lv_newUnit, "JungleMercDefenderBirthInvulnerability", lv_newUnit, 1);
        libGame_gf_SendEventJungleCampDefenderCreated(lv_newUnit);
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringUnit[lv_i] == true)) {
            UnitGroupAdd(libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringLivingUnitGroup, lv_newUnit);
        }

        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersHaveStaggeredBirth == true)) {
            if ((libAIAI_gv_defenderAI[lp_camp].lv_aggroRegion == null)) {
                UnitBehaviorAdd(lv_newUnit, "JungleCreepBenign", lv_newUnit, 1);
            }

            UnitBehaviorAdd(lv_newUnit, "JungleCreepPassive", lv_newUnit, 1);
            UnitBehaviorSetDurationRemaining(lv_newUnit, "JungleMercDefenderBirthInvulnerability", (UnitBehaviorDuration(lv_newUnit, "JungleMercDefenderBirthInvulnerability") - lv_staggeredBirth));
            lv_staggeredBirth += libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersStaggeredBirthPeriod;
            Wait(libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersStaggeredBirthPeriod, c_timeGame);
        }

    }
    libAIAI_gf_StartDefenderAI(lv_defenderGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, lv_aggroRegion, true);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex = libAIAI_gf_LastCreatedDefenderAI();
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = 0;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = 0;
    libGame_gf_JungleUpdateScalingForCamp(lp_camp, libGame_gv_scalingTicks);
    Wait((libMapM_gv_bALJungleBirthDelay - lv_staggeredBirth), c_timeGame);
    libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Idle);
    lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, true);
    libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "MinimapIcon " + lv_icon);
    libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "SetMinimapVisibility 1");
    libMapM_gf_CreateSnapshotOfUnitForBothTeams(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit);
    libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp);
    libMapM_gf_JungleUpdateMinimapTooltipForCamp(lp_camp);
    libGame_gf_SendEventJungleCampSpawned(lp_camp);
    return true;
}

void libMapM_gf_JungleCreepCampRespawnTimerExpiresCreateEvent (int lp_camp) {
    // Variable Declarations
    trigger lv_trigger;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = libMapM_gt_JungleCreepCampRespawnTimerExpires;
    lv_timer = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer;

    // Implementation
    libCore_gf_TriggerAddEventTimer(lv_timer, lv_trigger);
}

void libMapM_gf_JungleTransitionCampIntoState (int lp_camp, int lp_state) {
    // Variable Declarations
    unit lv_itUnit;
    string lv_icon;

    // Automatic Variable Declarations
    int autoF1366929_val;
    unitgroup auto1A5A418F_g;
    int auto1A5A418F_u;
    unitgroup auto35014145_g;
    int auto35014145_u;

    // Variable Initialization

    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_aIState = lp_state;
    libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp);
    autoF1366929_val = lp_state;
    if (autoF1366929_val == libMapM_ge_JungleCampStates_Idle) {
        libGame_gf_JungleUpdateScalingForCamp(lp_camp, libMapM_gv_jungleScalingTicks);
    }
    else if (autoF1366929_val == libMapM_ge_JungleCampStates_Busy) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture = 0.0;
        TimerPause(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, true);
        TimerPause(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, true);
    }
    else if (autoF1366929_val == libMapM_ge_JungleCampStates_Dead) {
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp);
        lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, false);
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "MinimapIcon " + lv_icon);
        if ((libMapM_gv_jungleCampsShouldBeHibernating == true)) {
            libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Hibernating);
        }

    }
    else if (autoF1366929_val == libMapM_ge_JungleCampStates_Paused) {
        auto1A5A418F_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
        auto1A5A418F_u = UnitGroupCount(auto1A5A418F_g, c_unitCountAll);
        for (;; auto1A5A418F_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto1A5A418F_g, auto1A5A418F_u);
            if (lv_itUnit == null) { break; }
            UnitIssueOrder(lv_itUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
        }
    }
    else if (autoF1366929_val == libMapM_ge_JungleCampStates_Hibernating) {
        auto35014145_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
        auto35014145_u = UnitGroupCount(auto35014145_g, c_unitCountAll);
        for (;; auto35014145_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto35014145_g, auto35014145_u);
            if (lv_itUnit == null) { break; }
            libMapM_gf_JungleHibernateCampDefender(lv_itUnit);
        }
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "SetMinimapVisibility");
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp);
    }
    else if (autoF1366929_val == libMapM_ge_JungleCampStates_HibernetingReadyToSpawn) {
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp);
    }
    else {
    }
}

void libMapM_gf_JungleHibernateCampDefender (unit lp_defender) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_defender, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lp_defender, true);
    UnitSetState(lp_defender, c_unitStateTargetable, false);
    UnitSetState(lp_defender, c_unitStateStoppable, false);
    UnitSetState(lp_defender, c_unitStateStatusBar, false);
    UnitSetState(lp_defender, c_unitStateFidget, false);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagSlow);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagStun);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagUser10);
    UnitBehaviorAdd(lp_defender, "GardensMercCampPreHibernator", lp_defender, 1);
    libNtve_gf_SendActorMessageToUnit(lp_defender, "SetOpacity 0.000000 2.500000");
    Wait(0.0625, c_timeGame);
    libNtve_gf_PauseUnit(lp_defender, true);
    Wait(3.0, c_timeGame);
    if ((libMapM_gv_jungleCampsShouldBeHibernating == true)) {
        UnitBehaviorAdd(lp_defender, "GardensMercCampHibernator", lp_defender, 1);
    }

}

void libMapM_gf_JungleStopHibernatingCampDefender (unit lp_defender, point lp_location) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PauseUnit(lp_defender, false);
    if ((UnitIsAlive(lp_defender) == true)) {
        UnitSetPosition(lp_defender, lp_location, false);
        UnitSetFacing(lp_defender, PointGetFacing(lp_location), 0.0);
    }

    UnitBehaviorRemove(lp_defender, "GardensMercCampHibernator", 1);
    UnitBehaviorRemove(lp_defender, "GardensMercCampPreHibernator", 1);
    libNtve_gf_SendActorMessageToUnit(lp_defender, "SetOpacity 1.000000 2.000000");
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(lp_defender, false);
    UnitSetState(lp_defender, c_unitStateTargetable, true);
    UnitSetState(lp_defender, c_unitStateStatusBar, true);
    UnitSetState(lp_defender, c_unitStateFidget, true);
    if ((UnitGetType(lp_defender) != "MercenaryColossus@Defender")) {
        UnitSetState(lp_defender, c_unitStateStoppable, true);
    }

}

void libMapM_gf_JungleTurnOnCampCaptureBeacon (int lp_camp) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCaptureEnabled = true;
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, libCore_gv_cOMPUTER_Neutral, true);
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_Neutral, true);
    libGame_gf_CapturePointEnable(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCapturePointIndex);
    libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Paused);
}

void libMapM_gf_JungleTurnOffCampCaptureBeacon (int lp_camp, int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCaptureEnabled = false;
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCircleOfPowerUnit, lp_owner, true);
    libMapM_gf_JungleTransitionCampCaptureBeacontoHidden(lp_camp);
}

void libMapM_gf_JungleTransitionCampCaptureBeacontoHidden (int lp_camp) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_CapturePointDisable(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCapturePointIndex);
}

void libMapM_gf_JungleGrantCaptureRewards (int lp_camp, int lp_owner) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_team;
    int lv_killingFaction;
    string lv_campPortrait;
    unit lv_itUnit;
    fixed lv_xPGranted;
    unitgroup lv_heroUnitGroup;
    fixed lv_radiusScoreCredit;
    playergroup lv_creditPlayerGroup;

    // Automatic Variable Declarations
    unitgroup autoCC83A74C_g;
    int autoCC83A74C_u;
    playergroup auto97EFE105_g;
    playergroup auto93278229_g;
    int auto0500883B_val;
    const int auto9ADDD05E_n = 3;
    int auto9ADDD05E_i;
    const int auto02696B57_n = 2;
    int auto02696B57_i;
    playergroup auto96990064_g;
    unitgroup auto6248044B_g;
    int auto6248044B_u;

    // Variable Initialization
    lv_killingFaction = libGame_ge_Faction_Neutral;
    lv_heroUnitGroup = UnitGroupEmpty();
    lv_creditPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_radiusScoreCredit = (libMapM_gv_bALJungleCampCaptureRadius + 5.0);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Order;
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Chaos;
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        UnitCreate(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 270.0);
    }
    else {
        UnitCreate(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamChaos, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 270.0);
    }
    lv_xPGranted += UnitXPGetCurrentXP(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, null);
    lv_xPGranted += libMapM_gv_jungleCreepCamps[lp_camp].lv_xPAwardForCapture;
    lv_xPGranted = libGame_gf_AdjustXPForTeam(lv_xPGranted, lv_team);
    lv_heroUnitGroup = UnitGroupSearch(null, lp_owner, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, lv_radiusScoreCredit, libCore_gv_filtersHeroicAllyorPlayerandnotHallucinationorBenign, 0);
    autoCC83A74C_g = lv_heroUnitGroup;
    autoCC83A74C_u = UnitGroupCount(autoCC83A74C_g, c_unitCountAll);
    for (;; autoCC83A74C_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoCC83A74C_g, autoCC83A74C_u);
        if (lv_itUnit == null) { break; }
        PlayerGroupAdd(lv_creditPlayerGroup, UnitGetOwner(lv_itUnit));
    }
    libGame_gf_SendEventMercCampCaptured(lp_camp, lp_owner, lv_creditPlayerGroup);
    auto97EFE105_g = lv_creditPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto97EFE105_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_creditPlayerGroup);
        libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPGranted / PlayerGroupCount(lv_creditPlayerGroup)), libGame_ge_XPSource_Mercenary);
    }
    auto93278229_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_owner), false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto93278229_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_GrantXPToPlayer(lv_xPGranted, lv_itPlayer, libGame_ge_XPSource_Mercenary);
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCircleOfPowerUnit, FixedToText(lv_xPGranted, 0), libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_owner), false), "FCT_XP_Greater", libUIUI_gv_floatingCombatTextInsaneDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    auto0500883B_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (auto0500883B_val == libMapM_ge_JungleCampTypes_MercCamp) {
        libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
        libMapM_gf_JungleMercCampCapturedAnnouncement(lp_camp, lp_owner);
        libMapM_gf_JungleSpawnMercMinions(lp_camp, lp_owner);
    }
    else if (auto0500883B_val == libMapM_ge_JungleCampTypes_DoubloonCamp) {
        libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
        libMapM_gf_JungleMercCampCapturedAnnouncement(lp_camp, lp_owner);
        for (auto9ADDD05E_i = 1; auto9ADDD05E_i <= auto9ADDD05E_n; auto9ADDD05E_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropCannonballsPersistent", libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
        }
    }
    else if (auto0500883B_val == libMapM_ge_JungleCampTypes_DoubloonCampSmall) {
        libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
        for (auto02696B57_i = 1; auto02696B57_i <= auto02696B57_n; auto02696B57_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropCannonballsPersistent", libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
        }
    }
    else if (auto0500883B_val == libMapM_ge_JungleCampTypes_RewardCamp) {
        libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
        libMapM_gf_JungleMercCampCapturedAnnouncement(lp_camp, lp_owner);
        auto96990064_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto96990064_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            auto6248044B_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
            auto6248044B_u = UnitGroupCount(auto6248044B_g, c_unitCountAll);
            for (;; auto6248044B_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto6248044B_g, auto6248044B_u);
                if (lv_itUnit == null) { break; }
                UnitCreateEffectUnit(lv_itUnit, "RewardCampDummySet", lv_itUnit);
            }
        }
    }
    else if (auto0500883B_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
        libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
    }
    else {
    }
    libMapM_gf_JungleDropLootBannerinMercCamp(lp_camp, lv_creditPlayerGroup);
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersBribedCount == libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps)) {
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, (libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime * libGDHL_gv_talentBribeCampRespawnMultiplier), false, c_timeGame);
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime * libGDHL_gv_talentBribeCampRespawnMultiplier) - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
    }
    else {
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime, false, c_timeGame);
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, (libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersBribedCount = 0;

    UnitXPSetCurrentXP(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, null, 0.0);
}

void libMapM_gf_JungleMercCampCapturedAnnouncement (int lp_camp, int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_TeamOrder, libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_TeamOrder, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_TeamOrder, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
    else {
        MinimapPing(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_TeamChaos, libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_TeamChaos, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_TeamChaos, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
}

void libMapM_gf_JungleSpawnMercMinions (int lp_camp, int lp_owner) {
    // Variable Declarations
    int lv_i;
    int lv_team;
    point lv_spawnPoint;
    int lv_mercTypeIndex;
    int lv_scalingTicks;
    unit lv_minion;
    int lv_lane;
    int lv_waypoint;
    unit lv_spawnHelperUnit;
    bool lv_knightHasAlreadyBeenCreated;
    int lv_minimapIndex;

    // Automatic Variable Declarations
    int autoFF605CAA_ae;
    const int autoFF605CAA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_minimapIndex = libMapM_gf_JungleMinimapGetFreeIndex();
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_owner);
    lv_spawnPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint;
    lv_mercTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType);
    lv_scalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks;
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(lv_spawnPoint, 25.0), "Signal CreepCleanup");
    autoFF605CAA_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfMinionsSpawned;
    lv_i = 1;
    for ( ; ( (autoFF605CAA_ai >= 0 && lv_i <= autoFF605CAA_ae) || (autoFF605CAA_ai < 0 && lv_i >= autoFF605CAA_ae) ) ; lv_i += autoFF605CAA_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersCoweronDeath == true)) {
            lv_spawnHelperUnit = UnitGroupRandomUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringDeadUnitGroup, c_unitCountAlive);
            if ((UnitIsValid(lv_spawnHelperUnit) == true)) {
                UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, UnitGetPosition(lv_spawnHelperUnit), UnitGetFacing(lv_spawnHelperUnit));
                UnitRemove(lv_spawnHelperUnit);
            }
            else {
                UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, lv_spawnPoint, PointGetFacing(lv_spawnPoint));
            }
        }
        else {
            UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i], PointGetFacing(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i]));
        }
        lv_minion = UnitLastCreated();
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_campActorMessageUponSpawn != "")) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(UnitLastCreated()), StringToText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campActorMessageUponSpawn));
        }

        libGame_gf_SendEventJungleCampLanerCreated(lv_minion);
        libGame_gf_UpdateScalingForUnit(lv_minion, lv_scalingTicks, 0);
        UnitSetCustomValue(lv_minion, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleLanerCreepCampIndex), IntToFixed(lp_camp));
        UnitSetCustomValue(lv_minion, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleLanerCreepCampMinimapIndex), IntToFixed(lv_minimapIndex));
        UnitGroupAdd(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_iconGroup, lv_minion);
        lv_lane = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team];
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneLastSpawnedIn[lv_team] = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team];
        lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnFirstWaypointIndex[lv_team];
        libAIAI_gf_MinionAIStartMinionAI(-1, lv_minion, lv_lane, lv_waypoint, true, 0, false);
    }
    libMapM_gf_JungleMinimapSetIconForMercMinions(lp_camp, lv_minimapIndex, libMapM_gv_jungleMinimap[lv_minimapIndex].lv_iconGroup);
    libMapM_gf_JungleMinimapEditMercPath(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_leader, true);
}

int libMapM_gf_JungleGetMercCampForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_JungleLanerCreepCampIndex)));
}

void libMapM_gf_JungleDropLootBannerinMercCamp (int lp_campIndex, playergroup lp_creditPlayerGroup) {
    // Variable Declarations
    unit lv_sconceUnit;
    int lv_randomPlayerInCreditGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sconceUnit = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_campOwnershipFlagUnit;

    // Implementation
    if ((PlayerGroupCount(lp_creditPlayerGroup) > 0)) {
        lv_randomPlayerInCreditGroup = libCore_gf_RandomPlayerFromPlayerGroup(lp_creditPlayerGroup);
        libMapM_gv_jungleCreepCamps[lp_campIndex].lv_capturingPlayer = lv_randomPlayerInCreditGroup;
    }

}

void libMapM_gf_JungleUpdateMercDamageTracker (int lp_camp, fixed lp_damageDealt) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture += lp_damageDealt;
}

void libMapM_gf_MapMechanicAdd (string lp_mechanic, trigger lp_initializeCallback) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMapM_gv_mapMechanicControllerActor == null)) {
        libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
        libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    }

    if ((libMapM_gf_MapMechanicExistsOnMap(lp_mechanic) == true)) {
        return ;
    }

    libMapM_gv_mapMechanicsCount += 1;
    libMapM_gv_mapMechanics[libMapM_gv_mapMechanicsCount] = lp_mechanic;
    libMapM_gv_mapMechanicsInitCallbacks[libMapM_gv_mapMechanicsCount] = lp_initializeCallback;
    libGame_gf_SendEventMapMechanicInitialization(lp_mechanic);
}

int libMapM_gf_MapMechanicIndex (string lp_mechanic) {
    // Variable Declarations
    int lv_itMechanic;

    // Automatic Variable Declarations
    int auto1B621E36_ae;
    const int auto1B621E36_ai = 1;

    // Variable Initialization

    // Implementation
    auto1B621E36_ae = libMapM_gv_mapMechanicsCount;
    lv_itMechanic = 1;
    for ( ; ( (auto1B621E36_ai >= 0 && lv_itMechanic <= auto1B621E36_ae) || (auto1B621E36_ai < 0 && lv_itMechanic >= auto1B621E36_ae) ) ; lv_itMechanic += auto1B621E36_ai ) {
        if ((libMapM_gv_mapMechanics[lv_itMechanic] == lp_mechanic)) {
            return lv_itMechanic;
        }

    }
    return 0;
}

bool libMapM_gf_MapMechanicExistsOnMap (string lp_mechanic) {
    // Automatic Variable Declarations
    // Implementation
    return (libMapM_gf_MapMechanicIndex(lp_mechanic) > 0);
}

string libMapM_gf_PrimaryMapMechanic () {
    // Automatic Variable Declarations
    // Implementation
    return libMapM_gv_mapMechanics[1];
}

void libMapM_gf_EnableDisableMapEvent (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMapM_gv_mMMapEventHasOccured == false) && (libMapM_gv_mMMapMechanicDisabled == false) && (lp_enableDisable == false)) {
        libMapM_gv_mMMapMechanicDisabled = true;
        if ((libMapM_gv_mMDisableMapEventTrigger != null)) {
            TriggerExecute(libMapM_gv_mMDisableMapEventTrigger, true, true);
        }

    }

    if ((libMapM_gv_mMMapEventHasOccured == false) && (libMapM_gv_mMMapMechanicDisabled == true) && (lp_enableDisable == true)) {
        libMapM_gv_mMMapMechanicDisabled = false;
        if ((libMapM_gv_mMEnableMapEventTrigger != null)) {
            TriggerExecute(libMapM_gv_mMEnableMapEventTrigger, true, true);
        }

    }

}

void libMapM_gf_RegisterMapEventEnableDisableTriggers (trigger lp_disableMapEventTrigger, trigger lp_enableMapEventTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libMapM_gv_mMDisableMapEventTrigger = lp_disableMapEventTrigger;
    libMapM_gv_mMEnableMapEventTrigger = lp_enableMapEventTrigger;
}

trigger auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_Trigger = null;
unit auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_lp_unit;

void libMapM_gf_CreateSnapshotOfUnitForBothTeams (unit lp_unit) {
    auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_lp_unit = lp_unit;

    if (auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_Trigger == null) {
        auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_Trigger = TriggerCreate("auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_Trigger, false, false);
}

bool auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libMapM_gf_CreateSnapshotOfUnitForBothTeams_lp_unit;

    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto2E0C4492_ae = libCore_gv_bALMaxTeams;
    const int auto2E0C4492_ai = 1;
    const int auto551E9544_ae = libCore_gv_bALMaxTeams;
    const int auto551E9544_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto2E0C4492_ai >= 0 && lv_itTeam <= auto2E0C4492_ae) || (auto2E0C4492_ai < 0 && lv_itTeam >= auto2E0C4492_ae) ) ; lv_itTeam += auto2E0C4492_ai ) {
        libNtve_gf_ShareVisionofUnit(lp_unit, true, libGame_gf_ComputerPlayerInTeam(lv_itTeam));
    }
    Wait(0.0625, c_timeGame);
    lv_itTeam = 1;
    for ( ; ( (auto551E9544_ai >= 0 && lv_itTeam <= auto551E9544_ae) || (auto551E9544_ai < 0 && lv_itTeam >= auto551E9544_ae) ) ; lv_itTeam += auto551E9544_ai ) {
        libNtve_gf_ShareVisionofUnit(lp_unit, false, libGame_gf_ComputerPlayerInTeam(lv_itTeam));
    }
    return true;
}

void libMapM_gf_MapSetRepulseRegion (int lp_team, region lp_pulseRegion, point lp_punchTargetLocation1, point lp_punchTargetLocation2, point lp_punchTargetLocation3, point lp_punchTargetLocation4) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libGame_gt_HallOfStormsKnockbackLaunchMissile, false);
    TriggerEnable(libGame_gt_HallOfStormsKnockbackUnitEntersRegion, true);
    libMapM_gv_mMRepulseRegions[lp_team] = lp_pulseRegion;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][1] = lp_punchTargetLocation1;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][2] = lp_punchTargetLocation2;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][3] = lp_punchTargetLocation3;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][4] = lp_punchTargetLocation4;
}

trigger auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger = null;
unit auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit;

void libMapM_gf_MMRepulseRegionAddToPunchedGroup (unit lp_punchedUnit) {
    auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit = lp_punchedUnit;

    if (auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger == null) {
        auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger = TriggerCreate("auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger, false, false);
}

bool auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_punchedUnit = auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(libMapM_gv_mMRepulseRegionPunchedGroup, lp_punchedUnit);
    Wait(1.0, c_timeGame);
    UnitGroupRemove(libMapM_gv_mMRepulseRegionPunchedGroup, lp_punchedUnit);
    return true;
}

void libMapM_gf_MapSetSafeRegion (int lp_team, region lp_safeRegion) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libGame_gt_HallOfStormsUnitEntersRegion, true);
    TriggerEnable(libGame_gt_HallOfStormsUnitExitsRegion, true);
    libMapM_gv_mMSafeRegions[lp_team] = lp_safeRegion;
    // libGame_gt_StartGame
}

void libMapM_gf_MMRavenCurseAddTributeSpawnLocation (point lp_spawnLocation) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMapM_gv_mMRavenTributeSpawnPointsCount >= libMapM_gv_mMRavenTributeSpawnPointsCountMax_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_559EC435"), true);
        return ;
    }

    libMapM_gv_mMRavenTributeSpawnPointsCount += 1;
    libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenTributeSpawnPointsCount] = lp_spawnLocation;
}

bool libMapM_gf_MMRavenCurseStarted () {
    // Automatic Variable Declarations
    // Implementation
    return (libMapM_gv_mMRavenTeamStats[1].lv_cursed || libMapM_gv_mMRavenTeamStats[2].lv_cursed);
}

fixed libMapM_gf_MMRavenStartTime () {
    // Automatic Variable Declarations
    // Implementation
    return libMapM_gv_mMRavenStartTime;
}

fixed libMapM_gf_MMRavenTributeSpawnTime () {
    // Automatic Variable Declarations
    // Implementation
    return libMapM_gv_mMRavenTributeSpawnTime;
}

int libMapM_gf_MMRavenTributeThresholdAmount () {
    // Automatic Variable Declarations
    // Implementation
    return libMapM_gv_mMRavenTributeThreshold;
}

string libMapM_gf_MMRavenTributeUnitType () {
    // Automatic Variable Declarations
    // Implementation
    return "RavenLordTribute";
}

point libMapM_gf_MMRavenRandomSpawnPoint () {
    // Variable Declarations
    int lv_spawnIndex;
    int[libMapM_gv_mMRavenTributeSpawnPointsCountMax_C + 1] lv_availableSpawnPointIndex;
    int lv_availableSpawnPointsCount;
    int lv_index;
    int lv_sideIndex1;
    int lv_sideIndex2;
    int lv_sideIndex;
    bool lv_pointGood;
    int lv_firstPointIndex;

    // Automatic Variable Declarations
    int autoC2001501_ae;
    const int autoC2001501_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_mMRavenTributeSpawnPointsCount < 1)) {
        return null;
    }

    lv_sideIndex1 = libMapM_gf_MMRavenSpawnPointSide(libMapM_gv_mMRavenLastTributeSpawnIndex1);
    lv_sideIndex2 = libMapM_gf_MMRavenSpawnPointSide(libMapM_gv_mMRavenLastTributeSpawnIndex2);
    autoC2001501_ae = libMapM_gv_mMRavenTributeSpawnPointsCount;
    lv_index = 1;
    for ( ; ( (autoC2001501_ai >= 0 && lv_index <= autoC2001501_ae) || (autoC2001501_ai < 0 && lv_index >= autoC2001501_ae) ) ; lv_index += autoC2001501_ai ) {
        if ((lv_index != libMapM_gv_mMRavenLastTributeSpawnIndex1) && (!(((libMapM_gv_mMRavenLastTributeSpawnIndex1 > 0) && (libMapM_gv_mMRavenLastTributeSpawnIndex2 > 0) && (ModI(libMapM_gv_mMRavenLastTributeSpawnIndex1, 2) == ModI(libMapM_gv_mMRavenLastTributeSpawnIndex2, 2)) && (ModI(lv_index, 2) == ModI(libMapM_gv_mMRavenLastTributeSpawnIndex1, 2)))))) {
            lv_pointGood = false;
            lv_sideIndex = libMapM_gf_MMRavenSpawnPointSide(lv_index);
            if ((libMapM_gv_mMRavenLastTributeSpawnIndex1 == 0)) {
                if (((lv_index == 1) || (lv_index == 2))) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenLastTributeSpawnIndex2 == 0)) {
                if ((lv_sideIndex != lv_sideIndex1)) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 0)) {
                lv_pointGood = true;
            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 1)) {
                if ((lv_sideIndex != lv_sideIndex1)) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 2)) {
                if ((lv_sideIndex != lv_sideIndex1) && (lv_sideIndex != lv_sideIndex2)) {
                    lv_pointGood = true;
                }

            }
            if ((lv_pointGood == true)) {
                lv_availableSpawnPointsCount += 1;
                lv_availableSpawnPointIndex[lv_availableSpawnPointsCount] = lv_index;
            }

        }

    }
    libMapM_gv_mMRavenLastTributeSpawnIndex2 = libMapM_gv_mMRavenLastTributeSpawnIndex1;
    libMapM_gv_mMRavenLastTributeSpawnIndex1 = lv_availableSpawnPointIndex[RandomInt(1, lv_availableSpawnPointsCount)];
    libMapM_gv_mMRavenTributeSpawnGroupIndex += 1;
    if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 3)) {
        libMapM_gv_mMRavenTributeSpawnGroupIndex = 0;
    }

    return libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenLastTributeSpawnIndex1];
}

int libMapM_gf_MMRavenSpawnPointSide (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index == 1) || (lp_index == 2))) {
        return 0;
    }
    else if (((lp_index == 4) || (lp_index == 5))) {
        return 1;
    }
    else if (((lp_index == 3) || (lp_index == 6))) {
        return 2;
    }
    return 0;
}

void libMapM_gf_MMRavenCreatePreviewTribute (point lp_previewLocation) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTributePreview", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lp_previewLocation);
    libMapM_gv_mMRavenTributePreview = UnitLastCreated();
}

void libMapM_gf_MMRavenStartSpawnTimer5090 () {
    // Variable Declarations
    fixed lv_spawnTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_spawnTime = (libMapM_gv_mMRavenTributeSpawnTime + RandomFixed((libMapM_gv_mMRavenTributeSpawnTimeVariance * -1), libMapM_gv_mMRavenTributeSpawnTimeVariance));
    TimerStart(libMapM_gv_mMRavenWarningTimer, (lv_spawnTime - libMapM_gv_mMRavenSpawnWarningTimerTime), false, c_timeGame);
}

void libMapM_gf_MMRavenTributeCollectionThresholdReached (int lp_winningTeam) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_winningTeam == libGame_gv_teamOrderIndex_C)) {
        libMapM_gf_MMRavenCurseStart(libCore_gv_cOMPUTER_TeamChaos);
    }
    else {
        libMapM_gf_MMRavenCurseStart(libCore_gv_cOMPUTER_TeamOrder);
    }
}

void libMapM_gf_MMRavenCurseStart (int lp_cursedPlayer) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_index;
    int lv_cursedTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    unitgroup auto258BEF5B_g;
    int auto258BEF5B_u;
    unit auto258BEF5B_var;
    unitgroup autoE57D618B_g;
    int autoE57D618B_u;
    unit autoE57D618B_var;

    // Variable Initialization

    // Implementation
    lv_cursedTeam = libGame_gf_TeamNumberOfPlayer(lp_cursedPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_cursedTeam);
    libMapM_gf_MMRavenPlayCurseSound(lv_cursedTeam);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_RavenKing_Cursed", PlayerGroupAll());
    libGame_gf_SendEventMapCursedHollowCurseStarts(lv_enemyTeam);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1On");
    libMapM_gv_mMRavenTeamStats[lv_cursedTeam].lv_cursed = true;
    libNtve_gf_SetUpgradeLevelForPlayer(lp_cursedPlayer, "RavenCurseIsCursed", 1);
    auto258BEF5B_g = UnitGroup(null, lp_cursedPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto258BEF5B_u = UnitGroupCount(auto258BEF5B_g, c_unitCountAll);
    for (;; auto258BEF5B_u -= 1) {
        auto258BEF5B_var = UnitGroupUnitFromEnd(auto258BEF5B_g, auto258BEF5B_u);
        if (auto258BEF5B_var == null) { break; }
        if (((UnitTypeTestFlag(UnitGetType(auto258BEF5B_var), c_unitFlagTownStructureTownHall) == true) || (UnitTypeTestFlag(UnitGetType(auto258BEF5B_var), c_unitFlagTownStructureCannonTower) == true))) {
            UnitBehaviorAdd(auto258BEF5B_var, "RavenLordsCurseStructures", auto258BEF5B_var, 1);
            UnitBehaviorSetDuration(auto258BEF5B_var, "RavenLordsCurseStructures", libMapM_gv_mMRavenCurseDuration_C);
            UnitBehaviorAdd(auto258BEF5B_var, "RavenLordsCurseStructuresWarning", auto258BEF5B_var, 1);
            UnitBehaviorSetDuration(auto258BEF5B_var, "RavenLordsCurseStructuresWarning", (libMapM_gv_mMRavenCurseDuration_C - 5.0));
        }

        if ((UnitTypeTestFlag(UnitGetType(auto258BEF5B_var), c_unitFlagTownStructureGate) == true)) {
            UnitBehaviorAdd(auto258BEF5B_var, "RavenLordsCurseStructures", auto258BEF5B_var, 1);
            UnitBehaviorSetDuration(auto258BEF5B_var, "RavenLordsCurseStructures", libMapM_gv_mMRavenCurseDuration_C);
            UnitBehaviorAdd(auto258BEF5B_var, "RavenLordsCurseStructuresWarning", auto258BEF5B_var, 1);
            UnitBehaviorSetDuration(auto258BEF5B_var, "RavenLordsCurseStructuresWarning", (libMapM_gv_mMRavenCurseDuration_C - 1.0));
        }

    }
    autoE57D618B_g = UnitGroup(null, lp_cursedPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE57D618B_u = UnitGroupCount(autoE57D618B_g, c_unitCountAll);
    for (;; autoE57D618B_u -= 1) {
        autoE57D618B_var = UnitGroupUnitFromEnd(autoE57D618B_g, autoE57D618B_u);
        if (autoE57D618B_var == null) { break; }
        libMapM_gf_MMRavenApplyCurseEffectOnMinion(autoE57D618B_var);
    }
    TriggerExecute(libMapM_gt_MMRavenCurseStartLightTransition, true, false);
    TimerStart(libMapM_gv_mMRavenCurseTimer, libMapM_gv_mMRavenCurseDuration_C, false, c_timeGame);
    libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning();
}

trigger auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_Trigger = null;

void libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning () {
    if (auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_Trigger == null) {
        auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenCurseWaitForandPlayCurseEndWarning_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_WaitForTimer(libMapM_gv_mMRavenCurseTimer, 9.0, false);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseEnd_Timer", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

void libMapM_gf_MMRavenApplyCurseEffectOnMinion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_unit, "RavenLordsCurseUnits", lp_unit, 1);
    UnitSetPropertyFixed(lp_unit, c_unitPropLife, 1.0);
}

void libMapM_gf_MMRavenRemoveCurseEffectOnMinion (unit lp_minion) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_minion, "RavenLordsCurseUnits", 1);
    UnitSetPropertyFixed(lp_minion, c_unitPropLifePercent, 100.0);
}

trigger auto_libMapM_gf_MMRavenPlayCurseSound_Trigger = null;
int auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam;

void libMapM_gf_MMRavenPlayCurseSound (int lp_cursedTeam) {
    auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam = lp_cursedTeam;

    if (auto_libMapM_gf_MMRavenPlayCurseSound_Trigger == null) {
        auto_libMapM_gf_MMRavenPlayCurseSound_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenPlayCurseSound_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenPlayCurseSound_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenPlayCurseSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_cursedTeam = auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseMid", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libMapM_gv_mMRavenCurseSound = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    libMapM_gf_MMRavenTransmissionCurseActiveQ(lp_cursedTeam);
    return true;
}

void libMapM_gf_MMRavenObjectiveUIUpdateText () {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_MapMechanicsCursedHollowSetTributeCountForTeam(libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_triburteCollected, libGame_gv_teamOrderIndex_C);
    libUIUI_gf_MapMechanicsCursedHollowSetTributeCountForTeam(libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_triburteCollected, libGame_gv_teamChaosIndex_C);
}

trigger auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger = null;
playergroup auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_lp_players;

void libMapM_gf_MMRavenTransmissionFirstEventStartQ (playergroup lp_players) {
    auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_lp_players = lp_players;

    if (auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_lp_players;

    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Event First", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger = null;

void libMapM_gf_MMRavenTransmissionRepeatEventStartQ () {
    if (auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Event Repeat", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger = null;
int auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam;

void libMapM_gf_MMRavenTransmissionCurseActiveQ (int lp_cursedTeam) {
    auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam = lp_cursedTeam;

    if (auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_cursedTeam = auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("CursedHollow", ("Left"));
    ConversationDataLineResetPlayers("CursedHollow", ("Right"));
    ConversationDataLineResetPlayers("CursedHollow", ("Observer"));
    if ((lp_cursedTeam == libGame_gv_teamOrderIndex_C)) {
        UserDataSetInt("MapVOEvent", "Raven - Left Team Cursed", "Value", 1, 1);
    }
    else {
        UserDataSetInt("MapVOEvent", "Raven - Right Team Cursed", "Value", 1, 1);
    }
    lv_orderPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_chaosPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_observerPlayers;
    ConversationDataLineSetPlayers("CursedHollow", ("Left"), lv_orderPlayerGroup);
    ConversationDataLineSetPlayers("CursedHollow", ("Right"), lv_chaosPlayerGroup);
    ConversationDataLineSetPlayers("CursedHollow", ("Observer"), lv_observers);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger = null;

void libMapM_gf_MMRavenTransmissionCurseEndsQ () {
    if (auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Curse Ends", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

void libMapM_gf_MMWinterveilSpawnSnowballatPoint (point lp_spawnPoint) {
    // Variable Declarations
    const int lv_heavySnowballChance_C = 40;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(1, 100) < lv_heavySnowballChance_C)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowballPickupHeavySnowball", 0, libCore_gv_cOMPUTER_Neutral, lp_spawnPoint);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowballPickupHardPackSnowball", 0, libCore_gv_cOMPUTER_Neutral, lp_spawnPoint);
    }
}

void libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion (region lp_spawnRegion) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnPoint = RegionRandomPoint(lp_spawnRegion);

    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return ;
    }

    while (((PointPathingPassable(lv_spawnPoint) == false) || (RegionContainsPoint(libMapM_gv_mMRepulseRegions[libGame_gv_teamOrderIndex_C], lv_spawnPoint) == true) || (RegionContainsPoint(libMapM_gv_mMRepulseRegions[libGame_gv_teamChaosIndex_C], lv_spawnPoint) == true))) {
        lv_spawnPoint = RegionRandomPoint(lp_spawnRegion);
    }
    libMapM_gf_MMWinterveilSpawnSnowballatPoint(lv_spawnPoint);
}

trigger auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_Trigger = null;
point auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_lp_centerPoint;

void libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute (point lp_centerPoint) {
    auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_lp_centerPoint = lp_centerPoint;

    if (auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_Trigger == null) {
        auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_Trigger = TriggerCreate("auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_Trigger, false, false);
}

bool auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_TriggerFunc (bool testConds, bool runActions) {
    point lp_centerPoint = auto_libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute_lp_centerPoint;

    // Variable Declarations
    fixed lv_baseWaitBetweenChecks_C;
    const fixed lv_waitForTributeSpawnDelay_C = 0.5625;
    region lv_spawnRegion;
    unitgroup lv_tributeUnitGroup;
    fixed lv_waitBeforeNextCheck;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baseWaitBetweenChecks_C = 8.0;
    lv_spawnRegion = RegionCircle(lp_centerPoint, 15.0);
    lv_tributeUnitGroup = UnitGroupEmpty();

    // Implementation
    while (true) {
        lv_waitBeforeNextCheck = lv_baseWaitBetweenChecks_C;
        UnitGroupAddUnitGroup(lv_tributeUnitGroup, UnitGroup("RavenLordTributeWarning", c_playerAny, lv_spawnRegion, UnitFilter(0, 0, 0, 0), 1));
        UnitGroupAddUnitGroup(lv_tributeUnitGroup, UnitGroup("RavenLordTribute", c_playerAny, lv_spawnRegion, UnitFilter(0, 0, 0, 0), 1));
        if ((UnitGroupCount(lv_tributeUnitGroup, c_unitCountAlive) > 0)) {
            libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_spawnRegion);
        }
        else {
            Wait(lv_waitForTributeSpawnDelay_C, c_timeGame);
            lv_waitBeforeNextCheck -= lv_waitForTributeSpawnDelay_C;
            UnitGroupAddUnitGroup(lv_tributeUnitGroup, UnitGroup("RavenLordTribute", c_playerAny, lv_spawnRegion, UnitFilter(0, 0, 0, 0), 1));
            if ((UnitGroupCount(lv_tributeUnitGroup, c_unitCountAlive) > 0)) {
                libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_spawnRegion);
            }
            else {
                return true;
            }
        }
        Wait(lv_waitBeforeNextCheck, c_timeGame);
    }
    return true;
}

void libMapM_gf_MMWinterveilSpawnManySnowballsAroundCores () {
    // Variable Declarations
    int lv_team;
    region lv_spawnArea;

    // Automatic Variable Declarations
    const int autoB3D33FFE_ae = libCore_gv_bALMaxTeams;
    const int autoB3D33FFE_ai = 1;
    const int autoCCD7E4F2_n = 22;
    int autoCCD7E4F2_i;

    // Variable Initialization

    // Implementation
    lv_team = 1;
    for ( ; ( (autoB3D33FFE_ai >= 0 && lv_team <= autoB3D33FFE_ae) || (autoB3D33FFE_ai < 0 && lv_team >= autoB3D33FFE_ae) ) ; lv_team += autoB3D33FFE_ai ) {
        lv_spawnArea = RegionCircle(UnitGetPosition(libGame_gv_teams[lv_team].lv_core), 13.0);
        for (autoCCD7E4F2_i = 1; autoCCD7E4F2_i <= autoCCD7E4F2_n; autoCCD7E4F2_i += 1) {
            libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_spawnArea);
        }
    }
}

void libMapM_gf_MMWinterveilSpawnSnowmanTeachers () {
    // Variable Declarations
    int lv_team;
    int lv_man;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    const int auto43D1FF9C_ae = libCore_gv_bALMaxTeams;
    const int auto43D1FF9C_ai = 1;
    const int auto1B28AEE6_ae = 4;
    const int auto1B28AEE6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_team = 1;
    for ( ; ( (auto43D1FF9C_ai >= 0 && lv_team <= auto43D1FF9C_ae) || (auto43D1FF9C_ai < 0 && lv_team >= auto43D1FF9C_ae) ) ; lv_team += auto43D1FF9C_ai ) {
        lv_man = 1;
        for ( ; ( (auto1B28AEE6_ai >= 0 && lv_man <= auto1B28AEE6_ae) || (auto1B28AEE6_ai < 0 && lv_man >= auto1B28AEE6_ae) ) ; lv_man += auto1B28AEE6_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowmanInProgress", 0, libCore_gv_cOMPUTER_Neutral, libMapM_gv_mMWinterveilSnowmanTeachingPoints[lv_team][lv_man]);
            UnitGroupAdd(libMapM_gv_mMWinterveilSnowmanTeachers, UnitLastCreated());
            TextTagCreate(StringExternal("Param/Value/lib_MapM_480EE9AB"), 28, UnitGetPosition(UnitLastCreated()), 0.0, true, false, PlayerGroupAll());
            libCore_gf_StoreTextTagForUnit(UnitLastCreated(), libMapM_gv_mMWinterveilSnowmanTeacherTextTagIndex_C, TextTagLastCreated());
        }
    }
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanTeacherDies, true);
}

trigger auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_Trigger = null;
int auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_owningPlayer;
unit auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_snowman;

void libMapM_gf_MMWinterveilRunSimpleSnowmanAI (int lp_owningPlayer, unit lp_snowman) {
    auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_owningPlayer = lp_owningPlayer;
    auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_snowman = lp_snowman;

    if (auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_Trigger == null) {
        auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_Trigger = TriggerCreate("auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_Trigger, false, false);
}

bool auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_owningPlayer = auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_owningPlayer;
    unit lp_snowman = auto_libMapM_gf_MMWinterveilRunSimpleSnowmanAI_lp_snowman;

    // Variable Declarations
    const fixed lv_snowmanSoftLeashRange_C = 7.0;
    const fixed lv_snowmanHardLeashRange_C = 12.0;
    const fixed lv_snowmanResetRange_C = 4.0;
    point lv_heroPosition;
    point lv_snowmanPosition;
    bool lv_isLeashing;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(lp_snowman) == true) && (libCore_gv_gameOver == false)) {
        lv_heroPosition = UnitGetPosition(libGame_gv_players[lp_owningPlayer].lv_heroUnit);
        lv_snowmanPosition = UnitGetPosition(lp_snowman);
        if ((lv_isLeashing == true)) {
            if ((DistanceBetweenPoints(lv_snowmanPosition, lv_heroPosition) <= lv_snowmanSoftLeashRange_C)) {
                lv_isLeashing = false;
            }
            else {
                UnitIssueOrder(lp_snowman, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, lv_snowmanResetRange_C, lv_snowmanPosition)), c_orderQueueReplace);
            }
        }
        else {
            if ((DistanceBetweenPoints(lv_snowmanPosition, lv_heroPosition) > lv_snowmanHardLeashRange_C)) {
                UnitIssueOrder(lp_snowman, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, lv_snowmanResetRange_C, lv_snowmanPosition)), c_orderQueueReplace);
                lv_isLeashing = true;
            }
            else {
                if ((DistanceBetweenPoints(lv_snowmanPosition, lv_heroPosition) > lv_snowmanSoftLeashRange_C)) {
                    UnitIssueOrder(lp_snowman, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, lv_snowmanResetRange_C, lv_snowmanPosition)), c_orderQueueReplace);
                }

            }
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libMapM_gf_MMWinterveilAddRemoveEnrageBufftoAllSnowmen (bool lp_toggle) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_snowman;

    // Automatic Variable Declarations
    playergroup autoD09F2E35_g;
    unitgroup auto02A4A75F_g;
    int auto02A4A75F_u;

    // Variable Initialization

    // Implementation
    autoD09F2E35_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoD09F2E35_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto02A4A75F_g = libMapM_gv_mMWinterveilSnowmenPetGroups[lv_itPlayer];
        auto02A4A75F_u = UnitGroupCount(auto02A4A75F_g, c_unitCountAll);
        for (;; auto02A4A75F_u -= 1) {
            lv_snowman = UnitGroupUnitFromEnd(auto02A4A75F_g, auto02A4A75F_u);
            if (lv_snowman == null) { break; }
            if ((lp_toggle == true)) {
                UnitBehaviorAdd(lv_snowman, "SnowmanEnrageBuff", lv_snowman, 1);
            }
            else {
                UnitBehaviorRemove(lv_snowman, "SnowmanEnrageBuff", 1);
            }
        }
    }
}

void libMapM_gf_MMWinterveilCreateSnowTribute () {
    // Variable Declarations
    const int lv_spawnDelayTime_C = 10;
    int lv_spawnPointIndex;
    point lv_spawnPoint;
    unit lv_warningUnit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnPointIndex = RandomInt(1, libMapM_gv_mMWinterveilSnowTributeSpawnLocationCount_C);

    // Implementation
    libMapM_gv_mMWinterveilSnowTributesInPlay += 1;
    while ((libMapM_gf_MMWinterveilSnowTributeLocationwasUsedRecently(lv_spawnPointIndex) == true)) {
        lv_spawnPointIndex = RandomInt(1, libMapM_gv_mMWinterveilSnowTributeSpawnLocationCount_C);
    }
    lv_spawnPoint = libMapM_gv_mMWinterveilSnowTributeSpawnLocations[lv_spawnPointIndex];
    libMapM_gv_mMWinterveilRecentSnowTributeLocations[libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex] = lv_spawnPointIndex;
    if ((libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex == libMapM_gv_mMWinterveilRecentSnowTributeLocationMemory_C)) {
        libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex = 1;
    }
    else {
        libMapM_gv_mMWinterveilRecentSnowTributeRecorderIndex += 1;
    }
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, ColorWithAlpha(100.0, 100.0, 0.0, 0.0), 6.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTributeWarning", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    lv_warningUnit = UnitLastCreated();
    libMapM_gf_ShareVisionofUnitForBothTeams(UnitLastCreated());
    libMapM_gf_MMWinterveilSpawnSnowballsAroundTribute(lv_spawnPoint);
    Wait(lv_spawnDelayTime_C, c_timeGame);
    UnitKill(lv_warningUnit);
    libNtve_gf_CreateModelAtPoint("RavenLordTributeSpawn", lv_spawnPoint);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, ColorWithAlpha(100.0, 100.0, 0.0, 0.0), 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTribute", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    libMapM_gf_ShareVisionofUnitForBothTeams(UnitLastCreated());
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UI_Game_Ping_Tribute_Ready", null, null, null);
    libUIUI_gf_AttachHelpButtonToUnit(UnitLastCreated(), libMapM_gt_MMHelpbuttonClicked, StringExternal("Param/Value/lib_MapM_4D430FBB"), 110, 135);
    Wait(libMapM_gv_mMWinterveilSnowTributeSpawnCooldown_C, c_timeGame);
    if ((libMapM_gv_mMWinterveilSnowTributesInPlay < libMapM_gv_mMWinterveilMaxTributesInPlay_C)) {
        libMapM_gf_MMWinterveilCreateSnowTribute();
    }

}

bool libMapM_gf_MMWinterveilSnowTributeLocationwasUsedRecently (int lp_location) {
    // Variable Declarations
    int lv_recent;

    // Automatic Variable Declarations
    const int autoD4961CE2_ae = libMapM_gv_mMWinterveilRecentSnowTributeLocationMemory_C;
    const int autoD4961CE2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_recent = 1;
    for ( ; ( (autoD4961CE2_ai >= 0 && lv_recent <= autoD4961CE2_ae) || (autoD4961CE2_ai < 0 && lv_recent >= autoD4961CE2_ae) ) ; lv_recent += autoD4961CE2_ai ) {
        if ((libMapM_gv_mMWinterveilRecentSnowTributeLocations[lv_recent] == lp_location)) {
            return true;
        }

    }
    return false;
}

point libMapM_gf_MMWinterveilWorldEnderTargetPoint (int lp_attackingTeam, point lp_launchPoint) {
    // Variable Declarations
    int lv_defendingTeam;
    int lv_targetTown;
    fixed lv_distanceToTarget;
    fixed lv_nearestDistance;
    int lv_nearestTown;

    // Automatic Variable Declarations
    int auto039EB938_ae;
    const int auto039EB938_ai = 1;

    // Variable Initialization
    lv_defendingTeam = libGame_gf_EnemyTeamNumberOfTeam(lp_attackingTeam);
    lv_nearestDistance = DistanceBetweenPoints(lp_launchPoint, UnitGetPosition(libGame_gv_teams[lv_defendingTeam].lv_core));
    lv_nearestTown = -1;

    // Implementation
    auto039EB938_ae = libGame_gv_townTownCount;
    lv_targetTown = 1;
    for ( ; ( (auto039EB938_ai >= 0 && lv_targetTown <= auto039EB938_ae) || (auto039EB938_ai < 0 && lv_targetTown >= auto039EB938_ae) ) ; lv_targetTown += auto039EB938_ai ) {
        lv_distanceToTarget = DistanceBetweenPoints(lp_launchPoint, libMapM_gv_mMWinterveilWorldEnderSnowballImpactPoint[lv_targetTown]);
        if ((libGame_gv_townTownData[lv_targetTown].lv_owner == libGame_gf_ComputerPlayerInTeam(lv_defendingTeam)) && (libGame_gf_TownTownIsAlive(lv_targetTown, libGame_gf_ComputerPlayerInTeam(lv_defendingTeam)) == true) && (lv_distanceToTarget < lv_nearestDistance)) {
            lv_nearestDistance = lv_distanceToTarget;
            lv_nearestTown = lv_targetTown;
        }

    }
    if ((lv_nearestTown != -1)) {
        return libMapM_gv_mMWinterveilWorldEnderSnowballImpactPoint[lv_nearestTown];
    }
    else {
        return UnitGetPosition(libGame_gv_teams[lv_defendingTeam].lv_core);
    }
}

void libMapM_gf_MMWinterveilInitializeWorldEnderSnowballImpactPoints () {
    // Variable Declarations
    int lv_town;
    int lv_structure;
    unit lv_townHallUnit;
    unit lv_gateUnit;

    // Automatic Variable Declarations
    int auto026F89ED_ae;
    const int auto026F89ED_ai = 1;
    int autoF4BDBA21_ae;
    const int autoF4BDBA21_ai = 1;

    // Variable Initialization

    // Implementation
    auto026F89ED_ae = libGame_gv_townTownCount;
    lv_town = 1;
    for ( ; ( (auto026F89ED_ai >= 0 && lv_town <= auto026F89ED_ae) || (auto026F89ED_ai < 0 && lv_town >= auto026F89ED_ae) ) ; lv_town += auto026F89ED_ai ) {
        lv_townHallUnit = libGame_gf_TownTownHall(lv_town);
        lv_gateUnit = null;
        autoF4BDBA21_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        lv_structure = 1;
        for ( ; ( (autoF4BDBA21_ai >= 0 && lv_structure <= autoF4BDBA21_ae) || (autoF4BDBA21_ai < 0 && lv_structure >= autoF4BDBA21_ae) ) ; lv_structure += autoF4BDBA21_ai ) {
            if ((libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]) == libGame_ge_TownStructureTypes_Gate)) {
                lv_gateUnit = libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure];
            }

        }
        if ((lv_townHallUnit != null) && (lv_gateUnit != null)) {
            libMapM_gv_mMWinterveilWorldEnderSnowballImpactPoint[lv_town] = MidPoint(UnitGetPosition(lv_townHallUnit), UnitGetPosition(lv_gateUnit));
        }

    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_IncludeMapMechanics_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_IncludeMapMechanics_Init () {
    libMapM_gt_IncludeMapMechanics = TriggerCreate("libMapM_gt_IncludeMapMechanics_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Data
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_DataJungleCampDefenderSapper, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderSiegeGiants, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderKnights, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderGraveGolem, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderData_Init () {
    libMapM_gt_DataJungleCampDefenderData = TriggerCreate("libMapM_gt_DataJungleCampDefenderData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Knights
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderKnights_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampDefenderTypeIndex(libMapM_ge_JungleCampDefenderTypes_Knights);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = libMapM_gv_genericMercCampInitialSpawnDelay_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 240.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 4;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[3] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[4] = "MercDefenderRangedMage";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_OgreCapture_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeNameLabel = StringExternal("Param/Value/lib_MapM_6B0182AC");
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeMinimapLabel = StringExternal("Param/Value/lib_MapM_A47EAD7C");
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_Knights, "OgreDefenderScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderKnights_Init () {
    libMapM_gt_DataJungleCampDefenderKnights = TriggerCreate("libMapM_gt_DataJungleCampDefenderKnights_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Siege Giants
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderSiegeGiants_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampDefenderTypeIndex(libMapM_ge_JungleCampDefenderTypes_SiegeGiants);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = libMapM_gv_genericMercCampInitialSpawnDelay_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 180.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 2;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "MercDefenderSiegeGiant";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defenderCoweringUnit[1] = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "MercDefenderSiegeGiant";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defenderCoweringUnit[2] = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_SiegeGiantCapture_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeNameLabel = StringExternal("Param/Value/lib_MapM_208E903F");
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeMinimapLabel = StringExternal("Param/Value/lib_MapM_46CDE629");
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_SiegeGiants, "SiegeGiantDefenderScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderSiegeGiants_Init () {
    libMapM_gt_DataJungleCampDefenderSiegeGiants = TriggerCreate("libMapM_gt_DataJungleCampDefenderSiegeGiants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Grave Golem
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderGraveGolem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampDefenderTypeIndex(libMapM_ge_JungleCampDefenderTypes_GraveGolem);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = libMapM_gv_genericMercBossCampInitialSpawnDelay_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 300.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "JungleGraveGolemDefender";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_GraveGolemCapture_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsElite = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeNameLabel = StringExternal("Param/Value/lib_MapM_8E66044E");
    if ((libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeMinimapLabel == null)) {
        libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeMinimapLabel = StringExternal("Param/Value/lib_MapM_E2C5014A");
    }

    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_GraveGolem, "GraveGolemDefenderScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderGraveGolem_Init () {
    libMapM_gt_DataJungleCampDefenderGraveGolem = TriggerCreate("libMapM_gt_DataJungleCampDefenderGraveGolem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Sapper
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderSapper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampDefenderTypeIndex(libMapM_ge_JungleCampDefenderTypes_Sappers);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = libMapM_gv_genericMercCampInitialSpawnDelay_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = libMapM_gv_mercSapperDefaultRespawnTime_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 3;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "MercGoblinSapperDefender";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "MercGoblinSapperDefender";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[3] = "MercGoblinSapperDefender";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_SiegeGiantCapture_C;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeNameLabel = StringExternal("Param/Value/lib_MapM_C33EE8CB");
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campTypeMinimapLabel = StringExternal("Param/Value/lib_MapM_D48AE93D");
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_Sappers, "MercGoblinSapperDefenderScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderSapper_Init () {
    libMapM_gt_DataJungleCampDefenderSapper = TriggerCreate("libMapM_gt_DataJungleCampDefenderSapper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Data
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_DataJungleCampMercSiegeGiants, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampMercSappers, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampMercOgres, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampMercGraveGolem, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercData_Init () {
    libMapM_gt_DataJungleCampMercData = TriggerCreate("libMapM_gt_DataJungleCampMercData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Ogres
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercOgres_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampMercTypesIndex(libMapM_ge_JungleCampMercTypes_Ogres);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 4;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[2] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[3] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[4] = "MercLanerRangedMage";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_Ogres, "OgreLanerScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercOgres_Init () {
    libMapM_gt_DataJungleCampMercOgres = TriggerCreate("libMapM_gt_DataJungleCampMercOgres_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Siege Giants
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercSiegeGiants_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampMercTypesIndex(libMapM_ge_JungleCampMercTypes_SiegeGiants);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 2;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "MercLanerSiegeGiant";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[2] = "MercLanerSiegeGiant";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_SiegeGiants, "SiegeGiantMercScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercSiegeGiants_Init () {
    libMapM_gt_DataJungleCampMercSiegeGiants = TriggerCreate("libMapM_gt_DataJungleCampMercSiegeGiants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Grave Golem
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercGraveGolem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampMercTypesIndex(libMapM_ge_JungleCampMercTypes_GraveGolem);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 1;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "JungleGraveGolemLaner";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_GraveGolem, "GraveGolemLanerScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercGraveGolem_Init () {
    libMapM_gt_DataJungleCampMercGraveGolem = TriggerCreate("libMapM_gt_DataJungleCampMercGraveGolem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Sappers
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercSappers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = libMapM_gf_JungleCampMercTypesIndex(libMapM_ge_JungleCampMercTypes_Sappers);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 3;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "MercGoblinSapperLaner";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[2] = "MercGoblinSapperLaner";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[3] = "MercGoblinSapperLaner";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_Sappers, "MercGoblinSapperLanerScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercSappers_Init () {
    libMapM_gt_DataJungleCampMercSappers = TriggerCreate("libMapM_gt_DataJungleCampMercSappers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Jungle Camps
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_InitializeJungleCamps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itCamp;
    string lv_actorMessageString;
    fixed lv_capturePointRadius;

    // Automatic Variable Declarations
    int auto48BCC7B9_ae;
    const int auto48BCC7B9_ai = 1;
    playergroup auto4FF90934_g;

    // Variable Initialization
    lv_actorMessageString = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto48BCC7B9_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto48BCC7B9_ai >= 0 && lv_itCamp <= auto48BCC7B9_ae) || (auto48BCC7B9_ai < 0 && lv_itCamp >= auto48BCC7B9_ae) ) ; lv_itCamp += auto48BCC7B9_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateIsEnabled == false)) {
            break;
        }

        lv_capturePointRadius = libMapM_gv_bALJungleCampCaptureRadius;
        libMapM_gf_JungleInitializeDefenderData(lv_itCamp);
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp)) {
            libMapM_gf_JungleInitializeMercCampData(lv_itCamp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCamp)) {
            libMapM_gf_JungleInitializeDoubloonCampData(lv_itCamp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCampSmall)) {
            libMapM_gf_JungleInitializeDoubloonSmallCampData(lv_itCamp);
            lv_capturePointRadius = 1.7;
        }

        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_RewardCamp)) {
            libMapM_gf_JungleInitializeRewardCampData(lv_itCamp);
        }

        libMapM_gf_JungleCreepCampRespawnTimerExpiresCreateEvent(lv_itCamp);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TownMercCampCaptureBeacon", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampCaptainSpawnPoint);
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCapturePointSplatModel != null)) {
            UnitSetFacing(UnitLastCreated(), PointGetFacing(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampCaptainSpawnPoint), 0.0);
            lv_actorMessageString = ("ModelSwap " + (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCapturePointSplatModel));
            ActorSendAsText(libNtve_gf_MainActorofUnit(UnitLastCreated()), StringToText(lv_actorMessageString));
        }

        libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCircleOfPowerUnit = UnitLastCreated();
        libGame_gf_CapturePointCreate(UnitLastCreated(), lv_capturePointRadius, libMapM_gv_bALJungleCampCaptureTime, 0.0, true, false);
        libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCapturePointIndex = libGame_gf_LastCreatedCapturePoint();
        libGame_gf_CapturePointDisable(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCapturePointIndex);
        libMapM_gf_JungleInitializeCreepCamp(lv_itCamp);
        auto4FF90934_g = PlayerGroupAll();
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4FF90934_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            VisRevealArea(lv_itPlayer, RegionCircle(UnitGetPosition(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCircleOfPowerUnit), 0.75), 1.0, false);
        }
    }
    DialogControlSetVisible(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsParentPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_InitializeJungleCamps_Init () {
    libMapM_gt_InitializeJungleCamps = TriggerCreate("libMapM_gt_InitializeJungleCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Minimap Merc Leader Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleMinimapMercLeaderDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_creepCampIndex;
    int lv_minimapIndex;

    // Automatic Variable Declarations
    const int auto069DD069_ae = libMapM_gv_jungleMinimapCamps;
    const int auto069DD069_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minimapIndex = 1;
    for ( ; ( (auto069DD069_ai >= 0 && lv_minimapIndex <= auto069DD069_ae) || (auto069DD069_ai < 0 && lv_minimapIndex >= auto069DD069_ae) ) ; lv_minimapIndex += auto069DD069_ai ) {
        if ((libMapM_gv_jungleMinimap[lv_minimapIndex].lv_isUsed == true)) {
            lv_creepCampIndex = libMapM_gv_jungleMinimap[lv_minimapIndex].lv_creepCampIndex;
            if ((UnitIsAlive(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_leader) == false)) {
                if ((UnitGroupCount(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_iconGroup, c_unitCountAlive) > 0)) {
                    UnitGroupRemove(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_iconGroup, libMapM_gv_jungleMinimap[lv_minimapIndex].lv_leader);
                    libMapM_gf_JungleMinimapSetIconForMercMinions(lv_creepCampIndex, lv_minimapIndex, libMapM_gv_jungleMinimap[lv_minimapIndex].lv_iconGroup);
                    libMapM_gf_JungleMinimapEditMercPath(libMapM_gv_jungleMinimap[lv_minimapIndex].lv_leader, false);
                }
                else {
                    libMapM_gf_JungleMinimapClearIndex(lv_minimapIndex);
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleMinimapMercLeaderDies_Init () {
    libMapM_gt_JungleMinimapMercLeaderDies = TriggerCreate("libMapM_gt_JungleMinimapMercLeaderDies_Func");
    TriggerAddEventUnitBehaviorChange(libMapM_gt_JungleMinimapMercLeaderDies, null, "MinionDeathMonitor", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libMapM_gt_JungleMinimapMercLeaderDies, null, "MinionDeathMonitor", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Jungle Camp Timers
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_StartJungleCampTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int auto0BE438EB_ae;
    const int auto0BE438EB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libMapM_gv_uIJungleCampPanel.lv_jungleCreepCampsParentPanel, PlayerGroupAll(), true);
    auto0BE438EB_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto0BE438EB_ai >= 0 && lv_itCamp <= auto0BE438EB_ae) || (auto0BE438EB_ai < 0 && lv_itCamp >= auto0BE438EB_ae) ) ; lv_itCamp += auto0BE438EB_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateIsEnabled == true)) {
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderInitialSpawnDelay - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderInitialSpawnDelay, false, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_StartJungleCampTimers_Init () {
    libMapM_gt_StartJungleCampTimers = TriggerCreate("libMapM_gt_StartJungleCampTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Creep Camp Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleCreepCampRespawnTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int auto675CC1A0_ae;
    const int auto675CC1A0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMapM_gv_jungleCreepCampsInitialized == false)) {
        libMapM_gv_jungleCreepCampsInitialized = true;
        TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, true);
        TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, true);
        TriggerEnable(libMapM_gt_JungleDefendersBeginFighting, true);
        TriggerEnable(libMapM_gt_JungleDefendersEndFighting, true);
        TriggerEnable(libMapM_gt_JungleAllDefendersKilled, true);
    }

    auto675CC1A0_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto675CC1A0_ai >= 0 && lv_itCamp <= auto675CC1A0_ae) || (auto675CC1A0_ai < 0 && lv_itCamp >= auto675CC1A0_ae) ) ; lv_itCamp += auto675CC1A0_ai ) {
        if ((EventTimer() == libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer)) {
            break;
        }

        if ((lv_itCamp == libMapM_gv_jungleNumberOfCreepCamps) && (EventTimer() != libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer)) {
            return true;
        }

    }
    if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit == null)) {
        libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
        return true;
    }

    if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Hibernating)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_HibernetingReadyToSpawn);
    }
    else {
        libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleCreepCampRespawnTimerExpires_Init () {
    libMapM_gt_JungleCreepCampRespawnTimerExpires = TriggerCreate("libMapM_gt_JungleCreepCampRespawnTimerExpires_Func");
    TriggerEnable(libMapM_gt_JungleCreepCampRespawnTimerExpires, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Respawn Timer Text Tag Countdown
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleRespawnTimerTextTagCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    text lv_campName;

    // Automatic Variable Declarations
    int auto25714E4D_ae;
    const int auto25714E4D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto25714E4D_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto25714E4D_ai >= 0 && lv_itCamp <= auto25714E4D_ae) || (auto25714E4D_ai < 0 && lv_itCamp >= auto25714E4D_ae) ) ; lv_itCamp += auto25714E4D_ai ) {
        libMapM_gf_JungleUpdateTextTagForCamp(lv_itCamp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleRespawnTimerTextTagCountdown_Init () {
    libMapM_gt_JungleRespawnTimerTextTagCountdown = TriggerCreate("libMapM_gt_JungleRespawnTimerTextTagCountdown_Func");
    TriggerEnable(libMapM_gt_JungleRespawnTimerTextTagCountdown, false);
    TriggerAddEventTimePeriodic(libMapM_gt_JungleRespawnTimerTextTagCountdown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Defenders Begin Fighting
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleDefendersBeginFighting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    int lv_camp;

    // Automatic Variable Declarations
    const int auto1ABA458C_ae = libMapM_gv_jungleMaxCamps;
    const int auto1ABA458C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIDefendersBeginFightingIndex();
    lv_testIndex = 1;
    for ( ; ( (auto1ABA458C_ai >= 0 && lv_testIndex <= auto1ABA458C_ae) || (auto1ABA458C_ai < 0 && lv_testIndex >= auto1ABA458C_ae) ) ; lv_testIndex += auto1ABA458C_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_testIndex;
            break;
        }

    }
    if ((lv_camp > 0) && (libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIState != libMapM_ge_JungleCampStates_HibernetingReadyToSpawn)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Busy);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleDefendersBeginFighting_Init () {
    libMapM_gt_JungleDefendersBeginFighting = TriggerCreate("libMapM_gt_JungleDefendersBeginFighting_Func");
    TriggerEnable(libMapM_gt_JungleDefendersBeginFighting, false);
    libGame_gf_JungleDefenderAIDefendersBeginFighting(libMapM_gt_JungleDefendersBeginFighting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Defenders End Fighting
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleDefendersEndFighting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    int lv_camp;

    // Automatic Variable Declarations
    const int auto8AFEA46A_ae = libMapM_gv_jungleMaxCamps;
    const int auto8AFEA46A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIDefendersEndFightingIndex();
    lv_testIndex = 1;
    for ( ; ( (auto8AFEA46A_ai >= 0 && lv_testIndex <= auto8AFEA46A_ae) || (auto8AFEA46A_ai < 0 && lv_testIndex >= auto8AFEA46A_ae) ) ; lv_testIndex += auto8AFEA46A_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_testIndex;
            break;
        }

    }
    if ((lv_camp > 0) && (libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIState != libMapM_ge_JungleCampStates_HibernetingReadyToSpawn)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Idle);
        if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_camp].lv_aIDefenderAIIndex), c_unitCountAlive) < libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderNumberofCreeps)) {
            TimerStart(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer, libMapM_gv_bALJungleLeashRespawnTime, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleDefendersEndFighting_Init () {
    libMapM_gt_JungleDefendersEndFighting = TriggerCreate("libMapM_gt_JungleDefendersEndFighting_Func");
    TriggerEnable(libMapM_gt_JungleDefendersEndFighting, false);
    libGame_gf_JungleDefenderAIDefendersEndFighting(libMapM_gt_JungleDefendersEndFighting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - All Defenders Killed
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleAllDefendersKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_killingPlayer;
    int lv_itCamp;
    int lv_camp;
    int lv_capturingPlayerIfNoCapturePoint;
    int lv_killingUnitTeam;

    // Automatic Variable Declarations
    const int auto1E5C8FBD_ae = libMapM_gv_jungleMaxCamps;
    const int auto1E5C8FBD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIAllDefendersKilledIndex();
    lv_killingPlayer = libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer();
    lv_itCamp = 1;
    for ( ; ( (auto1E5C8FBD_ai >= 0 && lv_itCamp <= auto1E5C8FBD_ae) || (auto1E5C8FBD_ai < 0 && lv_itCamp >= auto1E5C8FBD_ae) ) ; lv_itCamp += auto1E5C8FBD_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_itCamp;
            break;
        }

    }
    if ((lv_camp > 0)) {
        if (((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) || (libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCampSmall) || (libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_RewardCamp))) {
            if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCampInstantlyGrantsReward == false)) {
                libMapM_gf_JungleTurnOnCampCaptureBeacon(lv_camp);
            }
            else {
                lv_killingUnitTeam = libGame_gf_TeamNumberOfPlayer(lv_killingPlayer);
                if ((lv_killingUnitTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_capturingPlayerIfNoCapturePoint = libCore_gv_cOMPUTER_TeamOrder;
                }
                else if ((lv_killingUnitTeam == libGame_gv_teamChaosIndex_C)) {
                    lv_capturingPlayerIfNoCapturePoint = libCore_gv_cOMPUTER_TeamChaos;
                }
                libMapM_gf_JungleGrantCaptureRewards(lv_camp, lv_capturingPlayerIfNoCapturePoint);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit, lv_capturingPlayerIfNoCapturePoint, true);
            }
        }
        else {
            lv_killingUnitTeam = libGame_gf_TeamNumberOfPlayer(lv_killingPlayer);
            if (((lv_killingUnitTeam == libGame_gv_teamOrderIndex_C) || (lv_killingUnitTeam == libGame_gv_teamChaosIndex_C))) {
                libMapM_gf_JungleGrantCaptureRewards(lv_camp, libGame_gf_ComputerPlayerInTeam(lv_killingUnitTeam));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleAllDefendersKilled_Init () {
    libMapM_gt_JungleAllDefendersKilled = TriggerCreate("libMapM_gt_JungleAllDefendersKilled_Func");
    TriggerEnable(libMapM_gt_JungleAllDefendersKilled, false);
    libGame_gf_JungleDefenderAIAllDefendersKilled(libMapM_gt_JungleAllDefendersKilled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Camps Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateCampsStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoA47C46B5_ae;
    const int autoA47C46B5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_jungleCampsShouldBeHibernating = true;
    autoA47C46B5_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoA47C46B5_ai >= 0 && lv_itCamp <= autoA47C46B5_ae) || (autoA47C46B5_ai < 0 && lv_itCamp >= autoA47C46B5_ae) ) ; lv_itCamp += autoA47C46B5_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState != libMapM_ge_JungleCampStates_Busy) && (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState != libMapM_ge_JungleCampStates_Paused)) {
            libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_Hibernating);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateCampsStart_Init () {
    libMapM_gt_JungleHibernateCampsStart = TriggerCreate("libMapM_gt_JungleHibernateCampsStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Camps End
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateCampsEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_itDefenderIndex;
    unit lv_defenderUnit;

    // Automatic Variable Declarations
    int autoE0742658_ae;
    const int autoE0742658_ai = 1;
    int auto13CE3571_ae;
    const int auto13CE3571_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_jungleCampsShouldBeHibernating = false;
    autoE0742658_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoE0742658_ai >= 0 && lv_itCamp <= autoE0742658_ae) || (autoE0742658_ai < 0 && lv_itCamp >= autoE0742658_ae) ) ; lv_itCamp += autoE0742658_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Hibernating)) {
            auto13CE3571_ae = libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderNumberofCreeps;
            lv_itDefenderIndex = 1;
            for ( ; ( (auto13CE3571_ai >= 0 && lv_itDefenderIndex <= auto13CE3571_ae) || (auto13CE3571_ai < 0 && lv_itDefenderIndex >= auto13CE3571_ae) ) ; lv_itDefenderIndex += auto13CE3571_ai ) {
                lv_defenderUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex, lv_itDefenderIndex);
                libMapM_gf_JungleStopHibernatingCampDefender(lv_defenderUnit, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderSpawnPoints[lv_itDefenderIndex]);
            }
            libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, "SetMinimapVisibility 1");
            libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_Idle);
            if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex), c_unitCountAlive) > 0) && (UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex), c_unitCountAlive) < libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderNumberofCreeps)) {
                TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer, libMapM_gv_bALJungleLeashRespawnTime, false, c_timeGame);
            }

        }

        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_HibernetingReadyToSpawn)) {
            libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, "SetMinimapVisibility 1");
            libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
        }

        libMapM_gf_JungleSwitchToTextTagForCamp(lv_itCamp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateCampsEnd_Init () {
    libMapM_gt_JungleHibernateCampsEnd = TriggerCreate("libMapM_gt_JungleHibernateCampsEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Defenders That Leash
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateDefendersThatLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_camp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libMapM_gv_jungleCampsShouldBeHibernating == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_camp = libMapM_gf_JungleGetCampIndexFromDefenderIndex(libGame_gf_JungleDefenderAIDefendersEndFightingIndex());
    if ((lv_camp > 0)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Hibernating);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateDefendersThatLeash_Init () {
    libMapM_gt_JungleHibernateDefendersThatLeash = TriggerCreate("libMapM_gt_JungleHibernateDefendersThatLeash_Func");
    libGame_gf_JungleDefenderAIDefendersEndFighting(libMapM_gt_JungleHibernateDefendersThatLeash);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Defenders That Just Spawned
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateDefendersThatJustSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libMapM_gv_jungleCampsShouldBeHibernating == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_JungleTransitionCampIntoState(libGame_gf_JungleCampSpawnedIndex(), libMapM_ge_JungleCampStates_Hibernating);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateDefendersThatJustSpawned_Init () {
    libMapM_gt_JungleHibernateDefendersThatJustSpawned = TriggerCreate("libMapM_gt_JungleHibernateDefendersThatJustSpawned_Func");
    libGame_gf_JungleCampSpawned(libMapM_gt_JungleHibernateDefendersThatJustSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Camp Ownership Change
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleCampOwnershipChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_newPlayer;
    int lv_index;
    int lv_aIOwner;
    int lv_team;

    // Automatic Variable Declarations
    int auto8AAEA026_ae;
    const int auto8AAEA026_ai = 1;

    // Variable Initialization
    lv_newPlayer = libGame_gf_CapturePointChangesOwnerNewOwnerPlayer();
    lv_index = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_aIOwner = libGame_gf_CapturePointChangesOwnerAIOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    auto8AAEA026_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (auto8AAEA026_ai >= 0 && lv_itCamp <= auto8AAEA026_ae) || (auto8AAEA026_ai < 0 && lv_itCamp >= auto8AAEA026_ae) ) ; lv_itCamp += auto8AAEA026_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCapturePointIndex == lv_index)) {
            if ((lv_aIOwner == libCore_gv_cOMPUTER_TeamOrder)) {
                libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderLeashRegion, "Signal OwnerOrder");
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, libCore_gv_cOMPUTER_TeamOrder, true);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_TeamOrder, true);
                libMapM_gf_JungleTurnOffCampCaptureBeacon(lv_itCamp, libCore_gv_cOMPUTER_TeamOrder);
                libMapM_gf_JungleGrantCaptureRewards(lv_itCamp, libCore_gv_cOMPUTER_TeamOrder);
            }
            else if ((lv_aIOwner == libCore_gv_cOMPUTER_TeamChaos)) {
                libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderLeashRegion, "Signal OwnerChaos");
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, libCore_gv_cOMPUTER_TeamChaos, true);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_TeamChaos, true);
                libMapM_gf_JungleTurnOffCampCaptureBeacon(lv_itCamp, libCore_gv_cOMPUTER_TeamChaos);
                libMapM_gf_JungleGrantCaptureRewards(lv_itCamp, libCore_gv_cOMPUTER_TeamChaos);
            }
            if (((lv_aIOwner == libCore_gv_cOMPUTER_TeamOrder) || (lv_aIOwner == libCore_gv_cOMPUTER_TeamChaos))) {
                lv_team = libGame_gf_TeamNumberOfPlayer(lv_aIOwner);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Ally", -1), libCore_gv_cOMPUTER_TeamOrder, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Enemy", -1), libCore_gv_cOMPUTER_TeamChaos, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Ally", -1), libCore_gv_oBSERVER_ObserverUIPlayer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleCampOwnershipChange_Init () {
    libMapM_gt_JungleCampOwnershipChange = TriggerCreate("libMapM_gt_JungleCampOwnershipChange_Func");
    libGame_gf_CapturePointChangesOwner(libMapM_gt_JungleCampOwnershipChange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Siege Giant Taunt
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleSiegeGiantTaunt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegeGiant;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeGiant = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lv_siegeGiant), "MedHeadOnly", libNtve_gf_MainActorofUnit(lv_target));
    while (!(((UnitHasBehavior2(lv_siegeGiant, "MercDefenderSiegeGiantTauntProcLookAt") == false) || (UnitHasBehavior2(lv_siegeGiant, "JungleCreepPassive") == false)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_SimpleLookAtStop(lv_siegeGiant, "MedHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleSiegeGiantTaunt_Init () {
    libMapM_gt_JungleSiegeGiantTaunt = TriggerCreate("libMapM_gt_JungleSiegeGiantTaunt_Func");
    TriggerAddEventPlayerEffectUsed(libMapM_gt_JungleSiegeGiantTaunt, c_playerAny, "MercDefenderSiegeGiantTauntDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_InitializeMapMechanics_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto7EC73FCA_ae;
    const int auto7EC73FCA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EC73FCA_ae = libMapM_gv_mapMechanicsCount;
    lv_itIndex = 1;
    for ( ; ( (auto7EC73FCA_ai >= 0 && lv_itIndex <= auto7EC73FCA_ae) || (auto7EC73FCA_ai < 0 && lv_itIndex >= auto7EC73FCA_ae) ) ; lv_itIndex += auto7EC73FCA_ai ) {
        if ((libMapM_gv_mapMechanicsInitCallbacks[lv_itIndex] != null)) {
            TriggerExecute(libMapM_gv_mapMechanicsInitCallbacks[lv_itIndex], true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_InitializeMapMechanics_Init () {
    libMapM_gt_InitializeMapMechanics = TriggerCreate("libMapM_gt_InitializeMapMechanics_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Helpbutton Clicked
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMHelpbuttonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMHelpbuttonClicked_Init () {
    libMapM_gt_MMHelpbuttonClicked = TriggerCreate("libMapM_gt_MMHelpbuttonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Repulse Region Punch Behavior
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRepulseRegionPunchBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;
    int lv_itPunchTargetIndex;
    point lv_pos;
    fixed lv_distance;
    fixed lv_distanceMin;
    int lv_punchTargetIndexMin;

    // Automatic Variable Declarations
    const int autoBC84B867_ae = libCore_gv_bALMaxTeams;
    const int autoBC84B867_ai = 1;
    unitgroup auto1EA6686B_g;
    int auto1EA6686B_u;
    const int auto859C51F2_ae = libMapM_gv_mMRepulseRegionPunchTargetMax_C;
    const int auto859C51F2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }

        lv_itTeam = 1;
        for ( ; ( (autoBC84B867_ai >= 0 && lv_itTeam <= autoBC84B867_ae) || (autoBC84B867_ai < 0 && lv_itTeam >= autoBC84B867_ae) ) ; lv_itTeam += autoBC84B867_ai ) {
            auto1EA6686B_g = UnitGroup(null, c_playerAny, libMapM_gv_mMRepulseRegions[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1EA6686B_u = UnitGroupCount(auto1EA6686B_g, c_unitCountAll);
            for (;; auto1EA6686B_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto1EA6686B_g, auto1EA6686B_u);
                if (lv_itUnit == null) { break; }
                if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) == libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam)) && (UnitGroupHasUnit(libMapM_gv_mMRepulseRegionPunchedGroup, lv_itUnit) == false) && (libGame_gf_StormUnitHasBehaviorFromCategory(libGame_ge_StormBehaviorCategories_HallOfStormsKnockbackImmunity, lv_itUnit) == false) && ((UnitMoverExists(lv_itUnit, "Ground") == true) || (UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeSummoned) == true))) {
                    lv_pos = UnitGetPosition(lv_itUnit);
                    lv_punchTargetIndexMin = 0;
                    lv_itPunchTargetIndex = 1;
                    for ( ; ( (auto859C51F2_ai >= 0 && lv_itPunchTargetIndex <= auto859C51F2_ae) || (auto859C51F2_ai < 0 && lv_itPunchTargetIndex >= auto859C51F2_ae) ) ; lv_itPunchTargetIndex += auto859C51F2_ai ) {
                        if ((libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_itPunchTargetIndex] == null)) {
                            continue;
                        }

                        lv_distance = DistanceBetweenPoints(lv_pos, libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_itPunchTargetIndex]);
                        if (((lv_punchTargetIndexMin == 0) || (lv_distance < lv_distanceMin))) {
                            lv_punchTargetIndexMin = lv_itPunchTargetIndex;
                            lv_distanceMin = lv_distance;
                        }

                    }
                    if ((lv_punchTargetIndexMin > 0)) {
                        libGame_gf_SendEventUnitEntersSafeZonePuntRegion(lv_itUnit, libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_punchTargetIndexMin]);
                        libMapM_gf_MMRepulseRegionAddToPunchedGroup(lv_itUnit);
                    }

                }

            }
        }
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRepulseRegionPunchBehavior_Init () {
    libMapM_gt_MMRepulseRegionPunchBehavior = TriggerCreate("libMapM_gt_MMRepulseRegionPunchBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Safe Region Behavior
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMSafeRegionBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_safeRegionUnitGroup;
    int lv_itTeam;
    unit lv_itUnit;

    // Automatic Variable Declarations
    const int autoA8CC644E_ae = libCore_gv_bALMaxTeams;
    const int autoA8CC644E_ai = 1;
    unitgroup auto031A3F79_g;
    int auto031A3F79_u;
    unitgroup autoCFDFC67B_g;
    int autoCFDFC67B_u;

    // Variable Initialization
    lv_safeRegionUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }

        lv_itTeam = 1;
        for ( ; ( (autoA8CC644E_ai >= 0 && lv_itTeam <= autoA8CC644E_ae) || (autoA8CC644E_ai < 0 && lv_itTeam >= autoA8CC644E_ae) ) ; lv_itTeam += autoA8CC644E_ai ) {
            if ((libMapM_gv_mMSafeRegions[lv_itTeam] == null)) {
                continue;
            }

            auto031A3F79_g = UnitGroup(null, c_playerAny, libMapM_gv_mMSafeRegions[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto031A3F79_u = UnitGroupCount(auto031A3F79_g, c_unitCountAll);
            for (;; auto031A3F79_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto031A3F79_g, auto031A3F79_u);
                if (lv_itUnit == null) { break; }
                if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) == lv_itTeam)) {
                    UnitGroupAdd(lv_safeRegionUnitGroup, lv_itUnit);
                    libGame_gf_SendEventUnitEntersSafeZoneRegion(lv_itUnit);
                }

            }
            autoCFDFC67B_g = libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lv_itTeam];
            autoCFDFC67B_u = UnitGroupCount(autoCFDFC67B_g, c_unitCountAll);
            for (;; autoCFDFC67B_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(autoCFDFC67B_g, autoCFDFC67B_u);
                if (lv_itUnit == null) { break; }
                if ((UnitGroupHasUnit(lv_safeRegionUnitGroup, lv_itUnit) == true) && (libNtve_gf_UnitInRegion(lv_itUnit, libMapM_gv_mMSafeRegions[lv_itTeam]) == false)) {
                    UnitGroupRemove(lv_safeRegionUnitGroup, lv_itUnit);
                    libGame_gf_SendEventUnitExitsSafeZoneRegion(lv_itUnit);
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMSafeRegionBehavior_Init () {
    libMapM_gt_MMSafeRegionBehavior = TriggerCreate("libMapM_gt_MMSafeRegionBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven DisableEvent
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDisableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libMapM_gv_mMRavenStartTimer, true);
    TimerPause(libMapM_gv_mMRavenWarningTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDisableEvent_Init () {
    libMapM_gt_MMRavenDisableEvent = TriggerCreate("libMapM_gt_MMRavenDisableEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Enable Event
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenEnableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0)) {
        TimerPause(libMapM_gv_mMRavenStartTimer, true);
    }

    if ((TimerGetRemaining(libMapM_gv_mMRavenWarningTimer) > 0.0)) {
        TimerPause(libMapM_gv_mMRavenWarningTimer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenEnableEvent_Init () {
    libMapM_gt_MMRavenEnableEvent = TriggerCreate("libMapM_gt_MMRavenEnableEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Init
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoB305836E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMapM_gv_mMRavenMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libMapM_gt_MMRavenCurseGateOpen, true);
    TriggerEnable(libMapM_gt_MMRavenTributeCollectStarted, true);
    TriggerEnable(libMapM_gt_MMRavenTributeCollectCanceled, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartWarning, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartElunees, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartNexten, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartCurseec, true);
    TriggerEnable(libMapM_gt_MMRavenDisableEvent, true);
    libMapM_gf_RegisterMapEventEnableDisableTriggers(libMapM_gt_MMRavenDisableEvent, libMapM_gt_MMRavenEnableEvent);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    autoB305836E_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB305836E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, ("HeroGenericCaptureMacGuffin"), "Activity", lv_itPlayer, "Abil/Activity/CapturingTribute");
        CatalogFieldValueSet(c_gameCatalogEffect, ("HeroGenericCaptureMacGuffin@CreatePersistent"), "PeriodCount", lv_itPlayer, "48");
    }
    libMapM_gv_mMRavenFirstEventTiming = libMapM_gv_mMRavenStartTime;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseInit_Init () {
    libMapM_gt_MMRavenCurseInit = TriggerCreate("libMapM_gt_MMRavenCurseInit_Func");
    libGame_gf_MapMechanicInitialization(libMapM_gt_MMRavenCurseInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Objective Preview Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenObjectivePreviewTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMRavenCreatePreviewTribute(libMapM_gv_mMRavenTributeNextSpawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenObjectivePreviewTimerExpires_Init () {
    libMapM_gt_MMRavenObjectivePreviewTimerExpires = TriggerCreate("libMapM_gt_MMRavenObjectivePreviewTimerExpires_Func");
    TriggerAddEventTimer(libMapM_gt_MMRavenObjectivePreviewTimerExpires, libMapM_gv_mMRavenObjectivePreviewTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Gate Open
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseGateOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libMapM_gt_MMRavenSpawnTribute, true);
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, true);
    TimerStart(libMapM_gv_mMRavenStartTimer, libMapM_gv_mMRavenFirstEventTiming, false, c_timeGame);
    if ((libMapM_gv_mMMapMechanicDisabled == true)) {
        TimerPause(libMapM_gv_mMRavenStartTimer, true);
    }

    libMapM_gv_mMRavenTributeNextSpawnPoint = libMapM_gf_MMRavenRandomSpawnPoint();
    if ((libMapM_gv_mMRavenTributeUseTributePreviews == true)) {
        TimerStart(libMapM_gv_mMRavenObjectivePreviewTimer, libMapM_gv_mMRavenObjectivePreviewLongDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseGateOpen_Init () {
    libMapM_gt_MMRavenCurseGateOpen = TriggerCreate("libMapM_gt_MMRavenCurseGateOpen_Func");
    TriggerEnable(libMapM_gt_MMRavenCurseGateOpen, false);
    TriggerAddEventTimer(libMapM_gt_MMRavenCurseGateOpen, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Start Spawning
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenStartSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libMapM_gv_mMMapMechanicDisabled == true)) {
        TriggerEnable(libMapM_gt_MMRavenSpawnTribute, false);
        TriggerEnable(libMapM_gt_MMRavenTributeObtained, false);
        return true;
    }

    if ((libMapM_gv_mMRavenEventFirstTime == true)) {
        TimerStart(libMapM_gv_mMRavenWarningTimer, 0.0, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenStartSpawning_Init () {
    libMapM_gt_MMRavenStartSpawning = TriggerCreate("libMapM_gt_MMRavenStartSpawning_Func");
    TriggerAddEventTimer(libMapM_gt_MMRavenStartSpawning, libMapM_gv_mMRavenStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Spawn Tribute
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenSpawnTribute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoAE99E835_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMRavenCurseLifted = false;
    lv_spawnPoint = libMapM_gv_mMRavenTributeNextSpawnPoint;
    if ((libMapM_gv_mMRavenEventFirstTime == false)) {
        libMapM_gf_MMRavenTransmissionRepeatEventStartQ();
    }
    else {
        libMapM_gf_MMRavenTransmissionFirstEventStartQ(PlayerGroupAll());
        TriggerExecute(libMapM_gt_MMRavenObjectiveUIHandler, true, false);
    }
    Wait(0.5, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_RavenCurse_TributeSpawn", -1), c_maxPlayers, PlayerGroupAll(), lv_spawnPoint, 2.0, 100.0, 0.0);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, Color(100.00, 100.00, 0.00), 6.0);
    libGame_gf_SendEventMapCursedHollowTributeWarning(lv_spawnPoint);
    UnitRemove(libMapM_gv_mMRavenTributePreview);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTributeWarning", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    libMapM_gv_mMRavenTributeWarning = UnitLastCreated();
    UnitGroupAdd(libMapM_gv_mMRavenTributeWarnings, UnitLastCreated());
    libMapM_gf_ShareVisionofUnitForBothTeams(UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTribute", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    UnitBehaviorAdd(UnitLastCreated(), "MapMechanicCoolUp", UnitLastCreated(), 1);
    UnitBehaviorSetDuration(UnitLastCreated(), "MapMechanicCoolUp", (libMapM_gv_mMRavenSpawnWarningTimerTime + 0.5));
    UnitBehaviorSetDurationRemaining(UnitLastCreated(), "MapMechanicCoolUp", (libMapM_gv_mMRavenSpawnWarningTimerTime + 0.5));
    TimerStart(libMapM_gv_mMRavenTributeSpawnTimer, libMapM_gv_mMRavenSpawnWarningTimerTime, false, c_timeGame);
    libNtve_gf_WaitForTimer(libMapM_gv_mMRavenTributeSpawnTimer, 0.0, false);
    UnitKill(libMapM_gv_mMRavenTributeWarning);
    libNtve_gf_CreateModelAtPoint("RavenLordTributeSpawn", lv_spawnPoint);
    Wait(0.5, c_timeReal);
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStop BSD");
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, Color(100.00, 100.00, 0.00), 3.0);
    libMapM_gf_ShareVisionofUnitForBothTeams(UnitLastCreated());
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UI_Game_Ping_Tribute_Ready", null, null, null);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.0);
    UnitGroupAddUnitGroup(libMapM_gv_mMRavenTributes, UnitLastCreatedGroup());
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, true);
    libGame_gf_SendEventMapCursedHollowTributeSpawned(UnitLastCreated());
    libMapM_gv_mMRavenEventFirstTime = false;
    Wait(1.0, c_timeGame);
    libUIUI_gf_AttachHelpButtonToUnit(UnitLastCreated(), libMapM_gt_MMHelpbuttonClicked, StringExternal("Param/Value/lib_MapM_35621BD2"), 110, 135);
    Wait(0.5, c_timeGame);
    autoAE99E835_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoAE99E835_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libMapM_gv_mapMechanicUsedTracker[lv_itPlayer].lv_ravenTribute == true)) {
            libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_itPlayer, false, UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenSpawnTribute_Init () {
    libMapM_gt_MMRavenSpawnTribute = TriggerCreate("libMapM_gt_MMRavenSpawnTribute_Func");
    TriggerEnable(libMapM_gt_MMRavenSpawnTribute, false);
    TriggerAddEventTimer(libMapM_gt_MMRavenSpawnTribute, libMapM_gv_mMRavenWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Started
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int auto2DF3F216_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RavenLordTribute"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = (libCore_gf_IntegerStoredForUnit(EventUnitTargetUnit(), 1) + 1);
    libCore_gf_StoreIntegerForUnit(EventUnitTargetUnit(), 1, lv_count);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(EventUnitTargetUnit()), "Work");
    auto2DF3F216_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if (auto2DF3F216_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusIncrement TributeCaptureOrder");
    }
    else if (auto2DF3F216_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusIncrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectStarted_Init () {
    libMapM_gt_MMRavenTributeCollectStarted = TriggerCreate("libMapM_gt_MMRavenTributeCollectStarted_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeCollectStarted, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMRavenTributeCollectStarted, null, AbilityCommand("CaptureMacGuffin", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Canceled
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int auto2DE4FBE1_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RavenLordTribute"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = MaxI((libCore_gf_IntegerStoredForUnit(EventUnitTargetUnit(), 1) - 1), 0);
    libCore_gf_StoreIntegerForUnit(EventUnitTargetUnit(), 1, lv_count);
    if ((lv_count == 0)) {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(EventUnitTargetUnit()), "Work");
    }

    auto2DE4FBE1_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if (auto2DE4FBE1_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusDecrement TributeCaptureOrder");
    }
    else if (auto2DE4FBE1_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusDecrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectCanceled_Init () {
    libMapM_gt_MMRavenTributeCollectCanceled = TriggerCreate("libMapM_gt_MMRavenTributeCollectCanceled_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeCollectCanceled, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMRavenTributeCollectCanceled, null, AbilityCommand("CaptureMacGuffin", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Interrupted
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectInterrupted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8568FC00_val;

    // Conditions
    if (testConds) {
        if (!((libMapM_gf_MapMechanicExistsOnMap(libMapM_gv_mMRavenMechanicName_C) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8568FC00_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    if (auto8568FC00_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupUnit(libMapM_gv_mMRavenTributes, 1), "StatusDecrement TributeCaptureOrder");
    }
    else if (auto8568FC00_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupUnit(libMapM_gv_mMRavenTributes, 1), "StatusDecrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectInterrupted_Init () {
    libMapM_gt_MMRavenTributeCollectInterrupted = TriggerCreate("libMapM_gt_MMRavenTributeCollectInterrupted_Func");
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMRavenTributeCollectInterrupted, c_playerAny, "HeroGenericCaptureMacGuffin@DummyDamageResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Obtained
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeObtained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_collectedPlayer;
    int lv_collectedTeam;
    int lv_collectedTeamEnemy;
    unit lv_macGuffinUnit;
    int lv_teamIterator;
    string lv_macGuffinCount;
    int lv_regenGlobeOwner;
    point lv_regenGlobePoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_macGuffinUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_macGuffinCount = "";
    lv_regenGlobePoint = UnitGetPosition(lv_macGuffinUnit);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libMapM_gv_mMRavenTributes, lv_macGuffinUnit) == false)) {
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "Signal TributeOwnerNeutral");
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerChaos 0");
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerOrder 0");
        UnitKill(lv_macGuffinUnit);
        return true;
    }

    UnitGroupRemove(libMapM_gv_mMRavenTributes, lv_macGuffinUnit);
    lv_collectedPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_collectedTeam = libGame_gf_TeamNumberOfPlayer(lv_collectedPlayer);
    lv_collectedTeamEnemy = libGame_gf_EnemyTeamNumberOfTeam(lv_collectedTeam);
    libMapM_gv_mMRavenTributesCollected += 1;
    libGame_gf_SendEventMapCursedHollowTributePickedUp(lv_collectedPlayer, UnitGetPosition(lv_macGuffinUnit));
    libGame_gf_SendEventMapObjectiveCapturedByUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "Signal TributeOwnerNeutral");
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerChaos 0");
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerOrder 0");
    UnitKill(lv_macGuffinUnit);
    libMapM_gv_mMRavenTeamStats[lv_collectedTeam].lv_triburteCollected += 1;
    libMapM_gv_mapMechanicUsedTracker[lv_collectedPlayer].lv_ravenTribute = true;
    if ((lv_collectedTeam == 1)) {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, lv_regenGlobePoint);
    lv_macGuffinCount = IntToString(libMapM_gv_mMRavenTeamStats[lv_teamIterator].lv_triburteCollected);
    if ((libMapM_gv_mMRavenTeamStats[lv_collectedTeam].lv_triburteCollected >= libMapM_gf_MMRavenTributeThresholdAmount())) {
        libMapM_gf_MMRavenTributeCollectionThresholdReached(lv_collectedTeam);
    }
    else {
        libMapM_gf_MMRavenStartSpawnTimer5090();
        libMapM_gv_mMRavenTributeNextSpawnPoint = libMapM_gf_MMRavenRandomSpawnPoint();
        if ((libMapM_gv_mMRavenTributeUseTributePreviews == true)) {
            TimerStart(libMapM_gv_mMRavenObjectivePreviewTimer, libMapM_gv_mMRavenObjectivePreviewShortDelay, false, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeObtained_Init () {
    libMapM_gt_MMRavenTributeObtained = TriggerCreate("libMapM_gt_MMRavenTributeObtained_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMRavenTributeObtained, c_playerAny, "HeroGenericCaptureMacGuffin@CastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Start Light Transition
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseStartLightTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_SpecialLightingEventStart("StormRavenCourtCurseTransition", PlayerGroupAll(), 1.0);
    Wait(1.0, c_timeGame);
    libGame_gf_SpecialLightingEventStart("StormRavenCourtCurseFinal", PlayerGroupAll(), 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseStartLightTransition_Init () {
    libMapM_gt_MMRavenCurseStartLightTransition = TriggerCreate("libMapM_gt_MMRavenCurseStartLightTransition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Finished
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_cursedTeam;
    int lv_enemyTeam;
    int lv_cursedPlayer;

    // Automatic Variable Declarations
    unitgroup auto04DBCD1E_g;
    int auto04DBCD1E_u;
    unit auto04DBCD1E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundStop(libMapM_gv_mMRavenCurseSound, true);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseEnd", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal RainOff");
    if ((libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_cursed == true)) {
        lv_cursedTeam = libGame_gv_teamOrderIndex_C;
        lv_cursedPlayer = libCore_gv_cOMPUTER_TeamOrder;
        libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_triburteCollected = 0;
    }
    else if ((libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_cursed == true)) {
        lv_cursedTeam = libGame_gv_teamChaosIndex_C;
        lv_cursedPlayer = libCore_gv_cOMPUTER_TeamChaos;
        libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_triburteCollected = 0;
    }
    else if (true) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lv_cursedPlayer, "RavenCurseIsCursed", 0);
    libMapM_gf_MMRavenObjectiveUIUpdateText();
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_cursedTeam);
    if ((libCore_gv_gameOver == false)) {
        libGame_gf_SendEventMapCursedHollowCurseEnds();
    }

    libMapM_gf_MMRavenTransmissionCurseEndsQ();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    auto04DBCD1E_g = UnitGroup(null, lv_cursedPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04DBCD1E_u = UnitGroupCount(auto04DBCD1E_g, c_unitCountAll);
    for (;; auto04DBCD1E_u -= 1) {
        auto04DBCD1E_var = UnitGroupUnitFromEnd(auto04DBCD1E_g, auto04DBCD1E_u);
        if (auto04DBCD1E_var == null) { break; }
        libMapM_gf_MMRavenRemoveCurseEffectOnMinion(auto04DBCD1E_var);
    }
    libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_cursed = false;
    libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_cursed = false;
    libMapM_gv_mMRavenCurseLifted = true;
    libGame_gf_SpecialLightingEventEnd("StormRavenCourtCurseFinal", PlayerGroupAll(), 2.0);
    libMapM_gv_mMRavenTributeNextSpawnPoint = libMapM_gf_MMRavenRandomSpawnPoint();
    if ((libMapM_gv_mMRavenTributeUseTributePreviews == true)) {
        TimerStart(libMapM_gv_mMRavenObjectivePreviewTimer, libMapM_gv_mMRavenObjectivePreviewLongDelay, false, c_timeGame);
    }

    Wait(libMapM_gv_mMRavenTributePostCurseWaitTime_C, c_timeGame);
    libMapM_gf_MMRavenStartSpawnTimer5090();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseFinished_Init () {
    libMapM_gt_MMRavenCurseFinished = TriggerCreate("libMapM_gt_MMRavenCurseFinished_Func");
    TriggerAddEventTimer(libMapM_gt_MMRavenCurseFinished, libMapM_gv_mMRavenCurseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Objective UI Handler
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenObjectiveUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_tipEffect;
    text lv_tip;
    text lv_tipCursed;
    int lv_indexTeam;
    int lv_indexTeamEnemy;
    int lv_state;
    int lv_lastState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_state = libMapM_ge_MMRavenCurseState_Starting;
    lv_lastState = libMapM_ge_MMRavenCurseState_Starting;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_tipEffect = StringExternal("Param/Value/lib_MapM_F3E9A97B");
    TextExpressionSetToken("Param/Expression/lib_MapM_1A51679F", "A", IntToText(libMapM_gv_mMRavenTributeThreshold));
    TextExpressionSetToken("Param/Expression/lib_MapM_1A51679F", "B", lv_tipEffect);
    lv_tip = TextExpressionAssemble("Param/Expression/lib_MapM_1A51679F");
    lv_tipCursed = lv_tipEffect;
    while (true) {
        if ((libMapM_gv_mMRavenCurseLifted == true)) {
            lv_state = libMapM_ge_MMRavenCurseState_Lifted;
            libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam(libUIUI_ge_MapMechanicsCursedHollowModes_NoActivity, 0);
            Wait(8.0, c_timeGame);
            while (!((libMapM_gv_mMRavenCurseLifted == false))) {
                Wait(0.25, c_timeGame);
            }
            lv_lastState = lv_state;
        }
        else if ((libMapM_gf_MMRavenCurseStarted() == true)) {
            lv_state = libMapM_ge_MMRavenCurseState_Cursed;
            if ((libMapM_gv_mMRavenTeamStats[1].lv_cursed == true)) {
                lv_indexTeam = 1;
                lv_indexTeamEnemy = 2;
            }
            else {
                lv_indexTeam = 2;
                lv_indexTeamEnemy = 1;
            }
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam(libUIUI_ge_MapMechanicsCursedHollowModes_Curse, lv_indexTeamEnemy);
                libUIUI_gf_MapMechanicsCursedHollowSetTributeCountForTeam(0, lv_indexTeamEnemy);
            }

            libUIUI_gf_MapMechanicsCursedHollowSetRemainingCurseTimeForTeam(FixedToInt(TimerGetRemaining(libMapM_gv_mMRavenCurseTimer)), lv_indexTeamEnemy);
            lv_lastState = lv_state;
        }
        else if ((TimerGetRemaining(libMapM_gv_mMRavenTributeSpawnTimer) > 0.0)) {
            lv_state = libMapM_ge_MMRavenCurseState_TributeSpawning;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam(libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawning, 0);
            }

            libUIUI_gf_MapMechanicsCursedHollowSetRemainingTributeSpawnTime(FixedToInt(TimerGetRemaining(libMapM_gv_mMRavenTributeSpawnTimer)));
            lv_lastState = lv_state;
        }
        else if ((UnitGroupCount(libMapM_gv_mMRavenTributes, c_unitCountAlive) > 0)) {
            lv_state = libMapM_ge_MMRavenCurseState_TributeSpawned;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam(libUIUI_ge_MapMechanicsCursedHollowModes_TributeSpawned, 0);
            }

            lv_lastState = lv_state;
        }
        else if (true) {
            lv_state = libMapM_ge_MMRavenCurseState_NoActivity;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsCursedHollowSetModeForTeam(libUIUI_ge_MapMechanicsCursedHollowModes_NoActivity, 0);
                libUIUI_gf_MapMechanicsCursedHollowShowHidePanel(true);
            }

            libMapM_gf_MMRavenObjectiveUIUpdateText();
            lv_lastState = lv_state;
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenObjectiveUIHandler_Init () {
    libMapM_gt_MMRavenObjectiveUIHandler = TriggerCreate("libMapM_gt_MMRavenObjectiveUIHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Elune -es)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartElunees_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartElunees_Init () {
    libMapM_gt_MMRavenDebugStartElunees = TriggerCreate("libMapM_gt_MMRavenDebugStartElunees_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartElunees, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartElunees, c_playerAny, "-es", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartElunees, c_playerAny, "EVENTSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Next -en)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartNexten_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == true)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
        while (!((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == false))) {
            Wait(0.25, c_timeGame);
        }
    }

    TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartNexten_Init () {
    libMapM_gt_MMRavenDebugStartNexten = TriggerCreate("libMapM_gt_MMRavenDebugStartNexten_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartNexten, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartNexten, c_playerAny, "-en", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartNexten, c_playerAny, "TRIBUTENEXT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Curse -ec)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartCurseec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == true)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
        while (!((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == false))) {
            Wait(0.25, c_timeGame);
        }
    }

    libMapM_gv_mMRavenTeamStats[1].lv_triburteCollected = (libMapM_gv_mMRavenTributeThreshold - 1);
    TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartCurseec_Init () {
    libMapM_gt_MMRavenDebugStartCurseec = TriggerCreate("libMapM_gt_MMRavenDebugStartCurseec_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartCurseec, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartCurseec, c_playerAny, "-ec", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartCurseec, c_playerAny, "TRIBUTELAST", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Warning)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!(((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0) || (TimerGetRemaining(libMapM_gv_mMRavenWarningTimer) > 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
    }
    else {
        TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartWarning_Init () {
    libMapM_gt_MMRavenDebugStartWarning = TriggerCreate("libMapM_gt_MMRavenDebugStartWarning_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartWarning, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartWarning, c_playerAny, "WARNINGSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Buried Backwoods Initialize
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMBuriedBackwoodsInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto38EFEFE6_ae = 20;
    const int auto38EFEFE6_ai = 1;
    const int auto1F1642CD_ae = 10;
    const int auto1F1642CD_ai = 1;
    playergroup autoCC719B22_g;
    const int auto6D54BFBA_ae = 20;
    const int auto6D54BFBA_ai = 1;
    unitgroup autoC654919D_g;
    int autoC654919D_u;
    unit autoC654919D_var;
    const int autoA9626683_ae = libMapM_gv_jungleMaxCamps;
    const int autoA9626683_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_MapM_6EA7D3E3"));
    lv_i = 1;
    for ( ; ( (auto38EFEFE6_ai >= 0 && lv_i <= auto38EFEFE6_ae) || (auto38EFEFE6_ai < 0 && lv_i >= auto38EFEFE6_ae) ) ; lv_i += auto38EFEFE6_ai ) {
        libCore_gv_bALDeathTimes[lv_i] = (libCore_gv_bALDeathTimes[lv_i] / 2.0);
    }
    lv_i = 1;
    for ( ; ( (auto1F1642CD_ai >= 0 && lv_i <= auto1F1642CD_ae) || (auto1F1642CD_ai < 0 && lv_i >= auto1F1642CD_ae) ) ; lv_i += auto1F1642CD_ai ) {
        libCore_gv_bALDeathTimes[(lv_i + 20)] = ((libCore_gv_bALDeathTimes[(lv_i + 20)] / 2.0) + (lv_i * 4.0));
    }
    libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_xPMultiplier = 2.0;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_xPMultiplier = 2.0;
    libGame_gv_mountMovespeedBuff = 0.5;
    autoCC719B22_g = PlayerGroupAll();
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoCC719B22_g, lv_i);
        if (lv_i < 0) { break; }
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("RegenGlobePickupPercentModifyHealth"), "VitalArray[" + IntToString(0) + "].ChangeFraction", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("RegenGlobePickupPercentModifyHealth"), "VitalArray[" + IntToString(0) + "].ChangeFraction", lv_i) * 1.5));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("RegenGlobePickupPercentModifyMana"), "VitalArray[" + IntToString(2) + "].ChangeFraction", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("RegenGlobePickupPercentModifyMana"), "VitalArray[" + IntToString(2) + "].ChangeFraction", lv_i) * 1.5));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("HeroGenericFountainDrink@HealingFountainCooldown"), "Duration", lv_i, 60.0);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("HeroGenericMount@Mounted"), "Modification.UnifiedMoveSpeedFactor", lv_i, 0.5);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, ("KingsCore"), "LifeMax", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, ("KingsCore"), "LifeMax", c_playerAny) + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, ("KingsCore"), "ShieldsMax", c_playerAny)));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, ("KingsCore"), "LifeStart", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, ("KingsCore"), "LifeStart", c_playerAny) + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, ("KingsCore"), "ShieldsStart", c_playerAny)));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, ("KingsCore"), "ShieldsMax", lv_i, 0.0);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, ("TownMoonwellL2"), "Sight", lv_i, 0.0);
        lv_j = 1;
        for ( ; ( (auto6D54BFBA_ai >= 0 && lv_j <= auto6D54BFBA_ae) || (auto6D54BFBA_ai < 0 && lv_j >= auto6D54BFBA_ae) ) ; lv_j += auto6D54BFBA_ai ) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("CoreScaling"), "VeterancyLevelArray[" + IntToString(lv_j) + "].Modification.VitalMaxArray[" + IntToString(0) + "]", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("CoreScaling"), "VeterancyLevelArray[" + IntToString(lv_j) + "].Modification.VitalMaxArray[" + IntToString(0) + "]", c_playerAny) + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("CoreScaling"), "VeterancyLevelArray[" + IntToString(lv_j) + "].Modification.VitalMaxArray[" + IntToString(1) + "]", c_playerAny)));
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, ("CoreScaling"), "VeterancyLevelArray[" + IntToString(lv_j) + "].Modification.VitalMaxArray[" + IntToString(1) + "]", lv_i, 0.0);
        }
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("OgreKingJungleWeaponDamage"), "Amount", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("OgreKingJungleWeaponDamage"), "Amount", lv_i) * 0.5));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("MercDefenderMeleeKnightDamage"), "Amount", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("MercDefenderMeleeKnightDamage"), "Amount", lv_i) * 0.75));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("MercDefenderRangedMageDamage"), "Amount", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("MercDefenderRangedMageDamage"), "Amount", lv_i) * 0.75));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, ("MercDefenderSiegeGiantDamage"), "Amount", lv_i, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, ("MercDefenderSiegeGiantDamage"), "Amount", lv_i) * 0.75));
    }
    autoC654919D_g = UnitGroup("KingsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC654919D_u = UnitGroupCount(autoC654919D_g, c_unitCountAll);
    for (;; autoC654919D_u -= 1) {
        autoC654919D_var = UnitGroupUnitFromEnd(autoC654919D_g, autoC654919D_u);
        if (autoC654919D_var == null) { break; }
        UnitSetPropertyFixed(autoC654919D_var, c_unitPropLifePercent, 100.0);
    }
    lv_i = 1;
    for ( ; ( (autoA9626683_ai >= 0 && lv_i <= autoA9626683_ae) || (autoA9626683_ai < 0 && lv_i >= autoA9626683_ae) ) ; lv_i += autoA9626683_ai ) {
        libMapM_gv_dataJungleCampDefenderData[lv_i].lv_initialSpawnDelay = (libMapM_gv_dataJungleCampDefenderData[lv_i].lv_initialSpawnDelay / 2.0);
        libMapM_gv_dataJungleCampDefenderData[lv_i].lv_respawnTime = (libMapM_gv_dataJungleCampDefenderData[lv_i].lv_respawnTime / 2.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMBuriedBackwoodsInitialize_Init () {
    libMapM_gt_MMBuriedBackwoodsInitialize = TriggerCreate("libMapM_gt_MMBuriedBackwoodsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilModInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto5EF27BEE_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_mapData[libCore_gv_sYSMapIndex].lv_gameMutator == libCore_ge_GameMutators_Winterveil))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIEnableMapMechanicButtonAllPlayers(true);
    TriggerExecute(libMapM_gt_MMWinterveilHeroCurationCallback, true, true);
    TriggerEnable(libMapM_gt_MMWinterveilGameOpenTimerStarted, true);
    TriggerEnable(libMapM_gt_MMWinterveilGatesOpened, true);
    TriggerEnable(libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles, true);
    TriggerEnable(libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers, true);
    TriggerEnable(libMapM_gt_MMWinterveilPlayerPicksupSnowball, true);
    TriggerEnable(libMapM_gt_MMWinterveilSpawnVictorySnowmen, true);
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanSpawned, true);
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanDies, true);
    TriggerEnable(libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist, true);
    TriggerEnable(libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen, true);
    TriggerEnable(libMapM_gt_MMWinterveilSnowballDamageScaling, true);
    TriggerEnable(libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires, true);
    TriggerEnable(libMapM_gt_MMWinterveilSnowTributePickedUp, true);
    TriggerEnable(libMapM_gt_MMWinterveilWorldEnderSnowballCreated, true);
    auto5EF27BEE_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto5EF27BEE_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, ("HeroGenericCaptureMacGuffin"), "Activity", lv_itPlayer, "Abil/Activity/CapturingTribute");
        CatalogFieldValueSet(c_gameCatalogActor, ("RavenLordTribute"), "MinimapTooltip", lv_itPlayer, "Unit/Name/RavenLordTributeSnowBrawl");
        CatalogFieldValueSet(c_gameCatalogButton, ("LockedMapMechanicAbility"), "Name", lv_itPlayer, "Button/Name/LockedMapMechanicAbilitySnowBrawl");
        CatalogFieldValueSet(c_gameCatalogButton, ("LockedMapMechanicAbility"), "Tooltip", lv_itPlayer, "Button/Tooltip/LockedMapMechanicAbilitySnowBrawl");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilModInitialization_Init () {
    libMapM_gt_MMWinterveilModInitialization = TriggerCreate("libMapM_gt_MMWinterveilModInitialization_Func");
    libGame_gf_IncludeModeInitialization(libMapM_gt_MMWinterveilModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Hero Curation Callback
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilHeroCurationCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilHeroCurationCallback_Init () {
    libMapM_gt_MMWinterveilHeroCurationCallback = TriggerCreate("libMapM_gt_MMWinterveilHeroCurationCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Game Open Timer Started
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilGameOpenTimerStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_MapMechanicsWinterveilShowHidePanel(true);
    TriggerExecute(libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles, true, false);
    libMapM_gv_mMRavenStartTime = 30.0;
    libMapM_gv_mMRavenFirstEventTiming = 30.0;
    libMapM_gf_MMWinterveilSpawnManySnowballsAroundCores();
    libMapM_gf_MMWinterveilSpawnSnowmanTeachers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilGameOpenTimerStarted_Init () {
    libMapM_gt_MMWinterveilGameOpenTimerStarted = TriggerCreate("libMapM_gt_MMWinterveilGameOpenTimerStarted_Func");
    TriggerEnable(libMapM_gt_MMWinterveilGameOpenTimerStarted, false);
    libGame_gf_GameOpenTimerStarted(libMapM_gt_MMWinterveilGameOpenTimerStarted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Gates Opened
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilGatesOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMapM_gv_mMWinterveilSnowballDamageScalingTimer, libMapM_gv_mMWinterveilSnowballDamageScalingDelay_C, false, c_timeGame);
    libMapM_gf_MMWinterveilInitializeWorldEnderSnowballImpactPoints();
    TriggerEnable(libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen, true);
    TimerStart(libMapM_gv_mMWinterveilSnowTributeSpawnTimer, libMapM_gv_mMWinterveilSnowTributeInitialSpawnDelay_C, false, c_timeGame);
    TimerStart(libMapM_gv_mMWinterveilPlayerSnowballSpawnTimer, libMapM_gv_mMWinterveilPlayerSnowballSpawnDelay_C, true, c_timeGame);
    libUIUI_gf_MapMechanicsWinterveilShowHidePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilGatesOpened_Init () {
    libMapM_gt_MMWinterveilGatesOpened = TriggerCreate("libMapM_gt_MMWinterveilGatesOpened_Func");
    TriggerEnable(libMapM_gt_MMWinterveilGatesOpened, false);
    TriggerAddEventTimer(libMapM_gt_MMWinterveilGatesOpened, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Spawn Snowballs in Towns and Jungles
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBD5528D7_ae;
    const int autoBD5528D7_ai = 1;
    const int auto857AB4DB_ae = libCore_gv_bALMaxTeams;
    const int auto857AB4DB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBD5528D7_ae = libGame_gv_townTownCount;
    lv_i = 1;
    for ( ; ( (autoBD5528D7_ai >= 0 && lv_i <= autoBD5528D7_ae) || (autoBD5528D7_ai < 0 && lv_i >= autoBD5528D7_ae) ) ; lv_i += autoBD5528D7_ai ) {
        libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(RegionCircle(libGame_gv_townTownData[lv_i].lv_townHallPosition, 8.0));
        libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(RegionCircle(libGame_gv_townTownData[lv_i].lv_townHallPosition, 8.0));
    }
    lv_i = 1;
    for ( ; ( (auto857AB4DB_ai >= 0 && lv_i <= auto857AB4DB_ae) || (auto857AB4DB_ai < 0 && lv_i >= auto857AB4DB_ae) ) ; lv_i += auto857AB4DB_ai ) {
        libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(RegionCircle(UnitGetPosition(libGame_gv_teams[lv_i].lv_core), 15.0));
        libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(RegionCircle(UnitGetPosition(libGame_gv_teams[lv_i].lv_core), 15.0));
    }
    TimerStart(libMapM_gv_mMWinterveilTownSnowballSpawnTimer, 30.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles_Init () {
    libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles = TriggerCreate("libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles, false);
    TriggerAddEventTimer(libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles, libMapM_gv_mMWinterveilTownSnowballSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Spawn Snowballs around Players
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_nearbySnowballDetectRadius_C = 8.0;
    const int lv_nearbySnowballGoal_C = 3;
    int lv_itplayer;
    unit lv_hero;
    int lv_nearbySnowballCount;
    region lv_nearbySnowballDetectRegion;

    // Automatic Variable Declarations
    playergroup autoEC4C7B98_g;
    unitgroup auto5359D8A3_g;
    int auto5359D8A3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC4C7B98_g = libCore_gv_allHeroPlayers;
    lv_itplayer = -1;
    while (true) {
        lv_itplayer = PlayerGroupNextPlayer(autoEC4C7B98_g, lv_itplayer);
        if (lv_itplayer < 0) { break; }
        auto5359D8A3_g = libGame_gv_players[lv_itplayer].lv_heroUnitGroup;
        auto5359D8A3_u = UnitGroupCount(auto5359D8A3_g, c_unitCountAll);
        for (;; auto5359D8A3_u -= 1) {
            lv_hero = UnitGroupUnitFromEnd(auto5359D8A3_g, auto5359D8A3_u);
            if (lv_hero == null) { break; }
            if (((UnitIsAlive(lv_hero) == true) && (libNtve_gf_UnitInRegion(lv_hero, libMapM_gv_mMRepulseRegions[libGame_gv_teamOrderIndex_C]) == false) && (libNtve_gf_UnitInRegion(lv_hero, libMapM_gv_mMRepulseRegions[libGame_gv_teamChaosIndex_C]) == false))) {
                lv_nearbySnowballCount = 0;
                lv_nearbySnowballDetectRegion = RegionCircle(UnitGetPosition(lv_hero), lv_nearbySnowballDetectRadius_C);
                lv_nearbySnowballCount += UnitCount("SnowballPickupHardPackSnowball", c_playerAny, lv_nearbySnowballDetectRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_nearbySnowballCount += UnitCount("SnowballPickupHeavySnowball", c_playerAny, lv_nearbySnowballDetectRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((lv_nearbySnowballCount < lv_nearbySnowballGoal_C)) {
                    libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_nearbySnowballDetectRegion);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers_Init () {
    libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers = TriggerCreate("libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers, false);
    TriggerAddEventTimer(libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers, libMapM_gv_mMWinterveilPlayerSnowballSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Player Picks up Snowball
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilPlayerPicksupSnowball_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snowballUnit;
    unit lv_capturingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_snowballUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_capturingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_capturingUnit, "HasMapMechanicTargetAbilitySnowBrawl") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_capturingUnit, "HasMapMechanicTargetAbility2SnowBrawl") == false))) {
            return false;
        }

        if (!((UnitGetType(lv_capturingUnit) != "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_snowballUnit) == "SnowballPickupHardPackSnowball")) {
        UnitBehaviorAdd(lv_capturingUnit, "HasMapMechanicTargetAbilitySnowBrawl", lv_capturingUnit, 1);
    }

    if ((UnitGetType(lv_snowballUnit) == "SnowballPickupHeavySnowball")) {
        UnitBehaviorAdd(lv_capturingUnit, "HasMapMechanicTargetAbility2SnowBrawl", lv_capturingUnit, 1);
    }

    UnitKill(lv_snowballUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilPlayerPicksupSnowball_Init () {
    libMapM_gt_MMWinterveilPlayerPicksupSnowball = TriggerCreate("libMapM_gt_MMWinterveilPlayerPicksupSnowball_Func");
    TriggerEnable(libMapM_gt_MMWinterveilPlayerPicksupSnowball, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMWinterveilPlayerPicksupSnowball, c_playerAny, "SnowballPickupPickupSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Spawn Victory Snowmen
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSpawnVictorySnowmen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_possibleSpawnRegion;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    const int auto9935D9F8_n = 8;
    int auto9935D9F8_i;

    // Variable Initialization
    lv_possibleSpawnRegion = RegionCircle(UnitGetPosition(EventUnit()), 10.0);

    // Actions
    if (!runActions) {
        return true;
    }

    RegionAddCircle(lv_possibleSpawnRegion, false, UnitGetPosition(EventUnit()), 4.0);
    Wait(2.5, c_timeGame);
    for (auto9935D9F8_i = 1; auto9935D9F8_i <= auto9935D9F8_n; auto9935D9F8_i += 1) {
        lv_spawnPoint = RegionRandomPoint(lv_possibleSpawnRegion);
        while (((PointPathingPassable(lv_spawnPoint) == false))) {
            lv_spawnPoint = RegionRandomPoint(lv_possibleSpawnRegion);
        }
        RegionAddCircle(lv_possibleSpawnRegion, false, lv_spawnPoint, 3.0);
        libNtve_gf_CreateActorAtPoint("StormWinterVeilVictorySnowman", lv_spawnPoint);
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSpawnVictorySnowmen_Init () {
    libMapM_gt_MMWinterveilSpawnVictorySnowmen = TriggerCreate("libMapM_gt_MMWinterveilSpawnVictorySnowmen_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSpawnVictorySnowmen, false);
    TriggerAddEventUnitDied(libMapM_gt_MMWinterveilSpawnVictorySnowmen, UnitRefFromVariable("libGame_gv_teams[1].lv_core"));
    TriggerAddEventUnitDied(libMapM_gt_MMWinterveilSpawnVictorySnowmen, UnitRefFromVariable("libGame_gv_teams[2].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Snowman Teacher Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowmanTeacherDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snowman;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_snowman = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libMapM_gv_mMWinterveilSnowmanTeachers, lv_snowman) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_snowman, libMapM_gv_mMWinterveilSnowmanTeacherTextTagIndex_C));
    if ((UnitGroupCount(libMapM_gv_mMWinterveilSnowmanTeachers, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowmanTeacherDies_Init () {
    libMapM_gt_MMWinterveilSnowmanTeacherDies = TriggerCreate("libMapM_gt_MMWinterveilSnowmanTeacherDies_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanTeacherDies, false);
    TriggerAddEventUnitDied(libMapM_gt_MMWinterveilSnowmanTeacherDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Periodically Spawn Snowmen
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_maxSpawnRadiusAroundHero_C = 15.0;
    const fixed lv_minSpawnRadiusAroundHero_C = 10.0;
    const int lv_maxSnowmenAroundHero_C = 2;
    int lv_itPlayer;
    bool lv_atLeastOneAlive;
    region lv_spawnRegion;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    playergroup autoB09F5353_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(libMapM_gv_mMWinterveilSnowmenInProgress, c_unitCountAlive) < 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB09F5353_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB09F5353_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitIsAlive(libGame_gv_players[lv_itPlayer].lv_heroUnit) == true)) {
            lv_atLeastOneAlive = true;
            break;
        }

    }
    if ((lv_atLeastOneAlive == false)) {
        return true;
    }

    lv_itPlayer = libCore_gf_RandomPlayerFromPlayerGroup(libCore_gv_allHeroPlayers);
    while ((UnitIsAlive(libGame_gv_players[lv_itPlayer].lv_heroUnit) == false)) {
        lv_itPlayer = libCore_gf_RandomPlayerFromPlayerGroup(libCore_gv_allHeroPlayers);
    }
    lv_spawnRegion = RegionCircle(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), lv_maxSpawnRadiusAroundHero_C);
    if ((UnitGroupCount(UnitGroup("SnowmanInProgress", libCore_gv_cOMPUTER_Neutral, lv_spawnRegion, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_maxSnowmenAroundHero_C), c_unitCountAlive) >= lv_maxSnowmenAroundHero_C)) {
        return true;
    }

    while (((lv_spawnPoint == null) || (PointPathingPassable(lv_spawnPoint) == false) || (DistanceBetweenPoints(lv_spawnPoint, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit)) <= lv_minSpawnRadiusAroundHero_C))) {
        lv_spawnPoint = RegionRandomPoint(lv_spawnRegion);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowmanInProgress", 0, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    UnitGroupAdd(libMapM_gv_mMWinterveilSnowmenInProgress, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen_Init () {
    libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen = TriggerCreate("libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen_Func");
    TriggerEnable(libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen, false);
    TriggerAddEventTimePeriodic(libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Snowman Spawned
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowmanSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snowman;
    int lv_owningPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_snowman = EventUnitCreatedUnit();
    lv_owningPlayer = UnitGetOwner(lv_snowman);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_snowman) == "EvilSnowman"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libMapM_gv_mMWinterveilSnowmenPetGroups[lv_owningPlayer], lv_snowman);
    libMapM_gf_MMWinterveilRunSimpleSnowmanAI(lv_owningPlayer, lv_snowman);
    libGame_gf_UpdateScalingForUnit(lv_snowman, libMapM_gv_jungleScalingTicks, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowmanSpawned_Init () {
    libMapM_gt_MMWinterveilSnowmanSpawned = TriggerCreate("libMapM_gt_MMWinterveilSnowmanSpawned_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanSpawned, false);
    TriggerAddEventUnitCreated(libMapM_gt_MMWinterveilSnowmanSpawned, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Snowman Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowmanDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snowman;
    region lv_snowballSpawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_snowman = EventUnit();
    lv_snowballSpawnRegion = RegionCircle(UnitGetPosition(lv_snowman), 2.0);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_snowman) == "EvilSnowman"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_snowballSpawnRegion);
    libMapM_gf_MMWinterveilSpawnSnowballRandomlyinRegion(lv_snowballSpawnRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowmanDies_Init () {
    libMapM_gt_MMWinterveilSnowmanDies = TriggerCreate("libMapM_gt_MMWinterveilSnowmanDies_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowmanDies, false);
    TriggerAddEventUnitDied(libMapM_gt_MMWinterveilSnowmanDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Player Attacks - Make Snowmen Assist
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    int lv_attackingPlayer;
    unit lv_defendingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackingPlayer = EventUnitDamageSourcePlayer();
    lv_defendingUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_attackingPlayer) == true))) {
            return false;
        }

        if (!((lv_attackingUnit == libGame_gv_players[lv_attackingPlayer].lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libMapM_gv_mMWinterveilSnowmenPetGroups[lv_attackingPlayer], OrderTargetingUnit(AbilityCommand("attack", 0), lv_defendingUnit), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist_Init () {
    libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist = TriggerCreate("libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist_Func");
    TriggerEnable(libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist, false);
    TriggerAddEventUnitDamaged(libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Player Dies - Kill Their Snowmen
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killedPlayer;
    unit lv_snowman;

    // Automatic Variable Declarations
    unitgroup auto63C3126D_g;
    int auto63C3126D_u;

    // Variable Initialization
    lv_killedPlayer = libGame_gf_HeroKilledPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto63C3126D_g = libMapM_gv_mMWinterveilSnowmenPetGroups[lv_killedPlayer];
    auto63C3126D_u = UnitGroupCount(auto63C3126D_g, c_unitCountAll);
    for (;; auto63C3126D_u -= 1) {
        lv_snowman = UnitGroupUnitFromEnd(auto63C3126D_g, auto63C3126D_u);
        if (lv_snowman == null) { break; }
        UnitKill(lv_snowman);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen_Init () {
    libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen = TriggerCreate("libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen_Func");
    TriggerEnable(libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen, false);
    libGame_gf_HeroKilled(libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil SnowballDamageScaling
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowballDamageScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_scalingAmount;

    // Automatic Variable Declarations
    int autoB6AC8C67_val;
    playergroup autoD81EEA82_g;

    // Variable Initialization
    lv_scalingAmount = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMWinterveilSnowballDamageScalingCount += 1;
    autoB6AC8C67_val = libMapM_gv_mMWinterveilSnowballDamageScalingCount;
    if (autoB6AC8C67_val == 1) {
        lv_scalingAmount = "1.05";
    }
    else if (autoB6AC8C67_val == 2) {
        lv_scalingAmount = "1.06";
    }
    else if (autoB6AC8C67_val == 3) {
        lv_scalingAmount = "1.07";
    }
    else if (autoB6AC8C67_val == 4) {
        lv_scalingAmount = "1.08";
    }
    else {
    }
    autoD81EEA82_g = PlayerGroupAll();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoD81EEA82_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        CatalogFieldValueModify(c_gameCatalogEffect, ("HardPackSnowballDamage"), "Amount", lv_playerIndex, lv_scalingAmount, c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, ("HeavySnowballDamage"), "Amount", lv_playerIndex, lv_scalingAmount, c_upgradeOperationMultiply);
    }
    if ((libMapM_gv_mMWinterveilSnowballDamageScalingCount <= 4)) {
        TimerStart(libMapM_gv_mMWinterveilSnowballDamageScalingTimer, libMapM_gv_mMWinterveilSnowballDamageScalingDelay_C, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowballDamageScaling_Init () {
    libMapM_gt_MMWinterveilSnowballDamageScaling = TriggerCreate("libMapM_gt_MMWinterveilSnowballDamageScaling_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowballDamageScaling, false);
    TriggerAddEventTimer(libMapM_gt_MMWinterveilSnowballDamageScaling, libMapM_gv_mMWinterveilSnowballDamageScalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Snow Tribute Spawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMWinterveilCreateSnowTribute();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires_Init () {
    libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires = TriggerCreate("libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires, false);
    TriggerAddEventTimer(libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires, libMapM_gv_mMWinterveilSnowTributeSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil Snow Tribute Picked Up
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilSnowTributePickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tributeUnit;
    int lv_capturingPlayer;
    int lv_capturingTeam;
    int lv_enemyTeam;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tributeUnit = EventPlayerEffectUsedUnitImpact();
    lv_capturingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_capturingTeam = libGame_gf_TeamNumberOfPlayer(lv_capturingPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_capturingTeam);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "RavenLordTribute"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMWinterveilSnowTributesInPlay -= 1;
    lv_targetPoint = libMapM_gf_MMWinterveilWorldEnderTargetPoint(lv_capturingTeam, UnitGetPosition(lv_tributeUnit));
    UnitSetOwner(lv_tributeUnit, lv_capturingPlayer, false);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WorldEnderSnowballLaunchFXDummySet", lv_tributeUnit);
    UnitCreateEffectPoint(lv_tributeUnit, "WorldEnderSnowballLaunchMissile", lv_targetPoint);
    libNtve_gf_ShowHideUnit(lv_tributeUnit, false);
    UnitBehaviorRemove(lv_tributeUnit, "HeroGenericCaptureMacGuffin@IsMacGuffin", 1);
    UnitBehaviorRemove(lv_tributeUnit, "HeroGenericCaptureMacGuffin@MacGuffinActivated", 1);

    Wait(libMapM_gv_mMWinterveilSnowTributeSpawnCooldown_C, c_timeGame);
    if ((libMapM_gv_mMWinterveilSnowTributesInPlay < libMapM_gv_mMWinterveilMaxTributesInPlay_C)) {
        libMapM_gf_MMWinterveilCreateSnowTribute();
    }

    Wait(10.0, c_timeGame);
    UnitKill(lv_tributeUnit);

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilSnowTributePickedUp_Init () {
    libMapM_gt_MMWinterveilSnowTributePickedUp = TriggerCreate("libMapM_gt_MMWinterveilSnowTributePickedUp_Func");
    TriggerEnable(libMapM_gt_MMWinterveilSnowTributePickedUp, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMWinterveilSnowTributePickedUp, c_playerAny, "HeroGenericCaptureMacGuffin@CastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil World Ender Snowball Created
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilWorldEnderSnowballCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snowballUnit;
    int lv_snowballPing;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA5E4BE29_g;

    // Variable Initialization
    lv_snowballUnit = EventUnitCreatedUnit();
    lv_snowballPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_snowballUnit) == "WorldEnderSnowballMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "WorldEnderSnowballMissile", UnitGetPosition(lv_snowballUnit), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_snowballUnit), -1);
    lv_snowballPing = PingLastCreated();
    PingSetScale(lv_snowballPing, 0.12);
    PingSetUnit(lv_snowballPing, lv_snowballUnit);
    while ((UnitIsAlive(lv_snowballUnit) == true)) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(lv_snowballPing);
    autoA5E4BE29_g = libCore_gv_allHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA5E4BE29_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CameraShake(lv_itPlayer, "Medium", "Earthquake", 0.0, 0.5, 0.75);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilWorldEnderSnowballCreated_Init () {
    libMapM_gt_MMWinterveilWorldEnderSnowballCreated = TriggerCreate("libMapM_gt_MMWinterveilWorldEnderSnowballCreated_Func");
    TriggerEnable(libMapM_gt_MMWinterveilWorldEnderSnowballCreated, false);
    TriggerAddEventUnitCreated(libMapM_gt_MMWinterveilWorldEnderSnowballCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil DEBUG - Spawn HardPackSnowball on Player
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerIndex = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowballPickupHardPackSnowball", 0, libCore_gv_cOMPUTER_Neutral, UnitGetPosition(UnitGroupUnit(libGame_gv_players[lv_playerIndex].lv_heroUnitGroup, 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer_Init () {
    libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer = TriggerCreate("libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer_Func");
    TriggerEnable(libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer, false);
    TriggerAddEventChatMessage(libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer, c_playerAny, "hardpack", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Winterveil DEBUG - Spawn HeavySnowball on Player
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerIndex = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowballPickupHeavySnowball", 0, libCore_gv_cOMPUTER_Neutral, UnitGetPosition(UnitGroupUnit(libGame_gv_players[lv_playerIndex].lv_heroUnitGroup, 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer_Init () {
    libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer = TriggerCreate("libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer_Func");
    TriggerEnable(libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer, false);
    TriggerAddEventChatMessage(libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer, c_playerAny, "heavy", true);
}

void libMapM_InitTriggers () {
    libMapM_gt_IncludeMapMechanics_Init();
    libMapM_gt_DataJungleCampDefenderData_Init();
    libMapM_gt_DataJungleCampDefenderKnights_Init();
    libMapM_gt_DataJungleCampDefenderSiegeGiants_Init();
    libMapM_gt_DataJungleCampDefenderGraveGolem_Init();
    libMapM_gt_DataJungleCampDefenderSapper_Init();
    libMapM_gt_DataJungleCampMercData_Init();
    libMapM_gt_DataJungleCampMercOgres_Init();
    libMapM_gt_DataJungleCampMercSiegeGiants_Init();
    libMapM_gt_DataJungleCampMercGraveGolem_Init();
    libMapM_gt_DataJungleCampMercSappers_Init();
    libMapM_gt_InitializeJungleCamps_Init();
    libMapM_gt_JungleMinimapMercLeaderDies_Init();
    libMapM_gt_StartJungleCampTimers_Init();
    libMapM_gt_JungleCreepCampRespawnTimerExpires_Init();
    libMapM_gt_JungleRespawnTimerTextTagCountdown_Init();
    libMapM_gt_JungleDefendersBeginFighting_Init();
    libMapM_gt_JungleDefendersEndFighting_Init();
    libMapM_gt_JungleAllDefendersKilled_Init();
    libMapM_gt_JungleHibernateCampsStart_Init();
    libMapM_gt_JungleHibernateCampsEnd_Init();
    libMapM_gt_JungleHibernateDefendersThatLeash_Init();
    libMapM_gt_JungleHibernateDefendersThatJustSpawned_Init();
    libMapM_gt_JungleCampOwnershipChange_Init();
    libMapM_gt_JungleSiegeGiantTaunt_Init();
    libMapM_gt_InitializeMapMechanics_Init();
    libMapM_gt_MMHelpbuttonClicked_Init();
    libMapM_gt_MMRepulseRegionPunchBehavior_Init();
    libMapM_gt_MMSafeRegionBehavior_Init();
    libMapM_gt_MMRavenDisableEvent_Init();
    libMapM_gt_MMRavenEnableEvent_Init();
    libMapM_gt_MMRavenCurseInit_Init();
    libMapM_gt_MMRavenObjectivePreviewTimerExpires_Init();
    libMapM_gt_MMRavenCurseGateOpen_Init();
    libMapM_gt_MMRavenStartSpawning_Init();
    libMapM_gt_MMRavenSpawnTribute_Init();
    libMapM_gt_MMRavenTributeCollectStarted_Init();
    libMapM_gt_MMRavenTributeCollectCanceled_Init();
    libMapM_gt_MMRavenTributeCollectInterrupted_Init();
    libMapM_gt_MMRavenTributeObtained_Init();
    libMapM_gt_MMRavenCurseStartLightTransition_Init();
    libMapM_gt_MMRavenCurseFinished_Init();
    libMapM_gt_MMRavenObjectiveUIHandler_Init();
    libMapM_gt_MMRavenDebugStartElunees_Init();
    libMapM_gt_MMRavenDebugStartNexten_Init();
    libMapM_gt_MMRavenDebugStartCurseec_Init();
    libMapM_gt_MMRavenDebugStartWarning_Init();
    libMapM_gt_MMBuriedBackwoodsInitialize_Init();
    libMapM_gt_MMWinterveilModInitialization_Init();
    libMapM_gt_MMWinterveilHeroCurationCallback_Init();
    libMapM_gt_MMWinterveilGameOpenTimerStarted_Init();
    libMapM_gt_MMWinterveilGatesOpened_Init();
    libMapM_gt_MMWinterveilSpawnSnowballsinTownsandJungles_Init();
    libMapM_gt_MMWinterveilSpawnSnowballsaroundPlayers_Init();
    libMapM_gt_MMWinterveilPlayerPicksupSnowball_Init();
    libMapM_gt_MMWinterveilSpawnVictorySnowmen_Init();
    libMapM_gt_MMWinterveilSnowmanTeacherDies_Init();
    libMapM_gt_MMWinterveilPeriodicallySpawnSnowmen_Init();
    libMapM_gt_MMWinterveilSnowmanSpawned_Init();
    libMapM_gt_MMWinterveilSnowmanDies_Init();
    libMapM_gt_MMWinterveilPlayerAttacksMakeSnowmenAssist_Init();
    libMapM_gt_MMWinterveilPlayerDiesKillTheirSnowmen_Init();
    libMapM_gt_MMWinterveilSnowballDamageScaling_Init();
    libMapM_gt_MMWinterveilSnowTributeSpawnTimerExpires_Init();
    libMapM_gt_MMWinterveilSnowTributePickedUp_Init();
    libMapM_gt_MMWinterveilWorldEnderSnowballCreated_Init();
    libMapM_gt_MMWinterveilDEBUGSpawnHardPackSnowballonPlayer_Init();
    libMapM_gt_MMWinterveilDEBUGSpawnHeavySnowballonPlayer_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMapM_InitLib_completed = false;

void libMapM_InitLib () {
    if (libMapM_InitLib_completed) {
        return;
    }

    libMapM_InitLib_completed = true;

    libMapM_InitLibraries();
    libMapM_InitVariables();
    libMapM_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibGame"
include "LibGDHL"
include "LibSprt"
include "LibSond"
include "LibUIUI"

